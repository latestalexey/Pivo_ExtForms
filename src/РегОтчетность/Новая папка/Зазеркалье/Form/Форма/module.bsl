Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	Режим = РежимДиалогаВыбораФайла.Открытие;	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Excel(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ФайлExcel = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Проверка();
	КонецЕсли;
	элементыформы.ФайлВыгрузки.Значение = ДиалогОткрытияФайла.ПолноеИмяФайла;
КонецПроцедуры

Процедура ВывестиExelВТаблицу()
	Вл=ВыбЛист;
	Если Вл=неопределено Тогда
		Предупреждение("Не выбран лист!");
		Возврат;
	КонецЕсли;
	Страница=РабочаяКнига.Worksheets(СокрЛП(Вл));
	Добавить = Ложь;
	ТаблицаТоваров.Очистить();
	счСтроки = 8;
	Пуст     = 0;
	Пока Пуст < 50 Цикл
		
		ОбработкаПрерыванияПользователя();
		Попытка
			Значение = Строка(Страница.Cells(счСтроки,2).Value);
			количество =Число(Страница.Cells(счСтроки,6).Value); 
		Исключение
			Значение = "";
		КонецПопытки;
		счСтроки = счСтроки + 1;
		Если ПустаяСтрока(Значение)=1 Тогда
			Пуст=Пуст+1;
			Продолжить;
		Иначе
			Пуст=0;
		КонецЕсли;
		строкатовара=ТаблицаТоваров.Добавить();
		// подправим  Значение
		Значение = СтрЗаменить(Значение,символы.НПП,"");
		Значение = прав(("00000000000000000000000000000"+Значение),метаданные.справочники.Номенклатура.длинакода);
		СтрокаТовара.Значение = Значение;
		СтрокаТовара.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Значение);
		СтрокаТовара.Количество = Количество;
	КонецЦикла;
     //ТаблицаТоваров.Свернуть("значение");
КонецПроцедуры


Процедура Проверка()
	Если ФайлExcel="" Тогда
		ЭлементыФормы.ОК.Доступность=0;
		ЭлементыФормы.ВыбЛист.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	Таб=Новый COMОбъект("Excel.Application");
	РабочаяКнига=Таб.Workbooks.Open(ФайлExcel);
	Таб.Visible=1;
	ЭлементыФормы.ВыбЛист.СписокВыбора.Очистить();
	Для н=1 По РабочаяКнига.WorkSheets.Count Цикл
		ЭлементыФормы.ВыбЛист.СписокВыбора.Добавить(РабочаяКнига.WorkSheets(н).Name,РабочаяКнига.WorkSheets(н).Name);
	КонецЦикла;
	
	Если ЭлементыФормы.ВыбЛист.СписокВыбора.Количество()=0 Тогда
		//ЭлементыФормы.КоманднаяПанель1.Кнопки.ЗагрузитьИзExcel.Доступность=0;
		Возврат;
	КонецЕсли;
	
	//ЭлементыФормы.КоманднаяПанель1.Кнопки.ЗагрузитьИзExcel.Доступность=1;
	
КонецПроцедуры


Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение(Элемент.Значение);
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Попытка;
		Excel = Новый COMОбъект("Excel.Application");
	Исключение;
		Сообщить("Не удалось открыть Excel");
		Возврат;
	КонецПопытки;
	Excel.Application.WorkBooks.Open(ЭлементыФормы.ФайлВыгрузки.Значение);
	ТекЛист = Excel.ActiveSheet;
КонецПроцедуры

Процедура группаСправочникаНоменклатураПриИзменении(Элемент)
	Если не элемент.значение.этогруппа Тогда
		элемент.значение = справочники.Номенклатура.ПустаяСсылка();
		Предупреждение("Вы должны выбрать группу используя кнопку ВЫБОР, иначе используем всю номенклатуру",3,"");
	КонецЕсли;	 
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	Если ЗначениеЗаполнено(ВыбСчет) Тогда
		Если ПолеСпискаСчетов.НайтиПоЗначению(ВыбСчет)=Неопределено Тогда
			ПолеСпискаСчетов.Добавить(ВыбСчет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
	Если ПолеСпискаСчетов.Количество() > 0 Тогда
		Если ЭлементыФормы.ПолеСпискаСчетов.ТекущаяСтрока<>Неопределено Тогда 
			ПолеСпискаСчетов.Удалить(ЭлементыФормы.ПолеСпискаСчетов.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура Кнопка6Нажатие(Элемент)
	Если ЗначениеЗаполнено(ВыбСчет1) Тогда
		Если ПолеСпискаСчетов1.НайтиПоЗначению(ВыбСчет1)=Неопределено Тогда
			ПолеСпискаСчетов1.Добавить(ВыбСчет1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка7Нажатие(Элемент)
	Если ПолеСпискаСчетов1.Количество() > 0 Тогда
		Если ЭлементыФормы.ПолеСпискаСчетов1.ТекущаяСтрока<>Неопределено Тогда 
			ПолеСпискаСчетов1.Удалить(ЭлементыФормы.ПолеСпискаСчетов1.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
функция ТекстЗапросаПоОрганизациям()
//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	СУММА(ОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК БУКонечныйОстатокДт,
		|	СУММА(ОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК БУКонечныйОстатокКт,
		|	СУММА(ОстаткиИОбороты.КоличествоКонечныйОстатокДт) КАК КоличествоКонечныйОстатокДт,
		|	СУММА(ОстаткиИОбороты.КоличествоКонечныйОстатокКт) КАК КоличествоКонечныйОстатокКт,
		|	СУММА(ОстаткиИОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
		|	СУММА(ОстаткиИОбороты.КоличествоОборотКт) КАК КоличествоОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, , , Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиИОбороты.Субконто1,
		|	ОстаткиИОбороты.Организация";
 возврат запрос;
КонецФункции


Процедура Кнопка3Нажатие(Элемент)
		ВывестиExelВТаблицу();
КонецПроцедуры


Процедура ПриОткрытии()
  Переключатель1=1;	
  БратьНаТекущийМомент = истина;
КонецПроцедуры


Процедура Кнопка4Нажатие(Элемент)
	ТаблицаТоваровБУ.Очистить();
	запрос = ТекстЗапросаПоОрганизациям();
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов);
	запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
	запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
	запрос.УстановитьПараметр("Организация",Организация);
	таблицаБУ = запрос.Выполнить().Выгрузить();
	Для каждого строка из таблицаБУ цикл
		строкаТаблицаТоваровБУ = ТаблицаТоваровБУ.Добавить();
		строкаТаблицаТоваровБУ.НОменклатура = строка.НОменклатура ;
		строкаТаблицаТоваровБУ.значение = строка.НОменклатура.код ;
		строкаТаблицаТоваровБУ.количество = строка.КоличествоКонечныйОстатокКт -строка.КоличествоКонечныйОстатокДт;
	КонецЦикла;	   
КонецПроцедуры


Процедура ТаблицаТоваровПриАктивизацииСтроки(Элемент)
	Если Элемент.текущаястрока.номенклатура<>неопределено тогда
		Если Элемент.текущаястрока.номенклатура<>справочники.Номенклатура.ПустаяСсылка() тогда
			текущая =  ТаблицаТоваровБУ.Найти(Элемент.текущаястрока.номенклатура,"Номенклатура");
			Если текущая<>неопределено тогда
				элементыформы.ТаблицаТоваровБУ.ТекущаяСтрока = текущая;
			иначе
				Предупреждение("информации в БУ по позиции не найдено",1,"не найдено");
			конецЕсли;
		конецЕсли;
	конецЕсли;
КонецПроцедуры


Процедура ТаблицаТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.текущаястрока=неопределено тогда
		возврат;
	КонецЕсли;	
	Если Элемент.текущаястрока.номенклатура=неопределено тогда
		ОформлениеСтроки.ЦветФона=Webцвета.Бежевый; 
	ИначеЕсли Элемент.текущаястрока.номенклатура = справочники.Номенклатура.ПустаяСсылка() тогда
		ОформлениеСтроки.ЦветФона=Webцвета.Бежевый; 
	конецЕсли;
КонецПроцедуры


Процедура ТаблицаТоваровБУПриАктивизацииСтроки(Элемент)
			текущая =  ТаблицаТоваров.Найти(Элемент.текущаястрока.номенклатура,"Номенклатура");
			Если текущая<>неопределено тогда
				элементыформы.ТаблицаТоваров.ТекущаяСтрока = текущая;
			иначе
				Предупреждение("информации в Торговле по позиции не найдено",1,"не найдено");
			конецЕсли;
КонецПроцедуры

Функция ВыполнитьПодключение(Соединение, БазаУдаленногоДоступа)
	
	//БазаУдаленногоДоступа = Справочники.БазыУдаленногоДоступа.НайтиПоНаименованию("Логистика", Ложь);
	//Если БазаУдаленногоДоступа = Справочники.БазыУдаленногоДоступа.ПустаяСсылка() Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	//Если БазаУдаленногоДоступа.ТипБазы = Перечисления.ТипБазыУдаленногоДоступа.Предприятие1С82 Тогда
		Подключение = Новый COMОбъект("V82.COMConnector");
	//ИначеЕсли БазаУдаленногоДоступа.ТипБазы = Перечисления.ТипБазыУдаленногоДоступа.Предприятие1С81 Тогда
	//	Если БазаУдаленногоДоступа.наименование ="Торговля СД Екб" тогда
	//	Подключение = Новый COMОбъект("V82.COMConnector");
	//	иначе
	//		Подключение = Новый COMОбъект("V81.COMConnector");
	//		КонецЕсли;
	//ИначеЕсли БазаУдаленногоДоступа.ТипБазы = Перечисления.ТипБазыУдаленногоДоступа.Предприятие1С80 Тогда
	//	Подключение = Новый COMОбъект("V8.COMConnector");
	//КонецЕсли; 
	
	Если БазаУдаленногоДоступа.ТипПодключения = 0 Тогда
		Строкаинициализации = "File=" + БазаУдаленногоДоступа.ПутьКаталогБазы + ";Usr=" + БазаУдаленногоДоступа.Пользователь + ";Pwd=" + БазаУдаленногоДоступа.Пароль;
	Иначе
		Строкаинициализации = "Srvr=" + БазаУдаленногоДоступа.ИмяСервераБазы + ";Ref=" + БазаУдаленногоДоступа.ИмяБазы + ";Usr=" + БазаУдаленногоДоступа.Пользователь + ";Pwd=" + БазаУдаленногоДоступа.Пароль;
	КонецЕсли;
	Попытка
		Соединение = Подключение.Connect(Строкаинициализации);
	Исключение
		Соединение = 0;
	КонецПопытки;
	Если  Соединение = 0 Тогда
		#Если Клиент Тогда
			Сообщить("Нет доступа к базе данных");
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура Кнопка5Нажатие(Элемент)
		// Подключение к внешним базам
	МассивБаз = Новый Массив;
	Для Каждого СтрокаБаза Из Базы Цикл
		Если (СтрокаБаза.База) = "" Тогда 
			МассивБаз.Добавить(Неопределено);
			Продолжить;
		КонецЕсли; // это локальная база
		Соединение = Неопределено;
		Если ВыполнитьПодключение(Соединение, СтрокаБаза.База) Тогда
			МассивБаз.Добавить(Соединение);
			Сообщить("Выполнено подключение к " + СтрокаБаза.База + " ");
		Иначе
			Сообщить("Подключение к " + СтрокаБаза.База + " не выполнено");
			МассивБаз.Добавить(Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаПрерыванияПользователя();

КонецПроцедуры

Процедура КоманднаяПанель3остатки(Кнопка)
	ТаблицаТоваровБУ1.Очистить();
	запрос = ТекстЗапросаПоОрганизациям();
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
	запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
	запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
	запрос.УстановитьПараметр("Организация",Организация1);
	таблицаБУ = запрос.Выполнить().Выгрузить();
	Для каждого строка из таблицаБУ цикл
		// первое если - содержало смысл - были движения покупки в периоде
		//Если (строка.КоличествоОборотДт-строка.КоличествоОборотКт)>0 и (строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт)>0  тогда
		Если  (строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт)>0  тогда
			строкаТаблицаТоваровБУ = ТаблицаТоваровБУ1.Добавить();
			строкаТаблицаТоваровБУ.НОменклатура = строка.НОменклатура ;
			строкаТаблицаТоваровБУ.значение = строка.НОменклатура.код ;
			строкаТаблицаТоваровБУ.количество = строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт;
			строкаТаблицаТоваровБУ.Сумма = строка.БУКонечныйОстатокДт -строка.БУКонечныйОстатокКт;
			строкаТаблицаТоваровБУ.количествоФакт = строкаТаблицаТоваровБУ.количество;
			строкаТаблицаТоваровБУ.СуммаФакт = строкаТаблицаТоваровБУ.Сумма;
			строкаТаблицаТоваровБУ.Взять = Истина;
		КонецЕсли;
	КонецЦикла;	                                          
	ВывестиданныеКорреспондентов();
	показатьитог();
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.реализация.доступность = истина;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.РеализацияБезПоступления.доступность = истина;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление1.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента1.доступность = ложь;           
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	НП.УстановитьПериод(НачалоДня(НачалоПериода), ?(КонецПериода = '00010101', КонецПериода, КонецДня(КонецПериода)));

	Если НП.Редактировать() Тогда

		НачалоПериода = НП.ПолучитьДатуНачала();
		КонецПериода = НП.ПолучитьДатуОкончания();
		НачалоПериода = НачалоДня(НачалоПериода);
		КонецПериода = КонецДня(КонецПериода);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель3Действие(Кнопка)
	ТаблицаТоваровБУ1.Очистить();
	запрос = ТекстЗапросаПоОрганизациям();
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
	запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
	запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
	запрос.УстановитьПараметр("Организация",Организация1);
	таблицаБУ = запрос.Выполнить().Выгрузить();
	Для каждого строка из таблицаБУ цикл
		Если (строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт)<0  тогда
			строкаТаблицаТоваровБУ = ТаблицаТоваровБУ1.Добавить();
			строкаТаблицаТоваровБУ.НОменклатура = строка.НОменклатура ;
			строкаТаблицаТоваровБУ.значение = строка.НОменклатура.код ;
			строкаТаблицаТоваровБУ.количество = строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт;
			строкаТаблицаТоваровБУ.Сумма = строка.БУКонечныйОстатокДт -строка.БУКонечныйОстатокКт;
			строкаТаблицаТоваровБУ.количествоФакт = строкаТаблицаТоваровБУ.количество;
			строкаТаблицаТоваровБУ.СуммаФакт = строкаТаблицаТоваровБУ.Сумма;
			строкаТаблицаТоваровБУ.Взять = Истина;
		КонецЕсли;
	КонецЦикла;	                                          
	ВывестиданныеКорреспондентов();
	показатьитог();
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.реализация.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.РеализацияБезПоступления.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление.доступность = истина;                       
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление1.доступность = ЛОжь;                       
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента.доступность = истина;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента1.доступность = ложь;  
	
КонецПроцедуры
Процедура показатьитог()
	Итого = 0;
	Для Каждого строкитога Из  элементыформы.ТаблицаТоваровБУ1.Значение Цикл
		Итого = Итого+?(строкитога.взять,строкитога.Сумма*КоэффициентУеличенияЦеныПродажи*1.18,0);
	КонецЦикла;
КонецПроцедуры


// параметр режим используется только при вызове из "Проставить даты возникновения минусов в периоде"

процедура 	ВывестиданныеКорреспондентов(режим=0)
	Если режим=1 тогда
		
	Иначе
		если БратьНаТекущийМомент тогда
			начало = конецдня(текущаядата());
			Конец =  конецдня(текущаядата());
		иначе
			начало = началодня(НачалоПериода);
			Конец =  конецДня(КонецПериода);
		КонецЕсли;	
	КонецЕсли;	
	
	пока элементыформы.ПанельКорреспонденции.Страницы.Количество()>1 цикл
		для каждого страница из элементыформы.ПанельКорреспонденции.Страницы цикл
			Если страница.Имя<> "Корреспондент" тогда
				элементыформы.ПанельКорреспонденции.Страницы.Удалить(страница);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	для каждого строкаОсновная из элементыформы.организации.Значение Цикл
		Если НЕ строкаОсновная.Основная и строкаОсновная.Организация<>справочники.Организации.ПустаяСсылка()  тогда
			//
			страница = элементыформы.ПанельКорреспонденции.Страницы.Вставить(0,"с"+строкаОсновная.организация.Код);
			элементыформы.ПанельКорреспонденции.ТекущаяСтраница = страница;
			
			/////////////////////     создадим  "ТаблицаК"    //////////////////////////////////////
			таблицаК = ТаблицаТоваровБУ1.Скопировать();
			таблицаК.Очистить();
			
			Если режим=1 тогда        //делаем для каждой номенклатуры и своей даты
				Для каждого номенклатураПроверки из ТаблицаТоваровБУ1 цикл
					Если  номенклатураПроверки.дата<>"" тогда    // в этом случае номенклатуру проверяем, иначе и не трогаем - уменьшаем время обработки
						
						////////////////////////////
						ТекущаяНоменклатура = номенклатураПроверки.номенклатура;
						Запрос = Новый Запрос;
						Текстначального = "ВЫБРАТЬ
									   |	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
									   |	ХозрасчетныйОстатки.КоличествоОстаток КАК Остаток
									   |ИЗ
									   |	РегистрБухгалтерии.Хозрасчетный.Остатки(&начПериода, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ХозрасчетныйОстатки
									   |ГДЕ
									   |	ХозрасчетныйОстатки.Субконто1 = &ТекущаяНоменклатура
									   |АВТОУПОРЯДОЧИВАНИЕ";
						ОсновнойТекст = 
						"ВЫБРАТЬ
						|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК Остаток,
						|	ОстаткиИОбороты.СуммаКонечныйОстатокДт - ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаОстаток,
						|	ОстаткиИОбороты.Регистратор КАК Регистратор,
						|	ОстаткиИОбороты.КоличествоНачальныйОстаток,
						|	ОстаткиИОбороты.СуммаНачальныйОстаток
						|ИЗ
						|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
						|ГДЕ
						|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
						|
						|УПОРЯДОЧИТЬ ПО
						|	Регистратор
						|АВТОУПОРЯДОЧИВАНИЕ";
						
						запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
						запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
						запрос.УстановитьПараметр("конПериода",конецДня(ТекущаяДата()));
						запрос.УстановитьПараметр("начПериода",началодня(номенклатураПроверки.дата));
						запрос.УстановитьПараметр("Организация",строкаОсновная.Организация);
						запрос.УстановитьПараметр("ТекущаяНоменклатура",ТекущаяНоменклатура);
						Запрос.текст = Текстначального;
						Результат = Запрос.Выполнить().Выгрузить();
						Если результат.Количество()=0 тогда                              //нечего продавать
						ИначеЕсли результат[0].Остаток<0 тогда       // нечего продавать
						Иначе	
							Запрос.текст = ОсновнойТекст;
							Результат2 = Запрос.Выполнить().Выгрузить();
							дополнительнаяСтрока = Результат2.Добавить();
							дополнительнаяСтрока.СуммаОстаток = результат[0].СуммаОстаток ;
							дополнительнаяСтрока.Остаток      = результат[0].Остаток      ;
							Результат2.Сортировать("остаток");
							Если Результат[0].остаток>0 тогда // а вот если <0, то такое значение не нужно
								строкаТаблицаТоваровБУ = ТаблицаК.Добавить();
								строкаТаблицаТоваровБУ.НОменклатура = ТекущаяНоменклатура ;
								строкаТаблицаТоваровБУ.значение = ТекущаяНоменклатура.код ;
								строкаТаблицаТоваровБУ.количество = Результат[0].остаток;
								строкаТаблицаТоваровБУ.Сумма = Результат[0].СуммаОстаток;
								строкаТаблицаТоваровБУ.Дата = номенклатураПроверки.дата;
								остаток = Результат[0].остаток;
							КонецЕсли;
						КонецЕсли;
						
						
						/////////////////////////////
						
					КонецЕсли;	
				КонецЦикла;	
			Иначе                     //делаем для всей номенклатуры разом и для одной даты
				запрос = ТекстЗапросаПоОрганизациям();
				
				запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
				запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
				запрос.УстановитьПараметр("конПериода",конец);
				запрос.УстановитьПараметр("начПериода",начало);
				запрос.УстановитьПараметр("Организация",строкаОсновная.Организация);
				таблица = запрос.Выполнить().Выгрузить();
				Для каждого строка из таблица цикл
					строкаТаблицаТоваровБУ = ТаблицаК.Добавить();
					строкаТаблицаТоваровБУ.НОменклатура = строка.НОменклатура ;
					строкаТаблицаТоваровБУ.значение = строка.НОменклатура.код ;
					строкаТаблицаТоваровБУ.количество = строка.КоличествоКонечныйОстатокДт -строка.КоличествоКонечныйОстатокКт;
					строкаТаблицаТоваровБУ.Сумма = строка.БУКонечныйОстатокДт -строка.БУКонечныйОстатокКт;
					строкаТаблицаТоваровБУ.Дата = Конец;
				КонецЦикла;	                                          
			КонецЕсли;		
			страница.Заголовок = строкаОсновная.организация;
			таблицакорреспондента = элементыформы.Добавить(Тип("ТабличноеПоле"), 
			сокрлп("КТЗ"+строкаОсновная.организация.Код), 
			Истина, 
			элементыформы.ПанельКорреспонденции);
			ТаблицаК.Колонки.Удалить("КоличествоФакт");
			ТаблицаК.Колонки.Удалить("СуммаФакт");
			таблицакорреспондента.Значение = ТаблицаК;
			таблицакорреспондента.Верх = 3;
			таблицакорреспондента.Лево = 6;
			таблицакорреспондента.Ширина = ЭлементыФормы.ПанельКорреспонденции.Ширина - 14;
			таблицакорреспондента.Высота = ЭлементыФормы.ПанельКорреспонденции.Высота - 8;
			таблицакорреспондента.ТолькоПросмотр = Ложь;
			таблицакорреспондента.ИзменятьПорядокСтрок = Истина;
			таблицакорреспондента.ИзменятьСоставСтрок = Истина;
			
			таблицакорреспондента.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
			ЭлементыФормы.ПанельКорреспонденции,
			ГраницаЭлементаУправления.Низ);
			таблицакорреспондента.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			ЭлементыФормы.ПанельКорреспонденции,
			ГраницаЭлементаУправления.Низ);
			таблицакорреспондента.УстановитьПривязку(ГраницаЭлементаУправления.Право,
			ЭлементыФормы.ПанельКорреспонденции,
			ГраницаЭлементаУправления.Право);
			таблицакорреспондента.СоздатьКолонки();
		КонецЕсли;	
	КонецЦикла;
	элементыформы.ПанельКорреспонденции.ТекущаяСтраница = элементыформы.ПанельКорреспонденции.Страницы.Корреспондент;
	Если ТаблицаТоваровБУ1.Количество()>0 тогда
		Элементыформы.ТаблицаТоваровБУ1.ТекущаяСтрока = ТаблицаТоваровБУ1[0];
		ТаблицаТоваровБУ1ПриАктивизацииСтроки(Элементыформы.ТаблицаТоваровБУ1);
	КонецЕсли;
	движения41.Очистить();
	элементыформы.движения41.Колонки.Регистратор.ТекстШапки = "Регистратор";
КонецПроцедуры

Процедура ОрганизацииОрганизацияПриИзменении(Элемент)
	Если элементыформы.организации.ТекущиеДанные.Основная тогда
    КонецЕсли;		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", элементыформы.организации.ТекущиеДанные.Организация);
		НайденныеСтроки = элементыформы.организации.Значение.НайтиСтроки(ПараметрыОтбора);
		для каждого строкаОсновная из найденныеСтроки Цикл
			Если строкаОсновная<>элементыформы.организации.ТекущиеДанные тогда
				элементыформы.организации.Значение.удалить(строкаОсновная);
			КонецЕсли;	
		КонецЦикла;
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	если текущаястраница <>1 тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Основная", Истина);
		НайденныеСтроки = элементыформы.организации.Значение.НайтиСтроки(ПараметрыОтбора);
		Если найденныестроки.количество()=0 тогда
			сообщить("не указана основная организация");
		иначе	
		элементыформы.Организация.Значение = НайденныеСтроки[0].организация;
		элементыформы.Организация1.Значение =НайденныеСтроки[0].организация;
		контрагент1 = НайденныеСтроки[0].контрагент;
	КонецЕсли;
	ТаблицаТоваровБУ1.Очистить();
	Движения41.Очистить();
	для каждого страница из элементыформы.ПанельКорреспонденции.Страницы цикл
		Если страница.Имя<> "Корреспондент" тогда
			элементыформы.ПанельКорреспонденции.Страницы.Удалить(страница);
		КонецЕсли;	
	КонецЦикла;
	
	КонецЕсли;	

КонецПроцедуры

Процедура ОрганизацииПриИзмененииФлажка(Элемент, Колонка)
	Если Элемент.ТекущиеДанные.Основная тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Основная", Истина);
		НайденныеСтроки = Элемент.Значение.НайтиСтроки(ПараметрыОтбора);
		для каждого строкаОсновная из найденныеСтроки Цикл
			Если строкаОсновная<>Элемент.ТекущаяСтрока тогда
				строкаОсновная.Основная = ложь;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТаблицаТоваровБУ1ПриАктивизацииСтроки(Элемент)
	корреспонденции.Очистить();
	для каждого элементформы из элементыформы цикл
		Если ЛЕВ(элементформы.Имя,3)= "КТЗ" и Элемент.ТекущиеДанные<> неопределено тогда
			табличка = элементформы.значение;
			элементкорреспондента=  элементформы.значение.найти(Элемент.ТекущиеДанные.Номенклатура,"Номенклатура");
			строкакорреспонденции = корреспонденции.Добавить();
			строкакорреспонденции.количество = ?(элементкорреспондента=неопределено,0,элементкорреспондента.количество);
			строкакорреспонденции.сумма = ?(элементкорреспондента=неопределено,0,элементкорреспондента.сумма);
			строкакорреспонденции.организация = справочники.Организации.НайтиПоКоду(Сред(элементформы.Имя,4));
			строкакорреспонденции.Дата =  ?(элементкорреспондента=неопределено,0,элементкорреспондента.Дата);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель3реализация(Кнопка)
	подготовительнаяТаблицаДляРеализаций = ТаблицаТоваровБУ1.Скопировать();
	для каждого элементформы из элементыформы цикл
		Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
			табличка = элементформы.значение; // это наборы других контрагентов
			колонкаколичества =подготовительнаяТаблицаДляРеализаций.Колонки.Добавить("колБК"+(Сред(элементформы.Имя,4)),ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;	
	КонецЦикла;
	// таблица создана, теперь формируем предположительные значения для количеств в той же таблице
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		Если строка.взять тогда
		//  по строке создадим ТЗ из количеств других организаций так же как заполняли таблицу корреспонденции и отсортируем
		корр = корреспонденции.Скопировать();
		корр.Очистить();
		для каждого элементформы из элементыформы цикл
			Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
				элементкорреспондента=  элементформы.значение.найти(строка.Номенклатура,"Номенклатура");
				строкакорреспонденции = корр.Добавить();
				строкакорреспонденции.количество = ?(элементкорреспондента=неопределено,0,элементкорреспондента.количество);
				строкакорреспонденции.сумма = ?(элементкорреспондента=неопределено,0,элементкорреспондента.сумма);
				строкакорреспонденции.организация = справочники.Организации.НайтиПоКоду(Сред(элементформы.Имя,4));
			КонецЕсли;	
		КонецЦикла;
	    корр.Сортировать("Количество");
		//   - значение, которое мы хотим продать 
		КПродаже= строка.количество;
		для каждого значениеостатка из корр цикл
			Если КПродаже>0 тогда
				можемОтдать=0;
				если Переключатель1=1 тогда
					Если значениеОстатка.количество<0 тогда
						хотимПолучить = -значениеОстатка.количество;
						можемОтдать = ?(КПродаже-хотимПолучить>=0,хотимПолучить,КПродаже);
					КонецЕсли;	
				ИначеЕсли Переключатель1=2	тогда
					можемОтдать = КПродаже;
				КонецЕсли;	
				КПродаже= КПродаже-	можемОтдать;	
				//найдем соответствующую колонку в подготовительнаяТаблицаДляРеализаций 
				//которую выше мы уже создали и попытаемся дать ей что можем
				ИмяКолонкаКоличества="колБК"+справочники.организации.найтипонаименованию(значениеостатка.организация).Код;
				колонкаколичества = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаКоличества));
				строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)]=можемОтдать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	КонецЦикла;	
	// теперь можем по этой таблице подготовительнаяТаблицаДляРеализаций создавать все документы реализации
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Реализации.Очистить();
	Поступления.Очистить();
	для каждого элементформы из элементыформы цикл
		Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
			ИмяКолонкаКоличества="колБК"+Сред(элементформы.Имя,4);
			колонкаколичества = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаКоличества));
			кодкорреспондента = Сред(элементформы.Имя,4);
			ПараметрыШапки = организации.Найти(справочники.организации.НайтиПоКоду(кодкорреспондента));
			// начнем готовить документ - подготовим шапку
			документ = документы.РеализацияТоваровУслуг.СоздатьДокумент();          //РЕАЛИЗАЦИЯ//
			документ.дата = конецдня(КонецПериода);            
			документ.УчитыватьНДС = Истина;
			документ.СуммаВключаетНДС = Истина;
			документ.ВидОперации = перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			документ.Организация =организация1;
			// Выполняем общие действия для всех документов при изменении Организация.
			ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
			мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
			//
			документ.Комментарий = "создан автоматически";
			документ.Контрагент = ПараметрыШапки.Контрагент;
			// Выполняем общие действия для всех документов при изменении Контрагент.
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
			// Могли поменять договор.
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			// Зададим, какие реквизиты надо редактировать.
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
			мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
			мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
			мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
		    документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		    документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			документ.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			документ.Склад=склад;
			Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
				количествоСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)];
				Если количествоСтрокиТЧ>0 и строка.взять Тогда
					строкаТЧ = документ.Товары.Добавить();
					строкаТЧ.Номенклатура = Строка.номенклатура;
					/////////////////////////////////////// при изменении номенклатуры/////
					// Выполнить общие действия для всех документов при изменении номенклатуры.
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
					///////////////////////////////////////////////////////////////////////
					строкаТЧ.Количество = количествоСтрокиТЧ;
					строкаТЧ.Цена = (строка.сумма/строка.количество)*КоэффициентУеличенияЦеныПродажи*1.18 ;
					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
	                СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
					/// заполним счета в строке
					 		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
								СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
							КонецЕсли;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
								СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
							КонецЕсли;
								Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
									СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
									СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
									СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
									Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
										СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
										Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
											СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
										КонецЕсли;
									Иначе
										СтрокаТЧ.Субконто = Неопределено;
									КонецЕсли;
								КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
			если документ.Товары.Количество()>0 ТОгда
				документ.УстановитьНовыйНомер("Б_");
				документ.Записать();
				
				датавх=документ.Дата;
				номервх = документ.Номер;
				новаяреализация = реализации.Добавить();
				новаяреализация.Документы = документ.Ссылка;
				новаяреализация.суммадокумента = документ.СуммаДокумента;
				новаяреализация.организация = документ.Организация;
				новаяреализация.контрагент = документ.Контрагент;
				/////////////////////////////////////////////////////////////
				/////// создадим документ покупки  //////////////////////////
				/////////////////////////////////////////////////////////////
				мСписокВидовДоговоров = Новый СписокЗначений;
				мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				документ = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();           //ПОСТУПЛЕНИЯ //
				документ.дата = конецдня(КонецПериода);
				документ.УчитыватьНДС = Истина;
				документ.СуммаВключаетНДС = Истина;
				документ.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				документ.Организация = ПараметрыШапки.Организация;
				// Выполняем общие действия для всех документов при изменении Организация.
				ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
				//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
				мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
				//
				документ.Комментарий = "создан автоматически";
				документ.Контрагент = Контрагент1;
				// Выполняем общие действия для всех документов при изменении Контрагент.
				ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
				// Могли поменять договор.
				// Зададим, какие реквизиты надо редактировать.
				СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
				мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
				мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
				ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
				мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
				документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				документ.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				документ.Склад=склад;
				документ.НомерВходящегоДокумента = номервх;
				документ.ДатаВходящегоДокумента = датавх;
			Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
				количествоСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)];
				Если количествоСтрокиТЧ>0 и строка.взять Тогда
					строкаТЧ = документ.Товары.Добавить();
					строкаТЧ.Номенклатура = Строка.номенклатура;
					/////////////////////////////////////// при изменении номенклатуры/////
					// Выполнить общие действия для всех документов при изменении номенклатуры.
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
					///////////////////////////////////////////////////////////////////////
					строкаТЧ.Количество = количествоСтрокиТЧ;
					строкаТЧ.Цена = (строка.сумма/строка.количество)*КоэффициентУеличенияЦеныПродажи*1.18 ;
					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
	                СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
					/// заполним счета в строке
					 		СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
								СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
							КонецЕсли;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
								СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
							КонецЕсли;
								Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
									СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
									СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
									СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
									Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
										СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
										Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
											СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
										КонецЕсли;
									Иначе
										СтрокаТЧ.Субконто = Неопределено;
									КонецЕсли;
								КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				документ.Записать();
				новоепоступление = Поступления.Добавить();
				новоепоступление.Документы = документ.Ссылка;
				новоепоступление.суммадокумента = документ.СуммаДокумента;
				новоепоступление.организация = документ.Организация;
				новоепоступление.контрагент = документ.Контрагент;
				///////////////////////////////////  создали документ покупки
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	снятькнопкиДокументов();
КонецПроцедуры


Процедура снятькнопкиДокументов()
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.реализация.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.РеализацияБезПоступления.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление1.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента.доступность = ложь;           
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента1.доступность = ложь;           
КонецПроцедуры	

Процедура КоманднаяПанель3постпление(Кнопка,таблицанадень=неопределено)
	Если таблицаНаДень = неопределено тогда
		подготовительнаяТаблицаДляРеализаций = ТаблицаТоваровБУ1.Скопировать();
		датаДокумента = конецДня(КонецПериода);
	    Реализации.Очистить();
	    Поступления.Очистить();
	ИНаче
		подготовительнаяТаблицаДляРеализаций =таблицанадень;
		датаДокумента = подготовительнаяТаблицаДляРеализаций[0].дата;
	КонецЕсли;
	для каждого элементформы из элементыформы цикл
		Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
			табличка = элементформы.значение; // это наборы других контрагентов
            колонкасуммы =подготовительнаяТаблицаДляРеализаций.Колонки.Добавить("сумБК"+(Сред(элементформы.Имя,4)),ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
            колонкаколичества =подготовительнаяТаблицаДляРеализаций.Колонки.Добавить("колБК"+(Сред(элементформы.Имя,4)),ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		КонецЕсли;	
	КонецЦикла;
	// таблица создана, теперь формируем предположительные значения для количеств в той же таблице
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		Если строка.взять тогда
		//  по строке создадим ТЗ из количеств других организаций так же как заполняли таблицу корреспонденции и отсортируем
		корр = корреспонденции.Скопировать();
		корр.Очистить();
		для каждого элементформы из элементыформы цикл
			Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
				элементкорреспондента=  элементформы.значение.найти(строка.Номенклатура,"Номенклатура");
				строкакорреспонденции = корр.Добавить();
				строкакорреспонденции.количество = ?(элементкорреспондента=неопределено,0,элементкорреспондента.количество);
				строкакорреспонденции.сумма = ?(элементкорреспондента=неопределено,0,элементкорреспондента.сумма);
				строкакорреспонденции.организация = справочники.Организации.НайтиПоКоду(Сред(элементформы.Имя,4));
			КонецЕсли;	
		КонецЦикла;
	    корр.Сортировать("Количество");
		//   - значение, которое мы хотим купить 
		КПокупке= -строка.количество;
		для каждого значениеостатка из корр цикл
			Если КПокупке>0 тогда
				можемКупить=0;
				Если значениеОстатка.количество>0 тогда
					можемЗакрыть = значениеОстатка.количество;
					можемКупить = ?(КПокупке-можемЗакрыть>=0,можемЗакрыть,КПокупке);
					КПокупке= КПокупке - можемКупить;	
					//найдем соответствующую колонку в подготовительнаяТаблицаДляРеализаций 
					//которую выше мы уже создали и попытаемся дать ей что можем
					ИмяКолонкаКоличества="колБК"+справочники.организации.найтипонаименованию(значениеостатка.организация).Код;
					ИмяКолонкаСумма="сумБК"+справочники.организации.найтипонаименованию(значениеостатка.организация).Код;
					колонкасуммы =подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаСумма)); 
					колонкаколичества = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаКоличества));
					строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)]=можемКупить;
					строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкасуммы)]=(значениеОстатка.сумма/значениеОстатка.количество)*можемКупить;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	КонецЦикла;	
	// теперь оформляем документы
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	для каждого элементформы из элементыформы цикл
		Если ЛЕВ(элементформы.Имя,3)= "КТЗ" тогда
			ИмяКолонкаКоличества="колБК"+Сред(элементформы.Имя,4);
			ИмяКолонкаСумма="сумБК"+Сред(элементформы.Имя,4);
	        КодОрганизации = Сред(элементформы.Имя,4);
				/////////////////////////////////////////////////////////////
				/////// создадим документ Реализации  //////////////////////////
				/////////////////////////////////////////////////////////////
			колонкаколичества = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаКоличества));
			колонкасумма = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаСумма));
			ПараметрыШапки = организации.Найти(справочники.организации.НайтиПоКоду(КодОрганизации));
			// начнем готовить документ - подготовим шапку
			документ = документы.РеализацияТоваровУслуг.СоздатьДокумент();         //Реализация//
			документ.дата = датаДокумента;            
			документ.УчитыватьНДС = Истина;
			документ.СуммаВключаетНДС = Истина;
			документ.ВидОперации = перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			документ.Организация =ПараметрыШапки.Организация;
			// Выполняем общие действия для всех документов при изменении Организация.
			ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
			мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
			//
			документ.Комментарий = "создан автоматически";
			документ.Контрагент = Контрагент1;
			// Выполняем общие действия для всех документов при изменении Контрагент.
			мСписокВидовДоговоров = Новый СписокЗначений;
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
			// Могли поменять договор.
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			// Зададим, какие реквизиты надо редактировать.
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
			мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
			мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
			мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
		    документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		    документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			документ.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			документ.Склад=склад;
			Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
				количествоСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)];
				суммаСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаСумма)];
				Если количествоСтрокиТЧ>0 и Строка.взять Тогда
					строкаТЧ = документ.Товары.Добавить();
					строкаТЧ.Номенклатура = Строка.номенклатура;
					/////////////////////////////////////// при изменении номенклатуры/////
					// Выполнить общие действия для всех документов при изменении номенклатуры.
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
					///////////////////////////////////////////////////////////////////////
					строкаТЧ.Количество = количествоСтрокиТЧ;
					строкаТЧ.Цена = (суммаСтрокиТЧ/количествоСтрокиТЧ)*КоэффициентУеличенияЦеныПродажи*1.18 ;
					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
					СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
					/// заполним счета в строке
					СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
						СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
					КонецЕсли;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
						СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
					КонецЕсли;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
						СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
						СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
						СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
						Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
							СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
							Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
								СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
							КонецЕсли;
						Иначе
							СтрокаТЧ.Субконто = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
			если документ.Товары.Количество()>0 ТОгда
				документ.Записать();
				датавх=документ.Дата;
				номервх = документ.Номер;
				новаяреализация = реализации.Добавить();
				новаяреализация.Документы = документ.Ссылка;
				новаяреализация.суммадокумента = документ.СуммаДокумента;
				новаяреализация.организация = документ.Организация;
				новаяреализация.контрагент = документ.Контрагент;
				
				/////////////////////////////////////////////////////////////
				///    создадим документ покупки                     ////////
				////////////////////////////////////////////////////////////
				
				документ = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();                //ПОСТУПЛЕНИЯ //
			    документ.дата = датаДокумента;            
				документ.УчитыватьНДС = Истина;
				документ.СуммаВключаетНДС = Истина;
				документ.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				документ.Организация =Организация1;
				// Выполняем общие действия для всех документов при изменении Организация.
				ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
				//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
				мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
				//
				документ.Комментарий = "создан автоматически";
				документ.Контрагент = ПараметрыШапки.Контрагент;
				// Выполняем общие действия для всех документов при изменении Контрагент.
				мСписокВидовДоговоров = Новый СписокЗначений;
				мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
				// Могли поменять договор.
				// Зададим, какие реквизиты надо редактировать.
				СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
				мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
				мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
				ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
				мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
				документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				документ.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				документ.Склад=склад;
				документ.НомерВходящегоДокумента = номервх;
				документ.ДатаВходящегоДокумента = датавх;
				Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
					количествоСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)];
					СуммаСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаСумма)];
					Если количествоСтрокиТЧ>0 и Строка.взять Тогда
						строкаТЧ = документ.Товары.Добавить();
						строкаТЧ.Номенклатура = Строка.номенклатура;
						/////////////////////////////////////// при изменении номенклатуры/////
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
						ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
						///////////////////////////////////////////////////////////////////////
						строкаТЧ.Количество = количествоСтрокиТЧ;
					    строкаТЧ.Цена = (суммаСтрокиТЧ/количествоСтрокиТЧ)*КоэффициентУеличенияЦеныПродажи*1.18 ;
						// Рассчитываем реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
						СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
						/// заполним счета в строке
						СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
							СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
						КонецЕсли;
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
							СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
						КонецЕсли;
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
							СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
							СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
							СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
							Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
								СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
								Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
									СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
								КонецЕсли;
							Иначе
								СтрокаТЧ.Субконто = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				документ.Записать();
				новоепоступление = Поступления.Добавить();
				новоепоступление.Документы= документ.Ссылка;
				новоепоступление.суммадокумента = документ.СуммаДокумента;
				новоепоступление.организация = документ.Организация;
				новоепоступление.контрагент = документ.Контрагент;
				///////////////////////////////////  создали документ покупки
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	снятькнопкиДокументов();
КонецПроцедуры

Процедура КоманднаяПанель3РеализацияБезПоступления(Кнопка)
	подготовительнаяТаблицаДляРеализаций = ТаблицаТоваровБУ1.Скопировать();
	для каждого элемент из Организации цикл
		Если Элемент.Организация=справочники.Организации.ПустаяСсылка() тогда
			колонкаколичества =подготовительнаяТаблицаДляРеализаций.Колонки.Добавить("колКонтр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			контрагентТекущий = Элемент.Контрагент;
			ПараметрыШапки = элемент;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	// таблица создана, теперь формируем предположительные значения для количеств в той же таблице
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		//// пока этого не делаем - контрагент один
	КонецЦикла;	
	// теперь оформляем документ
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Реализации.Очистить();
	Поступления.Очистить();
	ИмяКолонкаКоличества="колКонтр";
	/////////////////////////////////////////////////////////////
	/////// создадим документ Реализации  //////////////////////////
	/////////////////////////////////////////////////////////////
	колонкаколичества = подготовительнаяТаблицаДляРеализаций.Колонки.Найти(сокрлп(ИмяКолонкаКоличества));
	// начнем готовить документ - подготовим шапку
	документ = документы.РеализацияТоваровУслуг.СоздатьДокумент();
	документ.дата = конецДня(КонецПериода);            
	документ.УчитыватьНДС = Истина;
	документ.СуммаВключаетНДС = Истина;
	документ.ВидОперации = перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	документ.Организация =Организация1;
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
	УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
	//
	документ.Комментарий = "создан автоматически";
	документ.Контрагент = КонтрагентТекущий;
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
	// Могли поменять договор.
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
	мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
	мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
	мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
	документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	документ.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	документ.Склад=склад;
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		Если строка.взять тогда
			количествоСтрокиТЧ = строка.количество;
			Если количествоСтрокиТЧ>0 Тогда
				строкаТЧ = документ.Товары.Добавить();
				строкаТЧ.Номенклатура = Строка.номенклатура;
				/////////////////////////////////////// при изменении номенклатуры/////
				// Выполнить общие действия для всех документов при изменении номенклатуры.
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
				ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
				///////////////////////////////////////////////////////////////////////
				строкаТЧ.Количество = количествоСтрокиТЧ;
				строкаТЧ.Цена = (строка.сумма/строка.количество)*КоэффициентУеличенияЦеныПродажи*1.18 ;
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
				СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
				/// заполним счета в строке
				СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
					СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
					СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
					СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
					СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
					Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
						СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
						Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
						КонецЕсли;
					Иначе
						СтрокаТЧ.Субконто = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	если документ.Товары.Количество()>0 ТОгда
		документ.Записать();
		датавх=документ.Дата;
		номервх = документ.Номер;
		новаяреализация = реализации.Добавить();
		новаяреализация.Документы = документ.Ссылка;
				новаяреализация.суммадокумента = документ.СуммаДокумента;
				новаяреализация.организация = документ.Организация;
				новаяреализация.контрагент = документ.Контрагент;
	КонецЕсли;	
	снятькнопкиДокументов();
КонецПроцедуры

Процедура КоманднаяПанель3наличиеМинусов(Кнопка)
	ТекущаяНоменклатура = элементыформы.ТаблицаТоваровБУ1.ТекущиеДанные.номенклатура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт как Остаток,
		|	ОстаткиИОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|ГДЕ
		|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
		|	И ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиИОбороты.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
	запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
	запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
	запрос.УстановитьПараметр("Организация",Организация1);
	запрос.УстановитьПараметр("ТекущаяНоменклатура",ТекущаяНоменклатура);
	таблицаДвижений = запрос.Выполнить().Выгрузить();
	Элементыформы.движения41.Значение = таблицаДвижений;
	Элементыформы.движения41.Колонки.Регистратор.ТекстШапки = "Регистратор "+ТекущаяНоменклатура;
		
КонецПроцедуры

Процедура ТаблицаТоваровБУ1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.ТекущиеДанные<> неопределено и ПоказыватьПриВыводе и текущаядата()>КонецПериода тогда
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК Остаток,
		|	ОстаткиИОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|ГДЕ
		|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
		|	И ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиИОбороты.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
		запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
		запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
		запрос.УстановитьПараметр("Организация",Организация1);
		запрос.УстановитьПараметр("ТекущаяНоменклатура",ДанныеСтроки.номенклатура);
		таблицаДвижений = запрос.Выполнить().Выгрузить();
		Если таблицаДвижений.Количество()>0 тогда
			 ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = webцвета.БледноКрасноФиолетовый;
		КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК Остаток,
		|	ОстаткиИОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|ГДЕ
		|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиИОбороты.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
		запрос.УстановитьПараметр("конПериода",конецДня(ТекущаяДата()));
		запрос.УстановитьПараметр("начПериода",конецДня(КонецПериода)+1);
		запрос.УстановитьПараметр("Организация",Организация1);
		запрос.УстановитьПараметр("ТекущаяНоменклатура",ДанныеСтроки.номенклатура);
		таблицаДвижений = запрос.Выполнить().Выгрузить();
		Если таблицаДвижений.Количество()>0 тогда
			 ОформлениеСтроки.Ячейки.Количество.ЦветФона = webцвета.БледноКрасноФиолетовый;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаТоваровБУ1ПриИзмененииФлажка(Элемент, Колонка)
	показатьитог();
КонецПроцедуры

Процедура КоманднаяПанель3ДвиженияПослеПериода(Кнопка)
	ТекущаяНоменклатура = элементыформы.ТаблицаТоваровБУ1.ТекущиеДанные.номенклатура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ОстаткиИОбороты.Организация КАК Организация,
		|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК БУКонечныйОстатокДт,
		|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК БУКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК КоличествоКонечныйОстатокДт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК КоличествоКонечныйОстатокКт,
		|	ОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт,
		|	ОстаткиИОбороты.КоличествоОборотКт КАК КоличествоОборотКт,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт как Остаток,
		|	ОстаткиИОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|ГДЕ
		|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиИОбороты.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
	запрос.УстановитьПараметр("конПериода",конецДня(ТекущаяДата()));
	запрос.УстановитьПараметр("начПериода",конецДня(КонецПериода)+1);
	запрос.УстановитьПараметр("Организация",Организация1);
	запрос.УстановитьПараметр("ТекущаяНоменклатура",ТекущаяНоменклатура);
	таблицаДвижений = запрос.Выполнить().Выгрузить();
	Элементыформы.движения41.Значение = таблицаДвижений;
	Элементыформы.движения41.Колонки.Регистратор.ТекстШапки = "Регистратор "+ТекущаяНоменклатура;
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3ПоступлениеОтКонтрагента(Кнопка,таблицанадень=неопределено)
	Если таблицаНаДень = неопределено тогда
		подготовительнаяТаблицаДляРеализаций = ТаблицаТоваровБУ1.Скопировать();
		датаДокумента = конецДня(КонецПериода);
	    Реализации.Очистить();
	    Поступления.Очистить();
	ИНаче
		подготовительнаяТаблицаДляРеализаций =таблицанадень;
		датаДокумента = подготовительнаяТаблицаДляРеализаций[0].дата;
	КонецЕсли;
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИмяКолонкаКоличества="колКонтр";
	для каждого элемент из Организации цикл
		Если Элемент.Организация=справочники.Организации.ПустаяСсылка() тогда
			колонкаколичества =подготовительнаяТаблицаДляРеализаций.Колонки.Добавить("колКонтр",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
			контрагентТекущий = Элемент.Контрагент;
			ПараметрыШапки = элемент;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	// таблица создана, теперь формируем предположительные значения для количеств в той же таблице
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		//// пока этого не делаем - контрагент один
	КонецЦикла;	
	// теперь оформляем документ
	/////////////////////////////////////////////////////////////
	///    создадим документ покупки                     ////////
	////////////////////////////////////////////////////////////
	
	документ = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	документ.дата = датаДокумента;
	документ.УчитыватьНДС = Истина;
	документ.СуммаВключаетНДС = Истина;
	документ.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	документ.Организация =организация1;
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(документ, глЗначениеПеременной("глТекущийПользователь"));
	//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
	мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(документ.Организация,);
	//
	документ.Комментарий = "создан автоматически";
	документ.Контрагент = контрагентТекущий;
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(документ,мСписокВидовДоговоров);
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	// Могли поменять договор.
	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(документ);
	мТекущийДоговорКонтрагента = документ.ДоговорКонтрагента;
	мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Документ, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
	мТекущаяВалютаВзаиморасчетов = документ.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(документ.Организация, документ.Контрагент, документ.ДоговорКонтрагента);
	документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	документ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	документ.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	документ.Склад=склад;
	//документ.НомерВходящегоДокумента = номервх;
	//документ.ДатаВходящегоДокумента = датавх;
	Для каждого строка из подготовительнаяТаблицаДляРеализаций Цикл
		количествоСтрокиТЧ = строка[подготовительнаяТаблицаДляРеализаций.Колонки.Индекс(колонкаколичества)];
		Если Строка.взять Тогда
			строкаТЧ = документ.Товары.Добавить();
			строкаТЧ.Номенклатура = Строка.номенклатура;
			/////////////////////////////////////// при изменении номенклатуры/////
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, документ);
			ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТЧ, Ложь, документ.Организация, документ.Дата);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(строкаТЧ, документ);
			///////////////////////////////////////////////////////////////////////
			строкаТЧ.Количество = -строка.количество;
			средняяценаПриходовОтКорреспондента = средняяценаПриходовОтКорреспондента(контрагентТекущий,Строка.номенклатура);
			строкаТЧ.Цена = средняяценаПриходовОтКорреспондента*КоэффициентУеличенияЦеныПродажи*1.18 ;
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, Документ);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Документ);
			СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура, Склад);
			/// заполним счета в строке
			СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
				СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
				СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
				СтрокаТЧ.СчетДоходов  = СчетаУчета.СчетДоходов;
				СтрокаТЧ.СчетРасходов = СчетаУчета.СчетРасходов;
				СтрокаТЧ.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
				Если СтрокаТЧ.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
					СтрокаТЧ.Субконто = Новый(СтрокаТЧ.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
					Если ТипЗнч(СтрокаТЧ.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				Иначе
					СтрокаТЧ.Субконто = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	документ.Записать();
	новоепоступление = Поступления.Добавить();
	новоепоступление.Документы = документ.Ссылка;
				новоепоступление.суммадокумента = документ.СуммаДокумента;
				новоепоступление.организация = документ.Организация;
				новоепоступление.контрагент = документ.Контрагент;
	///////////////////////////////////  создали документ покупки
	снятькнопкиДокументов();
КонецПроцедуры

Функция средняяценаПриходовОтКорреспондента(ТекущийКонтрагент,ТекущаяНомеклатура)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент <> &ТекущийКонтрагент
	|	И ПоступлениеТоваровУслугТовары.Номенклатура = &ТекущаяНомеклатура
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяНомеклатура", ТекущаяНомеклатура);
	Запрос.УстановитьПараметр("ТекущийКонтрагент", ТекущийКонтрагент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если Результат.Пустой() тогда
		Сообщить ("Цену номенклатуры "+ТекущаяНомеклатура+" найти не удалось у других контрагентов");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	 ПоступлениеТоваровУслугТовары.Номенклатура = &ТекущаяНомеклатура
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Ссылка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ТекущаяНомеклатура", ТекущаяНомеклатура);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если Результат.Пустой() тогда
			Сообщить ("Цену номенклатуры "+ТекущаяНомеклатура+" найти не удалось и у текущего контрагента");
			возврат 0 ;
		Иначе	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Сообщить ("Цену номенклатуры "+ТекущаяНомеклатура+" взяли по документу "+ ВыборкаДетальныеЗаписи.Ссылка);
				возврат ВыборкаДетальныеЗаписи.Цена*100/118;
			КонецЦикла;
		КонецЕсли;
	Иначе	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сообщить ("Цену номенклатуры "+ТекущаяНомеклатура+" взяли по документу "+ ВыборкаДетальныеЗаписи.Ссылка);
			возврат ВыборкаДетальныеЗаписи.Цена*100/118;
		КонецЦикла;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции	

Процедура КоманднаяПанель3Оставитьнеизменяемыеположительные(Кнопка)
	сообщить("Проверяем наличие после текущего периода");
	Для каждого строкаБУ1 из ТаблицаТоваровБУ1 Цикл
		Если строкаБУ1.количествоФакт >0 тогда
			количество = строкаБУ1.количествоФакт ;
			сумма = строкаБУ1.суммаФакт;
			сообщить(""+ строкаБУ1.номенклатура );
			ТекущаяНоменклатура = строкаБУ1.номенклатура;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК Остаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
			|ГДЕ
			|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Остаток
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
			запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
			запрос.УстановитьПараметр("конПериода",конецДня(ТекущаяДата()));
			запрос.УстановитьПараметр("начПериода",конецДня(КонецПериода)+1);
			запрос.УстановитьПараметр("Организация",Организация1);
			запрос.УстановитьПараметр("ТекущаяНоменклатура",ТекущаяНоменклатура);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если результат.Количество()=0 тогда
			Иначе
				остаток = Результат[0].остаток;
				Если остаток>=количество тогда
					строкаБУ1.количество = количество;
				иначе
					строкаБУ1.количество = ?(остаток<=0,0,остаток);
				КонецЕсли;
				строкаБУ1.сумма = ?(строкаБУ1.количество>0,(сумма/количество)*строкаБУ1.количество,0); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
		ВывестиданныеКорреспондентов();
		показатьитог();
КонецПроцедуры

Процедура КоманднаяПанель3Проставитьдаты(Кнопка)
	сообщить("Проставляем даты первого возникновения минуса в текущем периоде");
	для каждого строкаБУ1 из ТаблицаТоваровБУ1 Цикл
		ТекущиеДанные =  строкаБУ1;
		ТекущаяНоменклатура = ТекущиеДанные.номенклатура;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.СуммаКонечныйОстатокДт - ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК ОстатокСуммы,
		|	ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт КАК Остаток,
		|	ОстаткиИОбороты.Период,
		|	ОстаткиИОбороты.КоличествоНачальныйОстатокДт,
		|	ВЫБОР
		|		КОГДА ОстаткиИОбороты.КоличествоКонечныйОстатокДт - ОстаткиИОбороты.КоличествоКонечныйОстатокКт < 0
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК отрицательное
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, Регистратор, Движения, Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|ГДЕ
		|	ОстаткиИОбороты.Субконто1.Ссылка = &ТекущаяНоменклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиИОбороты.Период
		|АВТОУПОРЯДОЧИВАНИЕ";
		запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
		запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
		запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
		запрос.УстановитьПараметр("Организация",Организация1);
		запрос.УстановитьПараметр("ТекущаяНоменклатура",ТекущаяНоменклатура);
		таблицаДвиженийonly = запрос.Выполнить().Выгрузить();
		сообщить(""+ строкаБУ1.номенклатура );
		Если таблицаДвиженийonly.Количество() = 0 тогда
			ТекущиеДанные.количество = 0;
			текущиеданные.сумма =0;
		ИначеЕсли таблицаДвиженийonly[0].КоличествоНачальныйОстатокДт>=0 тогда
			//найдем первую дату возникновения минуса
			таблицаДвиженийonly.Сортировать("Отрицательное, Период");
			ТекущиеДанные.дата =   НачалоДня(таблицаДвиженийonly[0].период);
			//найдем минимальный остаток - его и будем восполнять
			таблицаДвиженийonly.Сортировать("Остаток");
			ТекущиеДанные.количество = таблицаДвиженийonly[0].Остаток;
			текущиеданные.сумма =таблицаДвиженийonly[0].ОстатокСуммы;
		Иначе
			ТекущиеДанные.количество = 0;
			текущиеданные.сумма =0;
		КонецЕсли;	
	КонецЦикла;
		элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление1.доступность = истина;  
		элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента1.доступность = истина;  
        ВывестиданныеКорреспондентов(1);
КонецПроцедуры

Процедура КоманднаяПанель3постпление1(Кнопка)
	Реализации.Очистить();
	Поступления.Очистить();
	ТаблицаТоваровБУ1.Сортировать("Дата");
	таблицанадень = таблицаТоваровБУ1.Скопировать();
	датаПросмотра = "";
	Для каждого строкаБУ1 из ТаблицаТоваровБУ1 Цикл 
		Если датаПросмотра<>строкаБУ1.дата тогда
			датаПросмотра=строкаБУ1.дата;
	        таблицанадень = таблицаТоваровБУ1.Скопировать();
			таблицанадень.Очистить();
			Отбор = Новый Структура();
			Отбор.Вставить("Дата",датаПросмотра);
			строкинадень = ТаблицаТоваровБУ1.НайтиСтроки(Отбор);
			для каждого строканадень из строкинадень цикл
				НоваяСтрока = таблицанадень.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока , строканадень,,);
			КонецЦикла;	
	        КоманднаяПанель3постпление(Кнопка,таблицанадень);
		КонецЕсли;	 
	КонецЦикла;
	снятькнопкиДокументов();
КонецПроцедуры

Процедура КоманднаяПанель3ПоступлениеОтКонтрагента1(Кнопка)
	Реализации.Очистить();
	Поступления.Очистить();
	ТаблицаТоваровБУ1.Сортировать("Дата");
	таблицанадень = таблицаТоваровБУ1.Скопировать();
	датаПросмотра = "";
	Для каждого строкаБУ1 из ТаблицаТоваровБУ1 Цикл 
		Если датаПросмотра<>строкаБУ1.дата тогда
			датаПросмотра=строкаБУ1.дата;
			таблицанадень = таблицаТоваровБУ1.Скопировать();
			таблицанадень.Очистить();
			Отбор = Новый Структура();
			Отбор.Вставить("Дата",датаПросмотра);
			строкинадень = ТаблицаТоваровБУ1.НайтиСтроки(Отбор);
			для каждого строканадень из строкинадень цикл
				Если строканадень.Взять тогда
				НоваяСтрока = таблицанадень.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока , строканадень,,);
				КонецЕсли;
			КонецЦикла;	
				Если таблицанадень.Количество()>0 тогда
			КоманднаяПанель3ПоступлениеОтКонтрагента(Кнопка,таблицанадень);	   //     КоманднаяПанель3постпление(Кнопка)
			КонецЕсли;
		КонецЕсли;	 
	КонецЦикла;
	снятькнопкиДокументов();
КонецПроцедуры

Процедура КоманднаяПанель3НашеОтрицательноеВсе(Кнопка)
	ТаблицаТоваровБУ1.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.количество,
		|	ВложенныйЗапрос.Период,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК Остаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ВложенныйЗапрос.Организация КАК Организация,
		|		ВложенныйЗапрос.КоличествоКонечныйОстаток КАК количество,
		|		МИНИМУМ(ХозрасчетныйОстаткиИОбороты.Период) КАК Период
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|			ОстаткиИОбороты.Организация КАК Организация,
		|			МИНИМУМ(ОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, День, , Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ОстаткиИОбороты
		|		ГДЕ
		|			ОстаткиИОбороты.КоличествоКонечныйОстаток < 0
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОстаткиИОбороты.Субконто1,
		|			ОстаткиИОбороты.Организация) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, День, , Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|			ПО ВложенныйЗапрос.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|				И ВложенныйЗапрос.Организация = ХозрасчетныйОстаткиИОбороты.Организация
		|				И ВложенныйЗапрос.КоличествоКонечныйОстаток = ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.Организация,
		|		ВложенныйЗапрос.КоличествоКонечныйОстаток) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&начПериода, &конПериода, День, , Счет В ИЕРАРХИИ (&списоксчетов), &СписокВидовСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО ВложенныйЗапрос.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|			И ВложенныйЗапрос.Организация = ХозрасчетныйОстаткиИОбороты.Организация
		|			И ВложенныйЗапрос.Период = ХозрасчетныйОстаткиИОбороты.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
	запрос.УстановитьПараметр("СписокВидовСубконто",планывидовхарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	запрос.УстановитьПараметр("списоксчетов",ПолеСпискаСчетов1);
	запрос.УстановитьПараметр("конПериода",конецДня(КонецПериода));
	запрос.УстановитьПараметр("начПериода",началоДня(НачалоПериода));
	запрос.УстановитьПараметр("Организация",Организация1);
	таблицаБУ = запрос.Выполнить().Выгрузить();
	Для каждого строка из таблицаБУ цикл
			строкаТаблицаТоваровБУ = ТаблицаТоваровБУ1.Добавить();
			строкаТаблицаТоваровБУ.НОменклатура = строка.НОменклатура ;
			строкаТаблицаТоваровБУ.значение = строка.НОменклатура.код ;
			строкаТаблицаТоваровБУ.количество = строка.Количество;
			строкаТаблицаТоваровБУ.Сумма = строка.Остаток;
			строкаТаблицаТоваровБУ.количествоФакт = строкаТаблицаТоваровБУ.количество;
			строкаТаблицаТоваровБУ.СуммаФакт = строкаТаблицаТоваровБУ.Сумма;
			строкаТаблицаТоваровБУ.Взять = Истина;
			строкаТаблицаТоваровБУ.Дата = строка.Период;
		КонецЦикла;	 
	элементыформы.ТаблицаТоваровБУ1.Значение = ТаблицаТоваровБУ1;
	КоманднаяПанель3Проставитьдаты(Кнопка);
    //ВывестиданныеКорреспондентов();
	показатьитог();
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.реализация.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.РеализацияБезПоступления.доступность = ложь;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление.доступность = ЛОжь;                       
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.постпление1.доступность = истина;                       
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента.доступность =ложь ;  
	элементыформы.КоманднаяПанель3.Кнопки.Подменю.кнопки.ПоступлениеОтКонтрагента1.доступность = истина;  
	
КонецПроцедуры

Процедура Кнопка8Нажатие(Элемент)
	изменениесумм(Реализации);
КонецПроцедуры

Процедура Кнопка9Нажатие(Элемент)
	изменениесумм(Поступления);
КонецПроцедуры

процедура изменениесумм(таблица)
	для каждого строка из таблица цикл
		Если  строка.ТребуемаяСумма>0 тогда
			коэффициентМалый = строка.ТребуемаяСумма/строка.Документы.ссылка.СуммаДокумента;
			объектдокумент = строка.Документы.ссылка.получитьобъект();
			Для каждого товар из объектДокумент.товары цикл
				товар.Сумма=товар.Сумма*коэффициентМалый;
				// Выполнить общие действия для всех документов при изменении Суммы.
				ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(товар, объектдокумент);
				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(товар,объектдокумент);
			КонецЦикла;
			объектдокумент.Записать();
			довесок = строка.ТребуемаяСумма - объектдокумент.суммадокумента;
			объектдокумент.товары[0].сумма = объектдокумент.товары[0].сумма +довесок;
			// Выполнить общие действия для всех документов при изменении Суммы.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(объектдокумент.товары[0], объектдокумент);
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(объектдокумент.товары[0], объектдокумент);
			объектдокумент.Записать();
			строка.СуммаДокумента = объектдокумент.суммадокумента;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанель3отменитьвсе(Кнопка)
	ТаблицаТоваровБУ1.ЗаполнитьЗначения(Ложь,"Взять");
	показатьитог();
КонецПроцедуры

Процедура КоманднаяПанель3установитьлажки(Кнопка)
	ТаблицаТоваровБУ1.ЗаполнитьЗначения(Истина,"Взять");
	показатьитог();
КонецПроцедуры

Процедура ТаблицаТоваровБУ1количествоПриИзменении(Элемент)
	строкаизменений=элементыформы.ТаблицаТоваровБУ1.ТекущаяСтрока;
	строкаизменений.сумма=строкаизменений.сумма*строкаизменений.количество/реквизит;
	показатьитог();
	элементыформы.ТаблицаТоваровБУ1.ТекущаяКолонка = элементыформы.ТаблицаТоваровБУ1.Колонки.Сумма;
КонецПроцедуры

Процедура ТаблицаТоваровБУ1ПриАктивизацииЯчейки(Элемент)
	// Вставить содержимое обработчика.
	Если Элемент.ТекущаяСтрока=неопределено тогда
	ИначеЕсли Элемент.ТекущаяКолонка.Имя="количество" тогда
	    реквизит=Элемент.ТекущаяСтрока.количество;	
	КонецЕсли;	
КонецПроцедуры
Процедура Кнопка10Нажатие(Элемент)
	//контрагентПИВЗАВОЗ = справочники.Контрагенты.НайтиПоКоду("000000337");
	Если контрагентПИВЗАВОЗ = справочники.Контрагенты.ПустаяСсылка() тогда
		сообщить ("контрагент не выбран");
		возврат;
	КонецЕсли;	
	Начало = НачалоДня(НачалоПериода);
	Конец = КонецДня(КонецПериода);
	запрос = новый запрос();
	запрос.Текст ="ВЫБРАТЬ
	              |	РеализацияТоваровУслуг.Ссылка КАК Документы,
	              |	РеализацияТоваровУслуг.СуммаДокумента,
	              |	ЛОЖЬ КАК взять
	              |ИЗ
	              |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	              |ГДЕ
	              |	РеализацияТоваровУслуг.Организация = &организация1
	              |	И РеализацияТоваровУслуг.Контрагент = &контрагентПИВЗАВОЗ
	              |	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	              |	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	              |	И РеализацияТоваровУслуг.Дата >=&НачалоПериода И РеализацияТоваровУслуг.Дата<=&КонецПериода
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Документы
	              |АВТОУПОРЯДОЧИВАНИЕ";
				  запрос.УстановитьПараметр("организация1",организация1);
				  запрос.УстановитьПараметр("контрагентПИВЗАВОЗ",контрагентПИВЗАВОЗ);
				  запрос.УстановитьПараметр("НачалоПериода",Начало);
				  запрос.УстановитьПараметр("КонецПериода",Конец);
				  реализации1 = запрос.Выполнить().Выгрузить();		
				  запрос = новый запрос();
				  запрос.Текст ="ВЫБРАТЬ
				  |	ПоступлениеТоваровУслуг.Ссылка КАК Документы,
				  |	ПоступлениеТоваровУслуг.СуммаДокумента,
	              |	ЛОЖЬ КАК взять
	              |ИЗ
	              |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	              |ГДЕ
	              |	ПоступлениеТоваровУслуг.Организация = &организация1
	              |	И ПоступлениеТоваровУслуг.Контрагент = &контрагентПИВЗАВОЗ
	              |	И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	              |	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	              |	И ПоступлениеТоваровУслуг.Дата>=&НачалоПериода И ПоступлениеТоваровУслуг.Дата<=&КонецПериода
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Документы
	              |АВТОУПОРЯДОЧИВАНИЕ";
				  запрос.УстановитьПараметр("организация1",организация1);
				  запрос.УстановитьПараметр("контрагентПИВЗАВОЗ",контрагентПИВЗАВОЗ);
				  запрос.УстановитьПараметр("НачалоПериода",Начало);
				  запрос.УстановитьПараметр("КонецПериода",Конец);
    Поступления1 = запрос.Выполнить().Выгрузить();				  

КонецПроцедуры


Функция найтиномер(строка)
	накопительнаястрока="";
	Строкацифр="0123456789\";
	пока СтрДлина(строка)>0 цикл
		Символ=лев(строка,1);
		Результат=Найти(Строкацифр,Символ);
		Если Результат > 0 Тогда 
			накопительнаястрока=накопительнаястрока+Символ;
		ИначеЕсли накопительнаястрока<>"" тогда
			Прервать;
		Иначе
		КонецЕсли; 
		строка =  Сред(строка,2);
	КонецЦикла;	
		возврат  накопительнаястрока;
КонецФункции

	
Процедура Кнопка11Нажатие(Элемент)
	//организацияПИВЗАВОЗ = справочники.Организации.НайтиПоКоду("000000002");         //переделать
	Если организацияПИВЗАВОЗ = справочники.Организации.ПустаяСсылка() тогда
		сообщить ("организация контрагента не выбрана");
		возврат;
	КонецЕсли;	
	Если ЭлементыФормы.Организации.ТекущаяСтрока = неопределено тогда
		сообщить("установите организацию в настройках");
		возврат;
	КонецЕсли;	
	контрагентТекущий = ЭлементыФормы.Организации.ТекущаяСтрока.Контрагент;
	мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	для каждого строка из Реализации1 цикл
		Если строка.взять тогда
			реализация = строка.Документы;
			текномер = строка(реализация.номер);
			номер = ПолучитьНомерНаПечать(текномер);
			новоепоступление = документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			новоепоступление.дата = реализация.дата;
			новоепоступление.номер = СоздатьНомерДокумента(номер,организацияПИВЗАВОЗ,организация1);
			//Сообщить(новоепоступление.номер);
			новоепоступление.Организация = организацияПИВЗАВОЗ;
			новоепоступление.Контрагент = контрагентТекущий;
			новоепоступление.УчитыватьНДС = Истина;
			новоепоступление.СуммаВключаетНДС = Истина;
			новоепоступление.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
			новоепоступление.НомерВходящегоДокумента=номер;
			новоепоступление.ДатаВходящегоДокумента =реализация.дата;
			// Выполняем общие действия для всех документов при изменении Организация.
			ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(новоепоступление, глЗначениеПеременной("глТекущийПользователь"));
			//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(документ.БанковскийСчетОрганизации, документ.Организация, мВалютаРегламентированногоУчета);
			мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(новоепоступление.Организация,);
			//
			новоепоступление.Комментарий = "создан для зеркалирования";
			// Выполняем общие действия для всех документов при изменении Контрагент.
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(новоепоступление,мСписокВидовДоговоров);
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
			// Могли поменять договор.
			// Зададим, какие реквизиты надо редактировать.
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(новоепоступление);
			мТекущийДоговорКонтрагента = новоепоступление.ДоговорКонтрагента;
			мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(новоепоступление, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
			мТекущаяВалютаВзаиморасчетов = новоепоступление.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(новоепоступление.Организация, новоепоступление.Контрагент,новоепоступление.ДоговорКонтрагента);
			новоепоступление.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			новоепоступление.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			новоепоступление.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			новоепоступление.Склад=склад;
			для каждого строкатовара из строка.документы.товары цикл
				новаястрокапоступления = новоепоступление.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(новаястрокапоступления,строкатовара);
				// Выполнить общие действия для всех документов при изменении номенклатуры.
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(новаястрокапоступления, новоепоступление);
				ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(новаястрокапоступления, Ложь, новоепоступление.Организация, новоепоступление.Дата);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(новаястрокапоступления, новоепоступление);
				СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(новоепоступление.Организация, новаястрокапоступления.Номенклатура, Склад);
				/// заполним счета в строке
				новаястрокапоступления.СчетУчета = СчетаУчета.СчетУчета;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
					новаястрокапоступления.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
					новаястрокапоступления.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.поступлениеТоваровУслуг, "Товары") Тогда
					новаястрокапоступления.СчетДоходов  = СчетаУчета.СчетДоходов;
					новаястрокапоступления.СчетРасходов = СчетаУчета.СчетРасходов;
					новаястрокапоступления.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
					Если новаястрокапоступления.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
						новаястрокапоступления.Субконто = Новый(новаястрокапоступления.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
						Если ТипЗнч(новаястрокапоступления.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
							новаястрокапоступления.Субконто = новаястрокапоступления.Номенклатура.НоменклатурнаяГруппа;
						КонецЕсли;
					Иначе
						новаястрокапоступления.Субконто = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		новоепоступление.Записать();
		новоепоступлениеСтрока = Поступления2.Добавить();
    	новоепоступлениеСтрока.Документы = новоепоступление.Ссылка;
		КонецЕсли;	

	КонецЦикла;	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	для каждого строка из Поступления1 цикл
		Если строка.взять тогда
			поступление = строка.Документы;
			текномер =строка(поступление.номер);
			номер = найтиномер(текномер);
			новоереализация = документы.РеализацияТоваровУслуг.СоздатьДокумент();
			новоереализация.дата = поступление.дата;
			//новоереализация.номер = организацияПИВЗАВОЗ.Префикс+номер+"/"+организация1.префикс;
			Если ЗначениеЗаполнено(поступление.НомерВходящегоДокумента) Тогда
				НомерТемп=поступление.НомерВходящегоДокумента;
				Поз0=Найти(НомерТемп,"0");
				НомерТемп="БУ"+Лев(НомерТемп,Поз0)+Сред(НомерТемп,Поз0+2);
			Иначе
				НомерТемп="";
			КонецЕсли;
			новоереализация.номер = НомерТемп;
			новоереализация.Организация = организацияПИВЗАВОЗ;
			новоереализация.Контрагент = контрагентТекущий;
			новоереализация.УчитыватьНДС = Истина;
			новоереализация.СуммаВключаетНДС = Истина;
			новоереализация.ВидОперации = перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия; 			
			// Выполняем общие действия для всех документов при изменении Организация.
			ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(новоереализация, глЗначениеПеременной("глТекущийПользователь"));
			УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(новоереализация.БанковскийСчетОрганизации, новоереализация.Организация, мВалютаРегламентированногоУчета);
			мУпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(новоереализация.Организация,);
			//
			новоереализация.Комментарий = "создан для зеркалирования";
			// Выполняем общие действия для всех документов при изменении Контрагент.
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(новоереализация,мСписокВидовДоговоров);
			// Могли поменять договор.
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			// Зададим, какие реквизиты надо редактировать.
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(новоереализация);
			мТекущийДоговорКонтрагента = новоереализация.ДоговорКонтрагента;
			мТекущаяВалютаВзаиморасчетов=мВалютаРегламентированногоУчета;
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(новоереализация, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
			мТекущаяВалютаВзаиморасчетов = новоереализация.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(новоереализация.Организация, новоереализация.Контрагент,новоереализация.ДоговорКонтрагента);
		    новоереализация.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		    новоереализация.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			новоереализация.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			новоереализация.Склад=склад;
			Для каждого строкаТовара из строка.документы.товары Цикл
					новаястрокареализация = новоереализация.Товары.Добавить();
				    ЗаполнитьЗначенияСвойств(новаястрокареализация ,строкатовара);
					// Выполнить общие действия для всех документов при изменении номенклатуры.
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(новаястрокареализация , новоереализация);
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(новаястрокареализация , Ложь, новоереализация.Организация, новоереализация.Дата);
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(новаястрокареализация , новоереализация);
					// Рассчитываем реквизиты табличной части.
	                СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, новаястрокареализация .Номенклатура, Склад);
					/// заполним счета в строке
					 		новаястрокареализация.СчетУчета = СчетаУчета.СчетУчета;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
								новаястрокареализация.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
							КонецЕсли;
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
								новаястрокареализация.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
							КонецЕсли;
								Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов",Метаданные.документы.реализацияТоваровУслуг, "Товары") Тогда
									новаястрокареализация.СчетДоходов  = СчетаУчета.СчетДоходов;
									новаястрокареализация.СчетРасходов = СчетаУчета.СчетРасходов;
									новаястрокареализация.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
									Если новаястрокареализация.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
										новаястрокареализация.Субконто = Новый(новаястрокареализация.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
										Если ТипЗнч(новаястрокареализация.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
											новаястрокареализация.Субконто = новаястрокареализация.Номенклатура.НоменклатурнаяГруппа;
										КонецЕсли;
									Иначе
										новаястрокареализация.Субконто = Неопределено;
									КонецЕсли;
						КонецЕсли;	
			КонецЦикла;	
		новоереализация.Записать();
		новоереализацияСтрока = Реализации3.Добавить();
    	новоереализацияСтрока.Документы = новоереализация.Ссылка;
         КонецЕсли;
	 КонецЦикла;	
	 Кнопка10Нажатие(Элемент);
	 этаформа.Обновить();
КонецПроцедуры

Процедура Реализации1ПриАктивизацииСтроки(Элемент)
	//организацияПИВЗАВОЗ = справочники.Организации.НайтиПоКоду("000000002");          //переделать
	Если организацияПИВЗАВОЗ = справочники.Организации.ПустаяСсылка() тогда
		сообщить ("организация контрагента не выбрана");
		возврат;
	КонецЕсли;	
	попытка
			текномер = строка(Элемент.ТекущаяСтрока.Документы.Номер);
			номер = ПолучитьНомерНаПечать(текномер);
			поступлениеномер = СоздатьНомерДокумента(номер,организацияПИВЗАВОЗ,организация1);
			
			док = документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(поступлениеномер,Элемент.ТекущаяСтрока.Документы.дата);
			элементыформы.ЗеркальноеПоступление.Заголовок = док;
	исключение		
			элементыформы.ЗеркальноеПоступление.Заголовок = "";
		КонецПопытки;
		Если элементыформы.ЗеркальноеПоступление.Заголовок <> "" тогда
			элемент.колонки.взять.доступность=ложь;
		Иначе
			элемент.колонки.взять.доступность=истина;
		КонецЕсли;	
КонецПроцедуры

Процедура Поступления1ПриАктивизацииСтроки(Элемент)
	организацияПИВЗАВОЗ = справочники.Организации.НайтиПоКоду("000000002");        //переделать
	попытка
			текномер = строка(Элемент.ТекущаяСтрока.Документы.Номер);
			номер = найтиномер(текномер);
			реализацияномер = организацияПИВЗАВОЗ.Префикс+номер+"/"+организация1.префикс;
			док =документы.РеализацияТоваровУслуг.НайтиПоНомеру(реализацияномер,Элемент.ТекущаяСтрока.Документы.дата);
			элементыформы.ЗеркальнаяРеализация.Заголовок = док;
	исключение		
			элементыформы.ЗеркальнаяРеализация.Заголовок = "";
	 КонецПопытки;
		Если элементыформы.ЗеркальнаяРеализация.Заголовок <> "" тогда
			элемент.колонки.взять.доступность=ложь;
		Иначе
			элемент.колонки.взять.доступность=истина;
		КонецЕсли;	
КонецПроцедуры

Функция ПолучитьНомерНаПечать(Номер)
	Сч=1;
	ТекСимвом=Сред(Номер,Сч,1);
	Пока НЕ (ТекСимвом>"0" И ТекСимвом<="9") Цикл
		Сч=Сч+1;
		ТекСимвом=Сред(Номер,Сч,1);
	КонецЦикла;
	
	Возврат Сред(Номер,сч);
КонецФункции

Функция СоздатьНомерДокумента(Номер,ОрганизацияПивзавоз,Организация1)

	ТемпНомер=Формат(Число(Номер),"ЧЦ=11; ЧВН=; ЧГ=");
	ДлинаОбрезки=СтрДлина(Организация1.Префикс)+СтрДлина(ОрганизацияПивзавоз.Префикс)+1; //префикс одной, префикс второй, слеш;
	Возврат ОрганизацияПивзавоз.Префикс+Сред(ТемпНомер,ДлинаОбрезки+1)+"/"+Организация1.префикс;

КонецФункции // СоздатьНомерДокумента()


