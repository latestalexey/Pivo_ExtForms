
Процедура КнопкаВыполнитьНажатие(Кнопка)
	мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	Соотв=Новый Соответствие; //Грузополучатель - Возврат+Реализация
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если Соотв.Получить(СтрокаТЧ.Грузополучатель)=Неопределено Тогда
			Стр=Новый Структура("ДокВозврата, ДокРеализация");
			
			// Создание документа Возврат + Реализация
			ДокВозврат		= Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокВозврат, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
			ДокВозврат.ДоговорКонтрагента=ДоговорСтарый;
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокВозврат);
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ДокВозврат, ДокВозврат.ВалютаДокумента, ДокВозврат.ВалютаДокумента, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", ДокВозврат.ДоговорКонтрагента);
			ДокВозврат.УчитыватьНДС=Ложь;
			
			
			ДокРеализация	= Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокРеализация, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
			ДокРеализация.ДоговорКонтрагента=ДоговорНовый;
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ДокРеализация, ДокРеализация.ВалютаДокумента, ДокРеализация.ВалютаДокумента, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", ДокРеализация.ДоговорКонтрагента);
			ДокРеализация.УчитыватьНДС=Ложь;
			
			ДокВозврат.Контрагент2=СтрокаТЧ.Грузополучатель;
			ДокРеализация.Грузополучатель=СтрокаТЧ.Грузополучатель;
			ДокВозврат.Комментарий="Создан обработкой для переноса оборудования с одного договора на другой";
			ДокРеализация.Комментарий="Создан обработкой для переноса оборудования с одного договора на другой";
			ДокВозврат.Дата=ТекущаяДата()-60;
			ДокРеализация.Дата=ТекущаяДата();
			Стр.ДокВозврата=ДокВозврат;
			Стр.ДокРеализация=ДокРеализация;
			Соотв.Вставить(СтрокаТЧ.Грузополучатель,Стр);
		Иначе
			ДокВозврат=Соотв.Получить(СтрокаТЧ.Грузополучатель).ДокВозврата;
			ДокРеализация=Соотв.Получить(СтрокаТЧ.Грузополучатель).ДокРеализация;
		КонецЕсли;
		СтрокаТовары=ДокВозврат.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,СтрокаТЧ);
		СтрокаТовары.ДокументПартии=СтрокаТЧ.ДокументПродажи;
		СтрокаТовары.Качество=Справочники.Качество.Новый;
		СтрокаТовары.СерияНоменклатуры=СтрокаТЧ.Серия;
		
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТовары, ДокВозврат);
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, ДокВозврат); 
		СтрокаТовары.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, ДокВозврат, мВалютаРегламентированногоУчета);
		
		СтрокаТовары.Цена=СтрокаТЧ.Сумма/СтрокаТЧ.Количество;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ДокВозврат);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ДокВозврат);
		
		СтрокаТовары=ДокРеализация.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары,СтрокаТЧ);
		СтрокаТовары.СерияНоменклатуры=СтрокаТЧ.Серия;
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТовары, ДокРеализация);
		//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовары, ДокРеализация); 
		СтрокаТовары.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовары, ДокРеализация, мВалютаРегламентированногоУчета);
		
		СтрокаТовары.Цена=СтрокаТЧ.Сумма/СтрокаТЧ.Количество;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовары, ДокРеализация);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТовары, ДокРеализация);
	КонецЦикла;
	Для Каждого Эл Из Соотв Цикл
		Форма=Эл.Значение.ДокВозврата.ПолучитьФорму();
		Форма.Открыть();
		Эл.Значение.ДокВозврата.Организация=ДоговорСтарый.Организация;
		Эл.Значение.ДокВозврата.ДоговорКонтрагента=ДоговорСтарый;
		Эл.Значение.ДокВозврата.СкладОрдер=Справочники.Склады.НайтиПоКоду("000000006");
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		Эл.Значение.ДокВозврата.УчитыватьНДС=Ложь;
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокВозврат);
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Эл.Значение.ДокВозврата, Эл.Значение.ДокВозврата.ВалютаДокумента, Эл.Значение.ДокВозврата.ВалютаДокумента, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", Эл.Значение.ДокВозврата.ДоговорКонтрагента);
		Форма.Обновить();
		
		Форма=Эл.Значение.ДокРеализация.ПолучитьФорму();
		Форма.Открыть();
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокРеализация, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Продажа");
		Эл.Значение.ДокРеализация.ДоговорКонтрагента=ДоговорНовый;
		Эл.Значение.ДокРеализация.Организация=ДоговорНовый.Организация;
		Эл.Значение.ДокРеализация.Склад=Справочники.Склады.НайтиПоКоду("000000006");
		Эл.Значение.ДокРеализация.УчитыватьНДС=Ложь;
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(Эл.Значение.ДокРеализация, Эл.Значение.ДокРеализация.ВалютаДокумента, Эл.Значение.ДокРеализация.ВалютаДокумента, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", Эл.Значение.ДокРеализация.ДоговорКонтрагента);
		Форма.Обновить();
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	Товары.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПереданныеОстаткиИОбороты.Грузополучатель КАК Грузополучатель,
		|	ТоварыПереданныеОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыПереданныеОстаткиИОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
		|	ТоварыПереданныеОстаткиИОбороты.Регистратор,
		|	ТоварыПереданныеОстаткиИОбороты.КоличествоОборот КАК Количество,
		|	ТоварыПереданныеОстаткиИОбороты.СуммаВзаиморасчетовОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.ОстаткиИОбороты(
		|			,
		|			,
		|			Регистратор,
		|			,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И НЕ Номенклатура В (&Кеги)) КАК ТоварыПереданныеОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыПереданныеОстаткиИОбороты.Регистратор.Дата
		|ИТОГИ ПО
		|	Грузополучатель,
		|	Номенклатура,
		|	СерияНоменклатуры";

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорСтарый);
	Запрос.УстановитьПараметр("Кеги", Справочники.Номенклатура.НайтиПоНаименованию("03 Тара").Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаГрузополучатель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаГрузополучатель.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаГрузополучатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ВыборкаСерияНоменклатуры = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСерияНоменклатуры.Следующий() Цикл
				МассивНакопления=Новый Массив;
				ВыборкаДетальныеЗаписи = ВыборкаСерияНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтруктураЗаписи=Новый Структура("Номенклатура,Регистратор,Количество,Сумма");
					ЗаполнитьЗначенияСвойств(СтруктураЗаписи,ВыборкаДетальныеЗаписи);
					Если МассивНакопления.Количество()=0 Тогда
						МассивНакопления.Добавить(СтруктураЗаписи);
					Иначе //придется думать
						Сч=МассивНакопления.Количество()-1;
						Пока Сч>=0 Цикл
							Эл=МассивНакопления.Получить(Сч);
							Если Эл.Количество*СтруктураЗаписи.Количество<0 Тогда //противоположные знаки
								ЗачетКоличество	=Мин(Abs(Эл.Количество),Abs(СтруктураЗаписи.Количество));
								ЗачетСумма		=Мин(Abs(Эл.Сумма),Abs(СтруктураЗаписи.Сумма));
								Если Abs(СтруктураЗаписи.Количество)=ЗачетКоличество И Abs(Эл.Количество)=ЗачетКоличество Тогда //убираем оба
									МассивНакопления.Удалить(Сч);
									СтруктураЗаписи.Количество=0;
									Прервать;
								ИначеЕсли Abs(СтруктураЗаписи.Количество)=ЗачетКоличество Тогда //из Эл вычитаем
									Эл.Количество	=Эл.Количество	+?(Эл.Количество>0,-ЗачетКоличество,ЗачетКоличество);
									Эл.Сумма		=Эл.Сумма		+?(Эл.Сумма>0,-ЗачетСумма,ЗачетСумма);
									СтруктураЗаписи.Количество=0;
									СтруктураЗаписи.Сумма=0;
									Прервать;
								Иначе //Эл удаляем, СтруктуруЗаписи уменьшаем
									СтруктураЗаписи.Количество	=СтруктураЗаписи.Количество	+?(СтруктураЗаписи.Количество>0,-ЗачетКоличество,ЗачетКоличество);
									СтруктураЗаписи.Сумма		=СтруктураЗаписи.Сумма		+?(СтруктураЗаписи.Сумма>0,-ЗачетСумма,ЗачетСумма);
									МассивНакопления.Удалить(сч);
									Сч=Сч-1;
									Если СтруктураЗаписи.Количество=0 Тогда
										Прервать;
									КонецЕсли;
								КонецЕсли;
							Иначе
								Сч=Сч-1;
							КонецЕсли;
						КонецЦикла;
						Если СтруктураЗаписи.Количество<>0 Тогда
							МассивНакопления.Добавить(СтруктураЗаписи)
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Эл Из МассивНакопления Цикл
					СтрокаТЧ=Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ,Эл);
					СтрокаТЧ.Грузополучатель=ВыборкаГрузополучатель.Грузополучатель;
					СтрокаТЧ.ДокументПродажи=Эл.Регистратор;
					СтрокаТЧ.Серия=ВыборкаСерияНоменклатуры.СерияНоменклатуры;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция Abs(Значение)
	Если Значение<0 Тогда
		Возврат -1*Значение;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции // Abs()


Процедура КонтрагентПриИзменении(Элемент)
	ДоговорНовый=Неопределено;
	ДоговорСтарый=Неопределено;
КонецПроцедуры

