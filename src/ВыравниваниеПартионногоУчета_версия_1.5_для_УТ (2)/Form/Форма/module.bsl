
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если ДляПартийУправленческогоУчета Тогда
		
		Если ВыполнятьТолькоКорректировку Тогда
			
			КорректировкиЗаПериод = ПолучитьКорректировкиЗаПериод();
			ПрежняяДата = 0;
			Пока КорректировкиЗаПериод.Следующий() Цикл
				Если ТипЗнч(ПрежняяДата) <> ТИП("Число") Тогда
					ПерепровестиРегистраторы(ПрежняяДата,КорректировкиЗаПериод.Дата);
				КонецЕсли;
				
				НаДату = КорректировкиЗаПериод.Дата-1;
				СсылкаКорректировки = КорректировкиЗаПериод.Ссылка;
				Если СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Перемещение партий") ИЛИ
					СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Перемещение партий") Тогда
					ПеремещениеПартийУпр(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Пересорт по характеристикам") ИЛИ
					СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Пересорт по характеристикам") Тогда
					ПересортПоХарактеристикамУпр(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Списание излишков") ИЛИ
					СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Списание излишков") Тогда
					СписаниеИзлишковУпр(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Приходование недостач") ИЛИ
					СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Приходование недостач") Тогда  
					ДооприходованиеНедостачУпр(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Переданные Перемещение партий") И ТоварыПереданные Тогда
					ПеремещениеПартийПереданные(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Переданные Пересорт по характеристикам") И ТоварыПереданные Тогда
					ПересортПоХарактеристикамПереданные(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Переданные Списание излишков") И ТоварыПереданные Тогда
					СписаниеИзлишковПереданные(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка партионного учета!!!Упр Переданные Приходование недостач") И ТоварыПереданные Тогда  
					ПриходованиеНедостачПереданные(НаДату,СсылкаКорректировки);
				ИначеЕсли СокрЛП(КорректировкиЗаПериод.Комментарий) = СокрЛП("Корректировка суммы взаиморасчетов по товарам переданным, количество = 0") Тогда
					СписатьСуммыПереданных(НаДату,СсылкаКорректировки);
				Иначе
					ПрежняяДата = 0;
					Продолжить;
				КонецЕсли;
				ПрежняяДата = КорректировкиЗаПериод.Дата;
			КонецЦикла;	
			
		ИначеЕсли ТолькоПереданные Тогда
			Если ЗначениеЗаполнено(ВыравниватьНаДату) Тогда
				НаДату = ВыравниватьНаДату;
			Иначе
				НаДату = 0;
			КонецЕсли;
			СсылкаКорректировки = 0;
			ПеремещениеПартийПереданные(НаДату, СсылкаКорректировки);
			ПересортПоХарактеристикамПереданные(НаДату+1, СсылкаКорректировки);
			СписаниеИзлишковПереданные(НаДату+2, СсылкаКорректировки);
			ПриходованиеНедостачПереданные(НаДату+3, СсылкаКорректировки);
		ИначеЕсли ТоварыПереданные Тогда
			Если ЗначениеЗаполнено(ВыравниватьНаДату) Тогда
				НаДату = ВыравниватьНаДату;
			Иначе
				НаДату = 0;
			КонецЕсли;
			СсылкаКорректировки = 0;
			ПеремещениеПартийУпр(НаДату, СсылкаКорректировки);
			ПересортПоХарактеристикамУпр(НаДату+1, СсылкаКорректировки);
			СписаниеИзлишковУпр(НаДату+2, СсылкаКорректировки);
			ДооприходованиеНедостачУпр(НаДату+3, СсылкаКорректировки);
			
			ПеремещениеПартийПереданные(НаДату, СсылкаКорректировки);
			ПересортПоХарактеристикамПереданные(НаДату+1, СсылкаКорректировки);
			СписаниеИзлишковПереданные(НаДату+2, СсылкаКорректировки);
			ПриходованиеНедостачПереданные(НаДату+3, СсылкаКорректировки);
			
		Иначе
			Если ЗначениеЗаполнено(ВыравниватьНаДату) Тогда
				НаДату = ВыравниватьНаДату;
			Иначе
				НаДату = 0;
			КонецЕсли;
			СсылкаКорректировки = 0;
			ПеремещениеПартийУпр(НаДату, СсылкаКорректировки);
			ПересортПоХарактеристикамУпр(НаДату+1, СсылкаКорректировки);
			СписаниеИзлишковУпр(НаДату+2, СсылкаКорректировки);
			ДооприходованиеНедостачУпр(НаДату+3, СсылкаКорректировки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьНеправильныеПартии(Нехватка, Итоги, НаДату)
	
	ДатаВЗапрос = ?(ТипЗнч(НаДату) = Тип("Число"), "", "(&Дата,)");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ПартииТоваровНаСкладахОстатки.Номенклатура
		|		ИНАЧЕ НеправильныеПартии.Номенклатура1
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры) = ТИП(Справочник.ХарактеристикиНоменклатуры)
		|			ТОГДА ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры
		|		ИНАЧЕ НеправильныеПартии.ХарактеристикаНоменклатуры1
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстатки.Склад) = ТИП(Справочник.Склады)
		|			ТОГДА ПартииТоваровНаСкладахОстатки.Склад
		|		ИНАЧЕ НеправильныеПартии.Склад1
		|	КОНЕЦ КАК Склад,
		|	ПартииТоваровНаСкладахОстатки.ДокументОприходования,
		|	ПартииТоваровНаСкладахОстатки.СтатусПартии,
		|	ПартииТоваровНаСкладахОстатки.Качество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстатки.КоличествоОстаток) = ТИП(ЧИСЛО)
		|			ТОГДА ПартииТоваровНаСкладахОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток) = ТИП(ЧИСЛО)
		|			ТОГДА ПартииТоваровНаСкладахОстатки.СтоимостьОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Стоимость,
		|	НеправильныеПартии.ОстатокТовара,
		|	НеправильныеПартии.Недостача
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПолноеСоединениеРавно.Склад КАК Склад,
		|		ПолноеСоединениеРавно.КоличествоОстаток КАК КоличествоОстаток,
		|		ПолноеСоединениеРавно.Номенклатура КАК Номенклатура,
		|		ПолноеСоединениеРавно.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ПолноеСоединениеРавно.ОстатокТовара КАК ОстатокТовара,
		|		ПолноеСоединениеРавно.Недостача КАК Недостача,
		|		ПолноеСоединениеРавно.Склад1 КАК Склад1,
		|		ПолноеСоединениеРавно.Номенклатура1 КАК Номенклатура1,
		|		ПолноеСоединениеРавно.ХарактеристикаНоменклатуры1 КАК ХарактеристикаНоменклатуры1
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Партии.Склад КАК Склад,
		|			Партии.КоличествоОстаток КАК КоличествоОстаток,
		|			Партии.Номенклатура КАК Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ОстаткиСгруппированные.КоличествоОстаток КАК ОстатокТовара,
		|			ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) = ТИП(ЧИСЛО)
		|						И ТИПЗНАЧЕНИЯ(Партии.КоличествоОстаток) = ТИП(ЧИСЛО)
		|					ТОГДА ОстаткиСгруппированные.КоличествоОстаток - Партии.КоличествоОстаток
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) <> ТИП(ЧИСЛО)
		|							ТОГДА -Партии.КоличествоОстаток
		|						ИНАЧЕ ОстаткиСгруппированные.КоличествоОстаток
		|					КОНЕЦ
		|			КОНЕЦ КАК Недостача,
		|			ОстаткиСгруппированные.Склад КАК Склад1,
		|			ОстаткиСгруппированные.Номенклатура КАК Номенклатура1,
		|			ОстаткиСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры1
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОстаткиНеСгруппированные.Склад КАК Склад,
		|				ОстаткиНеСгруппированные.Номенклатура КАК Номенклатура,
		|				ОстаткиНеСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				СУММА(ОстаткиНеСгруппированные.КоличествоОстаток) КАК КоличествоОстаток
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ТоварыНаСкладахОстатки.Склад КАК Склад,
		|					ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|					ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыНаСкладах.Остатки"+ДатаВЗапрос+" КАК ТоварыНаСкладахОстатки
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					ТоварыВНТТОстатки.Склад,
		|					ТоварыВНТТОстатки.Номенклатура,
		|					ТоварыВНТТОстатки.ХарактеристикаНоменклатуры,
		|					ТоварыВНТТОстатки.КоличествоОстаток
		|				ИЗ
		|					РегистрНакопления.ТоварыВНТТ.Остатки"+ДатаВЗапрос+" КАК ТоварыВНТТОстатки) КАК ОстаткиНеСгруппированные
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ОстаткиНеСгруппированные.Склад,
		|				ОстаткиНеСгруппированные.Номенклатура,
		|				ОстаткиНеСгруппированные.ХарактеристикаНоменклатуры) КАК ОстаткиСгруппированные
		|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|					ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					СУММА(ПартииТоваровНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|					ПартииТоваровНаСкладахОстатки.Склад КАК Склад
		|				ИЗ
		|					РегистрНакопления.ПартииТоваровНаСкладах.Остатки"+ДатаВЗапрос+" КАК ПартииТоваровНаСкладахОстатки
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ПартииТоваровНаСкладахОстатки.Склад,
		|					ПартииТоваровНаСкладахОстатки.Номенклатура,
		|					ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры) КАК Партии
		|				ПО ОстаткиСгруппированные.Склад = Партии.Склад
		|					И ОстаткиСгруппированные.Номенклатура = Партии.Номенклатура
		|					И ОстаткиСгруппированные.ХарактеристикаНоменклатуры = Партии.ХарактеристикаНоменклатуры
		|		ГДЕ
		|			(ОстаткиСгруппированные.КоличествоОстаток >= 0
		|					ИЛИ ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) <> ТИП(ЧИСЛО))) КАК ПолноеСоединениеРавно
		|	ГДЕ
		|		ПолноеСоединениеРавно.Недостача "+?(Нехватка = 1, ">",?(Нехватка = -1, "<", "<>"))+" 0) КАК НеправильныеПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки"+ДатаВЗапрос+" КАК ПартииТоваровНаСкладахОстатки
		|		ПО НеправильныеПартии.Номенклатура = ПартииТоваровНаСкладахОстатки.Номенклатура
		|			И НеправильныеПартии.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры
		|			И НеправильныеПартии.Склад = ПартииТоваровНаСкладахОстатки.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Склад,
		|   ПартииТоваровНаСкладахОстатки.ДокументОприходования.Дата";
		Если Итоги Тогда
			Запрос.Текст = Запрос.Текст+"
		|ИТОГИ
		|	СУММА(Количество),
		|	СРЕДНЕЕ(ОстатокТовара)                                          
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Склад";
		КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();       
	                            
	Возврат РезультатЗапроса; 
	     
КонецФункции         

Функция ПолучитьСтруктуруТаблицыУпр(Переданные)
	
СтруктураТаблицы = Новый ТаблицаЗначений;
СтруктураТаблицы.Колонки.Добавить("ВидДвижения");
СтруктураТаблицы.Колонки.Добавить("Период");
СтруктураТаблицы.Колонки.Добавить("Номенклатура");
СтруктураТаблицы.Колонки.Добавить(?(Не Переданные,"Склад", "ДоговорКонтрагента"));
СтруктураТаблицы.Колонки.Добавить("ХарактеристикаНоменклатуры");
СтруктураТаблицы.Колонки.Добавить("СериНоменклатуры");
СтруктураТаблицы.Колонки.Добавить("ДокументОприходования");
Если Переданные Тогда
     СтруктураТаблицы.Колонки.Добавить("ДокументПередачи");
	 СтруктураТаблицы.Колонки.Добавить("СтатусПередачи");
КонецЕсли;
СтруктураТаблицы.Колонки.Добавить("СтатусПартии");
СтруктураТаблицы.Колонки.Добавить("Заказ");
СтруктураТаблицы.Колонки.Добавить("Качество");
СтруктураТаблицы.Колонки.Добавить("Количество");
СтруктураТаблицы.Колонки.Добавить("Стоимость");
СтруктураТаблицы.Колонки.Добавить("КодОперации");
СтруктураТаблицы.Колонки.Добавить("СписаниеПартий");
СтруктураТаблицы.Колонки.Добавить("ДокументДвижения");
СтруктураТаблицы.Колонки.Добавить("ДокументДвиженияПериод");

Возврат СтруктураТаблицы;

КонецФункции

Функция ВернутьЦенуТовараИзДокОприходования(ПараметрыОтбора)

	НаименованиеТаблицы = ПараметрыОтбора.ДокументОприходования.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПрихода.Цена КАК Цена,
		|	ДокументПрихода.Ссылка.Дата КАК Дата
		|ИЗ
		|	Документ."+НаименованиеТаблицы+".Товары КАК ДокументПрихода
		|ГДЕ
		|	ДокументПрихода.Номенклатура = &Номенклатура";
		Если ПараметрыОтбора.Номенклатура.ВестиУчетПоХарактеристикам Тогда
		Запрос.Текст = Запрос.Текст+"
		|	И ДокументПрихода.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
		КонецЕсли;
	    Запрос.Текст= Запрос.Текст+"
		|	И ДокументПрихода.Цена <> 0
		|	И ДокументПрихода.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("Номенклатура", ПараметрыОтбора.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ПараметрыОтбора.ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", ПараметрыОтбора.ДокументОприходования);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЦенаНоменклатуры = 0;
	Пока Выборка.Следующий() Цикл
		ЦенаНоменклатуры = Выборка.Цена;
		Если ЦенаНоменклатуры <> 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЦенаНоменклатуры;
	
КонецФункции

Функция ПолучитьДанныеОприходования(НаДату, СтруктураОтбора)

	БезХарактеристики = Ложь;
	Если Не СтруктураОтбора.Номенклатура.ВестиУчетПоХарактеристикам ИЛИ
		    СтруктураОтбора.ХарактеристикаНоменклатуры = 0 Тогда
			БезХарактеристики = Истина;
	КонецЕсли;
		
	ДатаВЗапрос = ?(ТипЗнч(НаДату) =Тип("Число"), "","&Дата");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартииТоваровНаСкладахОстаткиИОбороты.Номенклатура,
		|	ПартииТоваровНаСкладахОстаткиИОбороты.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладахОстаткиИОбороты.ДокументОприходования,
		|	ПартииТоваровНаСкладахОстаткиИОбороты.СтатусПартии,
		|	ПартииТоваровНаСкладахОстаткиИОбороты.Качество,
		|	ДокПрихода.Цена
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(
		|			,
		|			"+ДатаВЗапрос+",
		|			Регистратор,
		|			,
		|			Номенклатура = &Номенклатура
		|				"+?(БезХарактеристики, "", "И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+") КАК ПартииТоваровНаСкладахОстаткиИОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
		|			ПоступлениеТоваровУслугТовары.Цена КАК Цена
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ГДЕ
		|			ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
		|			"+?(БезХарактеристики, "", "И ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+"
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ОприходованиеТоваровТовары.Ссылка,
		|			ОприходованиеТоваровТовары.Цена
		|		ИЗ
		|			Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
		|		ГДЕ
		|			ОприходованиеТоваровТовары.Номенклатура = &Номенклатура
		|			"+?(БезХарактеристики, "", "И ОприходованиеТоваровТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+") КАК ДокПрихода
		|		ПО ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор = ДокПрихода.Ссылка
		|ГДЕ
		|	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор = ПартииТоваровНаСкладахОстаткиИОбороты.ДокументОприходования
		|	И ДокПрихода.Цена > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартииТоваровНаСкладахОстаткиИОбороты.Регистратор.Дата УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", СтруктураОтбора.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтруктураОтбора.ХарактеристикаНоменклатуры);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка;
	
	
	
КонецФункции

Процедура ДляПартийУправленческогоУчетаПриИзменении(Элемент)
	Если ДляПартийУправленческогоУчета Тогда
		ЭлементыФормы.ТоварыПереданные.Доступность = Истина;
	Иначе
		ТоварыПереданные = Ложь;
		ЭлементыФормы.ТоварыПереданные.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	Если Не ДляПартийУправленческогоУчета Тогда
		ЭлементыФормы.ТоварыПереданные.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, ТекстКомментария, ИмяРегистраПартий)
	
	Если ТипЗнч(СсылкаКорректировки) <> Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
		Если ТаблицаЗаписей.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		КорректировкаРегистров = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		СтрокаТаблицаРегистров = КорректировкаРегистров.ТаблицаРегистровНакопления.Добавить();
		СтрокаТаблицаРегистров.Имя = ИмяРегистраПартий;
		КорректировкаРегистров.Комментарий = ТекстКомментария;
		КорректировкаРегистров.Ответственный = ПараметрыСеанса.ТекущийПользователь.Ссылка;
		КорректировкаРегистров.Дата = ?(ЗначениеЗаполнено(ВыравниватьНаДату),ВыравниватьНаДату, ТекущаяДата());
		Сообщить("Создан новый "+КорректировкаРегистров);
	Иначе
		КорректировкаРегистров = СсылкаКорректировки.ПолучитьОбъект();
		КорректировкаРегистров.Движения.Найти(ИмяРегистраПартий).Очистить();
		Сообщить("Перезаписан "+КорректировкаРегистров);
	КонецЕсли;

	//Заполним Период во всей таблице будущих движений текущим моментом, т.е. датой документа
    ТаблицаЗаписей.ЗаполнитьЗначения(КорректировкаРегистров.Дата, "Период");
	
	Для Каждого СтрокаЗаписей Из ТаблицаЗаписей Цикл
		ЗаписьВРегистр = КорректировкаРегистров.Движения.Найти(ИмяРегистраПартий).Добавить();
	    ЗаполнитьЗначенияСвойств(ЗаписьВРегистр, СтрокаЗаписей);
	КонецЦикла;
	КорректировкаРегистров.Записать();
		
КонецПроцедуры

Функция ВыбратьНеправильныеПартииУпрПереданные(Нехватка, Итоги, НаДату)
	
	ДатаВЗапрос = ?(ТипЗнч(НаДату) = Тип("Число"), "", "(&Дата,)");
	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.Текст =" 
		| ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.ДокументОприходования,
		|	ВложенныйЗапрос.ДокументПередачи,
		|	ВложенныйЗапрос.СтатусПартии,
		|	ВложенныйЗапрос.СтатусПередачи,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Стоимость,
		|	ВложенныйЗапрос.ОстатокТовара,
		|	ВложенныйЗапрос.Недостача,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец
		|  ИЗ
		|	(ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.Номенклатура) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ПартииТоваровПереданныеОстатки.Номенклатура
		|		ИНАЧЕ НеправильныеПартии.Номенклатура1
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры) = ТИП(Справочник.ХарактеристикиНоменклатуры)
		|			ТОГДА ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры
		|		ИНАЧЕ НеправильныеПартии.ХарактеристикаНоменклатуры1
		|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
		|	ПартииТоваровПереданныеОстатки.ДокументОприходования,
		|   ПартииТоваровПереданныеОстатки.ДокументПередачи,
		|	ПартииТоваровПереданныеОстатки.СтатусПартии,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.СтатусПередачи) = ТИП(Перечисление.СтатусыПолученияПередачиТоваров)
		|			ТОГДА ПартииТоваровПереданныеОстатки.СтатусПередачи
		|		ИНАЧЕ Значение(Перечисление.СтатусыПолученияПередачиТоваров.НаКомиссию)
		|	КОНЕЦ КАК СтатусПередачи,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.КоличествоОстаток) = ТИП(ЧИСЛО)
		|			ТОГДА ПартииТоваровПереданныеОстатки.КоличествоОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.СтоимостьОстаток) = ТИП(ЧИСЛО)
		|			ТОГДА ПартииТоваровПереданныеОстатки.СтоимостьОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Стоимость,
		|	НеправильныеПартии.ОстатокТовара,
		|	НеправильныеПартии.Недостача КАК Недостача,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ПартииТоваровПереданныеОстатки.ДоговорКонтрагента) = ТИП(Справочник.ДоговорыКонтрагентов)
		|			ТОГДА ПартииТоваровПереданныеОстатки.ДоговорКонтрагента
		|		ИНАЧЕ НеправильныеПартии.ДоговорКонтрагента1
		|	КОНЕЦ КАК ДоговорКонтрагента
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПолноеСоединениеРавно.КоличествоОстаток КАК КоличествоОстаток,
		|		ПолноеСоединениеРавно.Номенклатура КАК Номенклатура,
		|		ПолноеСоединениеРавно.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ПолноеСоединениеРавно.ОстатокТовара КАК ОстатокТовара,
		|		ПолноеСоединениеРавно.Недостача КАК Недостача,
		|		ПолноеСоединениеРавно.Номенклатура1 КАК Номенклатура1,
		|		ПолноеСоединениеРавно.ХарактеристикаНоменклатуры1 КАК ХарактеристикаНоменклатуры1,
		|		ПолноеСоединениеРавно.ДоговорКонтрагента1 КАК ДоговорКонтрагента1,
		|		ПолноеСоединениеРавно.ДоговорКонтрагента КАК ДоговорКонтрагента
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Партии.КоличествоОстаток КАК КоличествоОстаток,
		|			Партии.Номенклатура КАК Номенклатура,
		|			Партии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			Партии.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			ОстаткиСгруппированные.КоличествоОстаток КАК ОстатокТовара,
		|			ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) = ТИП(ЧИСЛО)
		|						И ТИПЗНАЧЕНИЯ(Партии.КоличествоОстаток) = ТИП(ЧИСЛО)
		|					ТОГДА ОстаткиСгруппированные.КоличествоОстаток - Партии.КоличествоОстаток
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) <> ТИП(ЧИСЛО)
		|							ТОГДА -Партии.КоличествоОстаток
		|						ИНАЧЕ ОстаткиСгруппированные.КоличествоОстаток
		|					КОНЕЦ
		|			КОНЕЦ КАК Недостача,
		|			ОстаткиСгруппированные.Номенклатура КАК Номенклатура1,
		|			ОстаткиСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры1,
		|			ОстаткиСгруппированные.ДоговорКонтрагента КАК ДоговорКонтрагента1
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ОстаткиНеСгруппированные.Номенклатура КАК Номенклатура,
		|				ОстаткиНеСгруппированные.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				СУММА(ОстаткиНеСгруппированные.КоличествоОстаток) КАК КоличествоОстаток,
		|				ОстаткиНеСгруппированные.ДоговорКонтрагента КАК ДоговорКонтрагента
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ТоварыПереданныеОстатки.Номенклатура КАК Номенклатура,
		|					ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ТоварыПереданныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|					ТоварыПереданныеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента
		|				ИЗ
		|					РегистрНакопления.ТоварыПереданные.Остатки"+ДатаВЗапрос+" КАК ТоварыПереданныеОстатки) КАК ОстаткиНеСгруппированные
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ОстаткиНеСгруппированные.Номенклатура,
		|				ОстаткиНеСгруппированные.ХарактеристикаНоменклатуры,
		|				ОстаткиНеСгруппированные.ДоговорКонтрагента) КАК ОстаткиСгруппированные
		|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПартииТоваровПереданныеОстатки.Номенклатура КАК Номенклатура,
		|					ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					СУММА(ПартииТоваровПереданныеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|					ПартииТоваровПереданныеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента
		|				ИЗ
		|					РегистрНакопления.ПартииТоваровПереданные.Остатки"+ДатаВЗапрос+" КАК ПартииТоваровПереданныеОстатки
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ПартииТоваровПереданныеОстатки.Номенклатура,
		|					ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры,
		|					ПартииТоваровПереданныеОстатки.ДоговорКонтрагента) КАК Партии
		|				ПО ОстаткиСгруппированные.Номенклатура = Партии.Номенклатура
		|					И ОстаткиСгруппированные.ХарактеристикаНоменклатуры = Партии.ХарактеристикаНоменклатуры
		|					И ОстаткиСгруппированные.ДоговорКонтрагента = Партии.ДоговорКонтрагента
		|		ГДЕ
		|			(ОстаткиСгруппированные.КоличествоОстаток >= 0
		|					ИЛИ ТИПЗНАЧЕНИЯ(ОстаткиСгруппированные.КоличествоОстаток) <> ТИП(ЧИСЛО))) КАК ПолноеСоединениеРавно
		|	ГДЕ
		|		ПолноеСоединениеРавно.Недостача "+?(Нехватка = 1, ">",?(Нехватка = -1, "<", "<>"))+" 0) КАК НеправильныеПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные.Остатки"+ДатаВЗапрос+" КАК ПартииТоваровПереданныеОстатки
		|		ПО НеправильныеПартии.Номенклатура = ПартииТоваровПереданныеОстатки.Номенклатура
		|			И НеправильныеПартии.ХарактеристикаНоменклатуры = ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры
		|           И НеправильныеПартии.ДоговорКонтрагента = ПартииТоваровПереданныеОстатки.ДоговорКонтрагента) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|   ДоговорКонтрагентаВладелец,
		|   ДокументОприходования.Дата";
		Если Итоги Тогда
			Запрос.Текст = Запрос.Текст+"
		|ИТОГИ
		|	СУММА(Количество),
		|	СРЕДНЕЕ(ОстатокТовара)                                          
		|ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	Склад";
		КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();       
	                            
	Возврат РезультатЗапроса; 
	                                  
КонецФункции                              

Функция ПолучитьПартииПереданные(СтруктураОтбора)
	
	БезХарактеристики = Ложь;
	
	Если НЕ СтруктураОтбора.Номенклатура.ВестиУчетПоХарактеристикам ИЛИ
			ТипЗнч(СтруктураОтбора.ХарактеристикаНоменклатуры) <> ТИП("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			БезХарактеристики = Истина;
	КонецЕсли;
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|    ВложенныйЗапрос.Номенклатура,
		|    ВложенныйЗапрос.ДоговорКонтрагента,
		|    ВложенныйЗапрос.Регистратор,
		|    ВложенныйЗапрос.ДокументОприходования,
		|    ВложенныйЗапрос.Цена,
		|	 ВложенныйЗапрос.ТипРегистратора,
		|    ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|    ВложенныйЗапрос.ДокументПередачи,
		|    ВложенныйЗапрос.СтатусПередачи,
		|    ВложенныйЗапрос.СтатусПартии
		|
		|ИЗ
		|
		|   (ВЫБРАТЬ 
		|	ПартииТоваровПереданные.Номенклатура,
		|   ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
		|	ПартииТоваровПереданные.ДоговорКонтрагента,
		|	ПартииТоваровПереданные.Регистратор,
		|	ПартииТоваровПереданные.ДокументОприходования,
		|   ПартииТоваровПереданные.ДокументПередачи,
		|   ПартииТоваровПереданные.СтатусПередачи,
		|   ПартииТоваровПереданные.СтатусПартии,
		|	Выбор Когда ПартииТоваровПереданные.Количество = 0 Тогда 0 Иначе ПартииТоваровПереданные.Стоимость/ПартииТоваровПереданные.Количество Конец КАК Цена, 
		|   ВЫБОР Когда ТипЗначения(ПартииТоваровПереданные.Регистратор) = Тип(Документ.РеализацияТоваровУслуг) 
		|           Тогда ""Реализация""
		|        Иначе  Выбор Когда ТипЗначения(ПартииТоваровПереданные.Регистратор) = Тип(Документ.ОтчетКомиссионераОПродажах)  
		|                    Тогда  ""Отчет""
		|                     Иначе Выбор Когда ТипЗначения(ПартииТоваровПереданные.Регистратор) = Тип(Документ.ВозвратТоваровОтПокупателя)                   
		|                             Тогда ""Возврат""
		|                             Иначе 0
		|                               Конец
		|                     Конец
		|    Конец Как ТипРегистратора
		|
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|			РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		//|			РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		//|			РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//|			РеализацияТоваровУслугТовары.Цена КАК Цена
		//|		ИЗ
		//|			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		//|		ГДЕ
		//|			РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
		//|			"+?(БезХарактеристики, "","И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+"
		//|		
		//|		ОБЪЕДИНИТЬ ВСЕ
		//|		
		//|		ВЫБРАТЬ
		//|			ОтчетКомиссионераОПродажахТовары.Ссылка,
		//|			ОтчетКомиссионераОПродажахТовары.Номенклатура,
		//|			ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры,
		//|			ОтчетКомиссионераОПродажахТовары.Цена Как Цена
		//|		ИЗ
		//|			Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
		//|		ГДЕ
		//|			ОтчетКомиссионераОПродажахТовары.Номенклатура = &Номенклатура
		//|			"+?(БезХарактеристики, "","И ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+"
		//|		
		//|		ОБЪЕДИНИТЬ ВСЕ
		//|
		//|		ВЫБРАТЬ
		//|			ВозвратТоваровОтПокупателя.Ссылка,
		//|			ВозвратТоваровОтПокупателя.Номенклатура,
		//|			ВозвратТоваровОтПокупателя.ХарактеристикаНоменклатуры,
		//|			ВозвратТоваровОтПокупателя.Цена Как Цена
		//|		ИЗ
		//|			Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателя
		//|		ГДЕ
		//|			ВозвратТоваровОтПокупателя.Номенклатура = &Номенклатура
		//|			"+?(БезХарактеристики, "","И ВозвратТоваровОтПокупателя.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+") КАК Регистраторы
		//|
		//| ПО ПартииТоваровПереданные.Регистратор = Регистраторы.Ссылка
		//|			И ПартииТоваровПереданные.Номенклатура = Регистраторы.Номенклатура
		//|			И ПартииТоваровПереданные.ХарактеристикаНоменклатуры = Регистраторы.ХарактеристикаНоменклатуры
		|  ГДЕ 
		|     ПартииТоваровПереданные.Номенклатура = &Номенклатура
		|     "+?(БезХарактеристики, "","И ПартииТоваровПереданные.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры")+") КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Цена > 0";
		Если ТипЗнч(СтруктураОтбора.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Запрос.Текст=Запрос.Текст+"
		|	И ВложенныйЗапрос.ДоговорКонтрагента = &ДоговорКонтрагента";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураОтбора.ДоговорКонтрагента);
		КонецЕсли;
		Если ТипЗнч(СтруктураОтбора.ТипРегистратора) = Тип("СписокЗначений") Тогда
				Запрос.Текст = Запрос.Текст+"
			| И	ВложенныйЗапрос.ТипРегистратора В (&ТипРегистратора)";
			Запрос.УстановитьПараметр("ТипРегистратора", СтруктураОтбора.ТипРегистратора);
		КонецЕсли;
		Запрос.Текст=Запрос.Текст+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Регистратор.Дата УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", СтруктураОтбора.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтруктураОтбора.ХарактеристикаНоменклатуры);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();

	Возврат Выборка;
	
	
КонецФункции

Процедура ОсновныеДействияФормыСписатьСуммыПереданных(Кнопка)

	
	
КонецПроцедуры

Функция НайтиКорректировку()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаЗаписейРегистров.Ссылка,
		|	КорректировкаЗаписейРегистров.Комментарий,
		|	КорректировкаЗаписейРегистров.Дата
		|ИЗ
		|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
		|ГДЕ
		|	КорректировкаЗаписейРегистров.Дата = &Дата";

	Запрос.УстановитьПараметр("Дата", ДатаКорректировок);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Возврат Выборка;
	
КонецФункции

Процедура ОсновныеДействияФормыПерепровестиРегистраторы(Кнопка)

	
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодРегистраторов, ?(КонПериодРегистраторов='0001-01-01', КонПериодРегистраторов, КонецДня(КонПериодРегистраторов)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодРегистраторов = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодРегистраторов = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры


Функция ПолучитьКорректировкиЗаПериод()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаЗаписейРегистров.Ссылка,
		|	КорректировкаЗаписейРегистров.Комментарий,
		|	КорректировкаЗаписейРегистров.Дата КАК Дата
		|ИЗ
		|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
		|ГДЕ
		|	КорректировкаЗаписейРегистров.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Возврат Выборка;
	
	
КонецФункции


Процедура ПеремещениеПартийУпр(НаДату, СсылкаКорректировки)
	
	Если ВыполнятьПеремещениеПартийПоСкладам Тогда
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Ложь);
		//Выберем некорректныепартии
		ВыборкаПартийНехватка = ВыбратьНеправильныеПартии(1, Ложь, НаДату).Выбрать(ОбходРезультатаЗапроса.Прямой);
		ТаблицаПартийИзлишек = ВыбратьНеправильныеПартии(-1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		//Попробуем переместить остатки партий между складами в полученной таблице
		ПредыдущийСклад = 1;
		ПредыдущаяНоменклатура = 1;
		ПредыдущаяХарактеристика= 1;
		Пока ВыборкаПартийНехватка.Следующий() Цикл
			Если ВыборкаПартийНехватка.Склад = ПредыдущийСклад И
				ВыборкаПартийНехватка.Номенклатура = ПредыдущаяНоменклатура И
				ВыборкаПартийНехватка.ХарактеристикаНоменклатуры  = ПредыдущаяХарактеристика Тогда
				Продолжить;
			КонецЕсли;
			
			
			ПрямаяВыборкаПартий = ВыборкаПартийНехватка;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура",ВыборкаПартийНехватка.Номенклатура);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",ВыборкаПартийНехватка.ХарактеристикаНоменклатуры);
			
			ПартииИзлишков = ТаблицаПартийИзлишек.НайтиСтроки(СтруктураОтбора);
			УжеСписано = 0;
			Для Каждого Партия Из ПартииИзлишков Цикл
				
				//перемещать партии с отрицательным остатком не будем
				Если Партия.Количество <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если УжеСписано = ПрямаяВыборкаПартий.Недостача Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаРасход = ТаблицаЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасход, Партия);
				СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				СтрокаРасход.СписаниеПартий = Истина;
				
				СтрокаПриход = ТаблицаЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПриход, Партия);
				СтрокаПриход.Склад = ПрямаяВыборкаПартий.Склад;
				СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				Если Партия.Количество  = ПрямаяВыборкаПартий.Недостача Тогда
					УжеСписано = Партия.Количество; 
				ИначеЕсли Партия.Количество > ПрямаяВыборкаПартий.Недостача 
					//И  ПрямаяВыборкаПартий.Количество <> 0 
					Тогда
					СтрокаРасход.Количество = ПрямаяВыборкаПартий.Недостача;
					СтрокаРасход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
					
					СтрокаПриход.Количество = ПрямаяВыборкаПартий.Недостача;
					СтрокаПриход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
					УжеСписано = ПрямаяВыборкаПартий.Недостача;
				Иначе
					УжеСписано = УжеСписано+Партия.Количество;
				КонецЕсли;
				
			КонецЦикла;
			
			ПредыдущийСклад = ВыборкаПартийНехватка.Склад;
			ПредыдущаяНоменклатура = ВыборкаПартийНехватка.Номенклатура;
			ПредыдущаяХарактеристика = ВыборкаПартийНехватка.ХарактеристикаНоменклатуры;
		КонецЦикла;
		
		//ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Перемещение партий", "ПартииТоваровНаСкладах");
	КонецЕсли;
	
	

	
	
КонецПроцедуры

Процедура ПересортПоХарактеристикамУпр(НаДату, СсылкаКорректировки)
	
			Если ВыполнятьПересортПоХарактеристикам Тогда 
				
				//Теперь будем списывать и приходовать только в разрезе номенклатуры, игнорируем характеристику
				ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Ложь);
				//Выберем некорректныепартии
				ВыборкаПартийНехватка = ВыбратьНеправильныеПартии(1, Ложь, НаДату).Выбрать(ОбходРезультатаЗапроса.Прямой);
				ТаблицаПартийИзлишек = ВыбратьНеправильныеПартии(-1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
				//Попробуем переместить остатки партий между складами в полученной таблице
				ПредыдущийСклад = 1;
				ПредыдущаяНоменклатура = 1;
				ПредыдущаяХарактеристика= 1;
				Пока ВыборкаПартийНехватка.Следующий() Цикл
					Если ВыборкаПартийНехватка.Склад = ПредыдущийСклад И
						ВыборкаПартийНехватка.Номенклатура = ПредыдущаяНоменклатура И
						ВыборкаПартийНехватка.ХарактеристикаНоменклатуры  = ПредыдущаяХарактеристика Тогда
						Продолжить;
					КонецЕсли;
					
					
					ПрямаяВыборкаПартий = ВыборкаПартийНехватка;
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",ВыборкаПартийНехватка.Номенклатура);
					
					ПартииИзлишков = ТаблицаПартийИзлишек.НайтиСтроки(СтруктураОтбора);
					УжеСписано = 0;
					Для Каждого Партия Из ПартииИзлишков Цикл
						
						//перемещать партии с отрицательным остатком и равные нулю не будем, тупо это
						Если Партия.Количество <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если УжеСписано = ПрямаяВыборкаПартий.Недостача Тогда
							Прервать;
						КонецЕсли;
						
						СтрокаРасход = ТаблицаЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРасход, Партия);
						СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
						СтрокаРасход.СписаниеПартий = Истина;
						
						СтрокаПриход = ТаблицаЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПриход, Партия);
						СтрокаПриход.Склад = ПрямаяВыборкаПартий.Склад;
						СтрокаПриход.ХарактеристикаНоменклатуры = ПрямаяВыборкаПартий.ХарактеристикаНоменклатуры;
						СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
						
						Если Партия.Количество  = ПрямаяВыборкаПартий.Недостача Тогда
							УжеСписано = Партия.Количество; 
						ИначеЕсли Партия.Количество > ПрямаяВыборкаПартий.Недостача 
							//И  ПрямаяВыборкаПартий.Количество <> 0 
							Тогда
							СтрокаРасход.Количество = ПрямаяВыборкаПартий.Недостача;
							//11-10-2011
							СтрокаРасход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
							
							СтрокаПриход.Количество = ПрямаяВыборкаПартий.Недостача;
							//11-10-2011
							СтрокаПриход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
							УжеСписано = ПрямаяВыборкаПартий.Недостача;
						Иначе
							УжеСписано = УжеСписано+Партия.Количество;
						КонецЕсли;
						
					КонецЦикла;
					
					ПредыдущийСклад = ВыборкаПартийНехватка.Склад;
					ПредыдущаяНоменклатура = ВыборкаПартийНехватка.Номенклатура;
					ПредыдущаяХарактеристика = ВыборкаПартийНехватка.ХарактеристикаНоменклатуры;
				КонецЦикла;
				
				//ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
				//Создадим документ корректировка регистров
				СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Пересорт по характеристикам", "ПартииТоваровНаСкладах");
				
				
			КонецЕсли;
	
	
	
КонецПроцедуры
	                                           
Процедура СписаниеИзлишковУпр(НаДату, ССылкаКорректировки)
	Если ВыполнятьСписаниеИзлишков Тогда
		
		//А теперь просто спишем лишнее;
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Ложь);
		ТаблицаПартийИзлишек = ВыбратьНеправильныеПартии(-1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ПредыдущаяИтерацияСклад = 1;
		ПредыдущаяИтерацияНомен = 1;
		ПредыдущаяИтерацияХарак = 1;
		ОсталосьСписать = 0;
		УжеПроверили = Ложь;
		Для Каждого Партия Из ТаблицаПартийИзлишек Цикл
			
			Если Партия.Недостача < 0 Тогда
				Партия.Недостача = -Партия.Недостача;
			КонецЕсли;
			
			Если ПредыдущаяИтерацияСклад = Партия.Склад И 
				 ПредыдущаяИтерацияНомен = Партия.Номенклатура И 
				 ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры Тогда 
			 Иначе
		       	 ОсталосьСписать = Партия.Недостача;
				 УжеПроверили = Ложь;
			 КонецЕсли;
			 Если ОсталосьСписать = 0  Тогда
				 Продолжить;
			 КонецЕсли;
			 //Проверим группу партий на признак наличия только партий возврата
			 //попытаемся не списывать с возвратных партий
			 Если Не УжеПроверили Тогда
			 КоличествоНеИзВозвратов = 0;
			 СтруктураОтбора = Новый Структура;
			 СтруктураОтбора.Вставить("Склад", Партия.Склад);
			 СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
			 СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",Партия.ХарактеристикаНоменклатуры);
			 НайденныеПартии = ТаблицаПартийИзлишек.НайтиСтроки(СтруктураОтбора);
			 Для Каждого ИскомаяПартия Из НайденныеПартии Цикл
				 Если ТипЗнч(ИскомаяПартия.ДокументОприходования)  = ТИП("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
						 ТипЗнч(ИскомаяПартия.ДокументОприходования) = ТИП("ДокументСсылка.ОприходованиеТоваров")  Тогда
					 КоличествоНеИзВозвратов = КоличествоНеИзВозвратов+?(ИскомаяПартия.Количество<0,-ИскомаяПартия.Количество, ИскомаяПартия.Количество);
				 КонецЕсли;
			 КонецЦикла;
			 УжеПроверили = Истина;
			 КонецЕсли;
			 
			 Если КоличествоНеИзВозвратов >=Партия.Недостача И
				 	ТипЗнч(Партия.ДокументОприходования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					ПредыдущаяИтерацияСклад = Партия.Склад;
					ПредыдущаяИтерацияНомен = Партия.Номенклатура;  
					ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры;
					Продолжить;
			КонецЕсли;
				
			 
			СтрокаРасхода = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, Партия);
			Если Партия.Количество >= ОсталосьСписать Тогда
				СтрокаРасхода.Количество = ОсталосьСписать;
			Иначе
				СтрокаРасхода.Количество = Партия.Количество;	
			КонецЕсли;
			ОсталосьСписать = ОсталосьСписать - СтрокаРасхода.Количество; 
			Если Партия.Количество <= 0 И Партия.Стоимость <=0 Тогда
				СтрокаРасхода.ВидДвижения = ВидДвиженияНакопления.Приход;
			Иначе
				СтрокаРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
				СтрокаРасхода.СписаниеПартий = Истина;
			КонецЕсли;
			
			//11-10-2011
			СтрокаРасхода.Стоимость = ?(Партия.Количество = 0, Партия.Стоимость, СтрокаРасхода.Количество*(Партия.Стоимость/Партия.Количество));
			//
			ПредыдущаяИтерацияСклад = Партия.Склад;
			ПредыдущаяИтерацияНомен = Партия.Номенклатура;  
			ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры;
		КонецЦикла;                              
	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Списание излишков", "ПартииТоваровНаСкладах");
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ДооприходованиеНедостачУпр(НаДату, СсылкаКорректировки)
	
	
	Если ВыполнятьДооприходованиеНедостач Тогда	
		
		
		//Теперь дооприходуем недостатки в партиях первой попавшейся партией своей
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Ложь);
		ТаблицаПартийНедостача = ВыбратьНеправильныеПартии(1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		//ТаблицаПартий = ВыбратьНеправильныеПартии(0, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ПредыдущаяИтерацияСклад = 1;
		ПредыдущаяИтерацияНомен = 1;
		ПредыдущаяИтерацияХарак = 1;                                        
		Для Каждого Партия Из ТаблицаПартийНедостача Цикл
			Если ПредыдущаяИтерацияСклад = Партия.Склад И 
				 ПредыдущаяИтерацияНомен = Партия.Номенклатура И 
				 ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры  Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаПрихода = ТаблицаЗаписей.Добавить();
			УжеДооприходовали = Ложь;
			//Попробуем не приходовать на основании пустоты, будем искать реальные партии и догружать в них
			//И будем искать последние партии
			Если (ТипЗнч(Партия.ДокументОприходования) <> ТИП("ДокументСсылка.ПоступлениеТоваровУслуг") И
				ТипЗнч(Партия.ДокументОприходования) <> ТИП("ДокументСсылка.ОприходованиеТоваров")) ИЛИ
				 																Партия.Стоимость <= 0  Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Партия.ХарактеристикаНоменклатуры);
				//17-02-2012
				СтруктураОтбора.Вставить("СтатусПартии", Партия.СтатусПартии);
				//
				ТаблицаДанныеОприходования = ПолучитьДанныеОприходования(НаДату,СтруктураОтбора);
				Если ТаблицаДанныеОприходования.Количество() = 0 Тогда
					//СтруктураОтбора = Новый Структура;
					//СтруктураОтбора.Номенклатура =  Партия.Номенклатура;
				    СтруктураОтбора.ХарактеристикаНоменклатуры =  0;
			    	ТаблицаДанныеОприходования = ПолучитьДанныеОприходования(НаДату,СтруктураОтбора);
				КонецЕсли;
				//17-02-2012
				Если ТаблицаДанныеОприходования.Количество() = 0 Тогда
					//СтруктураОтбора = Новый Структура;
					//СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				    СтруктураОтбора.ХарактеристикаНоменклатуры = Партия.ХарактеристикаНоменклатуры;
				    СтруктураОтбора.СтатусПартии = 0;
			    	ТаблицаДанныеОприходования = ПолучитьДанныеОприходования(НаДату,СтруктураОтбора);
				КонецЕсли;
				Если ТаблицаДанныеОприходования.Количество() = 0 Тогда
					//СтруктураОтбора = Новый Структура;
					//СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				    СтруктураОтбора.ХарактеристикаНоменклатуры = 0;
			    	ТаблицаДанныеОприходования = ПолучитьДанныеОприходования(НаДату,СтруктураОтбора);
				КонецЕсли;
				//
				Если ТаблицаДанныеОприходования.Количество() <> 0 Тогда
					 ЗаполнитьЗначенияСвойств(СтрокаПрихода, ТаблицаДанныеОприходования[0]);
					 СтрокаПрихода.Стоимость = Партия.Недостача*ТаблицаДанныеОприходования[0].Цена;
					 //
					 Если ЗначениеЗаполнено(Партия.СтатусПартии) Тогда  
						 СтрокаПрихода.СтатусПартии = Партия.СтатусПартии;
					 КонецЕсли;
					 Если ЗначениеЗаполнено(Партия.Качество) Тогда
						 СтрокаПрихода.Качество = Партия.Качество;
					 КонецЕсли;
					 //
					 УжеДооприходовали = Истина;
				 КонецЕсли;
			 КонецЕсли;
			 
						 
			Если Не УжеДооприходовали Тогда			 
	    		ЗаполнитьЗначенияСвойств(СтрокаПрихода, Партия);
				//11-10-2011
				//Если все таки цену вычислить не удалось то хотя бы правильно посчитаем 
				//цену из существующей партии, если она опять же таки есть
				СтрокаПрихода.Стоимость = Партия.Недостача*(?(Партия.Количество = 0,0,Партия.Стоимость/Партия.Количество));
				//
			КонецЕсли;
			
			СтрокаПрихода.Склад = Партия.Склад;
			СтрокаПрихода.Количество = Партия.Недостача;
			СтрокаПрихода.ХарактеристикаНоменклатуры = Партия.ХарактеристикаНоменклатуры;
			СтрокаПрихода.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			ПредыдущаяИтерацияСклад = Партия.Склад;
			ПредыдущаяИтерацияНомен = Партия.Номенклатура;
			ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры;
		КонецЦикла;
	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Приходование недостач","ПартииТоваровНаСкладах");
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ПеремещениеПартийПереданные(НаДату, СсылкаКорректировки)
		Если ВыполнятьПеремещениеПартийПоСкладам Тогда
			
			 
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Истина);
		//Выберем некорректныепартии
		ВыборкаПартийНехватка = ВыбратьНеправильныеПартииУпрПереданные(1, Ложь, НаДату).Выбрать(ОбходРезультатаЗапроса.Прямой);
		ТаблицаПартийИзлишек = ВыбратьНеправильныеПартииУпрПереданные(-1, Ложь,НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
	    //Попробуем переместить остатки партий между складами в полученной таблице
		ПредыдущийДоговор = 1;
		ПредыдущаяНоменклатура = 1;
		ПредыдущаяХарактеристика= 1;
		Пока ВыборкаПартийНехватка.Следующий() Цикл
			Если ВыборкаПартийНехватка.ДоговорКонтрагента.Ссылка = ПредыдущийДоговор И
				ВыборкаПартийНехватка.Номенклатура = ПредыдущаяНоменклатура И
				ВыборкаПартийНехватка.ХарактеристикаНоменклатуры  = ПредыдущаяХарактеристика Тогда
						 Продолжить;
			КонецЕсли;
					 
					 
					 	  ПрямаяВыборкаПартий = ВыборкаПартийНехватка;
						  СтруктураОтбора = Новый Структура;
						  СтруктураОтбора.Вставить("Номенклатура",ВыборкаПартийНехватка.Номенклатура);
		                  СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",ВыборкаПартийНехватка.ХарактеристикаНоменклатуры);
	
						  ПартииИзлишков = ТаблицаПартийИзлишек.НайтиСтроки(СтруктураОтбора);
					      УжеСписано = 0;
								 Для Каждого Партия Из ПартииИзлишков Цикл
									  
									  //перемещать партии с отрицательным остатком не будем
									  Если Партия.Количество <= 0 Тогда
										  Прервать;
									  КонецЕсли;
									  
									  Если УжеСписано = ПрямаяВыборкаПартий.Недостача Тогда
										 Прервать;
									 КонецЕсли;
									 
									 СтрокаРасход = ТаблицаЗаписей.Добавить();
									 ЗаполнитьЗначенияСвойств(СтрокаРасход, Партия);
									 СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
									 СтрокаРасход.СписаниеПартий = Истина;
									 
									 СтрокаПриход = ТаблицаЗаписей.Добавить();
									 ЗаполнитьЗначенияСвойств(СтрокаПриход, Партия);
									 СтрокаПриход.ДоговорКонтрагента = ПрямаяВыборкаПартий.ДоговорКонтрагента;
									 СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
									 
									 //Обновим таблицу партий излишков
									 
									 Если Партия.Количество  = ПрямаяВыборкаПартий.Недостача Тогда
										 УжеСписано = Партия.Количество;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 ИначеЕсли Партия.Количество > ПрямаяВыборкаПартий.Недостача 
										 //И  ПрямаяВыборкаПартий.Количество <> 0 
										 Тогда
										 СтрокаРасход.Количество = ПрямаяВыборкаПартий.Недостача;
										 СтрокаРасход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);

										 СтрокаПриход.Количество = ПрямаяВыборкаПартий.Недостача;
										 СтрокаПриход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
									     УжеСписано = ПрямаяВыборкаПартий.Недостача;
										 
										 СтрокаТаблицыИзлишков = ТаблицаПартийИзлишек.Добавить();
										 ЗаполнитьЗначенияСвойств(СтрокаТаблицыИзлишков, Партия);
										 СтрокаТаблицыИзлишков.Количество = Партия.Количество - СтрокаРасход.Количество;
										 СтрокаТаблицыИзлишков.Стоимость = Партия.Стоимость - СтрокаРасход.Стоимость;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 Иначе
									     УжеСписано = УжеСписано+Партия.Количество;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 КонецЕсли;
									 
								 КонецЦикла;
							  
					  ПредыдущийДоговор = ВыборкаПартийНехватка.ДоговорКонтрагента.Ссылка;
					  ПредыдущаяНоменклатура = ВыборкаПартийНехватка.Номенклатура;
					  ПредыдущаяХарактеристика = ВыборкаПартийНехватка.ХарактеристикаНоменклатуры;
				  КонецЦикла;
			  
	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Переданные Перемещение партий", "ПартииТоваровПереданные");
		КонецЕсли;
	
КонецПроцедуры

Процедура ПересортПоХарактеристикамПереданные(НаДату, СсылкаКорректировки)
		
		Если ВыполнятьПересортПоХарактеристикам Тогда
			
			
		//Теперь будем списывать и приходовать только в разрезе номенклатуры, игнорируем характеристику
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Истина);
		//Выберем некорректныепартии
		ВыборкаПартийНехватка = ВыбратьНеправильныеПартииУпрПереданные(1, Ложь, НаДату).Выбрать(ОбходРезультатаЗапроса.Прямой);
		ТаблицаПартийИзлишек = ВыбратьНеправильныеПартииУпрПереданные(-1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
	    //Попробуем переместить остатки партий между складами в полученной таблице
		ПредыдущийДоговор = 1;
		ПредыдущаяНоменклатура = 1;
		ПредыдущаяХарактеристика= 1;
		Пока ВыборкаПартийНехватка.Следующий() Цикл
			Если ВыборкаПартийНехватка.ДоговорКонтрагента.Ссылка = ПредыдущийДоговор И
				ВыборкаПартийНехватка.Номенклатура = ПредыдущаяНоменклатура И
				ВыборкаПартийНехватка.ХарактеристикаНоменклатуры  = ПредыдущаяХарактеристика Тогда
						 Продолжить;
			КонецЕсли;
					 
					 
					 	  ПрямаяВыборкаПартий = ВыборкаПартийНехватка;
						  СтруктураОтбора = Новый Структура;
						  СтруктураОтбора.Вставить("Номенклатура",ВыборкаПартийНехватка.Номенклатура);
	
						  	  ПартииИзлишков = ТаблицаПартийИзлишек.НайтиСтроки(СтруктураОтбора);
					     	  УжеСписано = 0;
								 Для Каждого Партия Из ПартииИзлишков Цикл
									  
									  //перемещать партии с отрицательным остатком и равные нулю не будем, тупо это
									  Если Партия.Количество <= 0 Тогда
										  Прервать;
									  КонецЕсли;
									  
									  Если УжеСписано = ПрямаяВыборкаПартий.Недостача Тогда
										 Прервать;
									 КонецЕсли;
									 
									 СтрокаРасход = ТаблицаЗаписей.Добавить();
									 ЗаполнитьЗначенияСвойств(СтрокаРасход, Партия);
									 СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
									 СтрокаРасход.СписаниеПартий = Истина;
									 
									 СтрокаПриход = ТаблицаЗаписей.Добавить();
									 ЗаполнитьЗначенияСвойств(СтрокаПриход, Партия);
									 СтрокаПриход.ДоговорКонтрагента = ПрямаяВыборкаПартий.ДоговорКонтрагента;
									 СтрокаПриход.ХарактеристикаНоменклатуры = ПрямаяВыборкаПартий.ХарактеристикаНоменклатуры;
									 СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
									 
									 Если Партия.Количество  = ПрямаяВыборкаПартий.Недостача Тогда
										 УжеСписано = Партия.Количество;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 ИначеЕсли Партия.Количество > ПрямаяВыборкаПартий.Недостача 
										 //И  ПрямаяВыборкаПартий.Количество <> 0
										 Тогда
										 СтрокаРасход.Количество = ПрямаяВыборкаПартий.Недостача;
										 СтрокаРасход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);

										 СтрокаПриход.Количество = ПрямаяВыборкаПартий.Недостача;
										 СтрокаПриход.Стоимость = ПрямаяВыборкаПартий.Недостача*(Партия.Стоимость/Партия.Количество);
									     УжеСписано = ПрямаяВыборкаПартий.Недостача;
										 СтрокаТаблицыИзлишков = ТаблицаПартийИзлишек.Добавить();
										 ЗаполнитьЗначенияСвойств(СтрокаТаблицыИзлишков, Партия);
										 СтрокаТаблицыИзлишков.Количество = Партия.Количество - СтрокаРасход.Количество;
										 СтрокаТаблицыИзлишков.Стоимость = Партия.Стоимость - СтрокаРасход.Стоимость;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 Иначе
									     УжеСписано = УжеСписано+Партия.Количество;
										 ТаблицаПартийИзлишек.Удалить(Партия);
									 КонецЕсли;
									 
								 КонецЦикла;
							  
					  ПредыдущийДоговор = ВыборкаПартийНехватка.ДоговорКонтрагента.Ссылка;
					  ПредыдущаяНоменклатура = ВыборкаПартийНехватка.Номенклатура;
					  ПредыдущаяХарактеристика = ВыборкаПартийНехватка.ХарактеристикаНоменклатуры;
				  КонецЦикла;

	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Переданные Пересорт по характеристикам", "ПартииТоваровПереданные");
		
		
	КонецЕсли;
	
	
	
	
КонецПроцедуры

Процедура СписаниеИзлишковПереданные(НаДату, СсылкаКорректировки)
	
	Если ВыполнятьСписаниеИзлишков Тогда
		
	//А теперь просто спишем лишнее
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Истина);
		ТаблицаПартийИзлишек = ВыбратьНеправильныеПартииУпрПереданные(-1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ПредыдущаяИтерацияДоговор = 1;
		ПредыдущаяИтерацияНомен = 1;
		ПредыдущаяИтерацияХарак = 1;
		ОсталосьСписать = 0;
		УжеПроверили = Ложь;
		Для Каждого Партия Из ТаблицаПартийИзлишек Цикл
			
			Если Партия.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			//не будем списывать с минусовых партий
			Если Партия.Количество < 0 Тогда
				Продолжить;
			КонецЕсли;
			Если Партия.Недостача <0 Тогда
				Партия.Недостача = -Партия.Недостача;
			КонецЕсли;
			
			
			Если ПредыдущаяИтерацияДоговор = Партия.ДоговорКонтрагента.Ссылка И 
				 ПредыдущаяИтерацияНомен = Партия.Номенклатура И 
				 ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры Тогда 
			Иначе
		       	 ОсталосьСписать = Партия.Недостача;
			КонецЕсли;
			Если ОсталосьСписать = 0  Тогда
				 Продолжить;
			КонецЕсли;
			 
			СтрокаРасхода = ТаблицаЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, Партия);
			
			 //попытаемся списывать по данным партий списания, определим стоимость
				НайденнаяЦена = Партия.Стоимость/Партия.Количество;
				ДокПередачи = Партия.ДокументПередачи;
				ДокПрихода = Партия.ДокументОприходования;
				//СтруктураОтбора = Новый Структура;
				//СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				//СтруктураОтбора.Вставить("ДоговорКонтрагента", 0);
				//СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 0);
				//СписокТипов = Новый СписокЗначений;
				//СписокТипов.Добавить("Отчет");
				//СписокТипов.Добавить("Возврат");
				//СтруктураОтбора.Вставить("ТипРегистратора", СписокТипов);
				//ТаблицаПартийПоиска  = ПолучитьПартииПереданные(СтруктураОтбора);
				//СтруктураОтбора.Удалить("ТипРегистратора");
				//Если ТаблицаПартийПоиска.Количество() <> 0 Тогда
				//	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Партия.ХарактеристикаНоменклатуры);
				//	СтруктураОтбора.Вставить("ДоговорКонтрагента", Партия.ДоговорКонтрагента);
				//	НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//	Если НайденныеПартии.Количество() = 0 Тогда
				//		СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				//		НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//	КонецЕсли;
				//	Если НайденныеПартии.Количество() = 0 Тогда
				//	  	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Партия.ХарактеристикаНоменклатуры);
				//		СтруктураОтбора.Удалить("ДоговорКонтрагента");
				//		НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//	КонецЕсли;
				//	Если НайденныеПартии.Количество() = 0 Тогда
				//	  	СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				//		НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//	КонецЕсли;
				//	Если НайденныеПартии.Количество() <> 0 Тогда
				//		ДокПередачи = НайденныеПартии[0].ДокументПередачи;
				//		ДокПрихода = НайденныеПартии[0].ДокументОприходования;
				//		НайденнаяЦена = НайденныеПартии[0].Цена;
				//	КонецЕсли;
				//КонецЕсли;
				//
				//	Если НайденныеПартии.Количество() = 0 Тогда
				//	СтруктураОтбора = Новый Структура;
				//	СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				//	СтруктураОтбора.Вставить("ТипРегистратора", 0);
				//	СтруктураОтбора.Вставить("ДоговорКонтрагента", 0);
				//	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 0);
				//	ТаблицаПартийПоиска  = ПолучитьПартииПереданные(СтруктураОтбора);
				//	СтруктураОтбора.Удалить("ТипРегистратора");
				//	Если ТаблицаПартийПоиска.Количество() <> 0 Тогда
				//		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Партия.ХарактеристикаНоменклатуры);
				//		СтруктураОтбора.Вставить("ДоговорКонтрагента", Партия.ДоговорКонтрагента);
				//		НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//		Если НайденныеПартии.Количество() = 0 Тогда
				//			СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				//			НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//		КонецЕсли;
				//		Если НайденныеПартии.Количество() = 0 Тогда
				//		  	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",Партия.ХарактеристикаНоменклатуры);
				//			СтруктураОтбора.Удалить("ДоговорКонтрагента");
				//			НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//		КонецЕсли;
				//		Если НайденныеПартии.Количество() = 0 Тогда
				//		  	СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				//			НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
				//		КонецЕсли;
				//		Если НайденныеПартии.Количество() <> 0 Тогда
				//			ДокПередачи = НайденныеПартии[0].ДокументПередачи;
				//			ДокПрихода = НайденныеПартии[0].ДокументОприходования;
				//			НайденнаяЦена =НайденныеПартии[0].Цена;
				//		КонецЕсли;
				//	КонецЕсли;
				//	КонецЕсли;
					
				Если Партия.Количество >= ОсталосьСписать Тогда
					СтрокаРасхода.Количество = ОсталосьСписать;
				Иначе
					СтрокаРасхода.Количество = Партия.Количество;
				КонецЕсли;
			
			ОсталосьСписать = ОсталосьСписать - СтрокаРасхода.Количество; 
			СтрокаРасхода.Стоимость = СтрокаРасхода.Количество*НайденнаяЦена; 
			СтрокаРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаРасхода.ДоговорКонтрагента = Партия.ДоговорКонтрагента;
			СтрокаРасхода.ХарактеристикаНоменклатуры = Партия.ХарактеристикаНоменклатуры;
			СтрокаРасхода.ДокументПередачи = ДокПередачи;
			СтрокаРасхода.ДокументОприходования = ДокПрихода;
			ПредыдущаяИтерацияДоговор = Партия.ДоговорКонтрагента.Ссылка;
			ПредыдущаяИтерацияНомен = Партия.Номенклатура;  
			ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры;
		КонецЦикла;
	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Переданные Списание излишков", "ПартииТоваровПереданные");
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриходованиеНедостачПереданные(НаДату, СсылкаКорректировки)

	Если ВыполнятьДооприходованиеНедостач Тогда	
		
		//Теперь дооприходуем недостатки в партиях первой попавшейся партией своей
		ТаблицаЗаписей = ПолучитьСтруктуруТаблицыУпр(Истина);
		ТаблицаПартийНедостача = ВыбратьНеправильныеПартииУпрПереданные(1, Ложь, НаДату).Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ПредыдущаяИтерацияДоговор = 1;
		ПредыдущаяИтерацияНомен = 1;
		ПредыдущаяИтерацияХарак = 1;                                        
		Для Каждого Партия Из ТаблицаПартийНедостача Цикл
			Если ПредыдущаяИтерацияДоговор = Партия.ДоговорКонтрагента.Ссылка И 
				 ПредыдущаяИтерацияНомен = Партия.Номенклатура И 
				 ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры  Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаПрихода = ТаблицаЗаписей.Добавить();
			УжеДооприходовали = Ложь;
			//Сначала поищем именно партии
			Если (ТипЗнч(Партия.ДокументПередачи) <> ТИП("ДокументСсылка.РеализацияТоваровУслуг")) ИЛИ
				 Партия.Стоимость <= 0  Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Партия.Номенклатура);
				СтруктураОтбора.Вставить("ДоговорКонтрагента", 0);
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 0);
				//17-02-2012
				СтруктураОтбора.Вставить("СтатусПартии", 0);
				//
				СписокТипов = Новый СписокЗначений;
				СписокТипов.Добавить("Реализация");
				СтруктураОтбора.Вставить("ТипРегистратора", СписокТипов);
				ТаблицаПартийПоиска  = ПолучитьПартииПереданные(СтруктураОтбора);
				СтруктураОтбора.Удалить("ТипРегистратора");
				Если ТаблицаПартийПоиска.Количество() <> 0 Тогда
					СтруктураОтбора.ХарактеристикаНоменклатуры = Партия.ХарактеристикаНоменклатуры;
					СтруктураОтбора.ДоговорКонтрагента = Партия.ДоговорКонтрагента;
					//
					СтруктураОтбора.СтатусПартии = Партия.СтатусПартии;
					//
					НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
					Если НайденныеПартии.Количество() = 0 Тогда
						СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				    	НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
					КонецЕсли;
					Если НайденныеПартии.Количество() = 0 Тогда
						СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Партия.ХарактеристикаНоменклатуры);
						СтруктураОтбора.Удалить("ДоговорКонтрагента");
				    	НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
					КонецЕсли;
					Если НайденныеПартии.Количество() = 0 Тогда
						СтруктураОтбора.Удалить("ХарактеристикаНоменклатуры");
				    	НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
					КонецЕсли;
					//
					Если НайденныеПартии.Количество() = 0 Тогда
						СтруктураОтбора.Удалить("СтатусПартии");
				    	НайденныеПартии = ТаблицаПартийПоиска.НайтиСтроки(СтруктураОтбора);
					КонецЕсли;
					//
				    Если НайденныеПартии.Количество() <> 0 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПрихода,НайденныеПартии[0]);
						СтрокаПрихода.Стоимость = Партия.Недостача*НайденныеПартии[0].Цена;
					 //
					 Если ЗначениеЗаполнено(Партия.СтатусПартии) Тогда  
						 СтрокаПрихода.СтатусПартии = Партия.СтатусПартии;
					 КонецЕсли;
					 //
						УжеДооприходовали = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
						 
			Если Не УжеДооприходовали Тогда			 
	    		ЗаполнитьЗначенияСвойств(СтрокаПрихода, Партия);
				//11-10-2011
				//если не нашли партии передачи
				СтрокаПрихода.Стоимость = Партия.Недостача*(?(Партия.Количество = 0,0,Партия.Стоимость/Партия.Количество));
				//
			КонецЕсли;
			
			СтрокаПрихода.ДоговорКонтрагента = Партия.ДоговорКонтрагента;
			СтрокаПрихода.Количество = Партия.Недостача;
			СтрокаПрихода.ХарактеристикаНоменклатуры = Партия.ХарактеристикаНоменклатуры;
			СтрокаПрихода.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			ПредыдущаяИтерацияДоговор = Партия.ДоговорКонтрагента.Ссылка;
			ПредыдущаяИтерацияНомен = Партия.Номенклатура;
			ПредыдущаяИтерацияХарак = Партия.ХарактеристикаНоменклатуры;
		КонецЦикла;
	    //ЗаполнимПериод во всей таблице текущим моментом, т.е. датой документа
		//Создадим документ корректировка регистров
		СоздатьИЗаписатьКорРегистров(ТаблицаЗаписей, СсылкаКорректировки, "Корректировка партионного учета!!!Упр Переданные Приходование недостач","ПартииТоваровПереданные");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерепровестиРегистраторы(НачРег, КонРег)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПартииТоваровНаСкладах.Регистратор,
		|	ПартииТоваровНаСкладах.Регистратор.МоментВремени КАК РегистраторМоментВремени
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	ПартииТоваровНаСкладах.Период МЕЖДУ &НачПериод И &КонПериод
		|	И ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладах.Регистратор) <> ТИП(Документ.КорректировкаЗаписейРегистров)
		|	И ПартииТоваровНаСкладах.Регистратор.Проведен = ИСТИНА
		|	И ТИПЗНАЧЕНИЯ(ПартииТоваровНаСкладах.Регистратор) <> ТИП(Документ.ПоступлениеТоваровУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладах.Регистратор,
		|	ПартииТоваровНаСкладах.Регистратор.МоментВремени
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииТоваровПереданные.Регистратор,
		|	ПартииТоваровПереданные.Регистратор.МоментВремени
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные КАК ПартииТоваровПереданные
		|ГДЕ
		|	ПартииТоваровПереданные.Период МЕЖДУ &НачПериод И &КонПериод
		|	И ТИПЗНАЧЕНИЯ(ПартииТоваровПереданные.Регистратор) <> ТИП(Документ.КорректировкаЗаписейРегистров)
		|	И ПартииТоваровПереданные.Регистратор.Проведен = ИСТИНА
		|	И ТИПЗНАЧЕНИЯ(ПартииТоваровПереданные.Регистратор) <> ТИП(Документ.ПоступлениеТоваровУслуг)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровПереданные.Регистратор,
		|	ПартииТоваровПереданные.Регистратор.МоментВремени
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторМоментВремени";

	Запрос.УстановитьПараметр("НачПериод", НачРег+1);
	Запрос.УстановитьПараметр("КонПериод", КонРег-1);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();

	Константы.ОтключитьКонтрольОстатковПоПартиям.Установить(Истина);
	Константы.ОтключитьКонтрольОстатковТМЦ.Установить(Истина);
	
	Для Каждого Элем Из Выборка Цикл
		Попытка
			Объект = Элем.Регистратор.Ссылка.ПолучитьОбъект();
			Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Константы.ОтключитьКонтрольОстатковПоПартиям.Установить(Ложь);
	Константы.ОтключитьКонтрольОстатковТМЦ.Установить(Ложь);
	
	
	
КонецПроцедуры

Процедура СписатьСуммыПереданных(НаДату, СсылкаКорректировки)
	
	 
	ВЗапрос = ?(ТипЗнч(НаДату) = Тип("Число"), "", "(&Дата,)");
		 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", НаДату);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПереданныеОстатки.ДоговорКонтрагента,
		|	ТоварыПереданныеОстатки.Сделка,
		|	ТоварыПереданныеОстатки.СтатусПередачи,
		|	ТоварыПереданныеОстатки.Номенклатура,
		|	ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыПереданныеОстатки.СерияНоменклатуры,
		|	ТоварыПереданныеОстатки.Контрагент,
		|	ТоварыПереданныеОстатки.Организация,
		|	СУММА(ТоварыПереданныеОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(ТоварыПереданныеОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки"+ВЗапрос+" КАК ТоварыПереданныеОстатки
		|ГДЕ
		|	ТоварыПереданныеОстатки.КоличествоОстаток = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПереданныеОстатки.Сделка,
		|	ТоварыПереданныеОстатки.СтатусПередачи,
		|	ТоварыПереданныеОстатки.ДоговорКонтрагента,
		|	ТоварыПереданныеОстатки.Организация,
		|	ТоварыПереданныеОстатки.СерияНоменклатуры,
		|	ТоварыПереданныеОстатки.Контрагент,
		|	ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыПереданныеОстатки.Номенклатура";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();

	ТаблицаЗаписейПереданных = Новый ТаблицаЗначений;
	ТаблицаЗаписейПереданных.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Сделка");
	ТаблицаЗаписейПереданных.Колонки.Добавить("СтатусПередачи");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Номенклатура");
	ТаблицаЗаписейПереданных.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаЗаписейПереданных.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Контрагент");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Организация");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Количество");
	ТаблицаЗаписейПереданных.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаЗаписейПереданных.Колонки.Добавить("ВидДвижения");
	ТаблицаЗаписейПереданных.Колонки.Добавить("Период");
	
	Для Каждого ЗаписьИзВыборки Из Выборка Цикл
		  СтрокаТаблицы = ТаблицаЗаписейПереданных.Добавить();
		  ЗаполнитьЗначенияСвойств(СтрокаТаблицы,ЗаписьИзВыборки);
		  Если ЗаписьИзВыборки.СуммаВзаиморасчетов > 0 Тогда
			  СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Расход;
		  Иначе                            
			  СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход;
			  СтрокаТаблицы.СуммаВзаиморасчетов = -ЗаписьИзВыборки.СуммаВзаиморасчетов;
		  КонецЕсли;
	КонецЦикла;

	СоздатьИЗаписатьКорРегистров(ТаблицаЗаписейПереданных,СсылкаКорректировки ,"Корректировка суммы взаиморасчетов по товарам переданным, количество = 0", "ТоварыПереданные");
	
	
КонецПроцедуры







                                       