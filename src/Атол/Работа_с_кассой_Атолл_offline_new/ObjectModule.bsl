Перем ТекстПисьма;//текст для отправки письма о загруженных документах
Перем мСкладыВТабличнойЧасти;
Перем мТекКассаККМ Экспорт;
Перем мАвтоРежим Экспорт;
Перем СтатусыОшибок Экспорт;
Перем ТабОтмененныхЧеков;
//ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ


//Процедура осуществляет задержку выполнения кода
//Время - время задержки, в секундах
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;
	Если Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;

КонецФункции

//Функция возвращает найденную номенклутуру
//ПЛУ - Код номенклатуры для поиска
Функция ПолучитьОписаниеТовараККМПоКоду(ПЛУ) Экспорт

	Код = Формат(Плу,"ЧЦ=11; ЧВН=; ЧГ=");
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Код);
	Если Номенклатура.ЭтоГруппа Тогда//группа нам не нужна, меняем найденную группу на пустую номенклутуру
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	Результат = Новый Структура("Качество,                   Номенклатура, ЕдиницаИзмерения",
		                         Справочники.Качество.Новый, Номенклатура, Номенклатура.ЕдиницаХраненияОстатков);
	Возврат Результат;

КонецФункции // ПолучитьОписаниеТовараККМ()

//Функция возвращает цену
//Склад - склад автоматизированной торговой точки
//Номенклатура - номенклатура
Функция ПолучитьЦенуАТТ(Склад,Номенклатура)

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	МАКСИМУМ(ЦеныАТТСрезПоследних.Цена) КАК Цена
	             |ИЗ
	             |	РегистрСведений.ЦеныАТТ.СрезПоследних(
	             |			,
	             |			Склад = &Склад
	             |				И Номенклатура = &Номенклатура) КАК ЦеныАТТСрезПоследних";
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество()<>0 Тогда
		ЦенаАТТ = Рез[0].Цена;
	Иначе
		ЦенаАТТ = 0;
	КонецЕсли;
	Возврат ЦенаАТТ;

КонецФункции

Функция ПолучитьКассуККМПоИдентификатору(Идентификатор) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегТО.КассаККМ
	                      |ИЗ
	                      |	РегистрСведений.ТорговоеОборудование КАК РегТО
	                      |ГДЕ
	                      |	РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	КассаККМ = Запрос.Выполнить().Выгрузить()[0].КассаККМ;
	Возврат КассаККМ;

КонецФункции

Функция ДобавитьЗаписьВЛог(КассаККМ,Результат,Сообщение) Экспорт
	Запись=РегистрыСведений.ЛогРаботыКассы.СоздатьМенеджерЗаписи();
	
	Запись.Период					= ТекущаяДата();
	Запись.КассаККМ					= КассаККМ;
	Запись.Результат				= Результат;
	Запись.ОписаниеОшибки			= Сообщение;
	Запись.АвтоматическаяЗагрузка	= мАвтоРежим;
	Сообщить(Строка(КассаККМ)+": "+Сообщение);
	
	Запись.Записать();
	
	КонПроверки=ТекущаяДата()+2;//ждем 2 секунды, а то записи накладываются друг на друга
	Пока ТекущаяДата()<КонПроверки Цикл
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	Возврат Запись;

КонецФункции

Функция ПроверкаКассыИПодготовкаСпискаОтчетов(идККМ)
	СписокОтчетов = Новый СписокЗначений;
	Отчет     = Неопределено;
	Результат = ЗагрузитьОтчетОПродажах(идККМ, Отчет);

	Если Отчет.Количество()=0 Тогда
		ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	//Проверка смен для загрузки
	
	Врем = Отчет.Скопировать(,"ДатаДокумента,НомерСмены, НомерОтчета, НаличностьВККМ");
	Врем.Свернуть("ДатаДокумента,НомерСмены, НомерОтчета, НаличностьВККМ");
	ОтборПоДате		=Не ПоследняяСмена И (ЗначениеЗаполнено(НачДата) ИЛИ ЗначениеЗаполнено(КонДата)); 
	ОтборПоСмене	=Не ПоследняяСмена И (ЗначениеЗаполнено(НачСмена) ИЛИ ЗначениеЗаполнено(КонСмена)); 
	Для Каждого Позиция Из Врем Цикл
		ВсеОК=Истина;
		Если ОтборПоДате ИЛИ ОтборПоСмене Тогда
			СоотОтбору=Истина;
			Если ОтборПоДате Тогда
				СоотОтбору = СоотОтбору И (Позиция.ДатаДокумента>=НачДата И Позиция.ДатаДокумента<=КонецДня(?(ЗначениеЗаполнено(КонДата),КонДата,КонецГода(ТекущаяДата())))) ;
			КонецЕсли;
			Если ОтборПоСмене Тогда
				СоотОтбору = СоотОтбору И (Позиция.НомерСмены>=НачСмена И Позиция.НомерСмены<=?(ЗначениеЗаполнено(КонСмена),КонСмена,999999));
			КонецЕсли;
			
		Иначе
			СоотОтбору=Истина;
		КонецЕсли;
		СписокОтчетов.Добавить(Позиция, ""+Позиция.НомерСмены+"/ Z-Отчет № = "+ ?(СокрЛП(Позиция.НомерОтчета)="","нет отчета",СокрЛП(Позиция.НомерОтчета)) +"/ Сумма наличности = "+СокрЛП(Позиция.НаличностьВККМ), СоотОтбору и СокрЛП(Позиция.НомерОтчета)<>"");
			ВсеОК=ВсеОК И СоотОтбору;
	КонецЦикла;
	Если мАвтоРежим Тогда
		Если Не ВсеОК Тогда
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаПериода,"Файл не содержит данных соотв. установленному отбору "+
																													?(ОтборПоДате,"Период с "+Формат(НачДата,"ДФ=dd.MM.yyyy")+" по "+Формат(КонДата,"ДФ=dd.MM.yyyy")+" "," ")+
																													?(ОтборПоСмене,"Смена с"+Строка(НачСмена)+" по "+Строка(КонСмена),""));
			Возврат Неопределено;
		КонецЕсли;
		Если  СписокОтчетов.Количество()>1 Тогда
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаПериода,"В файле содержаться данные о более чем одной смене");
			Возврат Неопределено;//в автоматическом режиме не грузим более одной смены
		КонецЕсли;
		Для Каждого ЭлОтчет Из СписокОтчетов Цикл
			ЭлОтчет.Пометка = Истина;
		КонецЦикла;
	Иначе
		Если Не ВсеОК Тогда
			Ответ=Вопрос("Файл не содержит данных, соотв. установленному отбору. Продолжить?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
			Если Ответ=КодВозвратаДиалога.Да Тогда
				Если Не СписокОтчетов.ОтметитьЭлементы("Выберите отчеты для загрузки.") Тогда
					ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Не выбрали отчеты для загрузки.");
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаПериода,"Файл не содержит данных соотв. установленному отбору "+
																													?(ОтборПоДате,"Период с "+Формат(НачДата,"ДФ=dd.MM.yyyy")+" по "+Формат(КонДата,"ДФ=dd.MM.yyyy")+" "," ")+
																													?(ОтборПоСмене,"Смена с"+Строка(НачСмена)+" по "+Строка(КонСмена),""));
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Если Не СписокОтчетов.ОтметитьЭлементы("Выберите отчеты для загрузки.") Тогда
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Не выбрали отчеты для загрузки.");
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("СписокОтчетов,Отчет",СписокОтчетов,Отчет);
КонецФункции

//ОСНОВНЫЕ ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ

Процедура ВыгрузитьКассы(ЗагружатьВновьПолученныеОтчеты=Ложь) Экспорт

	ТекстПисьма = "";
	ПолучитьСерверТО().ПодключитьКлиента(ЭтотОбъект);
	МассивOffline = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ККМOffLine,);
	Для Каждого ККМ Из МассивOffline Цикл
		Обработка = Неопределено;
		Объект    = Неопределено;
		Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(ККМ, Обработка, Объект);
		Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
		мТекКассаККМ = ПолучитьКассуККМПоИдентификатору(ККМ);
		
		Если Не Файл.Существует() Тогда
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Отсутствует файл отчета");
			ЗапроситьОтчетПоследнейСмены(Файл.Путь+"upload.flz");
			ФайлФлаг=Новый Файл(Файл.Путь+"upload.flz");
			КонПроверки=ТекущаяДата()+5*60;
			Пока ФайлФлаг.Существует() И ТекущаяДата()<КонПроверки Цикл
				ОбработкаПрерыванияПользователя();
			КонецЦикла;
			Если Файл.Существует() Тогда
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Файл отчет получен с кассы");
				Если ЗагружатьВновьПолученныеОтчеты Тогда
					ОбработкаЧековOffline(ККМ);
				КонецЕсли;
			Иначе
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Не удалось получить файл отчета");
			КонецЕсли;
		Иначе
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Обнаружен незагруженный файл отчета, если он уже был загружен удалите вручную! "+Файл.ПолноеИмя);
			ОбработкаЧековOffline(ККМ);
		КонецЕсли;
	КонецЦикла;
	ПолучитьСерверТО().ОтключитьКлиента(ЭтотОбъект);
	
	Если ТекстПисьма<>"" Тогда//значит есть загруженные документы
		ТекстПисьма = "Автоматически созданы документы:"+"<br/>"+ТекстПисьма;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Объект,
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЗНАЧЕНИЕ(Справочник.ИТИКонстанты.ЗагрузкаСКассККМ) КАК Поле1) КАК ВложенныйЗапрос
		               |		ПО КатегорииОбъектов.Категория = ВложенныйЗапрос.Поле1.Указатель
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |		ПО КатегорииОбъектов.Объект = КонтактнаяИнформация.Объект
		               |ГДЕ
		               |	КонтактнаяИнформация.ЗначениеПоУмолчанию
		               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		ТЗКому = Запрос.Выполнить().Выгрузить();
		СписокКому = Новый СписокЗначений;
		Для Каждого СтрокаТЗ Из ТЗКому Цикл
			СписокКому.Добавить(СтрокаТЗ.ПРедставление, СтрокаТЗ.Объект.Наименование);
		КонецЦикла;
		Если СписокКому.Количество()<>0 Тогда
			УправлениеЭлектроннойПочтой.ОтправитьПисьмоОтСистемы("Загрузка продаж с касс ККМ", ТекстПисьма, СписокКому);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура Регламент(ЗавершатьРаботу=Ложь,ИмяКомпа="") Экспорт

	Сообщить("Обработка стартовала в "+ТекущаяДата());
	НачДата=НачалоДня(ТекущаяДата())-24*60*60;
	КонДата=КонецДня(ТекущаяДата());
	ТекстПисьма = "";
	ПолучитьСерверТО().ПодключитьКлиента(ЭтотОбъект);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка,
		|	КассыККМ.Идентификатор КАК ИД,
		|	ОтчетыОПродажах.Док
		|ИЗ
		|	(ВЫБРАТЬ
		|		КассыККМ.Ссылка КАК Ссылка,
		|		ТорговоеОборудование.Идентификатор КАК Идентификатор
		|	ИЗ
		|		РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
		|			ПО ТорговоеОборудование.КассаККМ = КассыККМ.Ссылка
		|				И (ТорговоеОборудование.Подключено)
		|				И (ТорговоеОборудование.Компьютер = &Компьютер)
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА НЕ КассыККМ.ФлагКассаЗаблокирована
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ДОБАВИТЬКДАТЕ(КассыККМ.ДатаОкончанияБлокировки, МИНУТА, 30) < &ТекДата
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			КОНЕЦ) КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеКасс.СрезПоследних(, ) КАК СостояниеКассСрезПоследних
		|		ПО (СостояниеКассСрезПоследних.КассаККМ = КассыККМ.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтчетОРозничныхПродажах.Ссылка КАК Док
		|		ИЗ
		|			Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ГДЕ
		|			ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНачДок И &ДатаКонДок
		|			И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления) КАК ОтчетыОПродажах
		|		ПО КассыККМ.Ссылка = ОтчетыОПродажах.Док.КассаККМ
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СостояниеКассСрезПоследних.Состояние ЕСТЬ NULL 
		|					ИЛИ СостояниеКассСрезПоследних.Период < &ТекДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ОтчетыОПродажах.Док ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	РасчетДата = ТекущаяДата()-23*3600;
	Запрос.УстановитьПараметр("ДатаНачДок", НачалоДня(РасчетДата));
	Запрос.УстановитьПараметр("ДатаКонДок", КонецДня(РасчетДата));
	Запрос.УстановитьПараметр("Компьютер", ?(ЗначениеЗаполнено(ИмяКомпа),ИмяКомпа,ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()));

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	//Цикл для опроса касс БЕЗ ЗАГРУЗКИ ДАННЫХ
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ККМ=ВыборкаДетальныеЗаписи.Ид;
		ЗаписьЖурналаРегистрации("РегЗаданияИТИ.Отладка",УровеньЖурналаРегистрации.Информация,Метаданные.Обработки.Работа_с_кассой_Атолл_offline_new,,"ККМ ID: "+ККМ);
		Обработка = Неопределено;
		Объект    = Неопределено;
		Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(ККМ, Обработка, Объект);
		ЗаписьЖурналаРегистрации("РегЗаданияИТИ.Отладка",УровеньЖурналаРегистрации.Информация,Метаданные.Обработки.Работа_с_кассой_Атолл_offline_new,,"Касса: "+Строка(ВыборкаДетальныеЗаписи.Ссылка));
		Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
		мТекКассаККМ = ВыборкаДетальныеЗаписи.Ссылка;
		
		Если Файл.Существует() Тогда
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Файл отчета найден");
		Иначе
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Файл отчета не обнаружен");
			ЗапроситьОтчетПоследнейСмены(Файл.Путь+"upload.flz");
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Отправлен флаг выгрузки Файла отчета");
		КонецЕсли;
	КонецЦикла;
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		КонПроверки=ТекущаяДата()+1*60;//ждем 1 минуту
		Пока ТекущаяДата()<КонПроверки Цикл
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
	КонецЕсли;
			
	//Цикл обработки данных. По скольку на предыдущем шаге запросили данные-пока одна касса обрабатывается, остальные ответят на запросы
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ККМ=ВыборкаДетальныеЗаписи.Ид;
		Обработка = Неопределено;
		Объект    = Неопределено;
		Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(ККМ, Обработка, Объект);
		Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
		мТекКассаККМ = ВыборкаДетальныеЗаписи.Ссылка;
		Если Не Файл.Существует() Тогда
			ФайлФлаг=Новый Файл(Файл.Путь+"upload.flz");
			Если ФайлФлаг.Существует() Тогда
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Файл-флаг не забран кассой, файла отчета нет");
			Иначе
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ФайлОтсутствует,"Файл-флаг не обнаружен, файла отчета нет");
			КонецЕсли;
		Иначе
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Обнаружен незагруженный файл отчета, если он уже был загружен удалите вручную! "+Файл.ПолноеИмя);
			ОбработкаЧековOffline(ККМ);
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Загрузка файла отчета завершена");
		КонецЕсли;
	КонецЦикла;
	ПолучитьСерверТО().ОтключитьКлиента(ЭтотОбъект);
	
	Если ТекстПисьма<>"" Тогда//значит есть загруженные документы
		ТекстПисьма = "Автоматически созданы документы:"+"<br/>"+ТекстПисьма;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтактнаяИнформация.Объект,
		               |	КонтактнаяИнформация.Представление
		               |ИЗ
		               |	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЗНАЧЕНИЕ(Справочник.ИТИКонстанты.ЗагрузкаСКассККМ) КАК Поле1) КАК ВложенныйЗапрос
		               |		ПО КатегорииОбъектов.Категория = ВложенныйЗапрос.Поле1.Указатель
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		               |		ПО КатегорииОбъектов.Объект = КонтактнаяИнформация.Объект
		               |ГДЕ
		               |	КонтактнаяИнформация.ЗначениеПоУмолчанию
		               |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		ТЗКому = Запрос.Выполнить().Выгрузить();
		СписокКому = Новый СписокЗначений;
		Для Каждого СтрокаТЗ Из ТЗКому Цикл
			СписокКому.Добавить(СтрокаТЗ.ПРедставление, СтрокаТЗ.Объект.Наименование);
		КонецЦикла;
		Если СписокКому.Количество()<>0 Тогда
			УправлениеЭлектроннойПочтой.ОтправитьПисьмоОтСистемы("Загрузка продаж с касс ККМ", ТекстПисьма, СписокКому);
		КонецЕсли;
		
	КонецЕсли;
	Сообщить("Обработка завершена в "+ТекущаяДата());

	Если ЗавершатьРаботу Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЧековOffline(ККМ) Экспорт
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(ККМ, Обработка, Объект);
	
	КассККМ=РегистрыСведений.ТорговоеОборудование.Получить(Новый Структура("Идентификатор",ККМ)).Модель;
	ИсклПропущенныеЧеки	= ИТИИндустрияОбщийМодульКлиентСервер.ПринадлежитКатегории(КассККМ,Справочники.КатегорииОбъектов.НайтиПоНаименованию("Исключить пропущенные чеки"));
	
	Если мТекКассаККМ.ФлагКассаЗаблокирована и мТекКассаККМ.ДатаОкончанияБлокировки+30*60<ТекущаяДата() Тогда
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,"Касса заблокирована, продолжение работы невозможно");
		УдалитьФайлы(Объект.Параметры.ФайлОтчета);
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,"Файл отчета удален по причине-касса заблокирована");
		Возврат;
	Иначе
		Сообщить("Обрабатываем кассу "+мТекКассаККМ);
		
		ОбъектКассаККМ = мТекКассаККМ.ПолучитьОбъект();
		ОбъектКассаККМ.ФлагКассаЗаблокирована = Истина;
		ОбъектКассаККМ.ДатаОкончанияБлокировки = ТекущаяДата();
		ОбъектКассаККМ.Записать();
	КонецЕсли;
	
	
	
	
	РезультатПроверки = ПроверкаКассыИПодготовкаСпискаОтчетов(ККМ);
	Если РезультатПроверки=Неопределено Тогда
		ОбъектКассаККМ.ФлагКассаЗаблокирована = Ложь;
		ОбъектКассаККМ.Записать();
		
		УдалитьФайлы(Объект.Параметры.ФайлОтчета);
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,"Файл отчета удален по причине-не пройдена проверка файла");
		Возврат;
	Иначе
		СписокОтчетов	= РезультатПроверки.СписокОтчетов;
		Отчет			= РезультатПроверки.Отчет;
	КонецЕсли;
	Если мАвтоРежим Тогда
		ЗапросПроверка=Новый Запрос("ВЫБРАТЬ
		                            |	ОтчетОРозничныхПродажах.Ссылка
		                            |ИЗ
		                            |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		                            |ГДЕ
		                            |	ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
		                            |	И ОтчетОРозничныхПродажах.НомерКассовойСмены = &НомерКассовойСмены
		                            |	И ОтчетОРозничныхПродажах.СуммаZОтчета = &СуммаZОтчета
		                            |	И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления");
		ЗапросПроверка.УстановитьПараметр("КассаККМ",мТекКассаККМ);
		Для Каждого Эл Из СписокОтчетов Цикл
			ЗапросПроверка.УстановитьПараметр("НомерКассовойСмены",Строка(Эл.Значение.НомерСмены));
			ЗапросПроверка.УстановитьПараметр("СуммаZОтчета",Число(Эл.Значение.НаличностьВККМ));
			Рез=ЗапросПроверка.Выполнить();
			Если НЕ Рез.Пустой() Тогда
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Отчет уже был загружен");
				ОбъектКассаККМ.ФлагКассаЗаблокирована = Ложь;
				ОбъектКассаККМ.Записать();
				
				УдалитьФайлы(Объект.Параметры.ФайлОтчета);
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Файл отчета удален по причине-отчет уже был загружен");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НачатьТранзакцию();
			
	Сч=0;
	ДокОтчет = Неопределено;
	НомерДокумента = Неопределено;
	СтарыйНомерДокумента = Неопределено;
	Для Каждого ЭлОтчет Из СписокОтчетов Цикл
		Если Не ЭлОтчет.Пометка Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДокОтчет = СоздатьОтчетОРозничныхПродажах(мТекКассаККМ, ЭлОтчет.Значение);
		Исключение
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,ОписаниеОшибки());
		КонецПопытки;
		Сч=Сч+1;
		СуммаОплаты2 = 0;
		СуммаОплаты3 = 0;
		ОтчетЗагр=Отчет.НайтиСтроки(Новый Структура("НомерОтчета",Формат(ЭлОтчет.Значение.НомерСмены,"ЧГ=")));
		Если ОтчетЗагр.Количество()=0 Тогда
			ОтчетЗагр=Отчет.НайтиСтроки(Новый Структура("НомерСмены",ЭлОтчет.Значение.НомерСмены));
		КонецЕсли;
		
		ОжидаемыйЧек=0;
		ТекущийЧек	=0;
		
		СпПропущенных="";
		Для каждого Позиция Из ОтчетЗагр Цикл
			Если СтарыйНомерДокумента <> Позиция.НомерДокумента Тогда
				ИК=Неопределено;
				СуммаОплаты2 = СуммаОплаты2 + ?(ЗначениеЗаполнено(Позиция.ОплаченоВидомОплаты2),Позиция.ОплаченоВидомОплаты2,0); 
				СуммаОплаты3 = СуммаОплаты3 + Позиция.ОплаченоВидомОплаты3; 
				СтарыйНомерДокумента = Позиция.НомерДокумента;
				
				//Дисконт
				//Дисконтная карта
				Если Позиция.ТипСкидки = 3 или Позиция.ТипСкидки = 12 Тогда //Скидка по дисконтной карте ШТРИХ и 12 - атол автоматическая на чек
					Если ЗначениеЗаполнено(Позиция.ИнформацияПоСкидке) Тогда
						КодКарты = СокрЛП(Позиция.ИнформацияПоСкидке);
						ПДК = ДокОтчет.ПродажиПоДисконтнымКартам.Добавить();
						
						ИК = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("КодКарты", КодКарты);
						Если ИК = Справочники.ИнформационныеКарты.ПустаяСсылка() Тогда
							ТекстОшибки = "В справочнике информационных карт не найдена карта с кодом: " + КодКарты + ". Будет создана новая.";
							ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
							
							ИК = Справочники.ИнформационныеКарты.СоздатьЭлемент();
							ИК.Наименование = "Карта " + Позиция.СтавкаСкидки + "% " + КодКарты;
							ИК.КодКарты = КодКарты;
							ИК.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
							ИК.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
							ИК.ВидДисконтнойКарты = СПравочники.видыДисконтныхКарт.НайтиПоНаименованию(Позиция.СтавкаСкидки);
							НовыйОбъект = СПравочники.Контрагенты.СоздатьЭлемент();
							НовыйОбъект.Родитель = СПравочники.Контрагенты.НайтиПоКоду("000000526");
							НовыйОбъект.Наименование = "Владелец " + Позиция.СтавкаСкидки + "% карты: " + КодКарты;
							НовыйОбъект.НаименованиеПолное = "Владелец " + Позиция.СтавкаСкидки + "% карты: " + КодКарты;
							НовыйОбъект.Покупатель = Истина;
							НовыйОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
							НовыйОбъект.Записать();
							НовыйОбъект.ГоловнойКонтрагент = НовыйОбъект.Ссылка;
							НовыйОбъект.Записать();
							
							ИК.ВладелецКарты = НовыйОбъект.Ссылка;
							ИК.Записать();
							ИК=ИК.Ссылка;
						КонецЕсли;
						ПДК.ДисконтнаяКарта = ИК.Ссылка;
						ПДК.ВладелецДисконтнойКарты = ИК.ВладелецКарты;
						ПДК.Сумма = Позиция.ОплаченоВидомОплаты1 + ?(ЗначениеЗаполнено(Позиция.ОплаченоВидомОплаты2),Позиция.ОплаченоВидомОплаты2,0) + Позиция.ОплаченоВидомОплаты3;
						
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;
			Если ТекущийЧек=0 Тогда
				ТекущийЧек=Позиция.НомерЧекаККМ;
				ОжидаемыйЧек=ТекущийЧек+1;
			ИначеЕсли ТекущийЧек<>Позиция.НомерЧекаККМ И Не ИсклПропущенныеЧеки Тогда
				Если Позиция.НомерЧекаККМ>ОжидаемыйЧек Тогда
					Пока ОжидаемыйЧек<Позиция.НомерЧекаККМ Цикл
						СпПропущенных=СпПропущенных+Символы.ПС+Строка(ОжидаемыйЧек);
						ОжидаемыйЧек=ОжидаемыйЧек+1;
					КонецЦикла;
				ИначеЕсли Позиция.НомерЧекаККМ<ОжидаемыйЧек Тогда
					СпПропущенных=СпПропущенных+Символы.ПС+"СБОЙ НУМЕРАЦИИ!!!!";
				КонецЕсли;
				ТекущийЧек=Позиция.НомерЧекаККМ;
				ОжидаемыйЧек=ТекущийЧек+1;
			КонецЕсли;
			//ZAM+++ 22.04.2014 #1179605 Переработать документ ООрП и процедуры загрузки Акций
			Если Позиция.Номенклатура.Комплект Тогда
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				              |	РегКомплектующие.Комплектующая КАК Номенклатура,
				              |	РегКомплектующие.ХарактеристикаКомплектующей КАК ХарактеристикаНоменклатуры,
				              |	РегКомплектующие.Количество КАК Количество,
				              |	РегКомплектующие.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				              |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
				              |	РегКомплектующие.Количество * ВЫБОР
				              |		КОГДА РегКомплектующие.ВходитВСтоимость
				              |			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
				              |		ИНАЧЕ 0
				              |	КОНЕЦ КАК Сумма
				              |ИЗ
				              |	РегистрСведений.КомплектующиеНоменклатуры КАК РегКомплектующие
				              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				              |				&Дата,
				              |				ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
				              |		ПО РегКомплектующие.Комплектующая = ЦеныНоменклатурыСрезПоследних.Номенклатура
				              |			И РегКомплектующие.ХарактеристикаКомплектующей = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
				              |ГДЕ
				              |	РегКомплектующие.Номенклатура = &Номенклатура
				              |
				              |УПОРЯДОЧИТЬ ПО
				              |	РегКомплектующие.Комплектующая,
				              |	РегКомплектующие.ХарактеристикаКомплектующей";
				Запрос.УстановитьПараметр("Номенклатура", Позиция.Номенклатура);
				Запрос.УстановитьПараметр("Дата", ДокОтчет.Дата);
				Запрос.УстановитьПараметр("ТипЦен", ДокОтчет.Склад.ТипЦенРозничнойТорговли);
				ТаблицаКомплект = Отчет.СкопироватьКолонки();
				ВыборкаКомплект = Запрос.Выполнить().Выгрузить();
				
//+! Гаспирович В.В. 15.06.15
			если позиция.типскидки <> 12 тогда
				Для Каждого СтрокаКомплект Из ВыборкаКомплект Цикл
					НовСтр = ТаблицаКомплект.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Позиция);
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаКомплект);
					НовСтр.Количество = Позиция.Количество*СтрокаКомплект.Количество*Позиция.ЕдиницаИзмерения.Коэффициент/СтрокаКомплект.ЕдиницаИзмерения.Коэффициент;
					НовСтр.ОплаченоВидомОплаты1 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты1/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.ОплаченоВидомОплаты2 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты2/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.ОплаченоВидомОплаты3 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты3/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.Скидка               = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.Скидка/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.Сумма                = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.Сумма/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
				КонецЦикла;
				
				//докидывание копеек, что не смогли распределить из-за округления
				ТаблицаКомплект[0].ОплаченоВидомОплаты1 = ТаблицаКомплект[0].ОплаченоВидомОплаты1 + (Позиция.ОплаченоВидомОплаты1 - ТаблицаКомплект.Итог("ОплаченоВидомОплаты1"));
				ТаблицаКомплект[0].ОплаченоВидомОплаты2 = ТаблицаКомплект[0].ОплаченоВидомОплаты2 + (Позиция.ОплаченоВидомОплаты2 - ТаблицаКомплект.Итог("ОплаченоВидомОплаты2"));
				ТаблицаКомплект[0].ОплаченоВидомОплаты3 = ТаблицаКомплект[0].ОплаченоВидомОплаты3 + (Позиция.ОплаченоВидомОплаты3 - ТаблицаКомплект.Итог("ОплаченоВидомОплаты3"));
				ТаблицаКомплект[0].Скидка               = ТаблицаКомплект[0].Скидка               + (Позиция.Скидка               - ТаблицаКомплект.Итог("Скидка"));
				ТаблицаКомплект[0].Сумма                = ТаблицаКомплект[0].Сумма                + (Позиция.Сумма                - ТаблицаКомплект.Итог("Сумма"));
				
				Для Каждого СтрокаТЗ Из ТаблицаКомплект Цикл
					СтрокаТЗ.Цена = СтрокаТЗ.Сумма/СтрокаТЗ.Количество;
					ОбработатьСтрокуДокумента(ДокОтчет, СтрокаТЗ, ИК, мСкладыВТабличнойЧасти, мТекКассаККМ);
				КонецЦикла;
			иначе
//////////////////////////////////////////////////////
			ВыборкаКомплект.Колонки.Добавить("ОбщКоличество");
			ВыборкаКомплект.Колонки.Добавить("КолЦена");
			ВыборкаКомплект.Колонки.Добавить("СуммаПродажи");
			ВыборкаКомплект.Колонки.Добавить("СуммаСоСкидкой");
				Для Каждого СтрокаТЗ Из ВыборкаКомплект Цикл
					СтрокаТЗ.ОбщКоличество = Позиция.Количество*СтрокаТЗ.Количество*Позиция.ЕдиницаИзмерения.Коэффициент/СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
					СтрокаТЗ.КолЦена = СтрокаТЗ.ОбщКоличество*СтрокаТЗ.Цена;
				КонецЦикла;
					Мас = ВыборкаКомплект.ВыгрузитьКолонку("КолЦена");
					суммаКРаспределению = позиция.Цена*Позиция.Количество;
					НовыйМас = общегоНазначения.РаспределитьПропорционально(суммаКРаспределению,Мас);
					Если НовыйМас<>Неопределено Тогда
						ВыборкаКомплект.ЗагрузитьКолонку(НовыйМас,"СуммаПродажи");
					Иначе
						ВыборкаКомплект.ЗаполнитьЗначения(0,"СуммаПродажи");
					КонецЕсли;
					суммаКРаспределению = позиция.Сумма;
					НовыйМас = общегоНазначения.РаспределитьПропорционально(суммаКРаспределению,Мас);
					Если НовыйМас<>Неопределено Тогда
						ВыборкаКомплект.ЗагрузитьКолонку(НовыйМас,"СуммаСоСкидкой");
					Иначе
						ВыборкаКомплект.ЗаполнитьЗначения(0,"СуммаСоСкидкой");
					КонецЕсли;
				Для Каждого СтрокаКомплект Из ВыборкаКомплект Цикл
					НовСтр = ТаблицаКомплект.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Позиция);
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаКомплект);
					НовСтр.Количество = СтрокаКомплект.ОбщКоличество;
					НовСтр.ОплаченоВидомОплаты1 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты1/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.ОплаченоВидомОплаты2 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты2/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.ОплаченоВидомОплаты3 = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.ОплаченоВидомОплаты3/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.Скидка               = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(Позиция.Скидка/ВыборкаКомплект.Итог("Сумма")*СтрокаКомплект.Сумма,2));
					НовСтр.Сумма                = ?(ВыборкаКомплект.Итог("Сумма")=0,0,Окр(СтрокаКомплект.СуммаСоСкидкой,2));
					НовСтр.Цена = СтрокаКомплект.СуммаПродажи/НовСтр.Количество;
					ОбработатьСтрокуДокумента(ДокОтчет, НовСтр, ИК, мСкладыВТабличнойЧасти, мТекКассаККМ);
				КонецЦикла;
					
			КонецЕсли;
 				НовСтр = ДокОтчет.НаборыТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Позиция);
			//Гаспирович В.В. 15.06.15
			Иначе
				ОбработатьСтрокуДокумента(ДокОтчет, Позиция, ИК, мСкладыВТабличнойЧасти, мТекКассаККМ);
			КонецЕсли;
			//ZAM--- 22.04.2014
		КонецЦикла;
		Попытка
			Комм=ЭлОтчет.Представление;
			Если ЗначениеЗаполнено(СпПропущенных) Тогда
				Комм=Комм+Символы.ПС+"ПРОПУЩЕННЫЕ ЧЕКИ"+Символы.ПС+СпПропущенных;
			КонецЕсли;
			ЗаписатьОтчетОРозничныхПродажах(ДокОтчет,СуммаОплаты2,СуммаОплаты3,Комм);
		Исключение
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Результат = ПолучитьСерверТО().ЗавершитьЗагрузкуОтчетаОПродажах(ККМ);
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,ТекстОшибки);
	Иначе//все хорошо, удаляем файл
		УдалитьФайлы(Объект.Параметры.ФайлОтчета);
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Файл отчета удален по причине-усшное окончание загрузки");
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	ОбъектКассаККМ.ФлагКассаЗаблокирована = Ложь;
	ОбъектКассаККМ.Записать();
	ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.Успешно,"Отчет успешно загружен");

КонецПроцедуры

//ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ ОТЧЕТ О РОЗНИЧНЫХ ПРОДАЖАХ

//функция загружает файл отчета о продажах из кассы
//Идентификатор - идентификатор кассы  ККМ откуда произвести загрузку
//Отчет - переменная, куда загружается таблица значений с данными о продажах
Функция ЗагрузитьОтчетОПродажах(Идентификатор, Отчет) Экспорт
	
	Отчет = Новый ТаблицаЗначений();
	Отчет.Колонки.Добавить("Номенклатура");
	Отчет.Колонки.Добавить("ЕдиницаИзмерения");
	Отчет.Колонки.Добавить("Качество");
	Отчет.Колонки.Добавить("Количество");
	Отчет.Колонки.Добавить("Цена");
	Отчет.Колонки.Добавить("Сумма");
	Отчет.Колонки.Добавить("Скидка");
	Отчет.Колонки.Добавить("НомерДокумента");
	Отчет.Колонки.Добавить("НомерСмены");
	Отчет.Колонки.Добавить("ИнформацияПоСкидке");
	Отчет.Колонки.Добавить("ТипСкидки");
	Отчет.Колонки.Добавить("СтавкаСкидки");
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты1");
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты2");
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты3");
	Отчет.Колонки.Добавить("ДатаДокумента");
	Отчет.Колонки.Добавить("НомерОтчета");
	Отчет.Колонки.Добавить("НаличностьВККМ");
    //KAV++ 21-07-2014
	Отчет.Колонки.Добавить("НомерЧекаККМ");
	Отчет.Колонки.Добавить("ДатаЧекаККМ");
	//KAV--
	//+! ГВВ
	Отчет.Колонки.Добавить("СуммаСкидкиДляКомплекта");
	//-! ГВВ

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьСерверТО().ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);
	Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
	
	СтараяДата = Неопределено;
	Флаг = Ложь;
	РезТемп = Перечисления.ТООшибкиККМOffline.ПустаяСсылка();
	Если Файл.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Попытка
			Файл.Прочитать(Объект.Параметры.ФайлОтчета);
		Исключение
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,ОписаниеОшибки());
			РезТемп = Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
			Флаг = НЕ Файл.КоличествоСтрок()>0;
		КонецПопытки;
		Если Не Флаг Тогда
			Строка = Файл.ПолучитьСтроку(1);
			Если Строка = "#" Тогда
				Индекс = 4;
				Флаг=Ложь;
				Пока Истина Цикл
					Строка = Файл.ПолучитьСтроку(Индекс);
					Индекс = Индекс + 1;
					Если ПустаяСтрока(Строка) Тогда
						Прервать;
					КонецЕсли;
					Строка             = СтрЗаменить(Строка, ";", Символы.ПС);
					ДатаТранзакцииСтр  = СтрПолучитьСтроку(Строка, 2);
					Если СтараяДата=Неопределено Тогда
						СтараяДата = ДатаТранзакцииСтр;
					ИначеЕсли СтараяДата<>ДатаТранзакцииСтр Тогда
						Флаг = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			Иначе
				ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,"Файл уже был загружен в 1с");
			КонецЕсли;
		КонецЕсли;
		Флаг=Ложь;
	КонецЕсли;
	Если Флаг Тогда
		ТекстОшибки = "Файл отчета с ошибками. Замените файл";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаЧтенияФайла,"Нарушена структура файла");
		Возврат Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ВремОтчет = Неопределено;
//ZAM+++ 10.08.2015 #1190051 отчет по отмененным чекам
		//Результат = Обработка.ЗагрузитьОтчет(Объект, ВремОтчет);//получаем в ВремОтчет таблицу из файла выгруженного кассой
		//KAV++ Крапивин Андрей. 24.08.2015 12:29:03 #1191387. Не все обработки ТО видимо изменили. После неудачной попытки загрузим старым способом;
		Попытка
			Результат = Обработка.ЗагрузитьОтчет(Объект, ВремОтчет, ТабОтмененныхЧеков);//получаем в ВремОтчет таблицу из файла выгруженного кассой
		Исключение
			Результат = Обработка.ЗагрузитьОтчет(Объект, ВремОтчет);
			ТабОтмененныхЧеков=Неопределено;
		КонецПопытки;
		//KAV-- Крапивин Андрей. 24.08.2015 12:29:48
//ZAM--- 10.08.2015
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ТекНомерОтчета=Неопределено;
			ТекДатаДокумента="";
			Для каждого Позиция Из ВремОтчет Цикл
				Если Позиция.НомерСмены<>ТекНомерОтчета Тогда
					ТекНомерОтчета=Позиция.НомерСмены;
					ТекДатаДокумента=НачалоДня(Позиция.ДатаДокумента);
				КонецЕсли;
				//Найдем номенклатуру
				ОписаниеПозиции = ПолучитьОписаниеТовараККМПоКоду(Позиция.ПЛУ);
				Если Не ЗначениеЗаполнено(ОписаниеПозиции)Тогда
					ТекстОшибки = "" + "В списке товаров ККМ не найден товар с кодом: " + Позиция.ПЛУ + " Загрузка отчета не возможна!!! Посмотрите наименование товара в ККМ и заведите описание товара в Программу 1С.";
					ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
					Отчет.Очистить();
					Результат = Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
					ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,ТекстОшибки);
					Возврат Результат;
				КонецЕсли;
				
				//Сверимся по цене
				Если НЕ мАвтоРежим Тогда
					ЦенаАТТ = ПолучитьЦенуАТТ(мТекКассаККМ.Склад,ОписаниеПозиции.Номенклатура);
					Если Позиция.Цена <> ЦенаАТТ Тогда
						ТекстОшибки = "Цены в 1С не совпадают с ценой, полученной из кассы!
						              |Номенклатура - "+ОписаниеПозиции.Номенклатура+"
						              |Цена в 1С    - "+ЦенаАТТ+"
								      |Цена в кассе - "+Позиция.Цена;
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
						 
				СтрокаОтчета = Отчет.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, ОписаниеПозиции);
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "Количество, Цена, Сумма, ДатаДокумента");
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "Скидка, НомерДокумента, НомерСмены, ИнформацияПоСкидке");
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "ТипСкидки, СтавкаСкидки, ОплаченоВидомОплаты1, ОплаченоВидомОплаты2");
				ЗаполнитьЗначенияСвойств(СтрокаОтчета, Позиция, "ОплаченоВидомОплаты3,НомерОтчета,НаличностьВККМ");
				//KAV++ 21-07-2014
				СтрокаОтчета.НомерЧекаККМ	=Позиция.НомерДокумента;
				СтрокаОтчета.ДатаЧекаККМ	=Позиция.ДатаДокумента;
				СтрокаОтчета.ДатаДокумента	=ТекДатаДокумента;
			КонецЦикла;
		Иначе
			ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,"Не удалось создать отчет о розн. продажах");
		КонецЕсли;
	Иначе
		Отчет.Очистить();
		Результат = ПолучитьСерверТО().ПолучитьТекстОшибкиПодключенияТО("ККМ Offline");
		ДобавитьЗаписьВЛог(мТекКассаККМ,СтатусыОшибок.ОшибкаОтчета,"Не удалось подключить торговое оборудования");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОтчетОРозничныхПродажах(КассаККМ, Позиция)

	ТекущаяДата   = ТекущаяДата();
    ДатаДокумента   = Позиция.ДатаДокумента;
	Если Позиция.ДатаДокумента = КонецДня(ТекущаяДата) Тогда
		ДатаДокумента   = ТекущаяДата;
	КонецЕсли;

	Отчет               = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Отчет.Дата          = НачалоДня(ДатаДокумента)+23*60*60;//устанавливаем время на 23:00 пожелание Уткиной Татьяны
	Отчет.Склад         = КассаККМ.Склад;
	Отчет.Подразделение = КассаККМ.Склад.Подразделение;
	Отчет.КассаККМ      = КассаККМ;
	Отчет.Организация   = КассаККМ.Владелец;
	Отчет.ИнициализироватьДокумент(Неопределено, Неопределено);
	Отчет.УчитыватьНДС     = Истина;
	Отчет.СуммаВключаетНДС = Истина;
	//KAV++ Новые поля
	Отчет.НомерКассовойСмены	= Позиция.НомерСмены;
	Отчет.СуммаZОтчета			= Позиция.НаличностьВККМ;
	//KAV--
	Возврат Отчет;

КонецФункции

Функция ЗаписатьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах,СуммаОплаты2=0,СуммаОплаты3=0, _Комментарий="")

	ОтчетОРозничныхПродажах.ДополнитьДокументЗначениямиПоУмолчанию();
	ОтчетОРозничныхПродажах.Комментарий = _Комментарий;

	Если СуммаОплаты2 <> 0 Тогда
		//000000001 Эквайринг БИТ Маркет
		//000000002 Эквайринг Кузьминский
		//000000003 Эквайринг Максимов
		//000000004 Эквайринг Фирма
		//000000005 Договор эквайринга ПИВ и Ко

		Если ОтчетОРозничныхПродажах.Организация.Код = "000000101" Тогда //ООО "БИТ Маркет"
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000001");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000004" Тогда //ИП Кузьминский Кирилл Алексеевич 
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000002");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000003" Тогда //ИП Максимов Алексей Олегович 
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000003");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000108" Тогда //ООО "ФИРМА"
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000004");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000015" Тогда //ООО "ПИВ и Ко"
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000005");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000117" Тогда//ИП Постников Павел Александрович
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000007");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000118" Тогда//ИП Постникова Ольга Ивановна
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000006");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000119" Тогда//ИП Свитова Галина Назариновна
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000008");
		ИначеЕсли ОтчетОРозничныхПродажах.Организация.Код = "000000125" Тогда//ИП Максимов Игорь
			ОтчетОРозничныхПродажах.ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.НайтиПоКоду("000000009");
		Иначе
			Сообщить("Для Организации: " + ОтчетОРозничныхПродажах.Организация + " не настроен договор Эквайринга.");
		КонецЕсли;
		ОтчетОРозничныхПродажах.Эквайрер = ОтчетОРозничныхПродажах.ДоговорЭквайринга.Эквайрер;
		ОтчетОРозничныхПродажах.ДоговорВзаиморасчетовЭквайрера = ОтчетОРозничныхПродажах.ДоговорЭквайринга.ДоговорВзаиморасчетов;
		ОПК = ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Добавить();
		ОПК.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("VISA");
		ОПК.Сумма = СуммаОплаты2;
		
		СоответствиеТарифов = УправлениеРозничнойТорговлей.СформироватьСоответствиеТарифовЭквайринг(ОтчетОРозничныхПродажах.ДоговорЭквайринга);

		ОПК.ПроцентТорговойУступки = СоответствиеТарифов[ОПК.ВидОплаты];
		ОПК.СуммаТорговойУступки = ОПК.Сумма * ОПК.ПроцентТорговойУступки / 100;
		
	КонецЕсли;
	Если СуммаОплаты3 <> 0 Тогда //ДОСТАВКА
		ОПК = ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами2.Добавить();
		ОПК.ВидОплаты = Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("ДОСТАВКА");
		ОПК.Эквайрер = ОПК.ВидОплаты.БанкКредитор;
		ОПК.ДоговорВзаиморасчетовЭквайрера = ОПК.ВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
		ОПК.Сумма = СуммаОплаты3;
	КонецЕсли;
	
	//KAV++ Крапивин Андрей. 31.03.2015 17:50:38 #1186080 Заполним поля с картой даже для пустой скидки
	Соотв=Новый Соответствие;
	Для Каждого СтрокаТЧ Из ОтчетОРозничныхПродажах.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки) Тогда
			Соотв.Вставить(СтрокаТЧ.НомерЧекаККМ,СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл Из Соотв Цикл
		Стр=ОтчетОРозничныхПродажах.Товары.НайтиСтроки(Новый Структура("НомерЧекаККМ",Эл.Ключ));
		Для каждого СтрокаТЧ Из Стр Цикл
			Если не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки) Тогда
				СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки=Эл.Значение;
				СтрокаТЧ.УсловиеАвтоматическойСкидки=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//KAV-- Крапивин Андрей. 31.03.2015 17:51:13
	
	ОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете = Ложь;//пожелание Уткиной Татьяны
	ОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете     = Ложь;//пожелание Уткиной Татьяны
	Попытка
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Записан "+ОтчетОРозничныхПродажах);
	Исключение	
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать документ """ + ОтчетОРозничныхПродажах + """."
		   + Символы.ПС + Символы.ПС + ОписаниеОшибки());
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;
//ZAM+++ 10.08.2015 #1190051 отчет по отмененным чекам
	Если ТипЗнч(ТабОтмененныхЧеков)=Тип("ТаблицаЗначений") Тогда
		НаборЗаписейЧеки = РегистрыСведений.РеестрОтмененныхЧеков.СоздатьНаборЗаписей();
		НаборЗаписейЧеки.Отбор.Документ.Установить(ОтчетОРозничныхПродажах.Ссылка);
		НаборЗаписейЧеки.Прочитать();
		НаборЗаписейЧеки.Очистить();
		Для Каждого СтрокаТЗ Из ТабОтмененныхЧеков Цикл
			НовЗапись = НаборЗаписейЧеки.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаТЗ);
			НовЗапись.Документ = ОтчетОРозничныхПродажах.Ссылка;
		КонецЦикла;
		НаборЗаписейЧеки.Записать(Истина);
	КонецЕсли;
//ZAM--- 10.08.2015

//ZAM+++ 11.04.2013 проведение документа
	Если Не мАвторежим Тогда
		Попытка
			Если ИТИИндустрияОбщийМодульКлиентСервер.ПринадлежитКатегории(ОтчетОРозничныхПродажах.Склад,Справочники.ИТИКонстанты.ПроводитьПриАвтоЗагрузке.Указатель) Тогда
				ГлТекстПисьма = "";//ZAM 03.05.2013 задача #1037855 Сообшения отчета о розничных продажах в почту
				ПровестиДокумент(ОтчетОРозничныхПродажах);
				//ZAM+++ 03.05.2013 задача #1037855 Сообшения отчета о розничных продажах в почту
				ГлТекстПисьма = СтрЗаменить(ГлТекстПисьма, Символы.ПС, " <br/>");
				Если ЗначениеЗаполнено(ГлТекстПисьма) Тогда
					ТекстПисьма = ""+ТекстПисьма+ОтчетОРозничныхПродажах+"<br/>";//собственно сам документ
					ТекстПисьма = ТекстПисьма + ГлТекстПисьма;//сообщения об ошибках
				КонецЕсли;
				//ZAM--- 03.05.2013
			КонецЕсли;
			//ZAM--- 11.04.2013
			Результат = Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ """ + ОтчетОРозничныхПродажах + """."
			+ Символы.ПС + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ИТИИндустрияОбщийМодульКлиентСервер.ПринадлежитКатегории(ОтчетОРозничныхПродажах.Склад,Справочники.ИТИКонстанты.ПроводитьПриАвтоЗагрузке.Указатель) Тогда
			Попытка
				ПровестиДокумент(ОтчетОРозничныхПродажах);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Сообщить("Создан документ "+ОтчетОРозничныхПродажах);
	Возврат Результат;

КонецФункции

Процедура ОбработатьСтрокуДокумента(ДокОтчет, Позиция, ИК, мСкладыВТабличнойЧасти, КассаККМ)

//ZAM+++ 22.04.2014 #1179605 Переработать документ ООрП и процедуры загрузки Акций
	Товар = ДокОтчет.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(Товар, Позиция);
	Товар.Коэффициент = Товар.ЕдиницаИзмерения.Коэффициент;
    //KAV++ 21-07-2014
	Товар.НомерЧекаККМ=ДокОтчет.Подразделение.Наименование+"_"+Позиция.НомерЧекаККМ;
	//KAV--
	Если мСкладыВТабличнойЧасти Тогда
		Товар.Склад = КассаККМ.Склад;
	КонецЕсли;

	СуммаБезСкидок = Товар.Цена * Товар.Количество;
	//KAV++ Учет скидок. Если есть карта-автоматическая скидка, для сохранения номера карты
	Если СуммаБезСкидок <> 0 Тогда
		Если Позиция.ТипСкидки = 3 или Позиция.ТипСкидки = 12 Тогда //Скидка по дисконтной карте ШТРИХ и 12 - атол автоматическая на чек
			Если (ЗначениеЗаполнено(Позиция.ИнформацияПоСкидке) И Окр((1 - Товар.Сумма / СуммаБезСкидок) * 100.0,2)<>0)  или 
				(ЗначениеЗаполнено(Позиция.ИнформацияПоСкидке)  и значениеЗаполнено(позиция.СуммаСкидкиДляКомплекта)  ) Тогда
				КодКарты = СокрЛП(Позиция.ИнформацияПоСкидке);
				ИК = Справочники.ИнформационныеКарты.НайтиПоРеквизиту("КодКарты", КодКарты);
				
				//+! ГВВ
				если значениеЗаполнено(позиция.СуммаСкидкиДляКомплекта) тогда
					Товар.ПроцентАвтоматическихСкидок = позиция.СуммаСкидкиДляКомплекта/(Товар.Цена * Товар.Количество+ позиция.СуммаСкидкиДляКомплекта)*100;
				иначе	
					Товар.ПроцентАвтоматическихСкидок=(1 - Товар.Сумма / СуммаБезСкидок) * 100.0;
				КонецЕсли;
				//+! ГВВ
				
				Товар.УсловиеАвтоматическойСкидки=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
				Товар.ЗначениеУсловияАвтоматическойСкидки=ИК;
			КонецЕсли;
		Иначе
			//Иначе ручная. Округление, акции и прочее
			Товар.ПроцентСкидкиНаценки = (1 - Товар.Сумма / СуммаБезСкидок) * 100.0;
		КонецЕсли;
	КонецЕсли;
	Товар.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ДокОтчет);
	УправлениеЗапасами.ДобавитьСоставНабора(Товар, ДокОтчет);
	Если ЗначениеЗаполнено(ИК) Тогда //Не работает, надо разбираться
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныАТТСрезПоследних.Склад,
		|	ЦеныАТТСрезПоследних.Номенклатура,
		|	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры,
		|	ЦеныАТТСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныАТТ.СрезПоследних(
		|			&Дата,
		|			Номенклатура = &Номенклатура
		|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|				И Склад = &Склад) КАК ЦеныАТТСрезПоследних";
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Номенклатура", Товар.Номенклатура);
		Запрос.УстановитьПараметр("Склад", Товар.Склад);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Товар.ХарактеристикаНоменклатуры);
		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Цена) Тогда
				Товар.ПроцентАвтоматическихСкидок=Окр((1-Товар.Цена/ВыборкаДетальныеЗаписи.Цена)*100);
				Товар.Цена=ВыборкаДетальныеЗаписи.Цена;
			КонецЕсли;
			Если Товар.ПроцентАвтоматическихСкидок<>0 Тогда
				Товар.ПроцентСкидкиНаценки = 0;
				Товар.УсловиеАвтоматическойСкидки=Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
				Товар.ЗначениеУсловияАвтоматическойСкидки=ИК.Ссылка;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
//ZAM--- 22.04.2014

КонецПроцедуры

Процедура ПровестиДокумент(ОтчетОРозничныхПродажах)

	Запись = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект    = ОтчетОРозничныхПродажах.Ссылка;
	//Запись.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("000000165");
	Запись.Категория = Справочники.ИТИКонстанты.КатегорияПроведениеОтложено.Указатель;
	Запись.Записать(Истина);

КонецПроцедуры

//ФУНКЦИИ ЗАПРОСА ОТЧЕТОВ

//Процедура формирует файл с запросом продаж за период из кассы
//НачДата - дата начала периода запроса
//КонДата - дата окончания периода запроса
Функция ЗапроситьОтчетЗаПериод(ИмяФайла) Экспорт
	Команда="";
	Если ЗначениеЗаполнено(НачДата) ИЛИ ЗначениеЗаполнено(КонДата) Тогда
		НачалоЗапросДата		=?(ЗначениеЗаполнено(НачДата),НачДата,НачалоНедели(ТекущаяДата()));
		КонецЗапросДата			=КонецДня(?(ЗначениеЗаполнено(КонДата),КонДата,ТекущаяДата()));
		ПараметрыСнятияОтчета	=Формат(НачалоЗапросДата, "ДЛФ=DT")+";"+Формат(КонецЗапросДата, "ДЛФ=DT")+";";
		Команда=Команда+"$$$TRANSACTIONSBYDATETIMERANGE" + Символы.ПС + ПараметрыСнятияОтчета;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Команда);
	Попытка
		Текст.Записать(ИмяФайла, "windows-1251");
		Файл = Новый Файл(ИмяФайла);
	Исключение
		ТекстОшибки = "Ошибка записи служебного файл-флага!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ЗапроситьОтчетЗаСмены(ИмяФайла) Экспорт
	Команда="";
	Если ЗначениеЗаполнено(НачСмена) ИЛИ ЗначениеЗаполнено(КонСмена) Тогда
		НачалоЗапросСмена		=?(ЗначениеЗаполнено(НачСмена),НачСмена,КонСмена);
		КонецЗапросСмена		=?(ЗначениеЗаполнено(КонСмена),КонСмена,НачСмена);
		ПараметрыСнятияОтчета	=Формат(НачалоЗапросСмена, "ЧДЦ=0; ЧН=; ЧГ=")+";"+Формат(КонецЗапросСмена, "ЧДЦ=0; ЧН=; ЧГ=")+";";
		Команда=Команда+"$$$TRANSACTIONSBYSESSIONSRANGE" + Символы.ПС + ПараметрыСнятияОтчета;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Команда);
	Попытка
		Текст.Записать(ИмяФайла, "windows-1251");
		Файл = Новый Файл(ИмяФайла);
	Исключение
		ТекстОшибки = "Ошибка записи служебного файл-флага!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
    Возврат Истина;
КонецФункции

Функция ЗапроситьОтчетПоследнейСмены(ИмяФайла) Экспорт
	Команда="";
	Команда="$$$LASTSESSIONTRANSACTIONS";
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку(Команда);
	Попытка
		Текст.Записать(ИмяФайла, "windows-1251");
		Файл = Новый Файл(ИмяФайла);
	Исключение
		ТекстОшибки = "Ошибка записи служебного файл-флага!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции



УказаниеСкладов			= глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мСкладыВТабличнойЧасти	= (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации
                            Или УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
							
СтатусыОшибок			= Перечисления.РезультатыЗагрузкиОтчетаОРозничныхПродажах;
мАвтоРежим=Ложь;
