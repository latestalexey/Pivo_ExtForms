//17_07_13 Str+ Добавлено ограничение картности на товар в ККМ АТОЛ

#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мНетОшибки;
Перем мОшибкаПараметровНастройки;
Перем мОшибкаЗагрузкиДрайвера;
Перем мОшибкаПриПодключении;
Перем мОшибкаТестНеПройден;
Перем мОшибкаВыгрузкиТоваров;
Перем мEAN8;
Перем мEAN13;
Перем мОшибкаЗагрузкиОтчета;
Перем мТипЧисло;
Перем мРазделитель;

Перем мИдентификатор;
Перем мВерсияОбработки;

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ОБЩИЕ ФУНКЦИИ API)


Функция ПолучитьЗначениеСвойства(ВыбОбъект,НаименованиеСвойства) Экспорт

		Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(НаименованиеСвойства);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Значение КАК ДопСвойство
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект = &ВыбОбъект
			|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";

		Запрос.УстановитьПараметр("ВыбОбъект", ВыбОбъект);
		Запрос.УстановитьПараметр("Свойство", Свойство);

		Результат = Запрос.Выполнить();

		Если НЕ Результат.Пустой() Тогда
		
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Возврат Выборка.ДопСвойство; 
		
		Иначе
		
			Возврат "";	
		
		КонецЕсли;
		
	КонецФункции // ПолучитьКонтрагентаДляДокументов

	//НВЮ/ Получает заказанную Категорю Объекта
//
// Параметры
//  Эл  – СправочникСсылка/ДокументСсылка – для получения Категории
//  НаименованиеСвойства  – Строка_50 – Наименование получаемой Категории
//                          Предопределённый или ссылка Спр.Категории
// Возвращаемое значение:
//   Значение заказанной Категории (Булево или Неопределено-если ошибка)
//

Функция ПолучитьКатегориюОбъекта(Эл, НаименованиеКатегории) Экспорт

   Если Эл = Неопределено Тогда// Объект не указан

                   Возврат Неопределено;

   ИначеЕсли Не ЗначениеЗаполнено(Эл) Тогда // Объект не указан

                   Возврат Неопределено;

   КонецЕсли;

   Если ТипЗнч(НаименованиеКатегории) = Тип("СправочникСсылка.КатегорииОбъектов") Тогда

                   ТребСвойство = НаименованиеКатегории;

   Иначе

                   ТребСвойство = Справочники.КатегорииОбъектов.НайтиПоНаименованию(НаименованиеКатегории);

                   Если Не ЗначениеЗаполнено(ТребСвойство) Тогда

                                  Возврат Неопределено;

                   КонецЕсли;

   КонецЕсли;

   КатОбъ=РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();

   КатОбъ.Отбор.Объект.Значение=Эл;

   КатОбъ.Отбор.Объект.Использование = Истина;

   КатОбъ.Отбор.Категория.Значение=ТребСвойство;

   КатОбъ.Отбор.Категория.Использование = Истина;

   КатОбъ.Прочитать();

   Возврат КатОбъ.Количество()=1; // Истина=Категория имелось, Ложь=Категории нет

КонецФункции// ПолучитьКатегориюОбъекта()

Функция ПроверитьКатегорию(Объект,Категория)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Объект = &Объект
		|	И КатегорииОбъектов.Категория = &Категория";

	Запрос.УстановитьПараметр("Категория", Категория);
	Запрос.УстановитьПараметр("Объект", Объект);

	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции



// Функция возвращает номер версии API, поддерживаемой обработкой обслуживания.
//
// Номер версии задаётся следующим образом: Ver = Vmajor + Vminor / 100.0.
// Например, в случае, если данная функция возвращает значение «1.01», это
// означает, что данная обработка  имеет версию «1.1», полностью поддерживает
// версию «1.0» и содержит некоторые дополнительные элементы.
// В случае, если отличается целая часть версии (например, «2.1»), то это
// означает, что данная обработка несовместима с версией API «1.0».
//
// Функция является обязательной для любой версии API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Число> - Версия API обработки обслуживания.
//
//
Функция ПолучитьВерсиюAPI() Экспорт

	Результат = 2.05;
	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPI()

// Функция возвращает описание текущей обработки обслуживания (API v2.0).
//
// Данная функция позволяет серверу получить информацию об обработке
// обслуживания. Функция является обязательной для версий 1.X API.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <Структура> - Структура, содержащая описание текущей обработки.
//                Структура имеет следующие поля:
//
//                Вид              - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования, поддерживаемый
//                                   данной обработкой обслуживания.
//
//                СписокМоделей    - <Массив>
//                                 - Список поддерживаемых обработкой моделей
//                                   торгового оборудования.
//
//                Наименование     - <Строка>
//                                 - Наименование обработки обслуживания.
//
//                Описание         - <Строка>
//                                 - Описание обработки обслуживания.
//
//                ВерсияОбработки  - <Число>
//                                 - Номер версии обработки обслуживания
//                                   (не версии API!!!).
//                                   Данный параметр используется при
//                                   обновлении.
//                                   Номер версии задаётся следующим образом:
//                                   Ver = Vmajor + Vminor / 100.0.
//
Функция ПолучитьОписание() Экспорт

	Результат = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");
	Модели    = Новый Массив();

	Модели.Добавить("ККМ под управлением ""АТОЛ: Рабочее место кассира""");
//		Модели.Добавить("ККМ под управлением ""АТОЛ: Рабочее место кассира ПИВКО 2_5 """);

	мМетаданные               = Метаданные();
	Результат.Вид             = Перечисления.ВидыТорговогоОборудования.ККМOffLine;
	Результат.СписокМоделей   = Модели;
	Результат.Наименование    = мМетаданные.Синоним;
	Результат.Описание        = мМетаданные.Комментарий;
	Результат.ВерсияОбработки = мВерсияОбработки;
	Результат.Идентификатор   = мИдентификатор;

	Возврат Результат;

КонецФункции // ПолучитьОписание()

// Функция создаёт объект драйвера.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Выходной параметр; объект драйвера торгового
//                                   оборудования.
//
//  Модель                         - <Строка>
//                                 - Модель торгового оборудования, для которой
//                                   создаётся экземпляр драйвера.
//
//  Параметры                      - <Строка>
//                                 - Параметры подключаемого торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция СоздатьОбъектДрайвера(Объект, Модель, Параметры) Экспорт

	Результат      = мНетОшибки;
	ОписаниеОшибки = "";
	Объект         = Неопределено;

	БазаТоваров  = Неопределено;
	ФайлОтчета   = Неопределено;
	ФлагВыгрузки = Неопределено;

	Параметры.Свойство("БазаТоваров",  БазаТоваров);
	Параметры.Свойство("ФайлОтчета",   ФайлОтчета);
	Параметры.Свойство("ФлагВыгрузки", ФлагВыгрузки);

	Если БазаТоваров  = Неопределено
	 Или ФайлОтчета   = Неопределено
	 Или ФлагВыгрузки = Неопределено  Тогда
		Результат = мОшибкаПараметровНастройки;
	Иначе
		Объект = Новый Структура("Модель, Параметры, ОписаниеОшибки", Модель, Параметры, ОписаниеОшибки);
	КонецЕсли;

	Возврат Результат;

КонецФункции // СоздатьОбъектДрайвера()

// Функция возвращает набор событий драйвера и параметры их обработки для
// заданной модели торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект            - <*>
//                    - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица значений, содержащая информацию о внешних
//                      событиях, генерируемых драйвером.
//                      Таблица имеет следующие колонки:
//                       "ИмяСобытия" - <Строка> - Имя внешнего события.
//
Функция ПолучитьОписаниеСобытий(Объект) Экспорт

	Таблица = Новый ТаблицаЗначений();

	Таблица.Колонки.Добавить("ИмяСобытия");

	Возврат Таблица;

КонецФункции // ПолучитьОписаниеСобытий()

// Функция осуществляет подключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция Подключить(Объект) Экспорт

	Результат = мНетОшибки;
	Каталог   = "";

	ПолучитьКаталогИИмяФайлаТО(Объект.Параметры.БазаТоваров, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Результат = мОшибкаПриПодключении;
		Возврат Результат;
	КонецЕсли;

	ПолучитьКаталогИИмяФайлаТО(Объект.Параметры.ФайлОтчета, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Результат = мОшибкаПриПодключении;
		Возврат Результат;
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.Параметры.ФлагВыгрузки) Тогда
		ПолучитьКаталогИИмяФайлаТО(Объект.Параметры.ФлагВыгрузки, Каталог, Неопределено);
		Файл = Новый Файл(Каталог);
		Если Не Файл.Существует() Тогда
			Результат = мОшибкаПриПодключении;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // Подключить()

// Процедура осуществляет отключение устройства.
// (API v2.0)
//
// Параметры:
//  Объект - <*>
//         - Объект драйвера торгового оборудования.
//
Процедура Отключить(Объект) Экспорт

	

КонецПроцедуры // Отключить()

// Функция осуществляет проверку правильности настройки и подключения
// торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства, проверка
//                                   которого предполагается.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ТестУстройства(Объект) Экспорт

	Перем ТекПараметр;
	Результат          = мНетОшибки;

	Если Объект.Параметры.Количество() = 0 Тогда
		Результат = мОшибкаПараметровНастройки;
		Возврат Результат;
	КонецЕсли;

	Каталог = Неопределено;

	Объект.Параметры.Свойство("БазаТоваров", ТекПараметр);

	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Результат          = мОшибкаПараметровНастройки;
		Объект.ОписаниеОшибки = "Каталог """ + Каталог + """ не существует.";
		Возврат Результат;
	КонецЕсли;

	Объект.Параметры.Свойство("ФайлОтчета", ТекПараметр);

	ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
	Файл = Новый Файл(Каталог);
	Если Не Файл.Существует() Тогда
		Результат          = мОшибкаПараметровНастройки;
		Объект.ОписаниеОшибки = "Каталог """ + Каталог + """ не существует.";
		Возврат Результат;
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.Параметры.ФлагВыгрузки) Тогда
		Объект.Параметры.Свойство("ФлагВыгрузки", ТекПараметр);

		ПолучитьКаталогИИмяФайлаТО(ТекПараметр, Каталог, Неопределено);
		Файл = Новый Файл(Каталог);
		Если Не Файл.Существует() Тогда
			Результат          = мОшибкаПараметровНастройки;
			Объект.ОписаниеОшибки = "Каталог """ + Каталог + """ не существует.";
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ТестУстройства()

// Процедура осуществляет вызов формы настройки торгового оборудования.
// (API v2.0)
//
// Параметры:
//  Модель    - <Строка>
//            - Модель настраиваемого оборудования.
//
//  Параметры - <Структура>
//            - Входной/выходной параметр; структура параметров.
//
Процедура НастроитьОборудование(Модель, Параметры) Экспорт

	Форма            = ПолучитьФорму("ФормаНастройки");
	Форма.мМодель    = Модель;
	Форма.мПараметры = Параметры;
	Ответ            = Форма.ОткрытьМодально();

	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Параметры = Форма.мПараметры;
	КонецЕсли;

КонецПроцедуры // НастроитьОборудование()

// Функция возвращает имя источника внешнего события 
// генерируемое при подключеннии внешней компонентой.
// По уникальному для сеанса подключения имени производится поиск 
// из конфигурации обработки обслуживания для обработки полученного
// события.
// (API v2.1)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера устройства.
//
// Возвращаемое значение:
//  <Строка> - Имя внешнего источника события.
//
Функция ПолучитьИмяИсточникаВнешнегоСобытия(Объект) Экспорт

	Возврат "";

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ (ФУНКЦИИ API ОБРАБОТОК ОБСЛУЖИВАНИЯ ККМ OFF-LINE)

// Функция возвращает параметры выгрузки товаров в ККМ Offline.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Штрихкоды                      - <Булево>
//                                 - Выходной параметр; данная модель
//                                   ККМ позволяет выгружать только те товары,
//                                   для которых назначены штрихкоды.
//
//  ВесовойТовар                   - <Булево>
//                                 - Данная модель ККМ поддерживает работу с
//                                   весовыми товарами.
//
//  ТипыШтрихкодов                 - <Массив>
//                                 - Массив типов штрихкодов, поддерживаемых ККМ.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПолучитьПараметрыВыгрузки(Объект, Штрихкоды, ВесовойТовар,
                                  ТипыШтрихкодов) Экспорт

	Результат = мНетОшибки;

	ВесовойТовар   = Истина;
	Штрихкоды      = Истина;
	ТипыШтрихкодов = Новый Массив();

	ТипыШтрихкодов.Добавить(мEAN8);
	ТипыШтрихкодов.Добавить(мEAN13);

	Возврат Результат;

КонецФункции // ПолучитьПараметрыВыгрузки()

Функция ВычислитьСуммуНакоплений(ИнфКарта)
	Если ЗначениеЗаполнено(ИнфКарта)=Истина Тогда
		СуммаПродж=Неопределено;
		//ЗапросТекСкидки
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегПороги.ЗначениеПорога КАК ЗначениеПорога,
		|	РегПродажи.СуммаОборот КАК СУММАОБОРОТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|	ИЗ
		|		РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|		   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|	) КАК РегПродажи
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Пороги.НижняяГраница,
		|		Пороги.ЗначениеПорога
		|	ИЗ
		|		РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|	) КАК ПорогиМакс
		|	ПО
		|		Пороги.Период = ПорогиМакс.Период
		|) КАК РегПороги
		|ПО
		|	РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(РегПороги.НижняяГраница) КАК НижняяГраница
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(СУММА(РегПродажи.СуммаОборот), 0) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(&ДатаНач, &ДатаКон, ,
		|			   ДисконтнаяКарта = &ДисконтнаяКарта) КАК РегПродажи
		|		) КАК РегПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ
		|			Пороги.НижняяГраница
		|		ИЗ
		|			РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК Пороги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				МАКСИМУМ(ПорогиМакс.Период) КАК Период
		|			ИЗ
		|				РегистрСведений.ПорогиНакопительныхСкидок.СрезПоследних(&ДатаКон) КАК ПорогиМакс
		|			) КАК ПорогиМакс
		|		ПО
		|			Пороги.Период = ПорогиМакс.Период
		|		) КАК РегПороги
		|	ПО
		|		РегПороги.НижняяГраница <= РегПродажи.СуммаОборот
		|	) КАК РегПорогиМакс
		|ПО
		|	РегПорогиМакс.НижняяГраница = РегПороги.НижняяГраница
		|");

		Запрос.УстановитьПараметр("ДатаНач", '00010101');
		Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
		Запрос.УстановитьПараметр("ДисконтнаяКарта", ИнфКарта);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			_Скидка = Строка(Выборка.ЗначениеПорога)+" %";
			Если Выборка.СУММАОБОРОТ>0 Тогда
				Возврат Выборка.СУММАОБОРОТ;
			КонецЕсли;  
		Иначе
			_Скидка = Строка(0)+" %";
		КонецЕсли;
	Иначе	
		Возврат 0;
	КонецЕсли;	
КонецФункции	

//LSV++ Соберем все ШК для номенклатуры
Функция ПолучитьШК (Товар)
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Штрихкоды.Штрихкод
	             |ИЗ
	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
	             |ГДЕ
	             |	Штрихкоды.Владелец = &Товар";
	Запрос.УстановитьПараметр("Товар",Товар);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыгрузитьУсловиеСкидки(КодУсловия,КодСкидки, НачальныйНомер,КонечныйНомер, ДлиннаНомера,ПроцентСкидки,ТекстСкидки1,ТекстСкидки2,Файл)
			Строка =   Формат(КодУсловия, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель //1 Да Целое Код условия
				+ Формат(КодСкидки, "ЧЦ=6; ЧДЦ=0; ЧН=0; ЧГ=0")  				+ мРазделитель //2 Да Целое Код
				+ ТекстСкидки1 + мРазделитель //3 Нет Строка 100 Наименование
				+ ТекстСкидки2 + мРазделитель //4 Нет Строка 100 Текст
				+ "0"  				+ мРазделитель//5 Да* Целое Тип ставки: 0 — отрицательная процентная (-%); 1 — отрицательная суммой (-$); 2 — положительная процентная (+%); 3 —положительная суммой (+$)
				+ "" + Число(ПроцентСкидки)+ мРазделитель //6 Нет Строка 100 Значение скидки или формула
				+ ""  				+ мРазделитель //7 Нет Дата Фактор «Дата», начало.
				+ ""  				+ мРазделитель //8 Нет Дата Фактор «Дата», окончание.
				+ ""  				+ мРазделитель //9 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ ""  				+ мРазделитель //10 Нет Время Фактор «Время», начало.
				+ ""  				+ мРазделитель //11 Нет Время Фактор «Время», окончание.
				+ ""  				+ мРазделитель //12 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ ""  				+ мРазделитель //13 Нет Целое Фактор «День недели», начало: 0 — понедельник; 6 —воскресенье
				+ ""  				+ мРазделитель //14НетЦелоеФактор «День недели», окончание:0 — понедельник;…6 —воскресенье
				+ ""  				+ мРазделитель //15 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ ""  				+ мРазделитель //16 Нет Дробное 10.4 Фактор «Количество позиции», начало
				+ ""  				+ мРазделитель //17 Нет Дробное 10.4 Фактор «Количество позиции»,окончание
				+ ""  				+ мРазделитель //18 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ ""  				+ мРазделитель //19 Нет Дробное 10.** Фактор «Сумма позиции», начало
				+ ""  				+ мРазделитель //20 Нет Дробное 10.** Фактор «Сумма позиции», окончание
				+ ""  				+ мРазделитель //21 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ ""  				+ мРазделитель //22 Нет Дробное 10.** Фактор «Сумма документа», начало
				+ ""  				+ мРазделитель //23 Нет Дробное 10.** Фактор «Сумма документа», окончание
				+ ""  				+ мРазделитель //24 Нет Целое Не используется. Поле должно бытьпустым или содержать «0»
				+ Прав("0000000" + Формат(НачальныйНомер, "ЧЦ="+ДлиннаНомера+"; ЧДЦ=0; ЧН=0; ЧГ=0"),ДлиннаНомера)  				+ мРазделитель //25 Нет Строка 40 Фактор «Префикс карты клиента»,  начало
				+ Прав("0000000" + Формат(КонечныйНомер, "ЧЦ="+ДлиннаНомера+"; ЧДЦ=0; ЧН=0; ЧГ=0"),ДлиннаНомера)				+ мРазделитель //26 Нет Строка 40 Фактор «Префикс карты клиента»,окончание
				+ ""  				+ мРазделитель //27 Нет Целое Не используется. Поле должно быть  пустым или содержать «0»
				+ ""  				+ мРазделитель //28 Нет Дробное 10.** Фактор «Цена позиции», начало
				+ ""  				+ мРазделитель //29 Нет Дробное 10.** Фактор «Цена позиции», окончание
				+ ""  				+ мРазделитель //30 Нет Целое Не используется. Поле должно бытьпустым или содержать «0»
				+ ""  				+ мРазделитель //31 Нет Дробное 10.4 Фактор «Количество документа», начало
				+ ""  				+ мРазделитель //32 Нет Дробное 10.4 Фактор «Количество документа»,окончание
				+ ""  				+ мРазделитель //33 Нет Целое Не используется. Поле должно быть  пустым или содержать «0»
				+ ""  				+ мРазделитель //34 Нет Строка 20/Целое Код товара / группы
				+ ""  				+ мРазделитель //35 Нет Дробное 10.4 Фактор «Количество товара / группы»,начало
				+ ""  				+ мРазделитель //36 Нет Дробное 10.4 Фактор «Количество товара / группы»,   окончание
				+ ""  				+ мРазделитель //37 Нет Целое Не используется. Поле должно быть      пустым или содержать «0»
				+ ""  				+ мРазделитель //38 Нет Дробное 10.** Фактор «Сумма товара / группы», начало
				+ ""  				+ мРазделитель //39 Нет Дробное 10.** Фактор «Сумма товара / группы»,окончание
				+ ""  				+ мРазделитель //40 Нет Целое Не используется. Поле должно бытьпустым или содержать «0»
				+ "1"  				+ мРазделитель //41 Нет Целое Фактор «Состояние карты клиента»:   0 — любое; 1 — введена; 2 — не введена  Значение по умолчанию = 0
				+ Формат(ДлиннаНомера, "ЧЦ=1; ЧДЦ=0; ЧН=0; ЧГ=0")  				+ мРазделитель //42 Нет Целое Фактор «Длина карты», начало
				+ Формат(ДлиннаНомера, "ЧЦ=1; ЧДЦ=0; ЧН=0; ЧГ=0")  				+ мРазделитель //43 Нет Целое Фактор «Длина карты», окончание
				+ ""  				+ мРазделитель //44 Нет Целое Не используется. Поле должно быть пустым или содержать «0»
				+ "1"  				+ мРазделитель //45 Нет Целое Назначение создаваемой ставки:   0 — ставка на позицию;  1 — ставка на документ
				+ ""  				+ мРазделитель //46 Нет Целое Код существующей ставки
				+ ""  				+ мРазделитель //47 Нет Целое Код сценария
				+ "";								//48 Нет Целое Код классификатора товара
//49 Нет Дробное 10.** Фактор «Условие 1», начало
//50 Нет Дробное 10.** Фактор «Условие 1», окончание
//51 Нет Строка 100 Фактор «Условие 1», формула
//52 Нет Дробное 10.** Фактор «Условие 2», начало
//53 Нет Дробное 10.** Фактор «Условие 2», окончание
//54 Нет Строка 100 Фактор «Условие 2», формула
//55 Нет Дробное 10.** Фактор «Условие 3», начало
//56 Нет Дробное 10.** Фактор «Условие 3», окончание
//57 Нет Строка 100 Фактор «Условие 3», формула
//58 Нет Дата Фактор «Дата регистрации», начало
//59 Нет Дата Фактор «Дата регистрации», окончание
//60 Нет Целое Тип временного диапазона для датырегистрации:0 — день;1 — неделя;2 — месяц;3 — год;4 — ежегодно день;5 — ежегодно неделя;6 — ежегодно месяцЗначение по умолчанию = 0
//61 Нет Строка 25Фактор «Временной диапазон» для датырегистрации, начало: значенияперечисляются через запятую.
//62 Нет Строка 255Фактор «Временной диапазон» для датырегистрации, окончание: значенияперечисляются через запятую.
//63 Нет Дата Фактор «Дата рождения», начало
//64 Нет Дата Фактор «Дата рождения», окончание
//65 Нет ЦелоеТип временного диапазона для датырождения:0 — день;1 — неделя;2 — месяц;3 — год;4 — ежегодно день;5 — ежегодно неделя;6 — ежегодно месяцЗначение по умолчанию = 0
//66 Нет Строка 255Фактор «Временной диапазон» для датырождения, начало: значенияперечисляются через запятую.
//67 Нет Строка 255Фактор «Временной диапазон» для датырождения, окончание: значенияперечисляются через запятую.
//68 Нет Дата Фактор «Знаменательная дата», начало.
//69 Нет Дата Фактор «Знаменательная дата»,окончание
//70 Нет ЦелоеТип временного диапазона длязнаменательной даты:0 — день;1 — неделя;2 — месяц;3 — год;4 — ежегодно день;5 — ежегодно неделя;6 — ежегодно месяцЗначение по умолчанию = 0
//71 Нет Строка 255Фактор «Временной диапазон» длязнаменательной даты, начало: значенияперечисляются через запятую.
//72 Нет Строка 255Фактор «Временной диапазон» длязнаменательной даты, окончание:значения перечисляются через запятую.
//73 Нет ЦелоеПол:0 — любой;1 — мужской;2 — женскийЗначение по умолчанию = 0
	Файл.ДобавитьСтроку(Строка);
	
КонецПроцедуры
// Функция осуществляет выгрузку таблицы товаров в ККМ, подключенную в режиме Offline.
// (API v2.3)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Товары                         - <ТаблицаЗначений>
//                                 - Таблица товаров, подлежащих загрузке в ККМ.
//                                   Таблица имеет следующие колонки:
//                                     PLU                        - <Число>
//                                                                - Идентификатор товара на кассе.
//                                     Номенклатура               - <СправочникСсылка.Номенклатура>
//                                                                - Номенклатура.
//                                     ВесовойТовар               - <Булево>
//                                                                - Товар является весовым.
//                                     ЕдиницаИзмерения           - <СправочникСсылка.ЕдиницыИзмерения>
//                                                                - Единица измерения номенклатуры.
//                                     ХарактеристикаНоменклатуры - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                                                                - Характеристика номенклатуры.
//                                     СерияНоменклатуры          - <СправочникСсылка.СерииНоменклатуры>
//                                                                - Серия номенклатуры.
//                                     Цена                       - <Число>
//                                                                - Цена номенклатуры.
//                                     КодТовара                  - <Число>, <Строка>
//                                                                - Код весового товара (для весовых товаров),
//                                                                  или штрихкод (для штучного товара).
//
//  ЧастичнаяВыгрузка               - <Булево>
//                                  - Признак частичной выгрузки товара
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ВыгрузитьТовары(Объект, Товары, ЧастичнаяВыгрузка = Ложь) Экспорт

	Результат = мНетОшибки;
	
	Файл = Новый ТекстовыйДокумент();
	
	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");
	
	Если ЧастичнаяВыгрузка = Ложь Тогда
		Файл.ДобавитьСтроку("$$$DELETEALLWARES");
		Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
		Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
	Иначе
		Файл.ДобавитьСтроку("$$$REPLACEQUANTITY");
	КонецЕсли;
	
	
	//Str+ Выгрузим 2 группы товара по скидкам (уже не используется используется контроль в карточке товара)
	Строка =   Формат(999998, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код
	+ Формат(0, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")  + мРазделитель // Штрих-код
	+ СокрЛП("Со скидкой")                           + мРазделитель // Наименование
	+ СокрЛП("Со скидкой")                           + мРазделитель // Текст для чека
	+ Формат(0, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")        + мРазделитель // Цена
	+ ""                                                  + мРазделитель // Остаток
	+ "0"                                                  + мРазделитель // Схема внутренней автоматической скидки
	// Флаги через запятую:
	// • дробное количество (весовой)
	// • продажа
	// • возврат
	// • отрицательные остатки
	// • без ввода количества
	// • списание остатков
	// • редактирование цены
	// • ввод количества вручную
	+ "0,1,1,1,1,1," + "1" + ",1"   + мРазделитель
	+ ""                                                   + мРазделитель // Минимальная цена
	+ ""                                                   + мРазделитель // Срок годности
	+ ""                                                   + мРазделитель // Код схемы разрезов
	+ "1"                                                   + мРазделитель // Вариант использования разрезов:
	//  0 – полный список
	//  1 – заданный список
	//  2 – заданный список с остатком
	+ ""                                                   + мРазделитель // Код схемы внешней автоматической скидки
	+ ""                    + мРазделитель // Коэффициент
	+ ""                                                   + мРазделитель // Код базового товара
	+ ""                                                   + мРазделитель // Код родительской группы
	+ "0"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
	+ ""                                                  + мРазделитель // Номер уровня иерархического списка
	+ ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1»
	+ СокрЛП("")                      + мРазделитель // Серия
	+ ""                                                   + мРазделитель // Сертификат
	+ ""                                                   + мРазделитель // Код ККМ
	+ ""                                                   + мРазделитель // Код налоговой группы
	+ ""                                                   + мРазделитель // Код весов с ПЭ
	+ ""                          + мРазделитель // Код товара в весах ПЭ
	+ ""                           + мРазделитель // Артикул
	+ ""                                                   + мРазделитель // Тип скидки/надбавки:
	//  0 – процентная скидка
	//  1 – скидка суммой
	//  2 – процентная надбавка
	//  3 – надбавка суммой
	+ ""                                                   + мРазделитель // Значение товарной скидки/надбавки
	+ ""                                                   + мРазделитель // Максимальная скидка, %
	+ ""                                                   + мРазделитель // Код принтера чеков
	+ ""                                                   + мРазделитель // Файл *.bmp с картинкой
	+ ""                                                   + мРазделитель // Описание
	+ "";                                                                // Кратность количества
	
	Файл.ДобавитьСтроку(Строка);
	Строка =   Формат(999999, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код
	+ Формат(0, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")  + мРазделитель // Штрих-код
	+ СокрЛП("Без скидки")                           + мРазделитель // Наименование
	+ СокрЛП("Без скидки")                           + мРазделитель // Текст для чека
	+ Формат(0, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")        + мРазделитель // Цена
	+ ""                                                  + мРазделитель // Остаток
	+ "0"                                                  + мРазделитель // Схема внутренней автоматической скидки
	// Флаги через запятую:
	// • дробное количество (весовой)
	// • продажа
	// • возврат
	// • отрицательные остатки
	// • без ввода количества
	// • списание остатков
	// • редактирование цены
	// • ввод количества вручную
	+ "0,1,1,1,1,1," + "1" + ",1"   + мРазделитель
	+ ""                                                   + мРазделитель // Минимальная цена
	+ ""                                                   + мРазделитель // Срок годности
	+ ""                                                   + мРазделитель // Код схемы разрезов
	+ "1"                                                   + мРазделитель // Вариант использования разрезов:
	//  0 – полный список
	//  1 – заданный список
	//  2 – заданный список с остатком
	+ ""                                                   + мРазделитель // Код схемы внешней автоматической скидки
	+ ""                    + мРазделитель // Коэффициент
	+ ""                                                   + мРазделитель // Код базового товара
	+ ""                                                   + мРазделитель // Код родительской группы
	+ "0"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
	+ ""                                                  + мРазделитель // Номер уровня иерархического списка
	+ ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1»
	+ СокрЛП("")                      + мРазделитель // Серия
	+ ""                                                   + мРазделитель // Сертификат
	+ ""                                                   + мРазделитель // Код ККМ
	+ ""                                                   + мРазделитель // Код налоговой группы
	+ ""                                                   + мРазделитель // Код весов с ПЭ
	+ ""                          + мРазделитель // Код товара в весах ПЭ
	+ ""                           + мРазделитель // Артикул
	+ ""                                                   + мРазделитель // Тип скидки/надбавки:
	//  0 – процентная скидка
	//  1 – скидка суммой
	//  2 – процентная надбавка
	//  3 – надбавка суммой
	+ ""                                                   + мРазделитель // Значение товарной скидки/надбавки
	+ ""                                                   + мРазделитель // Максимальная скидка, %
	+ ""                                                   + мРазделитель // Код принтера чеков
	+ ""                                                   + мРазделитель // Файл *.bmp с картинкой
	+ ""                                                   + мРазделитель // Описание
	+ "";                                                                // Кратность количества
	
	Файл.ДобавитьСтроку(Строка);
	
	//Str-
	ЕстьКонстантыКратностиВККМ = Ложь;
	Попытка
		Если ЗначениеЗаполнено(Справочники.ИТИКонстанты.ВесовыеСнеки.Указатель)	 Тогда
			ЕстьКонстантыКратностиВККМ = Истина;
		КонецЕсли; 
	Исключение
	КонецПопытки;
	
	КатПоНулевойЦенеПриНаличииКарты=Справочники.КатегорииОбъектов.НайтиПоНаименованию("По нулевой цене при наличии карты").Ссылка;  //svetl
    КатСкидкаПоДисконтнымКартам=Справочники.КатегорииОбъектов.НайтиПоНаименованию("Скидка по диск.картам -работает только с БезСкидки").Ссылка;  //+svetl

	Для Каждого Товар Из Товары Цикл
		//Str+
		СоСкидкой = Истина;
		Отбор = Новый Структура();
		Отбор.Вставить("Объект",Товар.Номенклатура.Ссылка);
		Кат = РегистрыСведений.КатегорииОбъектов.Выбрать(Отбор);
		Пока Кат.Следующий() Цикл
			Если Кат.Категория = Справочники.КатегорииОбъектов.НайтиПоНаименованию("Без скидки") Тогда    //Не применять скидку в POS
				СоСкидкой = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если Товар.Номенклатура.ЭтоГруппа тогда 
			продолжить;
		КонецЕсли;
		
		
		
		//+Svetl down
		Сертификат = "";
		Если Товар.Номенклатура.ПринадлежитЭлементу(Справочники.номенклатура.НайтиПоКоду("00000000235")) Тогда 
			Сертификат = "0.50";        //сигареты
		КонецЕсли;	
		
		СтатическийБонус = ПолучитьЗначениеСвойства(Товар.Номенклатура.Ссылка,"Фиксированный бонус");
		Если ЗначениеЗаполнено(СтатическийБонус) Тогда
			 Сертификат =СтрЗаменить(СтатическийБонус,",",".");
		 КонецЕсли;
		 
		 //+08/12/14   добавляем исключительные позиции с тройными бонусами . Дибильно, но вариантов нет пока иных
		 Если СокрЛП(Товар.ПЛУ)="00000028026" Тогда
			  Сертификат = "98";
			  СоСкидкой = Ложь;
			  ИначеЕсли СокрЛП(Товар.ПЛУ)="00000028027" Тогда
			  Сертификат = "98";
			  СоСкидкой = Ложь;

			  ИначеЕсли СокрЛП(Товар.ПЛУ)="00000028028" Тогда
			  Сертификат = "104";
              СоСкидкой = Ложь;

//			  ИначеЕсли СокрЛП(Товар.ПЛУ)="00000028029" Тогда
//			  Сертификат = "93";
//			  СоСкидкой = Ложь;
			ИначеЕсли СокрЛП(Товар.ПЛУ)="00000028363" Тогда
			  Сертификат = "93";
			  СоСкидкой = Ложь;
               
			  ИначеЕсли СокрЛП(Товар.ПЛУ)="00000028030" Тогда
			  Сертификат = "94.9";
			  СоСкидкой = Ложь;

          КонецЕсли;


		 
		 
		 
		////!!!!!1111Очень по-дибильному, но нужно было срочно сделать
		//Если СокрЛП(Товар.Номенклатура.Код)="00000011912" Тогда 
		//	Сертификат =  "8.80";        //ПИво с повышенными бонусами
		//КонецЕсли;
		//
		//Если СокрЛП(Товар.Номенклатура.Код)="00000011947" Тогда 
		//	Сертификат =  "9.05";        //Пиво с повышенными бонусами
		//КонецЕсли;

		//Если СокрЛП(Товар.Номенклатура.Код)="00000011948" Тогда 
		//	Сертификат = "13.45";        //Пиво с повышенными бонусами
		//КонецЕсли;

		//Если СокрЛП(Товар.Номенклатура.Код)="00000011949" Тогда 
		//	Сертификат = "17.85";        //Пиво с повышенными бонусами
		//КонецЕсли;

		//Если СокрЛП(Товар.Номенклатура.Код)="00000011950" Тогда 
		//	Сертификат = "26.65";        //Пиво с повышенными бонусами
		//КонецЕсли;

		//Если СокрЛП(Товар.Номенклатура.Код)="00000011951" Тогда 
		//	Сертификат = "35.45";        //Пиво с повышенными бонусами
		//КонецЕсли;


		
		
		
		///!!!!!!!!!!!!
		
		Если Товар.Номенклатура.ПринадлежитЭлементу(Справочники.номенклатура.НайтиПоКоду("00000008437")) Тогда 
			Сертификат = "5.00";        //сигареты
		КонецЕсли;
		
		
		Если Товар.Номенклатура.ПринадлежитЭлементу(Справочники.номенклатура.НайтиПоКоду("00000000221")) Тогда 
			СоСкидкой = Истина;   //делаем скидку на бутылки чтобы на них распространялись бонусы
		КонецЕсли;
		
		СкидкаПоДисконтнымКартам  =ПроверитьКатегорию(Товар.Номенклатура.Ссылка,КатСкидкаПоДисконтнымКартам);
		
		//Если товар можно продавать со скидкой, то смысла проверять галочку на скидку подисконтным картам  нет - обнуляем.
		Если СоСкидкой Тогда
			 СкидкаПоДисконтнымКартам = Ложь;
		КонецЕсли;
        СкидкаПоДисконтнымКартам = Ложь;   //!!!!!!!!!!!!!!!! блокируем этот признак - у них скрипты не заточены под него!

		//По нулевой цене при наличии карты
		ПоНулевойЦенеПриНаличииКарты = ПроверитьКатегорию(Товар.Номенклатура.Ссылка,КатПоНулевойЦенеПриНаличииКарты);
		
		
		
			
		//*****ПОДАРОЧНЫЕ СЕРТИФИКАТЫ
		ГТД="";
		Если НЕ СоСкидкой Тогда 
			//Товары которые нельзя продавать за бонусы
			СоСкидкой = Истина; 
			ГТД = "1"; //флаг того, что данный товар нельзя покупать за бонусы и диск. карты
		КонецЕсли;
		
		Если Товар.ЭтоПодарСерт Тогда
			//Это подарочный сертификат
			Сертификат = "0";
			СоСкидкой = Ложь; 
			ГТД = "550";
		КонецЕсли;
        //*****ПОДАРОЧНЫЕ СЕРТИФИКАТЫ

		
		
		//+Svetl up

		
		
		ШтрихКоды=ПолучитьШК(Товар.Номенклатура);
		Если ШтрихКоды.Количество()=0 тогда
			продолжить;
		КонецЕсли;
		
		//0,5000   1,0000
		
		//KAV++ Новый вариант. Указание свойства в карточке имеет высший приоритет.
		Если ЗначениеЗаполнено(Товар.КратностьТовара) Тогда
			ЛевГ=Найти(Товар.КратностьТовара,"[");
			ПрвГ=Найти(Товар.КратностьТовара,"]");
			_Кратность=Сред(Товар.КратностьТовара,ЛевГ+1,ПрвГ-(ЛевГ+1));
		Иначе
			ОпределенаКратность = Ложь;
			_Кратность = "1,0000";
			Если ЕстьКонстантыКратностиВККМ Тогда
				Если Товар.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ВесовыеСнеки.Указатель) ИЛИ Товар.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.Холодильник.Указатель) Тогда
					_Кратность = "";
				ИначеЕсли Товар.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.РазливноеПиво.Указатель) Тогда
					_Кратность = "0,5000";
				КонецЕсли
			Иначе	 
				Если (Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000700")) или
					Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000944"))) Тогда
					_Кратность = "";
				ИначеЕсли Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000001")) ИЛИ Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000003904")) Тогда
					_Кратность = "0,5000";
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
		//+svetl down
		_ПЛУ = "";
		Если Строка(Товар.Номенклатура.БазоваяЕдиницаИзмерения) = "кг" ИЛИ Строка(Товар.Номенклатура.БазоваяЕдиницаИзмерения) = "кг."  Тогда
			//Это весовой товар
			_ПЛУ = СокрЛП(Товар.Номенклатура.Код);
			Пока Лев(_ПЛУ, 1)="0" Цикл   // удаление ведущих нулей
				_ПЛУ = Сред(_ПЛУ, 2);
			КонецЦикла;
			_Кратность = ""; 
		КонецЕсли;
		//+svetl up
		
		//Сообщить(Товар.Номенклатура.Наименование+" "+Строка(ШтрихКоды.Количество()));
		Если ШтрихКоды.Количество()= 1 Тогда
			_Наименование = Товар.Номенклатура.НаименованиеПолное;
			_НаименованиеЭкран=?(Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000235")),Товар.Номенклатура.Наименование,Товар.Номенклатура.НаименованиеПолное);
			
			Строка =   Формат(Число(Товар.ПЛУ), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код (1)
			+ Прав(("0000000000000"+СокрЛП(ШтрихКоды[0].ШтрихКод)),13)  + мРазделитель // Штрих-код (2)
			+ ПодготовитьСтроку(_НаименованиеЭкран)		                + мРазделитель // Наименование (3)
			+ ПодготовитьСтроку(_Наименование)          			    + мРазделитель // Текст для чека (4)
			+ Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена (5)
			+ ""    + мРазделитель // Остаток (6)
			+ "0"                                                  + мРазделитель // Схема внутренней автоматической скидки (7)
			//+ ?(Товар.ВесовойТовар, 1, 0)											// Флаги через запятую: (8) //-svetl
			+ ?(_ПЛУ="", 0, 1)														// Флаги через запятую: (8) //+svetl
			// • дробное количество (весовой)
			// • продажа
			// • возврат
			// • отрицательные остатки
			// • без ввода количества
			// • списание остатков
			// • редактирование цены
			// • ввод количества вручную
			+ ",1,1,0,1,0," + ?(Товар.Цена = 0 ИЛИ ПоНулевойЦенеПриНаличииКарты=Истина, "1", "0") + ",1"   + мРазделитель
			+ ""                                                   + мРазделитель // Минимальная цена (9)
			+ ""                                                   + мРазделитель // Срок годности (10)
			+ ""                                                   + мРазделитель // Код схемы разрезов (11)
			+ ""                                                   + мРазделитель // Вариант использования разрезов: (12)
			//  0 – полный список
			//  1 – заданный список
			//  2 – заданный список с остатком
			+ ""                                                   + мРазделитель // Код схемы внешней автоматической скидки (13)
			+ Формат(Товар.ЕдиницаИзмерения.Коэффициент,
			"ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент (14)
			+ ""                                                   + мРазделитель // Код базового товара (15)
			//Если со скидко то "1" если без скидки то "2" Str+ 	ЕКТ000003	Не применять скидку в POS		 
			//		         + ""                                                   + мРазделитель // Код родительской группы (16)
			+ ?(СоСкидкой,"999998","999999")                       + мРазделитель // Код родительской группы (16)
			//Str+			 
			
			+ "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0» (17)
			+ "0"                                                  + мРазделитель // Номер уровня иерархического списка (18)
			+ ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1» (19)
			+ ""                                  + мРазделитель // Серия (20)
			//+ ""                                                   					+ мРазделитель // Сертификат (21) //-Svetl
			+ Сертификат                                                 			+ мРазделитель // Сертификат (21)  //+Svetl
			+ ""                                                   + мРазделитель // Код ККМ (22)
			+ ""                                                   + мРазделитель // Код налоговой группы (23)
			+ ""                                                   + мРазделитель // Код весов с ПЭ (24)
			//+ ?(Товар.ВесовойТовар,Формат(Товар.ПЛУ,"ЧН=0; ЧГ=0"), "")              + мРазделитель // Код товара в весах ПЭ (25) //-Svetl Не используем весовые товары в базе
			+ _ПЛУ														            + мРазделитель // Код товара в весах ПЭ (25) - берем код товара без нулей
			+ Товар.Номенклатура.Артикул                           + мРазделитель // Артикул (26)
			+ ""                                                   + мРазделитель // Тип скидки/надбавки: (27)
			//  0 – процентная скидка
			//  1 – скидка суммой
			//  2 – процентная надбавка
			//  3 – надбавка суммой
			+ ""                                                   + мРазделитель // Значение товарной скидки/надбавки (28)
			+ ?(СоСкидкой ИЛИ СкидкаПоДисконтнымКартам,"","0,00")                                                   + мРазделитель // Максимальная скидка, % (29)
			+ ""                                                   + мРазделитель // Код принтера чеков (30)
			+ ""                                                   + мРазделитель // Файл *.bmp с картинкой (31)
			+ ""                                                   + мРазделитель // Описание (32)
			+ _Кратность                                                          + мРазделитель // Кратность количества (33)
			+ ""                                                                  + мРазделитель //  (34)
			+ ""                                                                  + мРазделитель //  (35)
			+ ""                                                                  + мРазделитель //  (36)
			+ ""                                                                  + мРазделитель //  (37)
			//	+ ?(СкидкаПоДисконтнымКартам,"1","");                              		// На бонусы не даем покупать ГТД(38)
			+ ГТД;                              		// На бонусы не даем покупать ГТД(38)

			Файл.ДобавитьСтроку(Строка);
		Иначе
			//Если НЕ Товар.Выгружать Тогда
			//	Продолжить;
			//КонецЕсли;
			
			
			// Загружаем только дополнительные штриходы
			ШтрихКод = ?(ШтрихКоды.Количество() > 0, "", ",");
			Для Каждого СтрокаМассива Из ШтрихКоды Цикл
				ШтрихКод = Прав(("0000000000000"+СокрЛП(СтрокаМассива.ШтрихКод)),13) + ","+ШтрихКод;
			КонецЦикла;
			ШтрихКод = Лев(ШтрихКод, СтрДлина(ШтрихКод) - 1);
			//Сообщить(Товар.Номенклатура.Наименование + "  "+ШтрихКод);
			_Наименование = Товар.Номенклатура.НаименованиеПолное;
			_НаименованиеЭкран=?(Товар.Номенклатура.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000235")),Товар.Номенклатура.Наименование,Товар.Номенклатура.НаименованиеПолное);
			
			Строка =   Формат(Число(Товар.ПЛУ), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код
			+ ШтрихКод                                             + мРазделитель // Штрих-код
			+ ПодготовитьСтроку(_НаименованиеЭкран)                + мРазделитель // Наименование
			+ ПодготовитьСтроку(_Наименование)                + мРазделитель // Текст для чека
			+ Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена
			+ ""    + мРазделитель // Остаток
			+ "0"                                                  + мРазделитель // Схема внутренней автоматической скидки
			//+ ?(Товар.ВесовойТовар, 1, 0)											// Флаги через запятую: (8) //-svetl
			+ ?(_ПЛУ="", 0, 1)														// Флаги через запятую: (8) //+svetl

			// • дробное количество (весовой)
			// • продажа
			// • возврат
			// • отрицательные остатки
			// • без ввода количества
			// • списание остатков
			// • редактирование цены
			// • ввод количества вручную
			+ ",1,1,0,1,0," + ?(Товар.Цена = 0 ИЛИ ПоНулевойЦенеПриНаличииКарты=Истина, "1", "0") + ",1"   + мРазделитель
			+ ""                                                   + мРазделитель // Минимальная цена
			+ ""                                                   + мРазделитель // Срок годности
			+ ""                                                   + мРазделитель // Код схемы разрезов
			+ ""                                                   + мРазделитель // Вариант использования разрезов:
			//  0 – полный список
			//  1 – заданный список
			//  2 – заданный список с остатком
			+ ""                                                   + мРазделитель // Код схемы внешней автоматической скидки
			+ Формат(Товар.ЕдиницаИзмерения.Коэффициент,
			"ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент
			+ ""                                                   + мРазделитель // Код базового товара
			//Если со скидко то "1" если без скидки то "2" Str+ 	ЕКТ000003	Не применять скидку в POS		 
			//		         + ""                                                   + мРазделитель // Код родительской группы
			+ ?(СоСкидкой,"999998","999999")                       + мРазделитель // Код родительской группы
			//				 + ""                                                   + мРазделитель	
			//Str+			 
			+ "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
			+ "0"                                                  + мРазделитель // Номер уровня иерархического списка
			+ ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1»
			+ ""                      + мРазделитель // Серия
			//+ ""                                                   					+ мРазделитель // Сертификат (21) //-Svetl
			+ Сертификат                                                 			+ мРазделитель // Сертификат (21)  //+Svetl
			+ ""                                                   + мРазделитель // Код ККМ
			+ ""                                                   + мРазделитель // Код налоговой группы
			+ ""                                                   + мРазделитель // Код весов с ПЭ
			//+ ?(Товар.ВесовойТовар,Формат(Товар.ПЛУ,"ЧН=0; ЧГ=0"), "")              + мРазделитель // Код товара в весах ПЭ (25) //-Svetl Не используем весовые товары в базе
			+ _ПЛУ														            + мРазделитель // Код товара в весах ПЭ (25) - берем код товара без нулей
			+ Товар.Номенклатура.Артикул                           + мРазделитель // Артикул
			+ ""                                                   + мРазделитель // Тип скидки/надбавки:
			//  0 – процентная скидка
			//  1 – скидка суммой
			//  2 – процентная надбавка
			//  3 – надбавка суммой
			+ ""                                                   + мРазделитель // Значение товарной скидки/надбавки
			//Str+ 18.06.13			         + ""                                                   + мРазделитель // Максимальная скидка, %
			+ ?(СоСкидкой ИЛИ СкидкаПоДисконтнымКартам,"","0,00")                                                   + мРазделитель // Максимальная скидка, % (29)
			+ ""                                                   + мРазделитель // Код принтера чеков
			+ ""                                                   + мРазделитель // Файл *.bmp с картинкой
			+ ""                                                   + мРазделитель // Описание
			+ _Кратность                                                          + мРазделитель // Кратность количества (33)
			+ ""                                                                  + мРазделитель //  (34)
			+ ""                                                                  + мРазделитель //  (35)
			+ ""                                                                  + мРазделитель //  (36)
			+ ""                                                                  + мРазделитель //  (37)
			//+ ?(СкидкаПоДисконтнымКартам,"1","");                              		// На бонусы не даем покупать ГТД(38)
			+ ГТД;                              		// На бонусы не даем покупать ГТД(38)
			
			//Сообщить(Товар.Номенклатура.Наименование + "  "+Строка);
			Файл.ДобавитьСтроку(Строка);
			
		КонецЕсли;
		//Str-
		//	Если ТипЗнч(Товар.КодТовара) <> Тип("Массив") Тогда
		//		
		
		//		Строка =   Формат(Товар.ПЛУ, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код (1)
		//				 + Формат(Товар.КодТовара, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")  + мРазделитель // Штрих-код (2)
		//				 + ПодготовитьСтроку(Товар.Номенклатура)                + мРазделитель // Наименование (3)
		//				 + ПодготовитьСтроку(Товар.Номенклатура)                + мРазделитель // Текст для чека (4)
		//				 + Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена (5)
		//				 + Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧН=0; ЧГ=0")    + мРазделитель // Остаток (6)
		//				 + "0"                                                  + мРазделитель // Схема внутренней автоматической скидки (7)
		//				 + ?(Товар.ВесовойТовар, 1, 0)                                         // Флаги через запятую: (8)
		//																					   // • дробное количество (весовой)
		//																					   // • продажа
		//																					   // • возврат
		//																					   // • отрицательные остатки
		//																					   // • без ввода количества
		//																					   // • списание остатков
		//																					   // • редактирование цены
		//																					   // • ввод количества вручную
		//				 + ",1,1,0,0,0," + ?(Товар.Цена = 0, "1", "0") + ",1"   + мРазделитель
		//				 + ""                                                   + мРазделитель // Минимальная цена (9)
		//				 + ""                                                   + мРазделитель // Срок годности (10)
		//				 + ""                                                   + мРазделитель // Код схемы разрезов (11)
		//				 + ""                                                   + мРазделитель // Вариант использования разрезов: (12)
		//																					   //  0 – полный список
		//																					   //  1 – заданный список
		//																					   //  2 – заданный список с остатком
		//				 + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки (13)
		//				 + Формат(Товар.ЕдиницаИзмерения.Коэффициент,
		//						  "ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент (14)
		//				 + ""                                                   + мРазделитель // Код базового товара (15)
		////Если со скидко то "1" если без скидки то "2" Str+ 	ЕКТ000003	Не применять скидку в POS		 
		////		         + ""                                                   + мРазделитель // Код родительской группы (16)
		//				 + ?(СоСкидкой,"999998","999999")                       + мРазделитель // Код родительской группы (16)
		////Str+			 
		//				 
		//				 + "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0» (17)
		//				 + "0"                                                  + мРазделитель // Номер уровня иерархического списка (18)
		//				 + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1» (19)
		//				 + СокрЛП(Товар.Серия)                                  + мРазделитель // Серия (20)
		//				 + ""                                                   + мРазделитель // Сертификат (21)
		//				 + ""                                                   + мРазделитель // Код ККМ (22)
		//				 + ""                                                   + мРазделитель // Код налоговой группы (23)
		//				 + ""                                                   + мРазделитель // Код весов с ПЭ (24)
		//				 + ?(Товар.ВесовойТовар,
		//					 Формат(Товар.ПЛУ,
		//							"ЧН=0; ЧГ=0"), "")                          + мРазделитель // Код товара в весах ПЭ (25)
		//				 + Товар.Номенклатура.Артикул                           + мРазделитель // Артикул (26)
		//				 + ""                                                   + мРазделитель // Тип скидки/надбавки: (27)
		//																					   //  0 – процентная скидка
		//																					   //  1 – скидка суммой
		//																					   //  2 – процентная надбавка
		//																					   //  3 – надбавка суммой
		//				 + ""                                                   + мРазделитель // Значение товарной скидки/надбавки (28)
		//				 + ""                                                   + мРазделитель // Максимальная скидка, % (29)
		//				 + ""                                                   + мРазделитель // Код принтера чеков (30)
		//				 + ""                                                   + мРазделитель // Файл *.bmp с картинкой (31)
		//				 + ""                                                   + мРазделитель // Описание (32)
		//				 + "";                                                                 // Кратность количества (33)
		
		//		Файл.ДобавитьСтроку(Строка);
		//	Иначе
		//		Если НЕ Товар.Выгружать Тогда
		//			Продолжить;
		//		КонецЕсли;
		
		//		ШтрихКод = ?(Товар.КодТовара.Количество() > 0, "", ",");
		//		Для Каждого СтрокаМассива Из Товар.КодТовара Цикл
		//			ШтрихКод = СтрокаМассива + ",";
		//		КонецЦикла;
		//		ШтрихКод = Лев(ШтрихКод, СтрДлина(ШтрихКод) - 1);
		
		//		НаименованиеТовара = ПредставлениеТовара(Товар);
		
		//		Строка =   Формат(Товар.PLU, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Код
		//				 + ШтрихКод                                             + мРазделитель // Штрих-код
		//				 + ПодготовитьСтроку(НаименованиеТовара)                + мРазделитель // Наименование
		//				 + ПодготовитьСтроку(НаименованиеТовара)                + мРазделитель // Текст для чека
		//				 + Формат(Товар.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=0; ЧГ=0")       + мРазделитель // Цена
		//				 + Формат(Товар.Остаток, "ЧЦ=17; ЧДЦ=3; ЧН=0; ЧГ=0")    + мРазделитель // Остаток
		//				 + "0"                                                  + мРазделитель // Схема внутренней автоматической скидки
		//				 + ?(Товар.ВесовойТовар, 1, 0)                                         // Флаги через запятую:
		//																					   // • дробное количество (весовой)
		//																					   // • продажа
		//																					   // • возврат
		//																					   // • отрицательные остатки
		//																					   // • без ввода количества
		//																					   // • списание остатков
		//																					   // • редактирование цены
		//																					   // • ввод количества вручную
		//				 + ",1,1,0,0,0," + ?(Товар.Цена = 0, "1", "0") + ",1"   + мРазделитель
		//				 + ""                                                   + мРазделитель // Минимальная цена
		//				 + ""                                                   + мРазделитель // Срок годности
		//				 + ""                                                   + мРазделитель // Код схемы разрезов
		//				 + ""                                                   + мРазделитель // Вариант использования разрезов:
		//																					   //  0 – полный список
		//																					   //  1 – заданный список
		//																					   //  2 – заданный список с остатком
		//				 + ""                                                   + мРазделитель // Код схемы внешней автоматической скидки
		//				 + Формат(Товар.ЕдиницаИзмерения.Коэффициент,
		//						  "ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")                    + мРазделитель // Коэффициент
		//				 + ""                                                   + мРазделитель // Код базового товара
		////Если со скидко то "1" если без скидки то "2" Str+ 	ЕКТ000003	Не применять скидку в POS		 
		////		         + ""                                                   + мРазделитель // Код родительской группы
		//				 + ?(СоСкидкой,"999998","999999")                       + мРазделитель // Код родительской группы
		////				 + ""                                                   + мРазделитель	
		////Str+			 
		//				 + "1"                                                  + мРазделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
		//				 + "0"                                                  + мРазделитель // Номер уровня иерархического списка
		//				 + ""                                                   + мРазделитель // Код значения первого разреза схемы с кодом «1»
		//				 + СокрЛП(Товар.СерияНоменклатуры)                      + мРазделитель // Серия
		//				 + ""                                                   + мРазделитель // Сертификат
		//				 + ""                                                   + мРазделитель // Код ККМ
		//				 + ""                                                   + мРазделитель // Код налоговой группы
		//				 + ""                                                   + мРазделитель // Код весов с ПЭ
		//				 + ?(Товар.ВесовойТовар,
		//					 Формат(Товар.PLU,
		//							"ЧН=0; ЧГ=0"), "")                          + мРазделитель // Код товара в весах ПЭ
		//				 + Товар.Номенклатура.Артикул                           + мРазделитель // Артикул
		//				 + ""                                                   + мРазделитель // Тип скидки/надбавки:
		//																					   //  0 – процентная скидка
		//																					   //  1 – скидка суммой
		//																					   //  2 – процентная надбавка
		//																					   //  3 – надбавка суммой
		//				 + ""                                                   + мРазделитель // Значение товарной скидки/надбавки
		//				 + ""                                                   + мРазделитель // Максимальная скидка, %
		//				 + ""                                                   + мРазделитель // Код принтера чеков
		//				 + ""                                                   + мРазделитель // Файл *.bmp с картинкой
		//				 + ""                                                   + мРазделитель // Описание
		//				 + "";                                                                 // Кратность количества
		
		//		Файл.ДобавитьСтроку(Строка);
		//	КонецЕсли;
		//	
	КонецЦикла;
	
	//Str+
	//-svetl down **********************ЗАКОММЕНТИРОВАНА ВЫГРУЗКА СКИДОК ВООБЩЕ
//	//Удалим сценарии скидок и сформируем их повторно
//	Файл.ДобавитьСтроку("$$$DELETEALLDISCOBJECTS");
//	Файл.ДобавитьСтроку("$$$ADDDISCOBJECTS");
//	//поля Обязательное Тип поля Назначение
//	//1 Да Целое Код объекта
//	//2 Нет Целое Код клиента или группы клиентов
//	//3 Нет Целое Код классификатора клиента
//	//4 Нет Целое Код карты клиента
//	//5 Нет Целое Код классификатора карты
//	//6 Нет Целое Код вида оплаты
//	//7 Нет Целое/Строка 20 Идентификатор товара*/группы товаров
//	//8 Нет Строка Коды значений разрезов через запятую
//	//9 Нет Целое Код классификатора товара
//	//10 Нет Целое Код зала
//	//11 Нет Целое Код точки обслуживания
//	//12 Нет Целое Код ставки
//	//13 Нет Целое Код сценария
//	//14 Нет Целое Код условия
//	//15 Нет Целое Код предприятия или группы
//	//предприятий
//	//16 Нет Целое Код классификатора предприятий	
//	//	Файл.ДобавитьСтроку("1;;;;;;999998;;;;;;;1");
//	
//	
//	//Строка =   Формат(1, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
//	//					 + ""  				+ мРазделитель //2 Нет Целое Код клиента или группы клиентов
//	//					 + ""  				+ мРазделитель //3 Нет Целое Код классификатора клиента
//	//					 + ""  				+ мРазделитель //4 Нет Целое Код карты клиента
//	//					 + ""  				+ мРазделитель //5 Нет Целое Код классификатора карты
//	//					 + ""  				+ мРазделитель //6 Нет Целое Код вида оплаты
//	//					 + ""  				+ мРазделитель //7 Нет Целое/Строка 20 Идентификатор товара*/группы товаров
//	//					 + ""  				+ мРазделитель //8 Нет Строка Коды значений разрезов через запятую
//	//					 + ""  				+ мРазделитель //9 Нет Целое Код классификатора товара
//	//					 + ""  				+ мРазделитель //10 Нет Целое Код зала
//	//					 + ""  				+ мРазделитель //11 Нет Целое Код точки обслуживания
//	//					 + ""  				+ мРазделитель //12 Нет Целое Код ставки
//	//					 + ""  				+ мРазделитель //13 Нет Целое Код сценария
//	//					 + "1"  				+ мРазделитель //14 Нет Целое Код условия
//	//					 + ""  				+ мРазделитель //15 Нет Целое Код предприятия или группы предприятий
//	//					 + ""; //16 Нет Целое Код классификатора предприятий	
//	//	Файл.ДобавитьСтроку(Строка);
//	
//	//	Файл.ДобавитьСтроку("2;;;;;;;;;;;;1;");
//	//Строка =   Формат(2, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
//	//				 + ""  				+ мРазделитель //2 Нет Целое Код клиента или группы клиентов
//	//				 + ""  				+ мРазделитель //3 Нет Целое Код классификатора клиента
//	//				 + ""  				+ мРазделитель //4 Нет Целое Код карты клиента
//	//				 + ""  				+ мРазделитель //5 Нет Целое Код классификатора карты
//	//				 + ""  				+ мРазделитель //6 Нет Целое Код вида оплаты
//	//				 + ""  				+ мРазделитель //7 Нет Целое/Строка 20 Идентификатор товара*/группы товаров
//	//				 + ""  				+ мРазделитель //8 Нет Строка Коды значений разрезов через запятую
//	//				 + ""  				+ мРазделитель //9 Нет Целое Код классификатора товара
//	//				 + ""  				+ мРазделитель //10 Нет Целое Код зала
//	//				 + ""  				+ мРазделитель //11 Нет Целое Код точки обслуживания
//	//				 + ""  				+ мРазделитель //12 Нет Целое Код ставки
//	//				 + "1"  				+ мРазделитель //13 Нет Целое Код сценария
//	//				 + ""  				+ мРазделитель //14 Нет Целое Код условия
//	//				 + ""  				+ мРазделитель //15 Нет Целое Код предприятия или группы предприятий
//	//				 + ""; //16 Нет Целое Код классификатора предприятий	
//	//Файл.ДобавитьСтроку(Строка);
//	
//	
//	Если Истина Тогда
//		
//		Файл.ДобавитьСтроку("$$$DELETEALLFIXDISCS");
//		Файл.ДобавитьСтроку("$$$ADDFIXDISCS");
//		//Схемы внутренних автоматических скидок      (Ставки и Группы условий)
//		Файл.ДобавитьСтроку("$$$DELETEALLAUTODISCSCHMS");
//		Файл.ДобавитьСтроку("$$$ADDAUTODISCSCHMS");
//		//1;Скидки на чек;Скидки на чек;4;
//		Строка =   Формат(1, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
//		+ "Скидки на чек"  				+ мРазделитель //2 Наименование
//		+ "Скидки на чек"  				+ мРазделитель //3 Текст
//		+ "4";  				 //4 Тип операции объединения 0-перавя, 1- все 2.- последняя 3 - миним, 4-макс По умолчанию 0
//		Файл.ДобавитьСтроку(Строка);
//		
//		//Внутренние автоматические скидки
//		Файл.ДобавитьСтроку("$$$ADDAUTODISCCONDS");
//		//1;200001;Корольков Вадим;Корольков Вадим;0;3;01.01.2008;27.12.2013;;;16:00:00;;;;;;;;;;;10;100000;;20789578;20789578;;;;;;;;;;;;;;;1;;;;1;
//		
//		//3% 12345, 5000-
//		ВыгрузитьУсловиеСкидки(1,200001,12345,12345,5,3,"Скидка","Скидка",Файл);
//		//5% 
//		ВыгрузитьУсловиеСкидки(1,200002,1,12344,5,5,"Скидка","Скидка",Файл); //Старого образца
//		ВыгрузитьУсловиеСкидки(1,200003,12346,14999,5,5,"Скидка","Скидка",Файл); //Старого образца
//		//5% 15000-25000, //прибавил 4000 перепрограммированых и 1000 на запас по просьбе    //19722 исключена из за ошибки программирования карт
////		ВыгрузитьУсловиеСкидки(1,200004,15000,25000,5,5,"Скидка","Скидка",Файл); //Нового образца
//		ВыгрузитьУсловиеСкидки(1,200004,15000,19721,5,5,"Скидка","Скидка",Файл); //Нового образца
//		ВыгрузитьУсловиеСкидки(1,200005,19723,25000,5,5,"Скидка","Скидка",Файл); //Нового образца
//		
//		//30%  25001-25042
//		ВыгрузитьУсловиеСкидки(1,200006,25001,25042,5,30,"Скидка","Скидка",Файл);//VIP
//		//5% 
//		//ВыгрузитьУсловиеСкидки(1,200006,25050,27849,5,5,"Скидка","Скидка",Файл); //Новые образца
//		//ВыгрузитьУсловиеСкидки(1,200007,27850,32650,5,5,"Скидка","Скидка",Файл); //Новые образца
//		ВыгрузитьУсловиеСкидки(1,200007,25050,35050,5,5,"Скидка","Скидка",Файл); //Новые образца
//		//18-11-2013.Новые карты
//		ВыгрузитьУсловиеСкидки(1,200008,90001,90100,5,30,"Скидка","Скидка",Файл); //Новые образца 30%
//		ВыгрузитьУсловиеСкидки(1,200009,90101,90101,5,10,"Скидка","Скидка",Файл); //Новые образца 10% Одна карта пока
//		ВыгрузитьУсловиеСкидки(1,200010,35051,46000,5,5,"Скидка","Скидка",Файл); //Новые образца 5%
//		//29-01-2014 Карта 100%
//		ВыгрузитьУсловиеСкидки(1,200011,99999,99999,5,99,"Скидка","Скидка",Файл);
//		
//		
//		
//		Файл.ДобавитьСтроку("$$$ADDDISCOBJECTS");
//		Строка =   Формат(1, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
//		+ ""  				+ мРазделитель //2 Нет Целое Код клиента или группы клиентов
//		+ ""  				+ мРазделитель //3 Нет Целое Код классификатора клиента
//		+ ""  				+ мРазделитель //4 Нет Целое Код карты клиента
//		+ ""  				+ мРазделитель //5 Нет Целое Код классификатора карты
//		+ ""  				+ мРазделитель //6 Нет Целое Код вида оплаты
//		+ ""  				+ мРазделитель //7 Нет Целое/Строка 20 Идентификатор товара*/группы товаров
//		+ ""  				+ мРазделитель //8 Нет Строка Коды значений разрезов через запятую
//		+ ""  				+ мРазделитель //9 Нет Целое Код классификатора товара
//		+ ""  				+ мРазделитель //10 Нет Целое Код зала
//		+ ""  				+ мРазделитель //11 Нет Целое Код точки обслуживания
//		+ ""  				+ мРазделитель //12 Нет Целое Код ставки
//		+ ""  				+ мРазделитель //13 Нет Целое Код сценария
//		+ "1"  				+ мРазделитель //14 Нет Целое Код условия
//		+ ""  				+ мРазделитель //15 Нет Целое Код предприятия или группы предприятий
//		+ ""; //16 Нет Целое Код классификатора предприятий	
//		Файл.ДобавитьСтроку(Строка);
//		
//		
//		//$$$ADDSETTINGS
//		//InternalDefaultSchmRecID;1;
//	КонецЕсли;
//	//Это Пиво
//	Если Ложь Тогда
//		
//		//++LSV79 Выгружаем Карты и схемы скидок
//		//Скидки=Справочники.ТипыСкидокНаценок.Выбрать();
//		//Скидки=Справочники.ВидыДисконтныхКарт.Выбрать();
//		//Пока скидки.Следующий() цикл //Перебор скидок
//		//	Если Скидки.ПометкаУдаления тогда
//		//		продолжить;
//		//	КонецЕсли;
//		//	Файл.ДобавитьСтроку("!"+Прав(Скидки.Код,3)+";Дисконт "+Скидки.Наименование+";1");//Схема скидок
//		//	Файл.ДобавитьСтроку("@"+Прав(Скидки.Код,3)+";"+Прав(Скидки.Код,3)+";"+Скидки.Наименование+";1;1;"+Скидки.Наименование+";Скидка"+Скидки.Наименование);
//		//КонецЦикла;
//		
//		//удалим все объекты дисконтирования и добавим только карты
//		Файл.ДобавитьСтроку("$$$DELETEALLCCARDDISCS");
//		Файл.ДобавитьСтроку("$$$ADDCCARDDISCS");
//		Карты=Справочники.ИнформационныеКарты.Выбрать();
//		Пока Карты.Следующий() цикл
//			Если Карты.ПометкаУдаления тогда
//				продолжить;
//			КонецЕсли;
//			//		Файл.ДобавитьСтроку("%"+Карты.КодКарты+";"+Карты.КодКарты+";;0;"+Прав(Карты.ВидДисконтнойКарты.Код,3)+";0;0;;0;;;;;0;;;;;");
//			Попытка
//				Строка =   Формат(Карты.КодКарты, "ЧЦ=13; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель //1 Да Целое Код карты
//				+ "1"+ мРазделитель //2 Да Целое Код вида карты
//				+ "" + Карты.КодКарты + мРазделитель //3 Да Строка 40 Карта
//				+ ""+ мРазделитель //4 Нет Дата Начальная дата действия карты
//				+ ""+ мРазделитель //5 Нет Дата Конечная дата действия карты
//				+ "1"+ мРазделитель //6 Нет Целое
//				//Состояние:
//				//0 — не активная;
//				//1 — активная
//				//Значение по умолчанию = 0
//				+ "0"+ мРазделитель //7 Нет Целое
//				//Тип ставки:
//				//0 — отрицательная процентная (-%);
//				//1 — отрицательная суммой (-$);
//				//2 — положительная процентная (+%);
//				//3 — положительная суммой (+$)
//				+ "" + Число(Карты.ВидДисконтнойКарты.Наименование)+ мРазделитель //8 Нет Строка 100 Значение скидки или формула
//				+ "1"+ мРазделитель //9 Нет Целое
//				//Назначение ставки:
//				//0 — на позицию;
//				//1 — на документ
//				//Значение по умолчанию = 0
//				+ ""+ мРазделитель //10 Нет Целое Код вида счетчика
//				+ ""+ мРазделитель //11 Нет Дробное 10.4 Значение счетчика
//				//Значение по умолчанию = 0
//				+ ""+ мРазделитель //12 Нет Целое Код вида счетчика
//				+ ""+ мРазделитель //13 Нет Дробное 10.4 Значение счетчика
//				//Значение по умолчанию = 0
//				+ ""+ мРазделитель //14 Нет Целое Код вида счетчика
//				+ ""+ мРазделитель //15 Нет Дробное 10.4 Значение счетчика 
//				//Значение по умолчанию = 0
//				+ ""+ мРазделитель //16 Нет Целое Код вида счетчика
//				+ ""+ мРазделитель //17 Нет Дробное 10.4 Значение счетчика
//				//Значение по умолчанию = 0
//				+ ""+ мРазделитель //18 Нет Целое Код вида счетчика
//				+ ""; //19 Нет Дробное 10.4 Значение счетчика
//				//Значение по умолчанию = 0
//			Исключение
//				Сообщить("Ощибка выгрузки карты с кодом: " + Карты.КодКарты);
//			КонецПопытки;	
//			Файл.ДобавитьСтроку(Строка);
//		КонецЦикла;
//		
//		//Еще один подарок от Сергея , после НГ нужно добавить их в справочник
//		Для Индекс = 15000 По 25000 Цикл   //прибавил 4000 перепрограммированых и 1000 на запас по просьбе 
//			Если Индекс = 12345 Тогда
//				Продолжить;
//			КонецЕсли;
//			Если Индекс = 19722 Тогда  //Str+ 08/10/13 Эту карту заблокировали. Выгружать её не нужно она выпущена тиражем 10 т.штук и будет изыматься у покупателей.
//				Продолжить;
//			КонецЕсли;
//			
//			//Строка = 		"%" + СокрЛП(""+Формат(Индекс, "ЧЦ=13; ЧДЦ=0; ЧГ=0")) + ";" +						    // 1  - Номер карты
//			//		СокрЛП("Карта 5%") + ";" +				        // 2  - Название карты
//			//		СокрЛП("Карта 5%") + ";" +                  // 3  - Текст для чека
//			//		СокрЛП(Формат(0, "Ч15.2")) + ";" +	               			// 4  - Сумма накопления
//			//		СокрЛП(Формат("2", "Ч8.0")) + ";"+ 		// 5  - Код схемы автоматических скидок
//			//		"0" + ";" + 												// 6  - Карта запрещена
//			//		"0;" +                                                     // 7  - Не вести накопление по карте
//			//		"0;" +                                                     // 8  - Не используется
//			//		"0;" +                                                     // 9  - Использовать как платежную
//			//		"0;" +                                                     // 10 - Не используется
//			//		"0;" +                                                     // 11 - Не используется
//			//		"0;" +                                                     // 12 - Не используется
//			//		"0;" +                                                     // 13 - Код схемы накопительных скидок
//			//		"0;" +                                                     // 14 - Тип карты (0 – дисконтная, 1 – бонусная)
//			//		"0;" +                                                     // 15 - Не используется
//			//		"0;" +                             							// 16 - Не используется
//			//		"0;" +                  									// 17 - Не используется
//			//		"0;";                                 						// 18 - Не используется
//			Строка =   Формат(Индекс, "ЧЦ=13; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель //1 Да Целое Код карты
//			+ "1"+ мРазделитель //2 Да Целое Код вида карты
//			+ Формат(Индекс, "ЧЦ=13; ЧДЦ=0; ЧН=0; ЧГ=0") + мРазделитель //3 Да Строка 40 Карта
//			+ ""+ мРазделитель //4 Нет Дата Начальная дата действия карты
//			+ ""+ мРазделитель //5 Нет Дата Конечная дата действия карты
//			+ "1"+ мРазделитель //6 Нет Целое
//			//Состояние:
//			//0 — не активная;
//			//1 — активная
//			//Значение по умолчанию = 0
//			+ "0"+ мРазделитель //7 Нет Целое
//			//Тип ставки:
//			//0 — отрицательная процентная (-%);
//			//1 — отрицательная суммой (-$);
//			//2 — положительная процентная (+%);
//			//3 — положительная суммой (+$)
//			+ "5" + мРазделитель //8 Нет Строка 100 Значение скидки или формула
//			+ "1"+ мРазделитель //9 Нет Целое
//			//Назначение ставки:
//			//0 — на позицию;
//			//1 — на документ
//			//Значение по умолчанию = 0
//			+ ""+ мРазделитель //10 Нет Целое Код вида счетчика
//			+ ""+ мРазделитель //11 Нет Дробное 10.4 Значение счетчика
//			//Значение по умолчанию = 0
//			+ ""+ мРазделитель //12 Нет Целое Код вида счетчика
//			+ ""+ мРазделитель //13 Нет Дробное 10.4 Значение счетчика
//			//Значение по умолчанию = 0
//			+ ""+ мРазделитель //14 Нет Целое Код вида счетчика
//			+ ""+ мРазделитель //15 Нет Дробное 10.4 Значение счетчика 
//			//Значение по умолчанию = 0
//			+ ""+ мРазделитель //16 Нет Целое Код вида счетчика
//			+ ""+ мРазделитель //17 Нет Дробное 10.4 Значение счетчика
//			//Значение по умолчанию = 0
//			+ ""+ мРазделитель //18 Нет Целое Код вида счетчика
//			+ ""; //19 Нет Дробное 10.4 Значение счетчика
//			//Значение по умолчанию = 0	
//			Файл.ДобавитьСтроку(Строка);
//		КонецЦикла;
//		
//		//--LSV79
//	КонецЕсли;
//	//Это ИП МКВ для Пива будем внедрять позже
//	СписокСкладов = Неопределено;	
//	
//	Если ЗначениеЗаполнено(СписокСкладов) и (СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("_ЕКТ000009")) <> Неопределено) или
//		ЗначениеЗаполнено(СписокСкладов) и (СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("_ЕКТ000005")) <> Неопределено) или
//		ЗначениеЗаполнено(СписокСкладов) и (СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000003")) <> Неопределено) Тогда //Сургут Золотой Лев
//		//Если СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000009")) <> Неопределено Тогда //Нефтеюганск 
//		//	//Группа информационных карт ЗЛ0000980 Покупатели "Золотой Гепард" Нефтеюганск   ЗЛ0000980
//		//	грИнфКатрНефтеюганск = Справочники.ИнформационныеКарты.НайтиПоКоду("ЗЛ0000980");
//		Сообщить("Подготовка к выгрузке Карт клиентов...");	
//		
//		//Группа информационных карт ЗЛ0000980 Покупатели "Золотой Гепард" Нефтеюганск   ЗЛ0000980
//		// ЗЛ0000003 ККМ Frontol #5 Нефтеюганск Гепард
//		// ЕКТ000009 Склад Нефтеюганск
//		Если СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000009")) <> Неопределено Тогда
//			грИнфКатр = Справочники.ИнформационныеКарты.НайтиПоКоду("ЗЛ0000980");  
//			//ЕКТ000003 Покупатели Золотой Лев  Сургут. (9НННННННННННН)
//			//ЗЛ0000001 или ЗЛ0000002 Frontol #1 Frontol #2   ЗОЛОТОЙ Лев Сургут
//			// ЕКТ000003 Склад Золотой Лев Сургут
//		ИначеЕсли СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000003")) <> Неопределено  Тогда
//			Сообщить("Сургут Золотой Лев");
//			грИнфКатр = Справочники.ИнформационныеКарты.НайтиПоКоду("ЕКТ000003");
//			
//			
//			
//			//ЕКТ000002 Покупатели Универбыт Екат. (ННН)
//			//ЕКТ000009 Frontol #3 Екатеринбург Универбыт
//			// ЕКТ000005 Склад М-н "Перламур"
//		ИначеЕсли СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000005")) <> Неопределено Тогда
//			грИнфКатр = Справочники.ИнформационныеКарты.НайтиПоКоду("ЕКТ000002");  
//			//ЕКТ000001 Покупатели Преображение Екат. (96601НННННННН)
//			//ЕКТ000010 Frontol #4 Екатеринбург Преображение
//			// ЕКТ000008 Склад М-н Преображение
//		ИначеЕсли СписокСкладов.НайтиПоЗначению(Справочники.Склады.НайтиПоКоду("ЕКТ000008")) <> Неопределено Тогда
//			грИнфКатр = Справочники.ИнформационныеКарты.НайтиПоКоду("ЕКТ000001");  
//		Иначе
//			Сообщить("Ваша торговая точка не имеет настройки для правильного учета скидок в 1с. Свяжитесь с программистами 1с.");
//			грИнфКатр = Неопределено;
//		КонецЕсли;
//		
//		//Удалить все привязки карт к клиентам
//		Файл.ДобавитьСтроку("$$$DELETEALLCLIENTCCARDS");
//		//Удалить все карты и объекты
//		//дисконтирования с картами
//		Файл.ДобавитьСтроку("$$$DELETEALLCCARDDISCS");
//		//Удалить всех клиентов
//		Файл.ДобавитьСтроку("$$$DELETEALLCLIENTDISCS");
//		
//		//Добавить карты
//		Файл.ДобавитьСтроку("$$$ADDCCARDDISCS");
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ИнформационныеКарты.Ссылка,
//		|	ИнформационныеКарты.Наименование,
//		|	ИнформационныеКарты.КодКарты,
//		|	ИнформационныеКарты.ВладелецКарты
//		|ИЗ
//		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
//		|ГДЕ
//		|	ИнформационныеКарты.Родитель = &Родитель";
//		
//		Запрос.УстановитьПараметр("Родитель", грИнфКатр);
//		
//		_Результат = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = _Результат.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			СуммаНакоплений = ВычислитьСуммуНакоплений(ВыборкаДетальныеЗаписи.Ссылка);
//			Сообщить("Карта: "+ВыборкаДетальныеЗаписи.КодКарты + " - Сумма: " + СуммаНакоплений);
//			
//			Строка =   Формат(("01"+ВыборкаДетальныеЗаписи.КодКарты), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")        + мРазделитель // Целое Код карты
//			+ "1"+ мРазделитель // Целое Код группы карты  (наверно это ВИд карты "1 Накопительные скидки")
//			+ СокрЛП(ВыборкаДетальныеЗаписи.КодКарты) + мРазделитель // Строка 40 Карта
//			+ "" + мРазделитель // Дата Начальная дата действия карты
//			+ "" + мРазделитель // Дата Конечная дата действия карты
//			+ "1"+ мРазделитель // Состояние: 0 — не активная; 1 — активная
//			
//			+ "0"+ мРазделитель // Тип ставки:0 — отрицательная процентная (-%);1 — отрицательная суммой (-$);2 — положительная процентная (+%);3 — положительная суммой (+$)
//			+ "" + мРазделитель // Значение скидки или формула
//			+ "" + мРазделитель // Назначение ставки:0 — на позицию;1 — на чек
//			+ "1"+ мРазделитель // Целое Код вида счетчика  "1 - Cкидки на суммы персональных накоплений"
//			+ Формат(СуммаНакоплений, "ЧЦ=11; ЧДЦ=4; ЧН=0; ЧГ=0") + мРазделитель // Дробное 7.4 Начальное значение счетчика, привязанного к карте
//			+ ""+ мРазделитель // Целое Код вида счетчика
//			+ ""+ мРазделитель //  Дробное 7.4 Начальное значение счетчика, привязанного к карте
//			+ ""+ мРазделитель /// Целое Код вида счетчика/ 
//			+ "";//                Дробное 7.4 Начальное значение счетчика, привязанного к карте
//			
//			Файл.ДобавитьСтроку(Строка);
//			//Прервать;
//		КонецЦикла;
//		
//		//Добавить клиентов
//		Файл.ДобавитьСтроку("$$$ADDCLIENTDISCS");
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ИнформационныеКарты.Ссылка,
//		|	ИнформационныеКарты.Наименование,
//		|	ИнформационныеКарты.КодКарты,
//		|	ИнформационныеКарты.ВладелецКарты
//		|ИЗ
//		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
//		|ГДЕ
//		|	ИнформационныеКарты.Родитель = &Родитель";
//		
//		Запрос.УстановитьПараметр("Родитель", грИнфКатр);
//		
//		_Результат = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = _Результат.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			Строка =   Формат(("02"+ВыборкаДетальныеЗаписи.КодКарты), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")+ мРазделитель // Целое Код
//			+ ""+ мРазделитель // Целое Код группы клиента
//			+ СокрЛП(ВыборкаДетальныеЗаписи.ВладелецКарты.Наименование) + мРазделитель // Строка 100 Имя клиента
//			+ "" + мРазделитель // Текст для чека
//			+ "0" + мРазделитель // Клиент или группа: для клиента «0»
//			+ ""+ мРазделитель // Строка Дополнительные сведения о   клиенте
//			+ ?(НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВладелецКарты.Пол),"0",?(ВыборкаДетальныеЗаписи.ВладелецКарты.Пол = Перечисления.ПолФизическихЛиц.Женский,"2","1"))+ мРазделитель // Пол клиента:0 — не указан;1 — мужской;2 — женский
//			+ ""+ мРазделитель // Знаменательная дата
//			+ "" + мРазделитель// Дата рождения
//			+ ""+ мРазделитель // Дата регистрации
//			+ "" + мРазделитель// Индекс
//			+ ""+ мРазделитель //  Город
//			+ ""+ мРазделитель //  Адрес
//			+ ""+ мРазделитель /// E-mail 
//			+ ""+ мРазделитель /// WEB 
//			+ ""+ мРазделитель /// Телефон 
//			+ ""+ мРазделитель /// ИНН 
//			+ ""+ мРазделитель /// Документ 
//			+ ""+ мРазделитель /// ОКПО 
//			+ ""+ мРазделитель /// ОКПД 
//			+ ""+ мРазделитель /// Значение скидки или формула 
//			+ ""+ мРазделитель /// Тип ставки:0 — отрицательная процентная (-%);1 — отрицательная суммой (-$);2 — положительная процентная (+%);3 — положительная суммой (+$) 
//			+ ""+ мРазделитель /// Назначение ставки:0 — на позицию;1 — на чек 
//			+ ""+ мРазделитель /// Код вида счетчика 
//			+ ""+ мРазделитель /// Начальное значение счетчика,  привязанного к клиенту 
//			+ ""+ мРазделитель /// Код вида счетчика 
//			+ ""+ мРазделитель /// Начальное значение счетчика,  привязанного к клиенту 
//			+ ""+ мРазделитель /// Код вида счетчика 
//			+ "";//                Дробное 7.4 Начальное значение счетчика, привязанного к карте
//			
//			Файл.ДобавитьСтроку(Строка);
//			//Прервать;
//		КонецЦикла;
//		
//		//Добавить связь карты с клиентом
//		Файл.ДобавитьСтроку("$$$ADDCLIENTCCARDS");
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ИнформационныеКарты.Ссылка,
//		|	ИнформационныеКарты.Наименование,
//		|	ИнформационныеКарты.КодКарты,
//		|	ИнформационныеКарты.ВладелецКарты
//		|ИЗ
//		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
//		|ГДЕ
//		|	ИнформационныеКарты.Родитель = &Родитель";
//		
//		Запрос.УстановитьПараметр("Родитель", грИнфКатр);
//		
//		_Результат = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = _Результат.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			Строка =   Формат(("02"+ВыборкаДетальныеЗаписи.КодКарты), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")+ мРазделитель // Код клиента
//			+ "1"+ мРазделитель // Код группы карты
//			+ Формат(("01"+ВыборкаДетальныеЗаписи.КодКарты), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0"); // Код карты
//			
//			Файл.ДобавитьСтроку(Строка);
//			//Прервать;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//-svetl UP **********************ЗАКОММЕНТИРОВАНА ВЫГРУЗКА СКИДОК ВОБЩЕ	



     //KAV++ Добавляем подарочные карты!
	Темп=ПолучитьИмяВременногоФайла("txt");
	ФайлССерт=Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию("Для ускорения выгрузки").Хранилище.Получить();
	ФайлССерт.Записать(Темп);
	Серт_ы=Новый ЧтениеТекста(Темп);
	Строка=Серт_ы.ПрочитатьСтроку();
	Пока Строка<>Неопределено Цикл
		Файл.ДобавитьСтроку(Строка);
		Строка=Серт_ы.ПрочитатьСтроку();
	КонецЦикла;
	//KAV--



	
	//	поля Тип поля Назначение
	//1 Целое Код
	//2 Строка 100 Наименование
	//3 Строка 100 Текст для чека
	//4 Целое Код профиля пользователя
	//5 Строка 10 Пароль
	//6 Строка 255 Карта пользователя
	Файл.ДобавитьСтроку("$$$DELETEALLUSERS");
	Файл.ДобавитьСтроку("$$$ADDUSERS");
	
	Пароль = "";
	ДатаПароль = Формат(РабочаяДата, "ДФ=""ддММгг""");
	Для Индекс = 1 По 6 Цикл
		Пароль = Пароль + Сред(ДатаПароль, (7 - Индекс), 1); 	
	КонецЦикла;
	Сообщить(""+Пароль);
	Строка =   Формат(2, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
	+ ПодготовитьСтроку("Администратор")  				+ мРазделитель // 2 Строка 100 Наименование)
	+ ПодготовитьСтроку("Администратор")   			+ мРазделитель // Строка 100 Текст для чека
	+ "1"     		+ мРазделитель // 4 Целое Код профиля пользователя
	+ ПодготовитьСтроку(Пароль)   						+ мРазделитель // 5 Строка 10 Пароль
	+ ПодготовитьСтроку(Пароль); 										// 6 Строка 255 Карта пользователя
	Файл.ДобавитьСтроку(Строка);
	Строка =   Формат(1, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
	+ ПодготовитьСтроку("Кассир")  				+ мРазделитель // 2 Строка 100 Наименование)
	+ ПодготовитьСтроку("Кассир")   			+ мРазделитель // Строка 100 Текст для чека
	+ "4"     		+ мРазделитель // 4 Целое Код профиля пользователя
	+ ПодготовитьСтроку("")   						+ мРазделитель // 5 Строка 10 Пароль
	+ ПодготовитьСтроку(""); 										// 6 Строка 255 Карта пользователя
	Файл.ДобавитьСтроку(Строка);
	Строка =   Формат(3, "ЧЦ=3; ЧДЦ=0; ЧН=0; ЧГ=0")        				+ мРазделитель // 1 Целое Код
	+ ПодготовитьСтроку("Сист.Админ")  				+ мРазделитель // 2 Строка 100 Наименование)
	+ ПодготовитьСтроку("Сист.Админ")   			+ мРазделитель // Строка 100 Текст для чека
	+ "1"     		+ мРазделитель // 4 Целое Код профиля пользователя
	+ ПодготовитьСтроку("1110")   						+ мРазделитель // 5 Строка 10 Пароль
	+ ПодготовитьСтроку("1110"); 										// 6 Строка 255 Карта пользователя
	Файл.ДобавитьСтроку(Строка);
	//Str-	
	
	Попытка
		Файл.Записать(Объект.Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если Не ПустаяСтрока(Объект.Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Объект.Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		Результат = мОшибкаВыгрузкиТоваров;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции // ВыгрузитьТовары()

// Функция осуществляет загрузку отчёта о продажах из ККМ, подключаемой в режиме Offline.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  Отчет                          - <ТаблицаЗначений>
//                                 - Выходной параметр; таблица, содержащая данные
//                                   о продажах за смену. Таблица содержит
//                                   следующие колонки:
//                                     ПЛУ        - <Число>
//                                                - Идентификатор проданного (возвращённого)
//                                                  товара.
//                                     Количество - <Число>
//                                                - Количество проданного (>0) или
//                                                  возвращённого (<0) товара.
//                                     Цена       - <Число>
//                                                - Цена за единицу товара.
//                                     Сумма      - <Число>
//                                                - Сумма позиции: >0 - продажа, <0 - возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ЗагрузитьОтчет(Объект, Отчет, ТабОтмененныхЧеков=Неопределено) Экспорт

//ZAM+++ 09.09.2015 #1190051 отчет по отмененным чекам
	ТабОтмененныхЧеков = Новый ТаблицаЗначений;
	ТабОтмененныхЧеков.Колонки.Добавить("ТипЗаписи");
	ТабОтмененныхЧеков.Колонки.Добавить("НомерСмены");
	ТабОтмененныхЧеков.Колонки.Добавить("НомерЧека");
	ТабОтмененныхЧеков.Колонки.Добавить("ДатаВремяЧека");
	ТабОтмененныхЧеков.Колонки.Добавить("Товар");
	ТабОтмененныхЧеков.Колонки.Добавить("Количество");
	ТабОтмененныхЧеков.Колонки.Добавить("Сумма");
//ZAM--- 09.09.2015
	Результат           = мНетОшибки;
	НеизвестнаяТранзакция = Ложь;
	НомерПоследнейСмены = 0;

	Отчет = Новый ТаблицаЗначений();
	Отчет.Колонки.Добавить("ПЛУ");
	Отчет.Колонки.Добавить("Количество");
	Отчет.Колонки.Добавить("Цена");
	Отчет.Колонки.Добавить("Сумма");

	Отчет.Колонки.Добавить("Скидка");
	Отчет.Колонки.Добавить("НомерДокумента");
	Отчет.Колонки.Добавить("НомерСмены");
	Отчет.Колонки.Добавить("ИнформацияПоСкидке");       //Str
	Отчет.Колонки.Добавить("ТипСкидки");       //Str
	Отчет.Колонки.Добавить("СтавкаСкидки");       //Str
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты1");       //Str
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты2");       //Str
	Отчет.Колонки.Добавить("ОплаченоВидомОплаты3");       //Str
	Отчет.Колонки.Добавить("ДатаДокумента");       //Str
	Отчет.Колонки.Добавить("НомерОтчета");       //Str
	Отчет.Колонки.Добавить("НаличностьВККМ");       //Str
	
	
	//Чеки = Новый ТаблицаЗначений();
	//Чеки.Колонки.Добавить("НомерДокумента");
	//Чеки.Колонки.Добавить("НомерСмены");
	//Чеки.Колонки.Добавить("ЧекЗакрыт");
	//Чеки.Колонки.Добавить("Скидка");

	Чеки2 = Новый ТаблицаЗначений();
	Чеки2.Колонки.Добавить("НомерЧека");
	Чеки2.Колонки.Добавить("Скидка");
	Чеки2.Колонки.Добавить("ИнформацияПоСкидке");       //Str
	Чеки2.Колонки.Добавить("ТипСкидки");       //Str
	Чеки2.Колонки.Добавить("СтавкаСкидки");       //Str
	Чеки2.Колонки.Добавить("ОплаченоВидомОплаты1");       //Str
	Чеки2.Колонки.Добавить("ОплаченоВидомОплаты2");       //Str
	Чеки2.Колонки.Добавить("ОплаченоВидомОплаты3");       //Str
  	Чеки2.Колонки.Добавить("ДатаДокумента");       //Str
  	Чеки2.Колонки.Добавить("ЧекЗакрыт");       //Str
	Чеки2.Колонки.Добавить("НомерСмены");
//  	Чеки2.Колонки.Добавить("СменаЧека");       //Str
	Чеки2.Колонки.Добавить("НомерОтчета");       //Str
	Чеки2.Колонки.Добавить("НаличностьВККМ");       //Str
	
	
	//Позиции = Новый ТаблицаЗначений();
	//Позиции.Колонки.Добавить("Код");
	//Позиции.Колонки.Добавить("Цена");
	//Позиции.Колонки.Добавить("Количество");
	//Позиции.Колонки.Добавить("Сумма");
	//Позиции.Колонки.Добавить("Артикул");
	//Позиции.Колонки.Добавить("НомерДокумента");
	//Позиции.Колонки.Добавить("НомерСмены");

	Позиции      = Новый ТаблицаЗначений();

	Позиции.Колонки.Добавить("Код");
	Позиции.Колонки.Добавить("Количество");
	Позиции.Колонки.Добавить("Цена");
	Позиции.Колонки.Добавить("Сумма");
	Позиции.Колонки.Добавить("Секция");   			
	Позиции.Колонки.Добавить("НомерЧека");            
	Позиции.Колонки.Добавить("НомерТранзакции");      
	
//	Позиции.Колонки.Добавить("НомерДокумента");
	Позиции.Колонки.Добавить("НомерСмены");
	Позиции.Колонки.Добавить("ДатаДокумента");       //Str
	Позиции.Колонки.Добавить("НомерОтчета");       //Str
	Позиции.Колонки.Добавить("НаличностьВККМ");       //Str
//	ТекущаяСмена = 1;
	СтарыйНомерТранзакции = 0;
	
	Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
	Если Не Файл.Существует() Тогда
		Индекс = Неопределено;
		Для Индекс = 1 По 1 Цикл
			Сообщить("Ожидание ответа кассы...");
			Пауза(5);
			Если Файл.Существует() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Файл.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Попытка
			Файл.Прочитать(Объект.Параметры.ФайлОтчета);
		Исключение
			Результат = мОшибкаЗагрузкиОтчета;
		КонецПопытки;
		Если Результат = мНетОшибки Тогда
			ТекущаяСтрока = Файл.ПолучитьСтроку(1);
			Если ТекущаяСтрока = "#" Тогда
				ИндексСтроки  = 4;
				СтарыйНомерЧека = Неопределено;  //Str+
				ТекОплачено2=0; //svetl-skat
				ТекущаяСтрока = Файл.ПолучитьСтроку(ИндексСтроки);
				Пока Не ПустаяСтрока(ТекущаяСтрока) Цикл
					ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, мРазделитель, Символы.ПС);

					НомерТранзакцииСтр = СтрПолучитьСтроку(ТекущаяСтрока,  1);
					ТипТранзакцииСтр   = СтрПолучитьСтроку(ТекущаяСтрока,  4);
					НомерДокументаСтр  = СтрПолучитьСтроку(ТекущаяСтрока,  6);
					КодПричиныСтр      = СтрПолучитьСтроку(ТекущаяСтрока,  9);
					НомерСменыСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 14);

					ДатаТранзакцииСтр  = СтрПолучитьСтроку(ТекущаяСтрока, 2);
					ВремяТранзакцииСтр = СтрПолучитьСтроку(ТекущаяСтрока, 3);
					//Проверка формата времени/даты
					Если Найти(ДатаТранзакцииСтр,"/") И (Найти(ВремяТранзакцииСтр,"AM") ИЛИ Найти(ВремяТранзакцииСтр,"PM")) Тогда
						ДатаТранзакцииСтр  = СтрЗаменить(ДатаТранзакцииСтр,  "/", Символы.ПС);
						ВремяТранзакцииСтр = СтрЗаменить(ВремяТранзакцииСтр, ":", Символы.ПС);
						МесяцСтр           = СтрПолучитьСтроку(ДатаТранзакцииСтр, 1);
						ДеньСтр            = СтрПолучитьСтроку(ДатаТранзакцииСтр, 2);
						ГодСтр             = СтрПолучитьСтроку(ДатаТранзакцииСтр, 3);
						
						ЧасСтр             = СтрПолучитьСтроку(ВремяТранзакцииСтр, 1);
						МинутаСтр          = СтрПолучитьСтроку(ВремяТранзакцииСтр, 2);
						СекундаСтр         = СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(ВремяТранзакцииСтр, 3)," AM","")," PM","");
						
						Если Найти(ВремяТранзакцииСтр,"AM") Тогда
							Если ЧасСтр="12" Тогда
								ЧасСтр="00";
							КонецЕсли;
						ИначеЕсли Найти(ВремяТранзакцииСтр,"PM") Тогда
							Если ЧасСтр="12" Тогда
								ЧасСтр="12";
							Иначе
								ЧасСтр=Строка(12+Число(ЧасСтр));
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДатаТранзакцииСтр  = СтрЗаменить(ДатаТранзакцииСтр,  ".", Символы.ПС);
						ВремяТранзакцииСтр = СтрЗаменить(ВремяТранзакцииСтр, ":", Символы.ПС);
						ДеньСтр            = СтрПолучитьСтроку(ДатаТранзакцииСтр, 1);
						МесяцСтр           = СтрПолучитьСтроку(ДатаТранзакцииСтр, 2);
						ГодСтр             = СтрПолучитьСтроку(ДатаТранзакцииСтр, 3);
						ЧасСтр             = СтрПолучитьСтроку(ВремяТранзакцииСтр, 1);
						МинутаСтр          = СтрПолучитьСтроку(ВремяТранзакцииСтр, 2);
						СекундаСтр         = СтрПолучитьСтроку(ВремяТранзакцииСтр, 3);
					КонецЕсли;
					
					
					Попытка
						ДатаТранзакции  = Дата(Число(ГодСтр), Число(МесяцСтр), Число(ДеньСтр),
						                       Число(ЧасСтр), Число(МинутаСтр), Число(СекундаСтр));
											   
						НомерТранзакции    = Число(НомерТранзакцииСтр);
						ТипТранзакции      = Число(ТипТранзакцииСтр);
						НомерЧека	     = Число(НомерДокументаСтр);
						НомерСмены         = Число(НомерСменыСтр);
					Исключение
						Сообщить("Не правильная выгрузка из касс!!! ИНИЦИАЛИЗАЦИЯ " + НомерТранзакции);
						Результат = мОшибкаЗагрузкиОтчета;
						Прервать;
					КонецПопытки;

					Если НомерПоследнейСмены < НомерСмены Тогда
						НомерПоследнейСмены = НомерСмены;
					КонецЕсли;

					
					Если СтарыйНомерТранзакции > НомерТранзакции Тогда
						Сообщить("Не правильная выгрузка из касс!!! СтарыйНомерТранзакции > НомерТранзакции " + СтарыйНомерТранзакции + " > " + НомерТранзакции);
						Результат = "Не правильная выгрузка из касс!!! СтарыйНомерТранзакции > НомерТранзакции";
						Прервать;
					КонецЕсли;	
					СтарыйНомерТранзакции = НомерТранзакции; //Str+
					
					
					Если      ТипТранзакции =  1 Тогда
						// Регистрация без учёта кода товара
						Сообщить("Регистрация без учёта кода товара, ттранзакция: " + НомерТранзакции);
						Результат = мОшибкаЗагрузкиОтчета;
						Прервать;
					ИначеЕсли ТипТранзакции = 11 Тогда
						// Регистрация с учётом кода товара
						КодСтр        = СтрПолучитьСтроку(ТекущаяСтрока,  8);
//						СекцияСтр     = СтрПолучитьСтроку(ТекущаяСтрока, 9);
						ЦенаСтр       = СтрПолучитьСтроку(ТекущаяСтрока, 10);
						КоличествоСтр = СтрПолучитьСтроку(ТекущаяСтрока, 11);
						СуммаСтр      = СтрПолучитьСтроку(ТекущаяСтрока, 16);   //поставил 12 сУММА с округлением без скидок  а была 16 со скидками вернул обратно 
						Артикул       = СтрПолучитьСтроку(ТекущаяСтрока, 18);
						Попытка
							Код        = Число(КодСтр);
//							Секция     = Число(СекцияСтр);
							Цена       = Число(ЦенаСтр);
							Количество = Число(КоличествоСтр);
							Сумма      = Число(СуммаСтр);
						Исключение
							Сообщить("Не правильная выгрузка из касс!!! ТОВАР 11 тип " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
						КонецПопытки;
						
						Если СтарыйНомерЧека <> НомерЧека Тогда 
							//Сообщить("Открытие:" + НомерЧека + "-" + ДатаТранзакции);
							Врем           = Чеки2.Добавить();
							Врем.НомерЧека = НомерЧека;
							Врем.ОплаченоВидомОплаты1 = 0;
							Врем.ОплаченоВидомОплаты2 = 0;
							Врем.ОплаченоВидомОплаты3 = 0;
							Врем.ДатаДокумента = ДатаТранзакции;
							Врем.ЧекЗакрыт      = Ложь;
							Врем.НомерСмены  = НомерСмены;
							СтарыйНомерЧека = НомерЧека;
						КонецЕсли;
						
						//Врем                = Позиции.Добавить();
						//Врем.Код            = Код;
						//Врем.Цена           = Цена;
						//Врем.Количество     = Количество;
						//Врем.Сумма          = Сумма;
						//Врем.Артикул        = Артикул;
						//Врем.НомерДокумента = НомерДокумента;
						//Врем.НомерСмены     = НомерСмены;
						
						
						
						Товар                 = Позиции.Добавить();
						Товар.НомерСмены     = НомерСмены;
						Товар.Код             = Код;
						Товар.Количество      = Количество;
						Товар.Цена            = Цена;
						Товар.Сумма           = Сумма;
//						Товар.Секция          = Секция;
						Товар.НомерЧека       = НомерЧека;
						Товар.НомерТранзакции = НомерТранзакции;
						Товар.ДатаДокумента   = ДатаТранзакции; //Str+
						
					ИначеЕсли ТипТранзакции =  2 Или ТипТранзакции = 12 Тогда
						// Сторнирование
						СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
						СтруктураПоиска.НомерЧека 		= НомерЧека;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						Врем                           = Позиции.НайтиСтроки(СтруктураПоиска);
						Врем                           = Врем[Врем.Количество() - 1];
//ZAM+++ 09.09.2015 #1190051 отчет по отмененным чекам
						ВремСтрока = Врем;
						НовОтмЧек = ТабОтмененныхЧеков.Добавить();
						НовОтмЧек.ТипЗаписи     = "Сторно";
						НовОтмЧек.НомерСмены    = ВремСтрока.НомерСмены;
						НовОтмЧек.НомерЧека     = ВремСтрока.НомерЧека;
						НовОтмЧек.ДатаВремяЧека = ВремСтрока.ДатаДокумента;
						НовОтмЧек.Товар         = ВремСтрока.Код;
						НовОтмЧек.Количество    = ВремСтрока.Количество;
						НовОтмЧек.Сумма         = ВремСтрока.Сумма;
//ZAM--- 09.09.2015
						Позиции.Удалить(Врем);
					ИначеЕсли ТипТранзакции =  4 Или ТипТранзакции = 14 Тогда
						// Налог
						
						
					ИначеЕсли ТипТранзакции =  5 Тогда //Скидка суммой на позицию товара по свободной цене/
						// Скидка на позицию
					ИначеЕсли ТипТранзакции = 15 Тогда //Скидка суммой на позицию товара по цене из справочника/
						// Скидка на позицию
					ИначеЕсли ТипТранзакции =  7 Тогда //Скидка % на позицию товара по свободной цене
						// Скидка на позицию
					ИначеЕсли ТипТранзакции = 17 Тогда //Скидка % на позицию товара по цене из справочника
						// Скидка на позицию
						СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
						СтруктураПоиска.НомерЧека	   = НомерЧека;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						ВремПозиции                    = Позиции.НайтиСтроки(СтруктураПоиска);

						СуммаПозиций                   = 0;
						Для Каждого Позиция Из ВремПозиции Цикл
							СуммаПозиций = СуммаПозиций + Позиция.Сумма;
						КонецЦикла;

						ВремЧеки = Чеки2.НайтиСтроки(СтруктураПоиска)[0];
						ВремЧеки.СтавкаСкидки = Число(СтрПолучитьСтроку(ТекущаяСтрока, 11));   
						
						
					ИначеЕсли ТипТранзакции =  6 Тогда //Надбавка суммой на позицию товара по свободной цене
						// Надбавка на позицию
					ИначеЕсли ТипТранзакции = 16 Тогда //Надбавка суммой на позицию товара по цене из справочника
						// Надбавка на позицию
					ИначеЕсли ТипТранзакции =  8 Тогда //Надбавка % на позицию товара по свободной цене
						// Надбавка на позицию
					ИначеЕсли ТипТранзакции = 18 Тогда //Надбавка % на позицию товара по  цене из справочника
						// Надбавка на позицию
						
						
					ИначеЕсли ТипТранзакции = 75 Тогда //Скидка суммой на документ, распределенная по позициям товара по свободной цене
						// Распределенная скидка
							//Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							//Результат = мОшибкаЗагрузкиОтчета;
							//Прервать;  //-svetl
					ИначеЕсли ТипТранзакции = 85 Тогда //Скидка суммой на документ, распределенная по позициям товара по цене из справочника 
						// Распределенная скидка
							//Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							//Результат = мОшибкаЗагрузкиОтчета;
							//Прервать;        //-svetl

					ИначеЕсли ТипТранзакции = 77 Тогда //Скидка % на документ, распределенная по позициям товара по свободной цене
						// Распределенная скидка
							//Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							//Результат = мОшибкаЗагрузкиОтчета;
							//Прервать;     //-svetl
					ИначеЕсли ТипТранзакции = 87 Тогда //Скидка % на документ, распределенная по позициям товара по цене из справочника
						// Распределенная скидка
						
						//Обрабатываем эту ситуацию в конце чека там где ТипТранзакции = 37
						
						
						
						
					ИначеЕсли ТипТранзакции = 76 Тогда //Надбавка суммой на документ, распределенная по позициям товара по свободной цене/
						// Распределенная надбавка
							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
					ИначеЕсли ТипТранзакции = 86 Тогда //Надбавка суммой на документ, распределенная по позициям товара по цене из справочника
						// Распределенная надбавка
							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
					ИначеЕсли ТипТранзакции = 78 Тогда //Надбавка % на документ, распределенная по позициям товара по свободной цене
						// Распределенная надбавка
							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
					ИначеЕсли ТипТранзакции = 88 Тогда //Надбавка % на документ, распределенная по позициям товара по цене из справочника/
						// Распределенная надбавка
							Сообщить("Не известный тип надбавки, транзакция: " + НомерТранзакции);
//							Результат = мОшибкаЗагрузкиОтчета;
//							Прервать;
						
					ИначеЕсли ТипТранзакции = 60 Тогда
						// X-отчёт
						//ТекущаяСмена = ТекущаяСмена + 1;
						//НомерОтчета
						НомерОтчетаСтр = СтрПолучитьСтроку(ТекущаяСтрока, 6);
						//ЛогНомерФР
						ЛогНомерФРСтр = СтрПолучитьСтроку(ТекущаяСтрока, 5);
						//НаличностьВККМ
						НаличностьВККМСтр = СтрПолучитьСтроку(ТекущаяСтрока, 11);
					ИначеЕсли ТипТранзакции = 63 Тогда
						// Z-отчёт
						//ТекущаяСмена = ТекущаяСмена + 1;
						Сообщить("Смена: " + НомерСмены);
						
						//НомерОтчета
						НомерОтчетаСтр = СтрПолучитьСтроку(ТекущаяСтрока, 14);
						//ЛогНомерФР
						ЛогНомерФРСтр = СтрПолучитьСтроку(ТекущаяСтрока, 5);
						//НаличностьВККМ
						НаличностьВККМСтр = СтрПолучитьСтроку(ТекущаяСтрока, 10);
						
						СтруктураПоиска           = Новый Структура("НомерОтчета");
						СтруктураПоиска.НомерОтчета = Неопределено;
						Товар                     = Позиции.НайтиСтроки(СтруктураПоиска);
						Для Каждого Врем Из Товар Цикл
							Врем.НомерОтчета = НомерОтчетаСтр;
							Врем.НаличностьВККМ = НаличностьВККМСтр;
						КонецЦикла;
						Чек                     = Чеки2.НайтиСтроки(СтруктураПоиска);
						Для Каждого Врем Из Чек Цикл
							Врем.НомерОтчета = НомерОтчетаСтр;
							Врем.НаличностьВККМ = НаличностьВККМСтр;
						КонецЦикла;
					ИначеЕсли ТипТранзакции = 64 Тогда
						// Документ открытия смены
					ИначеЕсли ТипТранзакции = 61 Тогда
						// Закрытие смены
					ИначеЕсли ТипТранзакции = 62 Тогда
						// Открытие смены
					ИначеЕсли ТипТранзакции = 40 Тогда
						// Оплата с вводом суммы клиента
						
					ИначеЕсли ТипТранзакции = 41 Тогда
						// Оплата без ввода суммы клиента
					ИначеЕсли ТипТранзакции = 42 Тогда
						// Открытие чека
						Врем                = Чеки2.Добавить();
						Врем.НомерЧека 		= НомерЧека;
						Врем.НомерСмены     = НомерСмены;
						Врем.ЧекЗакрыт      = Ложь;
						Врем.Скидка         = 0;
						
						Врем.ОплаченоВидомОплаты1 = 0;
						Врем.ОплаченоВидомОплаты2 = 0;
						Врем.ОплаченоВидомОплаты3 = 0;
						Врем.ДатаДокумента = ДатаТранзакции;
						Врем.НомерСмены  = НомерСмены;
						СтарыйНомерЧека = НомерЧека;
						
						
						
					ИначеЕсли ТипТранзакции = 43 Тогда
						// Распределение оплаты
//Str+					
						//Сообщить("Оплата:" + НомерЧека + "-" + ДатаТранзакции);
						СтруктураПоиска            			= Новый Структура("НомерЧека, НомерСмены");
						//СтруктураПоиска.ДатаДокумента       = ДатаТранзакции;
						СтруктураПоиска.НомерЧека  			= НомерЧека;
						СтруктураПоиска.НомерСмены  			= НомерСмены;

						//Сообщить("+"+Строка);
						Врем                           = Чеки2.НайтиСтроки(СтруктураПоиска);
						
						СуммаСтр                       = СтрПолучитьСтроку(ТекущаяСтрока, 12);
						СуммаСдачиСтр                       = "0";
						Попытка
							Сумма = Число(СуммаСтр);
							СуммаСдачи = Число(СуммаСдачиСтр);
						Исключение
							Сообщить("Не правильная выгрузка из касс!!! 1 РАСПРЕДЕЛЕНИЕ ОПЛАТЫ 43 тип " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
						КонецПопытки;
						
//Str-						
						
						КодВидаОплатыСтр= СтрПолучитьСтроку(ТекущаяСтрока, 9);        //Str
						Попытка
							КодВидаОплаты = Число(КодВидаОплатыСтр);
						Исключение
							Сообщить("Не правильная выгрузка из касс!!! 2 РАСПРЕДЕЛЕНИЕ ОПЛАТЫ 43 тип " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
						КонецПопытки;
						
						Врем        = Врем[0];
						Если КодВидаОплаты = 1 Тогда
							//Сообщить("Нал:" + НомерЧека + "-" + ДатаТранзакции + "=" + Сумма);
							//Врем.ОплаченоВидомОплаты1 = Врем.ОплаченоВидомОплаты1 + Сумма - СуммаСдачи;//svetl-skat черта с два ! Скидка !  //Нал
						ИначеЕсли КодВидаОплаты = 2 Тогда
							//Сообщить("Безнал:" + НомерЧека + "-" + ДатаТранзакции + "=" + Сумма);
							//Врем.ОплаченоВидомОплаты2 = Сумма; //svetl-skat Врем.ОплаченоВидомОплаты2 + Сумма - СуммаСдачи;     //Безнал
							ТекОплачено2=ТекОплачено2+Сумма - СуммаСдачи; //svetl-skat

						Иначе
							//Сообщить("Доставка:" + НомерЧека + "-" + ДатаТранзакции + "=" + Сумма);
							//Врем.ОплаченоВидомОплаты3 = Сумма; //svetl-skat Врем.ОплаченоВидомОплаты3 + Сумма - СуммаСдачи; //svetl-skat что это вообще такое ? Нал !   //Доставка
						КонецЕсли;
					ИначеЕсли ТипТранзакции = 49 Тогда
						// Закрытие документа по ГП
					ИначеЕсли ТипТранзакции = 45 Тогда
						// Закрытие документа в ККМ
						
						
					ИначеЕсли ТипТранзакции = 50 Тогда
						// Внесение
					ИначеЕсли ТипТранзакции = 51 Тогда
						// Выплата
						
					ИначеЕсли ТипТранзакции = 55 Тогда
						// Закрытие чека
						ИнформацияПоСкидкеСтр = СтрПолучитьСтроку(ТекущаяСтрока, 8);//svetl-skat
						ТекСуммаСтр=СтрПолучитьСтроку(ТекущаяСтрока, 20);
						ИнформацияПоСкидке = Строка(ИнформацияПоСкидкеСтр);  //Номер карты  //svetl-skat
						
						
						СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
						СтруктураПоиска.НомерЧека	   = НомерЧека;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						ВремПозиции                    = Позиции.НайтиСтроки(СтруктураПоиска);

						СуммаПозиций                   = 0;
						Для Каждого Позиция Из ВремПозиции Цикл
							СуммаПозиций = СуммаПозиций + Позиция.Сумма;
						КонецЦикла;

						ВремЧеки = Чеки2.НайтиСтроки(СтруктураПоиска)[0];
						ВремЧеки.ЧекЗакрыт = Истина;
						//svetl-skat beg
						ВремЧеки.ИнформацияПоСкидке = ИнформацияПоСкидке;  //svetl-skat
						Если СтрДлина(СокрЛП(ИнформацияПоСкидке))< 13 Тогда
							ТекСумма=Число(ТекСуммаСтр);
							ВремЧеки.ОплаченоВидомОплаты1 = ТекСумма; //Сумма без скидок
							//ВремЧеки.ОплаченоВидомОплаты2 = ТекСумма; //Сумма без скидок
							//Вместо почившего кода 37
							ВремЧеки.ТипСкидки=12;  //svetl-skat Влепил от отчаяния втупую
						КонецЕсли;	
						//svetl-skat end

					ИначеЕсли ТипТранзакции = 56 Тогда
						// Чек не закрыт на ККМ
						СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
						СтруктураПоиска.НомерЧека = НомерЧека;
						СтруктураПоиска.НомерСмены     = НомерСмены;
						Врем                           = Позиции.НайтиСтроки(СтруктураПоиска);
//ZAM+++ 09.09.2015 #1190051 отчет по отмененным чекам
						Если КодПричиныСтр="0" Тогда
							Для Индекс = 1 По Врем.Количество() Цикл
								ВремСтрока = Врем[Врем.Количество() - Индекс];
								НовОтмЧек = ТабОтмененныхЧеков.Добавить();
								НовОтмЧек.ТипЗаписи     = "Отмена чека";
								НовОтмЧек.НомерСмены    = ВремСтрока.НомерСмены;
								НовОтмЧек.НомерЧека     = ВремСтрока.НомерЧека;
								НовОтмЧек.ДатаВремяЧека = ВремСтрока.ДатаДокумента;
								НовОтмЧек.Товар         = ВремСтрока.Код;
								НовОтмЧек.Количество    = ВремСтрока.Количество;
								НовОтмЧек.Сумма         = ВремСтрока.Сумма;
							КонецЦикла;
						КонецЕсли;
//ZAM--- 09.09.2015
						Для Индекс = 1 По Врем.Количество() Цикл
							ВремСтрока                 = Врем[Врем.Количество() - Индекс];
							Позиции.Удалить(ВремСтрока);
						КонецЦикла;
					ИначеЕсли ТипТранзакции = 57 Тогда
						// Восстановление отложенного чека
						
						
				
					ИначеЕсли ТипТранзакции = 35 Тогда //Скидка суммой на документ
						// Скидка на чек
							//Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							//Результат = мОшибкаЗагрузкиОтчета;
							//Прервать;    //-svetl
					ИначеЕсли ТипТранзакции = 37 Тогда //Скидка % на документ
//						// Скидка на чек
////						Сообщить("Скидка на чек");
//						ПроцентСкидкиСтр = СтрПолучитьСтроку(ТекущаяСтрока, 11);
//						//ИнформацияПоСкидкеСтр = СтрПолучитьСтроку(ТекущаяСтрока, 8);//svetl-skat
//						ТипСкидкиСтр = СтрПолучитьСтроку(ТекущаяСтрока, 10);
//						СуммаСкидкиСтр = СтрПолучитьСтроку(ТекущаяСтрока, 12);
//						Попытка
//							ПроцентСкидки = Число(ПроцентСкидкиСтр);
//							СуммаСкидки = Число(СуммаСкидкиСтр);
//							//ИнформацияПоСкидке = Строка(ИнформацияПоСкидкеСтр);  //Номер карты  //svetl-skat
//							//В поле №10 указывается код типа скидки:
//							//0 — ручная с диапазоном значений;
//							//1 — ручная без диапазона значений;
//							//2 — автоматическая;
//							//3 — не используется;
//							//4 — не используется;
//							//5 — скидка через платежную систему PayCard;
//							//6 — дисконтная система АСТОР;
//							//7 — оплата платежной системы PayCard в виде скидки;
//							//8 — предоплата;
//							//9 — оплата бонусом платежной системы PayCard.
//							ТипСкидки = Строка(ТипСкидкиСтр);
//						Исключение
//							Сообщить("Не правильная выгрузка из касс!!! СКИДКА НА ЧЕК 37 тип " + НомерТранзакции);
//							Результат = мОшибкаЗагрузкиОтчета;
//							Прервать;
//						КонецПопытки;
//						СтруктураПоиска           = Новый Структура("НомерЧека, НомерСмены");
//						СтруктураПоиска.НомерЧека = НомерЧека;
//						СтруктураПоиска.НомерЧека = НомерЧека;
//						СтруктураПоиска.НомерСмены     = НомерСмены;
//						Товар                           = Позиции.НайтиСтроки(СтруктураПоиска);
//						
//						
//						//В 1с эти коды будут другими +10 к коду так как 1с работает еще и со Штирихом
//						ТипСкидки = "1" + ТипСкидки;
//						Если ТипСкидки = "12" Тогда //автоматическая
////							Сообщить("Автоматическая;");
//							СтруктураПоиска           = Новый Структура("НомерЧека, НомерСмены");
//							СтруктураПоиска.НомерЧека = НомерЧека;
//							СтруктураПоиска.НомерСмены = НомерСмены;
//							Врем                     = Чеки2.НайтиСтроки(СтруктураПоиска);
//							Врем        = Врем[0];
//							Врем.ТипСкидки = Число(ТипСкидки);
//							//Врем.ИнформацияПоСкидке = ИнформацияПоСкидке;  //svetl-skat
//							Врем.СтавкаСкидки = ПроцентСкидки;
//						Иначе
//							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
//							Результат = мОшибкаЗагрузкиОтчета;
//							Прервать;
//						конецесли;
					ИначеЕсли ТипТранзакции = 36 Тогда //Надбавка суммой на документ
						// Надбавка на чек
							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							Результат = мОшибкаЗагрузкиОтчета;
							Прервать;
					ИначеЕсли ТипТранзакции = 38 Тогда //Надбавка % на документ
						// Надбавка на чек
							Сообщить("Не известный тип скидки, транзакция: " + НомерТранзакции);
							//Результат = мОшибкаЗагрузкиОтчета;
							//Прервать;
						
						
						
					Иначе
						Сообщить("Обнаружена неизвестная транзакция: " + ТипТранзакции + ". Данные по транзакции не были загружены!", СтатусСообщения.Важное);
						НеизвестнаяТранзакция = Истина;
					КонецЕсли;

					ИндексСтроки  = ИндексСтроки + 1;
					ТекущаяСтрока = Файл.ПолучитьСтроку(ИндексСтроки);
				КонецЦикла;

				Если НеизвестнаяТранзакция Тогда
					Сообщить("Не все данные были загружены из отчета. Обратитесь к администратору системы!", СтатусСообщения.Важное);
				КонецЕсли;
			ИначеЕсли ТекущаяСтрока <> "@" Тогда
				Сообщить("Не правильная выгрузка из касс!!! ОКОНЧАНИЕ ТекущаяСтрока <> @ " + НомерТранзакции);
				Результат = мОшибкаЗагрузкиОтчета;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = мОшибкаЗагрузкиОтчета;
	КонецЕсли;
	
	Если Результат = мНетОшибки Тогда
		//СтруктураПоиска            = Новый Структура("НомерСмены, ЧекЗакрыт");
		//СтруктураПоиска.НомерСмены = НомерПоследнейСмены;
		//СтруктураПоиска.ЧекЗакрыт  = Истина;
		//Врем                       = Чеки.НайтиСтроки(СтруктураПоиска);
		//Для Каждого Чек Из Врем Цикл
		//	СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
		//	СтруктураПоиска.НомерЧека = Чек.НомерЧека;
		//	СтруктураПоиска.НомерСмены     = НомерПоследнейСмены;
		//	ПозицииЧека = Позиции.НайтиСтроки(СтруктураПоиска);
		//	Для Каждого Позиция Из ПозицииЧека Цикл
		//		РезПозиция            = Отчет.Добавить();
		//		РезПозиция.ПЛУ        = Позиция.Код;
		//		РезПозиция.Количество = Позиция.Количество;
		//		РезПозиция.Цена       = Позиция.Цена;
		//		РезПозиция.Сумма      = Позиция.Сумма;
		//	КонецЦикла;
		//КонецЦикла;
		СтруктураПоиска            = Новый Структура("ЧекЗакрыт");
		СтруктураПоиска.ЧекЗакрыт  = Истина;
		Врем                       = Чеки2.НайтиСтроки(СтруктураПоиска);
//		_НомерДокумента = 0;
		Для Каждого Чек Из Врем Цикл
//			_НомерДокумента = _НомерДокумента + 1;
			СтруктураПоиска                = Новый Структура("НомерЧека, НомерСмены");
			СтруктураПоиска.НомерЧека = Чек.НомерЧека;
			СтруктураПоиска.НомерСмены = Чек.НомерСмены;
			//СтруктураПоиска.ДатаДокумента     = Чек.ДатаДокумента;
			ПозицииЧека = Позиции.НайтиСтроки(СтруктураПоиска);
			Для Каждого Позиция Из ПозицииЧека Цикл
				РезПозиция            = Отчет.Добавить();
				РезПозиция.ПЛУ        = Позиция.Код;
				РезПозиция.Количество = Позиция.Количество;
				РезПозиция.Цена       = Позиция.Цена;
				РезПозиция.Сумма      = Позиция.Сумма;
//Str
				РезПозиция.Скидка       		= Чек.Скидка;
//				РезПозиция.НомерДокумента       = Чек.НомерЧека;  //ТАК КАК НОМЕРОВ В ККМ ВСЕГО 100000 Ненавижу штрих. ;-(
				РезПозиция.НомерДокумента       = Чек.НомерЧека;//_НомерДокумента;  Вернул в версии для АТОЛ. Так как здесь есть номер сменыю.
				РезПозиция.НомерСмены      		= Чек.НомерСмены;
				РезПозиция.ИнформацияПоСкидке   = Чек.ИнформацияПоСкидке;
				РезПозиция.ТипСкидки      		= Чек.ТипСкидки;
				РезПозиция.СтавкаСкидки      	= Чек.СтавкаСкидки;
				РезПозиция.ОплаченоВидомОплаты1   = Чек.ОплаченоВидомОплаты1;     //Нал
				РезПозиция.ОплаченоВидомОплаты2   = Чек.ОплаченоВидомОплаты2;     //Безнал
				РезПозиция.ОплаченоВидомОплаты3   = Чек.ОплаченоВидомОплаты3;     //Сертификат
				РезПозиция.ДатаДокумента		  = Чек.ДатаДокумента;
				РезПозиция.НомерОтчета   			= Чек.НомерОтчета;     //НомерОтчета
				РезПозиция.НаличностьВККМ		  	= Чек.НаличностьВККМ;
				
//Str
			КонецЦикла;
		КонецЦикла;
		//РезПозиция.ОплаченоВидомОплаты2=ТекОплачено2; //svetl-skat
		//Str+
	    Отчет.Сортировать("НомерДокумента Возр"); //ДатаДокумента 
	    ТекСтрока=Отчет.Получить(0);
		Текстрока.ОплаченоВидомОплаты2=ТекОплачено2;
	Иначе
		Сообщить("" + Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчет()

// Функция вызывается после того, как был загружен и обработан отчёт о продажах.
// (API v2.0)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОтчетЗагружен(Объект) Экспорт

	Результат = мНетОшибки;

	Файл = Новый Файл(Объект.Параметры.ФайлОтчета);
	Если Файл.Существует() Тогда
		Попытка
			Документ = Новый ТекстовыйДокумент();
			Документ.Прочитать(Объект.Параметры.ФайлОтчета, КодировкаТекста.ANSI);
			Документ.ЗаменитьСтроку(1, "@");
			Документ.Записать(Объект.Параметры.ФайлОтчета, КодировкаТекста.ANSI);
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетЗагружен()

// Функция осуществляет очистку товаров на ККМ, подключаемой в режиме Offline.
// (API v2.3)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОчиститьТоварыНаККМ(Объект) Экспорт

	Результат = мНетОшибки;

	Файл = Новый ТекстовыйДокумент();

	Файл.ДобавитьСтроку("##@@&&");
	Файл.ДобавитьСтроку("#");

	Файл.ДобавитьСтроку("$$$DELETEALLWARES");
	Файл.ДобавитьСтроку("$$$DELETEALLBARCODES");
	Файл.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");

	Попытка
		Файл.Записать(Объект.Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Если Не ПустаяСтрока(Объект.Параметры.ФлагВыгрузки) Тогда
			Файл.Очистить();
			Файл.Записать(Объект.Параметры.ФлагВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
	Исключение
		Результат = мОшибкаВыгрузкиТоваров;
	КонецПопытки;

	Возврат Результат;

КонецФункции // ЗагрузитьОтчет()

// Функция возвращает флаг загрузки предыдущей выгрузки
// (API v2.3)
//
// Параметры:
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
//  ФлагЗагрузки                   - <Булево>
//                                 - Флаг состояния загрузки.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПрочитатьФлагЗагрузки(Объект, ФлагЗагрузки) Экспорт

	Результат = мНетОшибки;

	БазаТоваров = Новый Файл(Объект.Параметры.БазаТоваров);
	Если БазаТоваров.Существует() Тогда
		Файл = Новый ТекстовыйДокумент();
		Файл.Прочитать(Объект.Параметры.БазаТоваров, КодировкаТекста.ANSI);
		Строка = Файл.ПолучитьСтроку(2);
		Если СтрДлина(Строка) = 1 Тогда
			Если Найти(Строка,"#") > 0 Тогда
				ФлагЗагрузки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура формирует задержку указанной длительности
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время)

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры // Пауза()

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
//
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ПолучитьКаталогИИмяФайлаТО(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Формирует представление товара
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание характеристик ТМЦ
//
Функция ПредставлениеТовара(Выборка)

	Результат = "";
	Если Выборка.ХарактеристикаНоменклатуры <> Неопределено
	   И Выборка.ХарактеристикаНоменклатуры <> "" Тогда
		Результат = Результат + " (" + Выборка.ХарактеристикаНоменклатуры + ")";
	КонецЕсли;

	Результат = Выборка.Номенклатура.Наименование + Результат;

	Возврат Результат;

КонецФункции

// Подготавливает строку для выгрузки
Функция ПодготовитьСтроку(ИсходнаяСтрока);
	
	ИсходнаяСтрока = СтрЗаменить(СокрЛП(ИсходнаяСтрока), мРазделитель, " "); 
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "#", " "); 
	
	ИсходнаяСтрока = Лев(СокрЛП(ИсходнаяСтрока),95);   //Str+
	
	Возврат ИсходнаяСтрока;
	
КонецФункции
 

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНетОшибки                 = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаПараметровНастройки = Перечисления.ТООшибкиОбщие.ОшибкаПараметровНастройки;
мОшибкаЗагрузкиДрайвера    = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиДрайвера;
мОшибкаПриПодключении      = Перечисления.ТООшибкиОбщие.ОшибкаПриПодключении;
мОшибкаТестНеПройден       = Перечисления.ТООшибкиОбщие.ОшибкаТестНеПройден;
мEAN8                      = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
мEAN13                     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
мОшибкаВыгрузкиТоваров     = Перечисления.ТООшибкиККМOffline.ОшибкаВыгрузкиТоваров;
мОшибкаЗагрузкиОтчета      = Перечисления.ТООшибкиККМOffline.ОшибкаЗагрузкиОтчета;
мТипЧисло                  = Тип("Число");
мРазделитель = ";";

мИдентификатор   = Новый УникальныйИдентификатор;
мВерсияОбработки = 2.28;
мВерсияОбработки = 2.29;

#КонецЕсли