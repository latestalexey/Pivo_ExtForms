Перем мСпособыСверткиОбъектов Экспорт;
Перем мЕстьРегистрыБухгалтерии Экспорт;

Перем РегистрыНакопленияБезТаблицыИтогов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает список объектов метаданных
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//  Соответствие - Ключи - названия объектов метаданных, Значения - сами метаданные.
Функция ПолучитьСтруктуруТиповОбъектовМД() Экспорт
	
	МассивРез = Новый Структура();
	МассивРез.Вставить("Документ", Метаданные.Документы);
	МассивРез.Вставить("РегистрСведений", Метаданные.РегистрыСведений);
	МассивРез.Вставить("РегистрНакопления", Метаданные.РегистрыНакопления);
	
	Если мЕстьРегистрыБухгалтерии Тогда
		МассивРез.Вставить("РегистрБухгалтерии", Метаданные.РегистрыБухгалтерии);
	КонецЕсли;
	
	Возврат МассивРез;
	
КонецФункции

// Функция возвращает способ свертки для типа объекта метаданных по умолчанию
//
// Параметры
//  ТипОбъектаМД - элемент соответствия, полученного функцией ПолчитьМассивТиповОбъектовМД() 
//  ОбъектМД - метаданные, для которых нужно получить способ свертки
//
// Возвращаемое значение:
//  Строка - способ свертки для данного объекта
Функция ПолучитьСпособСверткиПоУмолчанию(ТипОбъектаМД, ОбъектМД) Экспорт
	Если ТипОбъектаМД.Ключ = "Справочник" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "Документ" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НаДату;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "ПланВидовХарактеристик" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "ПланСчетов" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "ПланВидовРасчета" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрСведений" ТОгда
		Если ОбъектМД.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
			
		ИначеЕсли (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору)
		 И (НЕ Метаданные.Документы.КорректировкаЗаписейРегистров.Движения.Содержит(ОбъектМД)) Тогда
		    СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
			
		Иначе
			СпособСвертки = мСпособыСверткиОбъектов.НаДату;
			
		КонецЕсли;	
		
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрНакопления" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НаДату;
		
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрБухгалтерии" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НаДату;		
		
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрРасчета" ТОгда
		СпособСвертки = мСпособыСверткиОбъектов.НаДату;				
		
	Иначе
		СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать;
		
	КонецЕсли;	
	
	Возврат СпособСвертки;
	
КонецФункции

// Процедура удаляет объекты из переданного списка
//
// Параметры
//  ДокументыВводаОстатков - таблица значений, содержащая список документов для удаления. 
// 
Процедура УдалитьДокументыВводаОстатков(ДокументыВводаОстатков) Экспорт
	
	Для Каждого ТекДок Из ДокументыВводаОстатков Цикл
		ДокОбъект = ТекДок.Документ.ПолучитьОбъект();
		ДокОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры	

// Процедура включает итоги у переданного списка регистров
//
// Параметры
//  СписокРегистровСОтключеннымиИтогами - таблица значений, содержащая список регистров для включения итогов. 
// 
Процедура ВключитьИтогиПоСпискуРегистров(СписокРегистровСОтключеннымиИтогами) Экспорт
	
	Для Каждого ТекРегистр Из СписокРегистровСОтключеннымиИтогами Цикл
		Если ТекРегистр.Пометка Тогда
			Если ТекРегистр.ТипРегистра = "Накопления" Тогда
				Если НЕ РегистрыНакопленияБезТаблицыИтогов.Свойство(ТекРегистр.Регистр) Тогда
					РегистрыНакопления[ТекРегистр.Регистр].УстановитьИспользованиеИтогов(Истина);
				КонецЕсли;
				
			ИначеЕсли ТекРегистр.ТипРегистра = "Бухгалтерии" Тогда	
				РегистрыБухгалтерии[ТекРегистр.Регистр].УстановитьИспользованиеИтогов(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

// Процедура выводит сообщение о ходе процесса свертки
//
// Параметры
//  Нет 
// 
Процедура СообщениеСвертки(ТекстСообщения, ВыводитьВремя = Ложь) Экспорт
	
	Сообщить(ТекстСообщения + " [" + ?(ВыводитьВремя, ТекущаяДата(),"") + "]");
	
КонецПроцедуры

// Функция возвращает ту дату, на которую нужно сворачивать данные
//
// Параметры
//  ДатаПредполагаемойСвертки - дата окончания периода, указанная в правилах свертки
//
// Возвращаемое значение:
//  Дата, на которую нужно сворачивать
Функция ПолучитьДатуСвертки(ДатаПредполагаемойСвертки) Экспорт
	
	Если ДатаПредполагаемойСвертки = Дата('00010101') Тогда
		Возврат ДатаСверткиИБ;
		
	Иначе
		Возврат ДатаПредполагаемойСвертки;
		
	КонецЕсли;
	
КонецФункции

// Процедура заполняет структуру РегистрыНакопленияБезТаблицыИтогов при создании объекта этой обработки.
// В структуру добавляются оборотные регистры накопления,
// у которых ни у одного измерения не установлен флаг "Использование в итогах",
// т.е. у регистра накопления нет таблицы итогов.
// Для таких регистров не нужно вызывать метод УстановитьИспользованиеИтогов,
// т.к. это приводит к платформенной ошибке 10096604 в версиях платформы 8.2.14 и старше.
//
Процедура ЗаполнитьСтруктуруРегистровНакопленияБезИтогов()
	
	РегистрыНакопленияБезТаблицыИтогов = Новый Структура;
	
	Для Каждого МетаданныеРегистра Из Метаданные.РегистрыНакопления Цикл
		
		Если МетаданныеРегистра.ВидРегистра <> Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьИтоги = Ложь;
		
		Для Каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
			Если МетаданныеИзмерения.ИспользованиеВИтогах Тогда
				ЕстьИтоги = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьИтоги Тогда
			РегистрыНакопленияБезТаблицыИтогов.Вставить(МетаданныеРегистра.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДОКУМЕНТОВ ВВОДА ОСТАТКОВ

// Процедура формирует документы ввода остатков по переданному дереву
//
// Параметры
//  ДокументыВводаОстатков - дерево значений, по которому формируются документы ввода остатков  
// 
Процедура СформироватьДокументыВводаОстатков() Экспорт
	
	Если КоличествоСтрокВДокументеВводаОстатков > 0 Тогда
		мОграничиватьРазмерДокументовВводаОстатков = Истина;
		
	Иначе
		мОграничиватьРазмерДокументовВводаОстатков = Ложь;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ОбъектМД, СпособСвертки, ДатаНачала, ДатаОкончания");
	
	Для Каждого Строка Из СпособыСверткиОбъектовМетаданных Цикл
		
		Если Строка.СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		СообщениеСвертки("Начало формирования документов ввода остатков для " + ВРЕГ(Строка.ОбъектМД), Истина);
		
		Если ВРЕГ(Строка.ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);
			сбСформироватьДокументыВводаОстатковПоРегистрамНакопления(СтруктураПараметров, мСпособыСверткиОбъектов, мОграничиватьРазмерДокументовВводаОстатков, КоличествоСтрокВДокументеВводаОстатков, ДатаСверткиИБ);
			
		ИначеЕсли ВРЕГ(Строка.ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда	
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);
			сбСформироватьДокументыВводаОстатковПоРегистрамСведений(СтруктураПараметров, мСпособыСверткиОбъектов, мОграничиватьРазмерДокументовВводаОстатков, КоличествоСтрокВДокументеВводаОстатков, ДатаСверткиИБ);
			
		ИначеЕсли ВРЕГ(Строка.ТипОбъектаМД) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда		
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);
			Если ВРЕГ(Строка.ОбъектМД) = "ХОЗРАСЧЕТНЫЙ" Тогда		
				сбСформироватьДокументыВводаОстатковПоБУ(СтруктураПараметров, мСпособыСверткиОбъектов, ДатаСверткиИБ);
				
			ИначеЕсли ВРЕГ(Строка.ОбъектМД) = "НАЛОГОВЫЙ" Тогда
				сбСформироватьДокументыВводаОстатковПоНУ(СтруктураПараметров, мСпособыСверткиОбъектов, ДатаСверткиИБ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СообщениеСвертки("Окончание формирования документов ввода остатков для " + ВРЕГ(Строка.ОбъектМД), Истина);
		
	КонецЦикла;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ УДАЛЕНИЯ ОБЪЕКТОВ МЕТАДАННЫХ И ДВИЖЕНИЙ

// Процедура производит свертку по переданному списку объектов для свертки
//
// Параметры
//  СписокСпособовСвертки	- список сворачиваемых объектов,  
//  ТипОбъектаМД			- строка, содержащая названия типа сворачиваемых объектов
//
Процедура УдалитьДвиженияПоСписку(ТекСтрока, ТипОбъектаМД)
	
	Если НЕ ТекСтрока.СпособСвертки = мСпособыСверткиОбъектов.НеОбрабатывать Тогда 
		
		СообщениеСвертки("Начало очистки " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина);
		
		Если (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ") Тогда
			
			Если НЕ РегистрыНакопленияБезТаблицыИтогов.Свойство(ТекСтрока.ОбъектМД) Тогда
				РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
			КонецЕсли;
			
			Попытка
				сбУдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
				
			Исключение
				СообщениеСвертки(ОписаниеОшибки());
				Если НЕ РегистрыНакопленияБезТаблицыИтогов.Свойство(ТекСтрока.ОбъектМД) Тогда
					РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
				КонецЕсли;
				
				Возврат;
				
			КонецПопытки;	
			
			Если НЕ РегистрыНакопленияБезТаблицыИтогов.Свойство(ТекСтрока.ОбъектМД) Тогда
				РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли;
			
		ИначеЕсли (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРБУХГАЛТЕРИИ") Тогда	
			
			РегистрыБухгалтерии[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
			
			Попытка
				сбУдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
				
			Исключение
				СообщениеСвертки(ОписаниеОшибки());
				РегистрыБухгалтерии[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
				
				Возврат;
				
			КонецПопытки;	
			
			РегистрыБухгалтерии[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
			
		ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
			
			ТекРег = Метаданные.РегистрыСведений.Найти(ТекСтрока.ОбъектМД);
			
			Попытка
				Если (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
					сбУдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
					
				ИначеЕсли (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
				  И (НЕ ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
					сбУдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
					
				ИначеЕсли (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
				  И ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда	
					сбУдалитьДвиженияПоРегиструСведенийБезРегистратора(ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
					
				КонецЕсли;	
				
			Исключение
				
				СообщениеСвертки(ОписаниеОшибки());
				Возврат;
				
			КонецПопытки;	
			
		ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ДОКУМЕНТ" Тогда
			
			сбПометитьНаУдалениеДокументы(ТекСтрока.ОбъектМД, ТекСтрока.ДатаНачала, ПолучитьДатуСвертки(ТекСтрока.ДатаОкончания));
			
		ИначеЕсли ВРЕГ(ТипОбъектаМД) = "СПРАВОЧНИК" Тогда
			
			сбПометитьНаУдалениеСправочники(ТекСтрока.ОбъектМД);
			
		КонецЕсли;
		
		СообщениеСвертки("Окончание очистки " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры	

// Процедура производит свертку по переданному дереву
//
// Параметры
//  ДеревоСпособовСвертки	- дерево значений, содержащее объекты для свертки  
//
Процедура УдалитьДвиженияПоДереву() Экспорт
	Для Каждого ТекСтрока Из СпособыСверткиОбъектовМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "СПРАВОЧНИК") Тогда
			//Обработаем на 2ой итерации
			
		Иначе	
			УдалитьДвиженияПоСписку(ТекСтрока, ТекСтрока.ТипОбъектаМД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СпособыСверткиОбъектовМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "СПРАВОЧНИК") Тогда
			УдалитьДвиженияПоСписку(ТекСтрока, ТекСтрока.ТипОбъектаМД);
			
		Иначе	
			//Уже обработано на 1й итерации
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБМЕНА ЧЕРЕЗ XML

Процедура ВыгрузитьСписокСтрокВXML(ЗаписьXML)
	Для Каждого Строка Из СпособыСверткиОбъектовМетаданных Цикл
		Если Строка.Пометка Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(Строка.ОбъектМД);
			ЗаписьXML.ЗаписатьАтрибут("ТипОбъектаМД", Строка.ТипОбъектаМД);
			ЗаписьXML.ЗаписатьАтрибут("СпособСвертки", Строка.СпособСвертки);
			ЗаписьXML.ЗаписатьАтрибут("ДатаНачала", Строка(Строка.ДатаНачала));
			ЗаписьXML.ЗаписатьАтрибут("ДатаОкончания", Строка(Строка.ДатаОкончания));
			ЗаписьXML.ЗаписатьАтрибут("Статус", Строка.Статус);
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВыгрузитьВXML(ИмяФайла) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Конфигурация");
	ЗаписьXML.ЗаписатьАтрибут("ИмяКонфигурации", Метаданные.Имя);
	ЗаписьXML.ЗаписатьАтрибут("ВерсияКонфигурации", Метаданные.Версия);
	
	ВыгрузитьСписокСтрокВXML(ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ИзменитьПараметрыСпособыСверткиОбъектаМетаданных(ТекущаяСтрока,ИмяРеквизита,НовоеЗначениеРеквизита)
	
	Если ТекущаяСтрока.Статус = "Заблокирован" Тогда
		Возврат;
		
	КонецЕсли;	
	
	Если ТекущаяСтрока[ИмяРеквизита] = НовоеЗначениеРеквизита Тогда
		Сообщить("Обработан " + ТекущаяСтрока.ТипОбъектаМД + "." + ТекущаяСтрока.ОбъектМД + " реквизит " + ИмяРеквизита);
		Если (ТекущаяСтрока.Статус = "Загружен") И (ИмяРеквизита = "СпособСвертки") Тогда	
			ТекущаяСтрока.Статус = "Повторно загружен";//Правило для объекта заменило старое, но это не привело к изменению настройки
			
		ИначеЕсли ТекущаяСтрока.Статус = "" Тогда
			ТекущаяСтрока.Статус = "Загружен";//Правило для объекта загружено
			
		КонецЕсли;	
		
	Иначе
		Сообщить("Заменен " + ТекущаяСтрока.ТипОбъектаМД + "." + ТекущаяСтрока.ОбъектМД + " реквизит " + ИмяРеквизита + "
					|	Старое значение " + ТекущаяСтрока[ИмяРеквизита] + "
					|	Новое значение " + НовоеЗначениеРеквизита,СтатусСообщения.Внимание);
					
		ТекущаяСтрока.Статус = "Загружен с замещением";//Правило для объекта заменило старое, но это привело к изменению настройки			
		
	КонецЕсли;
	
	ТекущаяСтрока[ИмяРеквизита] = НовоеЗначениеРеквизита;
	
КонецПроцедуры	

Процедура ЗагрузитьСписокСтрокИзXML(ЧтениеXML)
	ИмяОбъекта = "";
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяОбъекта = ЧтениеXML.Имя;
			
		Иначе
			Продолжить;
			
		КонецЕсли;	
		
		ЧтениеXML.ПрочитатьАтрибут();
		ТипОбъектаМД = ЧтениеXML.Значение;
		
		ТаблицаСтрок = СпособыСверткиОбъектовМетаданных.НайтиСтроки(Новый Структура("ТипОбъектаМД,ОбъектМД",ТипОбъектаМД,ИмяОбъекта));
		Если ТаблицаСтрок.Количество() = 0 Тогда
			НовСтрока = СпособыСверткиОбъектовМетаданных.Добавить();
			НовСтрока.ОбъектМД = ИмяОбъекта;
			НовСтрока.ТипОбъектаМД = ТипОбъектаМД;
			
		Иначе
			НовСтрока = ТаблицаСтрок[0];
			
		КонецЕсли;	
		
		ПервоначальныйСтатус = НовСтрока.Статус;
		ЧтениеXML.ПрочитатьАтрибут();
		ИзменитьПараметрыСпособыСверткиОбъектаМетаданных(НовСтрока,"СпособСвертки",ЧтениеXML.Значение);
		ЧтениеXML.ПрочитатьАтрибут();
		ИзменитьПараметрыСпособыСверткиОбъектаМетаданных(НовСтрока,"ДатаНачала",Дата(ЧтениеXML.Значение));
		ЧтениеXML.ПрочитатьАтрибут();
		ИзменитьПараметрыСпособыСверткиОбъектаМетаданных(НовСтрока,"ДатаОкончания",Дата(ЧтениеXML.Значение));
		ЧтениеXML.ПрочитатьАтрибут();
		Если (ПервоначальныйСтатус = "") И (НЕ ЧтениеXML.Значение = "") Тогда
			//Загружаем статус
			НовСтрока.Статус = ЧтениеXML.Значение;
			Сообщить("Для правила объекта " + НовСтрока.ТипОбъектаМД + "." + НовСтрока.ОбъектМД + " обновлен статус на """ + НовСтрока.Статус + """",СтатусСообщения.Информация);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьИзXML(ИмяФайла) Экспорт
    ЧтениеXML = Новый ЧтениеXML();
	
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	ЧтениеXML.Прочитать();//Корневой элемент
	ЧтениеXML.ПрочитатьАтрибут();
	ИмяКонфигурации = ЧтениеXML.Значение;
	ЧтениеXML.ПрочитатьАтрибут();
	ВерсияКонфигурации = ЧтениеXML.Значение;
	
	Если (НЕ ИмяКонфигурации = Метаданные.Имя) ИЛИ (НЕ ВерсияКонфигурации = Метаданные.Версия) ТОгда
		Сообщить("Данная настройка правил предназначена для конфигурации " + ИмяКонфигурации + " версии " + ВерсияКонфигурации);
		ЧтениеXML.Закрыть();
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьСписокСтрокИзXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕНОСА НА СЕРВЕР

// Функция возвращает ту дату, на которую нужно сворачивать данные
//
// Параметры
//  ДатаПредполагаемойСвертки 	- дата окончания периода, указанная в правилах свертки,
//  ДатаСверткиИБ 				- дата свертки, указанная пользователем
//
// Возвращаемое значение:
//  Дата, на которую нужно сворачивать
Функция сбПолучитьДатуСвертки(ДатаПредполагаемойСвертки, ДатаСверткиИБ) Экспорт
	
	Если ДатаПредполагаемойСвертки = Дата('00010101') Тогда
		Возврат ДатаСверткиИБ;
		
	Иначе
		Возврат ДатаПредполагаемойСвертки;
		
	КонецЕсли;	
	
КонецФункции

// Процедура выводит сообщение о ходе процесса свертки
//
// Параметры
//  ТекстСообщения 	- строка, с текстом сообщения,
//  ВыводитьВремя 	- булево, признак необходимости выводить время
// 
Процедура сбСообщениеСвертки(ТекстСообщения, ВыводитьВремя = Ложь)
	
	Сообщить(ТекстСообщения + " [" + ?(ВыводитьВремя, ТекущаяДата(),"") + "]");
	
КонецПроцедуры


// Процедура переносит документы ввода остатков на день назад, и включает активность у движений
//
// Параметры
//  ДокументыВводаОстатков - список документов ввода остатков  
// 
Процедура сбАктивизироватьВводОстатков(ДокументыВводаОстатков) Экспорт
	
	Для Каждого ТекДок Из ДокументыВводаОстатков Цикл
		
		ДокОбъект = ТекДок.Документ.ПолучитьОбъект();
		
		СтараяДата = ДокОбъект.Дата;
		ДокОбъект.Дата = НачалоДня(ДокОбъект.Дата)-1;//Документы были следующим днем после даты свертки, передвинем назад
		ПроверитьНомерДокумента(ДокОбъект,СтараяДата);
		
		ДокОбъект.Записать();
		
		Для Каждого ТекРегистрДвижений Из ДокОбъект.Метаданные().Движения Цикл
			ДокОбъект.Движения[ТекРегистрДвижений.Имя].Прочитать();
			Если ДокОбъект.Движения[ТекРегистрДвижений.Имя].Количество() > 0 Тогда
				Для Каждого ТекДвижение Из ДокОбъект.Движения[ТекРегистрДвижений.Имя] Цикл
					ТекДвижение.Период = ДокОбъект.Дата;
					
				КонецЦикла;
				
				ДокОбъект.Движения[ТекРегистрДвижений.Имя].УстановитьАктивность(Истина);
				ДокОбъект.Движения[ТекРегистрДвижений.Имя].Записать(Истина);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		сбСообщениеСвертки("Обработан " + ДокОбъект.Ссылка + " " + ДокОбъект.Комментарий);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция сбСформироватьШапкуДокументаВводаОстатков(ТекРег, ДатаСвертки, ТипРегистра, НомерПервойЗаписи = "", НомерПоследнейЗаписи = "")
	
	ДокОст = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	
	ДокОст.Дата = НачалоДня(ДатаСвертки+60*60*24);//Запишем документ в следующий день, за днем свертки
	ДокОст.Комментарий = ТекРег.Имя + ":[Сформирован обработкой свертки базы][Ввод остатков по регистрам " + ТипРегистра + "][" + Формат(НомерПервойЗаписи, "ЧГ=0") + "-" + Формат(НомерПоследнейЗаписи, "ЧГ=0") + "]";
	ДокОст.Ответственный =  ПараметрыСеанса.ТекущийПользователь;
							
	Если ТипРегистра = "накопления" Тогда
		НовСтр = ДокОст.ТаблицаРегистровНакопления.Добавить();
		
	Иначе
		НовСтр = ДокОст.ТаблицаРегистровСведений.Добавить();
		
	КонецЕсли;	
	
	НовСтр.Имя = ТекРег.Имя;
	НовСтр.Представление = ТекРег.Синоним;
			
	ДокОст.Записать();
	
	Возврат ДокОст.Ссылка;
	
КонецФункции	

Процедура сбСформироватьДокументВводаОстатков(Запрос, ТекРег, ДатаСвертки, ОграничиватьРазмерДокументовВводаОстатков, ТипРегистра, КоличествоСтрокВДокументеВводаОстатков)
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() ТОгда
		Если ОграничиватьРазмерДокументовВводаОстатков Тогда
			ТабДвиж = Результат.Выбрать();			
			НомерПоследнейЗаписи = 0;
			Пока НомерПоследнейЗаписи < ТабДвиж.Количество() Цикл
				НомерПервойЗаписи = НомерПоследнейЗаписи + 1;
				НомерПоследнейЗаписи = НомерПервойЗаписи + КоличествоСтрокВДокументеВводаОстатков;
				НомерПоследнейЗаписи = Мин(НомерПоследнейЗаписи, ТабДвиж.Количество());
				
				ДокОст = сбСформироватьШапкуДокументаВводаОстатков(ТекРег, ДатаСвертки, ТипРегистра, НомерПервойЗаписи, НомерПоследнейЗаписи);
				
				Если ТипРегистра = "накопления" Тогда
					НаборЗаписей = РегистрыНакопления[ТекРег.Имя].СоздатьНаборЗаписей();
					
				Иначе
					НаборЗаписей = РегистрыСведений[ТекРег.Имя].СоздатьНаборЗаписей();
					
				КонецЕсли;
				
				НаборЗаписей.Отбор.Регистратор.Установить(ДокОст);
				
				Для ш = НомерПервойЗаписи По НомерПоследнейЗаписи Цикл
					ТабДвиж.Следующий();
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТабДвиж);
					НоваяЗапись.Регистратор = ДокОст.Ссылка;
					
				КонецЦикла;	
				
				НаборЗаписей.Записать();
				
			КонецЦикла;	
			
		Иначе
			ТабДвиж = Результат.Выгрузить();
			
			ДокОст = сбСформироватьШапкуДокументаВводаОстатков(ТекРег, ДатаСвертки, ТипРегистра);
			
			Если ТипРегистра = "накопления" Тогда
				НаборЗаписей = РегистрыНакопления[ТекРег.Имя].СоздатьНаборЗаписей();
				
			Иначе
				НаборЗаписей = РегистрыСведений[ТекРег.Имя].СоздатьНаборЗаписей();
				
			КонецЕсли;	
			
			НаборЗаписей.Отбор.Регистратор.Установить(ДокОст);
			НаборЗаписей.Загрузить(ТабДвиж);
			НаборЗаписей.Записать();
			
		КонецЕсли;	
		
		сбСообщениеСвертки("Сформирован документ ввода остатков " + ТекРег.Имя);
		
	КонецЕсли;	
	
КонецПроцедуры	

// Процедура формирует документы ввода остатков по переданному списку регистров накопления
//
// Параметры
//  СтрокаСписка 								- структура, содержащая параметры свертки,
//  СпособыСверткиОбъектов 						- структура, содержащая возможные способы свертки объектов,
//  ОграничиватьРазмерДокументовВводаОстатков	- булево, признак того, что требуется ограничивать количество строк в документах ввода остатков,
//  КоличествоСтрокВДокументеВводаОстатков 		- число, определяющее количество строк в документах ввода остатков,
//  ДатаСверткиИБ 								- дата, на которую производиться свертка базы
// 
Процедура сбСформироватьДокументыВводаОстатковПоРегистрамНакопления(СтрокаСписка, СпособыСверткиОбъектов, ОграничиватьРазмерДокументовВводаОстатков, КоличествоСтрокВДокументеВводаОстатков, ДатаСверткиИБ) Экспорт
	ДокОст = Неопределено;
	
	Если СтрокаСписка.СпособСвертки = СпособыСверткиОбъектов.НаДату Тогда
		ДатаСвертки = сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ);
		
	Иначе	
		Возврат;
		
	КонецЕсли;
		
	Если НЕ РегистрыНакопления[СтрокаСписка.ОбъектМД].ПолучитьИспользованиеИтогов() Тогда
		сбСообщениеСвертки("Для регистра " + СтрокаСписка.ОбъектМД + " отключено использованеи итогов, формирование документов ввода остатков невозможно!");
		Возврат;
		
	КонецЕсли;
		
	ТекРег = Метаданные.РегистрыНакопления.Найти(СтрокаСписка.ОбъектМД);
		
	Если ТекРег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		Возврат;
		
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
			|	ЛОЖЬ КАК Активность,
			|	&ПериодЗаписи КАК Период,";
	Для Каждого ТекИзмерение Из ТекРег.Измерения Цикл
		Запрос.Текст = Запрос.Текст + "
			|	ТабРег." + ТекИзмерение.Имя + ",";
			
	КонецЦикла;
	
	Для Каждого ТекРесурс Из ТекРег.Ресурсы Цикл
		Запрос.Текст = Запрос.Текст + "
			|	ТабРег." + ТекРесурс.Имя + "Остаток КАК " + ТекРесурс.Имя + ",";
			
	КонецЦикла;
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
	Запрос.Текст = Запрос.Текст + "
				   |ИЗ
				   |	РегистрНакопления." + ТекРег.Имя + ".Остатки(&ДатаОст, ) КАК ТабРег";
	Запрос.УстановитьПараметр("ДатаОст", Новый Граница(ДатаСвертки, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодЗаписи", НачалоДня(ДатаСвертки+60*60*24));
		
	сбСформироватьДокументВводаОстатков(Запрос, ТекРег, ДатаСвертки, ОграничиватьРазмерДокументовВводаОстатков, "накопления", КоличествоСтрокВДокументеВводаОстатков);
КонецПроцедуры	

// Процедура формирует документы ввода остатков по переданному списку регистров сведений
//
// Параметры
//  СтрокаСписка 								- структура, содержащая параметры свертки,
//  СпособыСверткиОбъектов 						- структура, содержащая возможные способы свертки объектов,
//  ОграничиватьРазмерДокументовВводаОстатков	- булево, признак того, что требуется ограничивать количество строк в документах ввода остатков,
//  КоличествоСтрокВДокументеВводаОстатков 		- число, определяющее количество строк в документах ввода остатков,
//  ДатаСверткиИБ 								- дата, на которую производиться свертка базы
// 
Процедура сбСформироватьДокументыВводаОстатковПоРегистрамСведений(СтрокаСписка, СпособыСверткиОбъектов, ОграничиватьРазмерДокументовВводаОстатков, КоличествоСтрокВДокументеВводаОстатков, ДатаСверткиИБ) Экспорт
	ДокОст = Неопределено;
	
	Если СтрокаСписка.СпособСвертки = СпособыСверткиОбъектов.НаДату Тогда
		ДатаСвертки = сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ);
		
	Иначе	
		Возврат;
		
	КонецЕсли;
		
	ТекРег = Метаданные.РегистрыСведений.Найти(СтрокаСписка.ОбъектМД);
		
	Если (НЕ ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
		Возврат;
		
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
			|	ЛОЖЬ КАК Активность,
			|	&ПериодЗаписи КАК Период,";
	Для Каждого ТекИзмерение Из ТекРег.Измерения Цикл
		Запрос.Текст = Запрос.Текст + "
			|	ТабРег." + ТекИзмерение.Имя + ",";
			
	КонецЦикла;
	
	Для Каждого ТекРесурс Из ТекРег.Ресурсы Цикл
		Запрос.Текст = Запрос.Текст + "
			|	ТабРег." + ТекРесурс.Имя + " КАК " + ТекРесурс.Имя + ",";
			
	КонецЦикла;
		
	Для Каждого ТекРеквизит Из ТекРег.Реквизиты Цикл
		Запрос.Текст = Запрос.Текст + "
			|	ТабРег." + ТекРеквизит.Имя + " КАК " + ТекРеквизит.Имя + ",";
			
	КонецЦикла;
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
	Запрос.Текст = Запрос.Текст + "
				   |ИЗ
				   |	РегистрСведений." + ТекРег.Имя + ".СрезПоследних(&ДатаОст, ) КАК ТабРег";
	Если (НЕ ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора) Тогда			   
		Запрос.Текст = Запрос.Текст + "				   
					   |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ТекРег.Имя + ".СрезПервых(&ДатаОст, Период = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОст, ДЕНЬ, 1), ДЕНЬ)) КАК ТабРегСрезПервых
					   |				ПО ИСТИНА";
		Для Каждого ТекИзмерение Из ТекРег.Измерения Цикл
			Запрос.Текст = Запрос.Текст + "
					   |				И ТабРег." + ТекИзмерение.Имя + " = ТабРегСрезПервых." + ТекИзмерение.Имя;
		КонецЦикла;
				
		Запрос.Текст = Запрос.Текст + "
					   |ГДЕ
					   |	ТабРегСрезПервых.Период ЕСТЬ NULL";
					
	КонецЕсли;				   
	
	Запрос.УстановитьПараметр("ДатаОст", ДатаСвертки);
	Запрос.УстановитьПараметр("ПериодЗаписи", НачалоДня(ДатаСвертки+60*60*24));
	
	сбСформироватьДокументВводаОстатков(Запрос, ТекРег, ДатаСвертки, ОграничиватьРазмерДокументовВводаОстатков, "сведений", КоличествоСтрокВДокументеВводаОстатков);
	
КонецПроцедуры	

// Процедура формирует документы ввода остатков по регистру бухгалтерии Хозрасчетный
//
// Параметры
//  СтрокаСписка 			- структура, содержащая параметры свертки,
//  СпособыСверткиОбъектов 	- структура, содержащая возможные способы свертки объектов,
//  ДатаСверткиИБ 			- дата, на которую производиться свертка базы
// 
Процедура сбСформироватьДокументыВводаОстатковПоБУ(СтрокаСписка, СпособыСверткиОбъектов, ДатаСверткиИБ) Экспорт
	
	Если НЕ СтрокаСписка.СпособСвертки = СпособыСверткиОбъектов.НаДату Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	Если НЕ РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов() Тогда
		
		сбСообщениеСвертки("Для регистра Хозрасчетный отключено использованеи итогов, формирование документов ввода остатков невозможно!");
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	ХозрасчетныйОстатки.Счет КАК Счет,
				   |	ХозрасчетныйОстатки.Субконто1,
				   |	ХозрасчетныйОстатки.Субконто2,
				   |	ХозрасчетныйОстатки.Субконто3,
				   |	ХозрасчетныйОстатки.Организация КАК Организация,
				   |	ХозрасчетныйОстатки.Валюта,
				   |	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
				   |	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
				   |	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
				   |	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
				   |	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
				   |	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток,
				   |	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
				   |	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт,
				   |	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокДт КАК ВалютнаяСуммаРазвернутыйОстатокДт,
				   |	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокКт КАК ВалютнаяСуммаРазвернутыйОстатокКт,
				   |	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
				   |	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт,
				   |	ХозрасчетныйОстатки.КоличествоОстатокКт КАК КоличествоОстатокКт,
				   |	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокДт КАК КоличествоРазвернутыйОстатокДт,
				   |	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокКт КАК КоличествоРазвернутыйОстатокКт
				   |ИЗ
				   |	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСвертки, , , ) КАК ХозрасчетныйОстатки
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			Хозрасчетный.Родитель КАК Родитель
				   |		ИЗ
				   |			ПланСчетов.Хозрасчетный КАК Хозрасчетный) КАК ПодчиненныеСчета
				   |		ПО ХозрасчетныйОстатки.Счет = ПодчиненныеСчета.Родитель
				   |ГДЕ
				   |	ПодчиненныеСчета.Родитель ЕСТЬ NULL 
				   |ИТОГИ
				   |	СУММА(СуммаОстаток),
				   |	СУММА(СуммаОстатокДт),
				   |	СУММА(СуммаОстатокКт),
				   |	СУММА(СуммаРазвернутыйОстатокДт),
				   |	СУММА(СуммаРазвернутыйОстатокКт),
				   |	СУММА(ВалютнаяСуммаОстаток),
				   |	СУММА(ВалютнаяСуммаОстатокДт),
				   |	СУММА(ВалютнаяСуммаОстатокКт),
				   |	СУММА(ВалютнаяСуммаРазвернутыйОстатокДт),
				   |	СУММА(ВалютнаяСуммаРазвернутыйОстатокКт),
				   |	СУММА(КоличествоОстаток),
				   |	СУММА(КоличествоОстатокДт),
				   |	СУММА(КоличествоОстатокКт),
				   |	СУММА(КоличествоРазвернутыйОстатокДт),
				   |	СУММА(КоличествоРазвернутыйОстатокКт)
				   |ПО
				   |	Организация,
				   |	Счет";
				   
	Запрос.УстановитьПараметр("ДатаСвертки",Новый Граница(сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоСчетам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСчетам.Следующий() Цикл
			
			Если (НЕ ВыборкаПоСчетам.СуммаОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоОстаток = 0) Тогда
				ДокОбъект = Документы.ОперацияБух.СоздатьДокумент();
				ДокОбъект.Дата = НачалоДня(сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ)+60*60*24);
				ДокОбъект.Организация = ВыборкаПоОрганизации.Организация;
				ДокОбъект.Комментарий = "Хозрасчетный:[Сформирован обработкой свертки базы][Ввод остатков по регистрам бухгалтерии][" + ВыборкаПоСчетам.Счет.Код +"]";
				ДокОбъект.Содержание = "Хозрасчетный:[Сформирован обработкой свертки базы][Ввод остатков по регистрам бухгалтерии][" + ВыборкаПоСчетам.Счет.Код +"]";
				ДокОбъект.Ответственный =  ПараметрыСеанса.ТекущийПользователь;
				ДокОбъект.Записать();
				
				ДвиженияДокумента = ДокОбъект.Движения;
				НаборЗаписей = ДвиженияДокумента.Хозрасчетный;
				
				ВыборкаДетали = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Активный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
					  И ((НЕ ВыборкаДетали.СуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.ВалютнаяСуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокДт = 0)) Тогда
						//Нужно вводить остаток по ДТ  
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
						НоваяЗапись.Активность = Ложь;
						НоваяЗапись.Период = ДокОбъект.Дата;
						НоваяЗапись.СчетДт = ВыборкаПоСчетам.Счет;
						
						Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
							
							НоваяЗапись.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
							
						КонецЕсли;
						
						НомерСубконто = 0;
						
						Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
							
							НомерСубконто = НомерСубконто + 1;
							
							Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
								НоваяЗапись.СубконтоДт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
								
							КонецЕсли;	
							
						КонецЦикла;
						
						НоваяЗапись.ВалютаДт = ВыборкаДетали.Валюта;
						НоваяЗапись.ВалютнаяСуммаДт = ВыборкаДетали.ВалютнаяСуммаОстатокДт;
						НоваяЗапись.КоличествоДт = ВыборкаДетали.КоличествоОстатокДт;
						НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокДт;
						
					КонецЕсли;
					
					Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Пассивный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
					  И ((НЕ ВыборкаДетали.СуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.ВалютнаяСуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокКт = 0)) Тогда
						//Нужно вводить остаток по ДТ  
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
						НоваяЗапись.Активность = Ложь;
						НоваяЗапись.Период = ДокОбъект.Дата;
						НоваяЗапись.СчетКт = ВыборкаПоСчетам.Счет;
						
						Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
							НоваяЗапись.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
							
						КонецЕсли;
						
						НомерСубконто = 0;
						
						Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
							
							НомерСубконто = НомерСубконто + 1;
							
							Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
								НоваяЗапись.СубконтоКт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
								
							КонецЕсли;	
							
						КонецЦикла;
						
						НоваяЗапись.ВалютаКт = ВыборкаДетали.Валюта;
						НоваяЗапись.ВалютнаяСуммаКт = ВыборкаДетали.ВалютнаяСуммаОстатокКт;
						НоваяЗапись.КоличествоКт = ВыборкаДетали.КоличествоОстатокКт;
						НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокКт;
					КонецЕсли;					
					
				КонецЦикла;	
				
				НаборЗаписей.Записать();
				сбСообщениеСвертки("Сформирован документ ввода остатков " + ДокОбъект.Ссылка + " по плану счетов Хозрасчетный, по счету " + ВыборкаПоСчетам.Счет.Код);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Процедура формирует документы ввода остатков по регистру бухгалтерии Налоговый
//
// Параметры
//  СтрокаСписка 			- структура, содержащая параметры свертки,
//  СпособыСверткиОбъектов 	- структура, содержащая возможные способы свертки объектов,
//  ДатаСверткиИБ 			- дата, на которую производиться свертка базы
// 
Процедура сбСформироватьДокументыВводаОстатковПоНУ(СтрокаСписка, СпособыСверткиОбъектов, ДатаСверткиИБ) Экспорт
	
	Если НЕ СтрокаСписка.СпособСвертки = СпособыСверткиОбъектов.НаДату Тогда
		Возврат;
		
	КонецЕсли;	
	
	Если НЕ РегистрыБухгалтерии.Налоговый.ПолучитьИспользованиеИтогов() Тогда
		сбСообщениеСвертки("Для регистра Налоговый отключено использованеи итогов, формирование документов ввода остатков невозможно!");
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
				   |	НалоговыйОстатки.Счет КАК Счет,
				   |	НалоговыйОстатки.Субконто1,
				   |	НалоговыйОстатки.Субконто2,
				   |	НалоговыйОстатки.Субконто3,
				   |	НалоговыйОстатки.Организация КАК Организация,
				   |	НалоговыйОстатки.ВидУчета КАК ВидУчета,
				   |	НалоговыйОстатки.СуммаОстаток КАК СуммаОстаток,
				   |	НалоговыйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
				   |	НалоговыйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
				   |	НалоговыйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
				   |	НалоговыйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
				   |	НалоговыйОстатки.КоличествоОстаток КАК КоличествоОстаток,
				   |	НалоговыйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт,
				   |	НалоговыйОстатки.КоличествоОстатокКт КАК КоличествоОстатокКт,
				   |	НалоговыйОстатки.КоличествоРазвернутыйОстатокДт КАК КоличествоРазвернутыйОстатокДт,
				   |	НалоговыйОстатки.КоличествоРазвернутыйОстатокКт КАК КоличествоРазвернутыйОстатокКт
				   |ИЗ
				   |	РегистрБухгалтерии.Налоговый.Остатки(&ДатаСвертки, , , ) КАК НалоговыйОстатки
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			Налоговый.Родитель КАК Родитель
				   |		ИЗ
				   |			ПланСчетов.Налоговый КАК Налоговый) КАК ПодчиненныеСчета
				   |		ПО НалоговыйОстатки.Счет = ПодчиненныеСчета.Родитель
				   |ГДЕ
				   |	ПодчиненныеСчета.Родитель ЕСТЬ NULL 
				   |ИТОГИ
				   |	СУММА(СуммаОстаток),
				   |	СУММА(СуммаОстатокДт),
				   |	СУММА(СуммаОстатокКт),
				   |	СУММА(СуммаРазвернутыйОстатокДт),
				   |	СУММА(СуммаРазвернутыйОстатокКт),
				   |	СУММА(КоличествоОстаток),
				   |	СУММА(КоличествоОстатокДт),
				   |	СУММА(КоличествоОстатокКт),
				   |	СУММА(КоличествоРазвернутыйОстатокДт),
				   |	СУММА(КоличествоРазвернутыйОстатокКт)
				   |ПО
				   |	Организация,
				   |	Счет,
				   |	ВидУчета";
				   
	Запрос.УстановитьПараметр("ДатаСвертки",Новый Граница(сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ), ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоСчетам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСчетам.Следующий() Цикл
			
			ВыборкаПоВидамУчета = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВидамУчета.Следующий() Цикл
				Если (НЕ ВыборкаПоВидамУчета.СуммаОстаток = 0) ИЛИ (НЕ ВыборкаПоВидамУчета.КоличествоОстаток = 0) Тогда
					ДокОбъект = Документы.ОперацияБух.СоздатьДокумент();
					ДокОбъект.Дата = НачалоДня(сбПолучитьДатуСвертки(СтрокаСписка.ДатаОкончания, ДатаСверткиИБ)+60*60*24);
					ДокОбъект.Организация = ВыборкаПоОрганизации.Организация;
					ДокОбъект.Комментарий = "Налоговый:[Сформирован обработкой свертки базы][Ввод остатков по регистрам бухгалтерии][" + ВыборкаПоСчетам.Счет.Код +"]";
					ДокОбъект.Содержание = "Налоговый:[Сформирован обработкой свертки базы][Ввод остатков по регистрам бухгалтерии][" + ВыборкаПоСчетам.Счет.Код +"]";
					ДокОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					ДокОбъект.Записать();
					
					ДвиженияДокумента = ДокОбъект.Движения;
					НаборЗаписей = ДвиженияДокумента.Налоговый;
					
					ВыборкаДетали = ВыборкаПоВидамУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаДетали.Следующий() Цикл
						Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Активный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
							И ((НЕ ВыборкаДетали.СуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокДт = 0)) Тогда
							//Нужно вводить остаток по ДТ  
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
							НоваяЗапись.ВидУчетаДт = ВыборкаПоВидамУчета.ВидУчета;
							НоваяЗапись.Активность = Ложь;
							НоваяЗапись.Период = ДокОбъект.Дата;
							НоваяЗапись.СчетДт = ВыборкаПоСчетам.Счет;
							
							НомерСубконто = 0;
							Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
								НомерСубконто = НомерСубконто + 1;
								Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
									НоваяЗапись.СубконтоДт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
								КонецЕсли;	
							КонецЦикла;
							НоваяЗапись.КоличествоДт = ВыборкаДетали.КоличествоОстатокДт;
							НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокДт;
						КонецЕсли;
						Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Пассивный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
							И ((НЕ ВыборкаДетали.СуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокКт = 0)) Тогда
							//Нужно вводить остаток по КТ  
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
							НоваяЗапись.ВидУчетаКт = ВыборкаПоВидамУчета.ВидУчета;
							НоваяЗапись.Активность = Ложь;
							НоваяЗапись.Период = ДокОбъект.Дата;
							НоваяЗапись.СчетКт = ВыборкаПоСчетам.Счет;
							
							НомерСубконто = 0;
							Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
								НомерСубконто = НомерСубконто + 1;
								Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
									НоваяЗапись.СубконтоКт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
								КонецЕсли;	
							КонецЦикла;
							НоваяЗапись.КоличествоКт = ВыборкаДетали.КоличествоОстатокКт;
							НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокКт;
						КонецЕсли;					
					КонецЦикла;	
					
					НаборЗаписей.Записать();
					сбСообщениеСвертки("Сформирован документ ввода остатков " + ДокОбъект.Ссылка + " по плану счетов Налоговый, по счету " + ВыборкаПоСчетам.Счет.Код + ", по виду учета " + ВыборкаПоВидамУчета.ВидУчета);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	


// Процедура помечает на удаление документы
//
// Параметры
//  ИмяДокумента 	- строка, содержащая имя документа как оно задано в конфигураторе,  
//  ДатаНачала 		- дата начиная с которой удаляются документы,
//  ДатаОкончания	- дата по которую удаляются документы
//
Процедура сбПометитьНаУдалениеДокументы(ИмяДокумента, ДатаНачала, ДатаОкончания) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекДокумент.Ссылка КАК Документ
	|ИЗ
	|	Документ.#ЭтоЗаменяется# КАК ТекДокумент
	|ГДЕ
	|	(НЕ ТекДокумент.ПометкаУдаления)
	|	И ТекДокумент.Дата <= &ДатаОкончания
	|	И ТекДокумент.Дата >= &ДатаНачала";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяДокумента);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
	
	ДокВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ДокВыборка.Следующий() Цикл
		ФлагНаличияДвижений = Ложь;
		ТекДокумент = ДокВыборка.Документ;
		ДокОбъект = ТекДокумент.ПолучитьОбъект();
		Для Каждого ТекДвижение Из ДокОбъект.Движения Цикл
			ТекДвижение.Прочитать();
			Если ТекДвижение.Количество() > 0 Тогда
				//По документу есть движения
				ФлагНаличияДвижений = Истина;
				сбСообщениеСвертки("По документу " + ДокОбъект.Ссылка + " есть движения по регистрам, удаление отменено");
				Прервать;
				
			КонецЕсли;	
		КонецЦикла;
		
		Если НЕ ФлагНаличияДвижений Тогда
			
			Попытка
				ДокОбъект.УстановитьПометкуУдаления(Истина);
				
			Исключение
				ИнфоОшибки = ИнформацияОбОшибке();
				Если ИнфоОшибки.Причина <> Неопределено Тогда
					ИнфоОшибки = ИнфоОшибки.Причина;
				КонецЕсли;
				
				сбСообщениеСвертки("Не удалось пометить на удаление документ " + ДокОбъект.Ссылка + ": " + ИнфоОшибки.Описание);
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура помечает на удаления элементы справочников
//
// Параметры
//  ИмяДокумента 	- строка, содержащая имя справочника как оно задано в конфигураторе,  
//
Процедура сбПометитьНаУдалениеСправочники(ИмяСправочника) Экспорт
	СпрВыборка = Справочники[ИмяСправочника].Выбрать();
		
	Пока СпрВыборка.Следующий() Цикл
		СпрОбъект = СпрВыборка.ПолучитьОбъект();
		СпрОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦИкла;
КонецПроцедуры

// Процедура очищает регистры накопления и регистры сведений, подчиненные регистратору
//
// Параметры
//  ТипОбъектаМД - строка, содержащая тип объекта метаданных,  
//  ИмяРегистра  - строка, содержащая имя регистра,
//  ДатаНачала 	 - дата, начиная с которой происходит чистка регистра,
//  ДатаОкончания- дата, по которую очищается регистр
//
Процедура сбУдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ИмяРегистра, ДатаНачала, ДатаОкончания) Экспорт
	ДокументСсылка = Неопределено;
	СсылкаНач = Неопределено;
			
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
				   |	ДокументРег.Регистратор КАК Регистратор
				   |ИЗ
				   |	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК ДокументРег
				   |ГДЕ
				   |	ДокументРег.Период >= &ДатаНач
				   |	И ДокументРег.Период <= &ДатаКон";
			
	Пока Истина Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
				
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаКон", ДатаОкончания);
				
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;	
		
		Строка = Результат.Выбрать();
		Пока Строка.Следующий() Цикл
			СсылкаНач = Строка.Регистратор;
			
			Если ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
				НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			Иначе
				сбСообщениеСвертки("Не известный тип объекта метаданных " + ТипОбъектаМД);
				Возврат;
			КонецЕсли;	
				
			НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

// Процедура очищает не периодические регистры сведений не подчиненные регистратору
//
// Параметры
//  ИмяРегистра  	- строка, содержащая имя регистра,
//  ДатаНачала 	 	- дата, начиная с которой происходит чистка регистра,
//  ДатаОкончания	- дата, по которую очищается регистр
//
Процедура сбУдалитьДвиженияПоРегиструСведенийБезРегистратора(ИмяРегистра, ДатаНачала, ДатаОкончания) Экспорт
	
	МДРегистратора = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НомерТекущейЗаписи = 0;
	
	Пока НомерТекущейЗаписи < НаборЗаписей.Количество() Цикл
		Если (МДРегистратора.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)
		  ИЛИ ((НаборЗаписей[НомерТекущейЗаписи].Период <= ДатаОкончания) И (НаборЗаписей[НомерТекущейЗаписи].Период >= ДатаНачала))	Тогда
			  НаборЗаписей.Удалить(НомерТекущейЗаписи);
			  
		Иначе
			  НомерТекущейЗаписи = НомерТекущейЗаписи + 1;
			  
		КонецЕсли;
		  
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура очищает периодические регистры сведений не подчиненные регистратору
//
// Параметры
//  ИмяРегистра  	- строка, содержащая имя регистра,
//  ДатаНачала 	 	- дата, начиная с которой происходит чистка регистра,
//  ДатаОкончания	- дата, по которую очищается регистр
//
Процедура сбУдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(ИмяРегистра, ДатаНачала, ДатаОкончания) Экспорт
	
	МДРегистратора = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год Тогда
		ПериодЗаписи = НачалоГода(ДатаОкончания);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
		ПериодЗаписи = НачалоКвартала(ДатаОкончания);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
		ПериодЗаписи = НачалоМесяца(ДатаОкончания);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
		ПериодЗаписи = НачалоДня(ДатаОкончания);
		
	Иначе
		ПериодЗаписи = ДатаОкончания;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
				   |	*,
				   |	ИСТИНА КАК Активность,
				   |	&ПериодЗаписи КАК Период
				   |ИЗ
				   |	РегистрСведений." + ИмяРегистра + ".СрезПоследних(&ТекДата, ) КАК РегСведений");
	Запрос.УстановитьПараметр("ТекДата",Новый Граница(КонецДня(ДатаОкончания),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	
	ТабДвиж = Запрос.Выполнить().Выгрузить();
	
	сбУдалитьДвиженияПоРегиструСведенийБезРегистратора(ИмяРегистра, ДатаНачала, ДатаОкончания);
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
	НаборЗаписей.Загрузить(ТабДвиж);
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - ДокументОбъект.Дата;

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()


////////////////////////////////////////////////////////////////////////////////
// КОД МОДУЛЯ

мСпособыСверткиОбъектов = Новый Структура(
	"НеОбрабатывать, ЗаПериод, НаДату, Очистить",
	"Не обрабатывать", "За период", "На дату", "Очистить");

ЗаполнитьСтруктуруРегистровНакопленияБезИтогов();
