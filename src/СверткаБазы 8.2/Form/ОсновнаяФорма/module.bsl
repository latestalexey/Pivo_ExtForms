////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьДеревоПоМетаданным()
	
	СпособыСверткиОбъектовМетаданных.Очистить();
	
	МассивТиповОбъектовМД = ПолучитьСтруктуруТиповОбъектовМД();
	Для Каждого ТипОбъектаМД Из МассивТиповОбъектовМД Цикл
		Для Каждого ОбъектМД из ТипОбъектаМД.Значение Цикл
			НоваяСтрокаОбъектМД = СпособыСверткиОбъектовМетаданных.Добавить();
			НоваяСтрокаОбъектМД.ТипОбъектаМД = ТипОбъектаМД.Ключ;
			НоваяСтрокаОбъектМД.ОбъектМД = ОбъектМД.Имя;
			НоваяСтрокаОбъектМД.СпособСвертки = ПолучитьСпособСверткиПоУмолчанию(ТипОбъектаМД, ОбъектМД);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодчиненныеУзлы(Узел, СпособСвертки, ИмяКолонки="СпособСвертки")
	
	Для Каждого Строка Из Узел.Строки Цикл
		Строка[ИмяКолонки] = СпособСвертки;
		ЗаполнитьПодчиненныеУзлы(Строка, СпособСвертки, ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДокументовВводаОстатков(ДатаЗаполнения=Неопределено) Экспорт
	
	ДокументыВводаОстатков.Очистить();
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(РабочаяДата, КонецДня(РабочаяДата));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	//Если в процедуру передан с явным указанием даты, то сформируем список документов только за этот день	
	Если НЕ ДатаЗаполнения = Неопределено Тогда
		НачПериода = НачалоДня(ДатаЗаполнения);
		КонПериода = КонецДня(ДатаЗаполнения);
	ИначеЕсли НастройкаПериода.Редактировать() Тогда//Иначе, спросим пользователя
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	Иначе
		Возврат;
	КонецЕсли;	
	
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	ВложенныйЗапрос.ПолеСортировки КАК ВидДокумента,
	                      |	КорректировкаЗаписейРегистров.Ссылка КАК Ссылка,
	                      |	ВложенныйЗапрос.Имя КАК Имя
	                      |ИЗ
	                      |	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			КорректировкаЗаписейРегистровТаблицаРегистровНакопления.Имя КАК Имя,
	                      |			0 КАК ПолеСортировки,
	                      |			КорректировкаЗаписейРегистровТаблицаРегистровНакопления.Ссылка КАК Ссылка
	                      |		ИЗ
	                      |			Документ.КорректировкаЗаписейРегистров.ТаблицаРегистровНакопления КАК КорректировкаЗаписейРегистровТаблицаРегистровНакопления
	                      |		
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |		
	                      |		ВЫБРАТЬ
	                      |			КорректировкаЗаписейРегистровТаблицаРегистровСведений.Имя,
	                      |			1,
	                      |			КорректировкаЗаписейРегистровТаблицаРегистровСведений.Ссылка
	                      |		ИЗ
	                      |			Документ.КорректировкаЗаписейРегистров.ТаблицаРегистровСведений КАК КорректировкаЗаписейРегистровТаблицаРегистровСведений) КАК ВложенныйЗапрос
	                      |		ПО КорректировкаЗаписейРегистров.Ссылка = ВложенныйЗапрос.Ссылка
	                      |ГДЕ
	                      |	КорректировкаЗаписейРегистров.Дата >= &НачДата
	                      |	И КорректировкаЗаписейРегистров.Дата <= &КонДата
	                      |	И (НЕ КорректировкаЗаписейРегистров.ПометкаУдаления)
	                      |	И КорректировкаЗаписейРегистров.Комментарий ПОДОБНО ""%[Сформирован обработкой свертки базы]%""
	                      |";
	Если мЕстьРегистрыБухгалтерии Тогда
		ТекстЗапроса = ТекстЗапроса +
	                      "ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	2,
	                      |	ОперацияБух.Ссылка,
	                      |	ВложенныйЗапрос.Комментарий
	                      |ИЗ
	                      |	Документ.ОперацияБух КАК ОперацияБух
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			Хозрасчетный.Регистратор КАК Регистратор,
	                      |			ВЫБОР
	                      |				КОГДА Хозрасчетный.СчетДт.Код ЕСТЬ NULL 
	                      |						ИЛИ Хозрасчетный.СчетДт = &СлужебныйСчет
	                      |					ТОГДА Хозрасчетный.СчетКт.Код
	                      |				ИНАЧЕ Хозрасчетный.СчетДт.Код
	                      |			КОНЕЦ КАК Комментарий
	                      |		ИЗ
	                      |			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			Хозрасчетный.Регистратор,
	                      |			ВЫБОР
	                      |				КОГДА Хозрасчетный.СчетДт.Код ЕСТЬ NULL 
	                      |						ИЛИ Хозрасчетный.СчетДт = &СлужебныйСчет
	                      |					ТОГДА Хозрасчетный.СчетКт.Код
	                      |				ИНАЧЕ Хозрасчетный.СчетДт.Код
	                      |			КОНЕЦ
	                      |		
	                      |		ОБЪЕДИНИТЬ ВСЕ
	                      |		
	                      |		ВЫБРАТЬ
	                      |			Налоговый.Регистратор,
	                      |			ВЫБОР
	                      |				КОГДА Налоговый.СчетДт.Код ЕСТЬ NULL 
	                      |					ТОГДА Налоговый.СчетКт.Код
	                      |				ИНАЧЕ Налоговый.СчетДт.Код
	                      |			КОНЕЦ
	                      |		ИЗ
	                      |			РегистрБухгалтерии.Налоговый КАК Налоговый
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			Налоговый.Регистратор,
	                      |			ВЫБОР
	                      |				КОГДА Налоговый.СчетДт.Код ЕСТЬ NULL 
	                      |					ТОГДА Налоговый.СчетКт.Код
	                      |				ИНАЧЕ Налоговый.СчетДт.Код
	                      |			КОНЕЦ) КАК ВложенныйЗапрос
	                      |		ПО ОперацияБух.Ссылка = ВложенныйЗапрос.Регистратор
	                      |ГДЕ
	                      |	ОперацияБух.Дата >= &НачДата
	                      |	И ОперацияБух.Дата <= &КонДата
	                      |	И (НЕ ОперацияБух.ПометкаУдаления)
	                      |	И ОперацияБух.Комментарий ПОДОБНО ""%[Сформирован обработкой свертки базы]%""
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВидДокумента
	                      |ИТОГИ ПО
	                      |	Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", НачПериода);
	Запрос.УстановитьПараметр("КонДата", КонПериода);
	Если мЕстьРегистрыБухгалтерии Тогда
		Запрос.УстановитьПараметр("СлужебныйСчет", ПланыСчетов.Хозрасчетный.Вспомогательный);
	КонецЕсли;
		
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			НоваяСрока = ДокументыВводаОстатков.Добавить();
			НоваяСрока.Документ = ВыборкаПоДокументам.Ссылка;
			НоваяСрока.Регистры = "";
			
			ВыборкаДетальная = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетальная.Следующий() Цикл
				НоваяСрока.Регистры = НоваяСрока.Регистры + ВыборкаДетальная.Имя + ", ";
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокРегистровБезИтогов()
	
	СписокРегистровСОтключеннымиИтогами.Очистить();
	Для Каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Если НЕ РегистрыНакопления[ТекРегистр.Имя].ПолучитьИспользованиеИтогов() Тогда
			НоваяСтрока = СписокРегистровСОтключеннымиИтогами.Добавить();
			НоваяСтрока.Пометка = Истина;
			НоваяСтрока.ТипРегистра = "Накопления";
			НоваяСтрока.Регистр = ТекРегистр.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекРегистр Из Метаданные.РегистрыБухгалтерии Цикл
		Если НЕ РегистрыБухгалтерии[ТекРегистр.Имя].ПолучитьИспользованиеИтогов() Тогда
			НоваяСтрока = СписокРегистровСОтключеннымиИтогами.Добавить();
			НоваяСтрока.Пометка = Истина;
			НоваяСтрока.ТипРегистра = "Бухгалтерии";
			НоваяСтрока.Регистр = ТекРегистр.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.СписокРегистровСОтключеннымиИтогами.ОбновитьСтроки();
	
КонецПроцедуры

Функция ПроверитьЗаполненностьРеквизитовПередСверткой()
	
	Если НЕ ЗначениеЗаполнено(ДатаСверткиИБ) ТОгда
		Предупреждение("Не заполнена дата свертки");
		Возврат Ложь;
	ИначеЕсли ОграничиватьКоличествоСтрокВДокументахВводаОстатков И (КоличествоСтрокВДокументеВводаОстатков = 0) Тогда
		Предупреждение("Количество строк в документах ввода остатков не может быть 0");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КоманднаяПанельДереваМетаданныхНастройкиПоУмолчанию(Кнопка)
	
	Если Вопрос("При выполнении данной операции текущая настройка способов свертки будет заменена настройками по умолчанию (подробнее см. в справке), продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
		ОбновитьДеревоПоМетаданным();
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Вопрос("Процесс свертки может занять продолжительное время и является не обратимым, начать свертку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьДвиженияПоДереву();
	ОбновитьСписокРегистровБезИтогов();
	
КонецПроцедуры

Процедура КоманднаяПанельДереваМетаданныхВыгрузитьВXML(Кнопка)
	
	Форма = ПолучитьФорму("ФормаВыбораОбъектов");
	РезультатВыбора = Форма.ОткрытьМодально();
	Если РезультатВыбора = "Выполнить" Тогда
		ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогФайла.Фильтр = "Файл XML (*.xml)|*.xml";
		Если ДиалогФайла.Выбрать() Тогда
			ВыгрузитьВXML(ДиалогФайла.ПолноеИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДереваМетаданныхЗагрузитьИзXML(Кнопка)
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФайла.Фильтр = "Файл XML (*.xml)|*.xml";
	Если ДиалогФайла.Выбрать() Тогда
		ЗагрузитьИзXML(ДиалогФайла.ПолноеИмяФайла);
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ОбновитьСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовОстатковСформироватьДокументыВводаОстатков(Кнопка)
	
	СообщениеСвертки("Начало создания документов ", Истина);
	Если НЕ ПроверитьЗаполненностьРеквизитовПередСверткой() Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВводаОстатков();
	СообщениеСвертки("Окончание создания документов ", Истина);
	ЗаполнитьТаблицуДокументовВводаОстатков(ДатаСверткиИБ + 60*60*24);
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовОстатковЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуДокументовВводаОстатков();
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовОстатковАктивизировать(Кнопка)
	
	сбАктивизироватьВводОстатков(ДокументыВводаОстатков);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ДатаСверткиИБ = КонецДня(РабочаяДата);
	ОбновитьДеревоПоМетаданным();
	ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ОтборСтрок.ТипОбъектаМД.Установить(ЭлементыФормы.ПанельНастройкиСпособовСвертки.ТекущаяСтраница.Имя);
	ЭлементыФормы.СпособыСверткиОбъектовМетаданных.НастройкаОтбораСтрок.ТипОбъектаМД.Доступность = Ложь;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнитьВсе(Кнопка)
	
	Если СпособыСверткиОбъектовМетаданных.Количество() = 0 ТОгда
		Предупреждение("Не заполнено дерево настройки способов свертки! Свертка невозможна!");
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Процесс свертки может занять продолжительное время и является не обратимым, начать свертку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	СообщениеСвертки("Начало создания документов ", Истина);
	Если НЕ ПроверитьЗаполненностьРеквизитовПередСверткой() Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДокументыВводаОстатков();
	СообщениеСвертки("Окончание создания документов ", Истина);
	ЗаполнитьТаблицуДокументовВводаОстатков(ДатаСверткиИБ + 60*60*24);
	УдалитьДвиженияПоДереву();
	сбАктивизироватьВводОстатков(ДокументыВводаОстатков);
	ОбновитьСписокРегистровБезИтогов();
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовОстатковУдалить(Кнопка)
	
	УдалитьДокументыВводаОстатков(ДокументыВводаОстатков);
	
КонецПроцедуры

Процедура КоманднаяПанельРегистрыБезИтоговОбновитьИнформациюОбИтогах(Кнопка)
	
	ОбновитьСписокРегистровБезИтогов();
	
КонецПроцедуры

Процедура КоманднаяПанельРегистрыБезИтоговВключитьИтоги(Кнопка)
	
	ВключитьИтогиПоСпискуРегистров(СписокРегистровСОтключеннымиИтогами);	
	ОбновитьСписокРегистровБезИтогов();
	
КонецПроцедуры

Процедура КоманднаяПанельДереваМетаданныхИзменить(Кнопка)
	
	ФормаВыбора = ПолучитьФорму("ФормаИзмененияЗначений");
	РезультатВыбора = ФормаВыбора.ОткрытьМодально();
	Если НЕ РезультатВыбора = Неопределено Тогда
		Для Каждого Строка Из ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ВыделенныеСтроки Цикл
			Если (Строка.ТипОбъектаМД = "Документ") ИЛИ (НЕ РезультатВыбора.СпособСвертки = мСпособыСверткиОбъектов.ЗаПериод) Тогда
				Если РезультатВыбора.Свойство("СпособСвертки") Тогда
					Строка.СпособСвертки = РезультатВыбора.СпособСвертки;
				КонецЕсли;
				Если РезультатВыбора.Свойство("ДатаОкончания") Тогда
					Строка.ДатаОкончания = РезультатВыбора.ДатаОкончания;
				КонецЕсли;					
			КонецЕсли;
			Если (Строка.ТипОбъектаМД = "Документ") И (РезультатВыбора.Свойство("СпособСвертки")) И (РезультатВыбора.СпособСвертки = мСпособыСверткиОбъектов.ЗаПериод) Тогда
				Если РезультатВыбора.Свойство("ДатаНачала") Тогда
					Строка.ДатаНачала = РезультатВыбора.ДатаНачала;
				КонецЕсли;
			КонецЕсли;
			Если РезультатВыбора.Свойство("Статус") Тогда
				Строка.Статус = РезультатВыбора.Статус;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничиватьКоличествоСтрокВДокументахВводаОстатковПриИзменении(Элемент)
	
	Если ОграничиватьКоличествоСтрокВДокументахВводаОстатков Тогда
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.Видимость = Истина;
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.ОтметкаНезаполненного = Истина;
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.Видимость = Ложь;
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.ОтметкаНезаполненного = Ложь;
		ЭлементыФормы.КоличествоСтрокВДокументеВводаОстатков.АвтоОтметкаНезаполненного = Ложь;
		КоличествоСтрокВДокументеВводаОстатков = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаСверткиПриИзменении(Элемент)
	
	ДатаСверткиИБ = КонецДня(ДатаСверткиИБ);
	
КонецПроцедуры

Процедура СпособыСверткиРегистрыСведенийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если НЕ ОформлениеСтроки.ДанныеСтроки = Неопределено Тогда
			Если ОформлениеСтроки.ДанныеСтроки.СпособСвертки = мСпособыСверткиОбъектов.ЗаПериод Тогда
				ОформлениеСтроки.Ячейки.ДатаНачала.ТолькоПросмотр = Ложь;
				ОформлениеСтроки.Ячейки.ДатаОкончания.ТолькоПросмотр = Ложь;
			ИначеЕсли (ОформлениеСтроки.ДанныеСтроки.СпособСвертки = мСпособыСверткиОбъектов.НаДату) ИЛИ (ОформлениеСтроки.ДанныеСтроки.СпособСвертки = мСпособыСверткиОбъектов.Очистить) Тогда
				ОформлениеСтроки.Ячейки.ДатаНачала.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ДатаОкончания.ТолькоПросмотр = Ложь;
			Иначе	
				ОформлениеСтроки.Ячейки.ДатаНачала.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ДатаОкончания.ТолькоПросмотр = Истина;
			КонецЕсли;	
			
			Если ОформлениеСтроки.ДанныеСтроки.Статус = "Загружен" Тогда	
				ЦветНадписи = Новый Цвет(0,0,255);
			ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Статус = "Повторно загружен" Тогда	
				ЦветНадписи = Новый Цвет(51, 204, 204);
			ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Статус = "Загружен с замещением" Тогда	
				ЦветНадписи = Новый Цвет(255,50,50);
			Иначе
				ЦветНадписи = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли;	
			
			Если ОформлениеСтроки.ДанныеСтроки.Статус = "Заблокирован" Тогда
				ЖирныйШрифт = ШрифтыСтиля.ШрифтВажнойНадписи;
			Иначе
				ЖирныйШрифт = ШрифтыСтиля.ШрифтТекста;
			КонецЕсли;	
			
			ОформлениеСтроки.Ячейки.ОбъектМД.ЦветТекста = ЦветНадписи;
			ОформлениеСтроки.Ячейки.СпособСвертки.ЦветТекста = ЦветНадписи;
			ОформлениеСтроки.Ячейки.ДатаНачала.ЦветТекста = ЦветНадписи;
			ОформлениеСтроки.Ячейки.ДатаОкончания.ЦветТекста = ЦветНадписи;
			
			ОформлениеСтроки.Ячейки.ОбъектМД.Шрифт = ЖирныйШрифт;
			ОформлениеСтроки.Ячейки.СпособСвертки.Шрифт = ЖирныйШрифт;
			ОформлениеСтроки.Ячейки.ДатаНачала.Шрифт = ЖирныйШрифт;
			ОформлениеСтроки.Ячейки.ДатаОкончания.Шрифт = ЖирныйШрифт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СпособыСверткиРегистрыСведенийДатаНачалаПриИзменении(Элемент)
	
КонецПроцедуры


Процедура СпособыСверткиРегистрыСведенийСпособСверткиПриИзменении(Элемент)
	
	Если ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.СпособСвертки = мСпособыСверткиОбъектов.НаДату Тогда
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаНачала = Дата("00010101");
	Иначе
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаНачала = Дата("00010101");
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаОкончания = Дата("00010101");
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособыСверткиРегистрыСведенийСпособСверткиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.НеОбрабатывать);  
	Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.НаДату);
	
	Если ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ТипОбъектаМД = "Документ" Тогда
		Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.ЗаПериод);
	ИначеЕсли ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ТипОбъектаМД = "РегистрСведений" Тогда
		Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.Очистить);
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособыСверткиРегистрыСведенийДатаОкончанияПриИзменении(Элемент)
	
КонецПроцедуры

Процедура ПанельНастройкиСпособовСверткиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ОтборСтрок.ТипОбъектаМД.Установить(ЭлементыФормы.ПанельНастройкиСпособовСвертки.Страницы[ТекущаяСтраница].Имя);
	ЭлементыФормы.СпособыСверткиОбъектовМетаданных.НастройкаОтбораСтрок.ТипОбъектаМД.Доступность = Ложь;
	
КонецПроцедуры

Процедура СпособыСверткиОбъектовМетаданныхСпособСверткиПриИзменении(Элемент)
	
	Если ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.СпособСвертки = мСпособыСверткиОбъектов.НаДату Тогда
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаНачала = Дата("00010101");
	Иначе
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаНачала = Дата("00010101");
		ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ДатаОкончания = Дата("00010101");
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособыСверткиОбъектовМетаданныхСпособСверткиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.НеОбрабатывать);
	
	Если ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ТипОбъектаМД = "РегистрСведений"
	   И Метаданные.РегистрыСведений.Найти(ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ОбъектМД).ПериодичностьРегистраСведений = 
		 Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
	Иначе
		Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.НаДату);
	КонецЕсли;
	
	Если ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ТипОбъектаМД = "Документ" Тогда
		Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.ЗаПериод);
	ИначеЕсли ЭлементыФормы.СпособыСверткиОбъектовМетаданных.ТекущиеДанные.ТипОбъектаМД = "РегистрСведений" Тогда
		Элемент.СписокВыбора.Добавить(мСпособыСверткиОбъектов.Очистить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИмяДокумента = "КорректировкаЗаписейРегистров";
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("В конфигурации отсутствует документ " + ИмяДокумента + ".
		|Использование обработки невозможно!");
		Возврат;
	КонецЕсли;
	
	// проверим регистры бухгалтерии
	мЕстьРегистрыБухгалтерии = Ложь;
	Если Метаданные.РегистрыБухгалтерии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отсутствующий = НайтиОтсутствующиеОбъекты();
	Если Отсутствующий = "" Тогда
		мЕстьРегистрыБухгалтерии = Истина;
	Иначе
		Предупреждение("В конфигурации остутствует - " + Отсутствующий + ".
		|Свертка регистров бухгалтерии будет недоступна!");
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОтсутствующиеОбъекты()
	
	Если Метаданные.РегистрыБухгалтерии.Найти("Хозрасчетный") = Неопределено Тогда
		Возврат "Регистр бухгалтерии 'Хозрасчетный'";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти("Налоговый") = Неопределено Тогда
		Возврат "Регистр бухгалтерии 'Налоговый'";
	ИначеЕсли Метаданные.ПланыСчетов.Найти("Хозрасчетный") = Неопределено Тогда
		Возврат "План счетов 'Хозрасчетный'";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

