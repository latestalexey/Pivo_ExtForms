
//============================ ПРОЦЕДУРЫ И ФУНКЦИИ ==================================//

Процедура СформироватьОтчет(ФормироватьПоПроизвольнойТаблице = Ложь) Экспорт

	ЭлементыФормы.Результат.Очистить();
	
	Состояние("Отчет формируется... Для прекращения формирования отчета нажмите комбинацию клавиш Ctrl + Break."); 
	
	Если НЕ ФормироватьПоПроизвольнойТаблице Тогда // формирование отчета по правам с учетом его пользовательских настроек 
		
		ТаблицаПрав.Очистить();
		СформироватьНастройкиОтчета(Ложь, Ложь);
				
		// заполнение таблицы прав для вывода в отчет			
		Если СпособГруппировки = "ПользователиИБ" Тогда	
			
			Для каждого ПользовательИБ Из ПользователиИБ Цикл
				Если НужноЗаполнятьПрава(ПользовательИБ.Имя, 1) Тогда
					ЗаполнитьТаблицуПрав(ПользовательИБ);					
				КонецЕсли;
			КонецЦикла;		
			
		ИначеЕсли СпособГруппировки = "Роли" Тогда
			
			Для каждого Роль Из РолиКонфигурации Цикл
				Если НужноЗаполнятьПрава(Роль.Имя, 2) Тогда
					ЗаполнитьТаблицуПрав(,Роль, Ложь);		
				КонецЕсли;
			КонецЦикла;		
			
		ИначеЕсли СпособГруппировки = "ПользователиИБРоли" Тогда
			
			Для каждого ПользовательИБ Из ПользователиИБ Цикл
				Если НЕ НужноЗаполнятьПрава(ПользовательИБ.Имя, 1) Тогда 
					Продолжить; 
				КонецЕсли;
				Для каждого Роль Из ПользовательИБ.Роли Цикл
					Если НужноЗаполнятьПрава(Роль.Имя, 2) Тогда
						ЗаполнитьТаблицуПрав(ПользовательИБ, Роль, Ложь);	
					КонецЕсли;
				КонецЦикла;				
			КонецЦикла;	
			
		Иначе // просто выводим список объектов метаданных
			
			ЗаполнитьТаблицуПрав();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// отсортируем таблицу прав
	СтрокаСортировки = "";
	Для каждого ГруппировкаОтчета Из ГруппировкиОтчета Цикл
		СтрокаСортировки = СтрокаСортировки + ?(ГруппировкаОтчета.Пометка, ГруппировкаОтчета.Значение.Имя + " ", "");
	КонецЦикла;
	СтрокаСортировки = СтрЗаменить(СокрЛП(СтрокаСортировки), " ", ",");
	
	Если НЕ ПустаяСтрока(СтрокаСортировки) Тогда
		ТаблицаПрав.Сортировать(СтрокаСортировки);
	КонецЕсли;
	
	Если ВключенРежимРедактированияПрав Тогда
		ИсходнаяТаблицаПрав = ТаблицаПрав.Скопировать();
	КонецЕсли;	
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхПоПравам, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПрав", ТаблицаПрав);	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭлементыФормы.Результат.ФиксацияСлева = 1;
	МожноРедактироватьПрава = Истина;

КонецПроцедуры

Процедура СформироватьНастройкиОтчета(НастройкаГруппировокПоУмолчанию = Истина, НастройкаОтборовПоУмолчанию = Истина, НастройкаОформленияПоУмолчанию = Истина)

	НастройкиСКД = КомпоновщикНастроек.Настройки;
	
	//Если ФормироватьСравнение Тогда
	//	
	//	НастройкиСКД.Структура.Очистить();
	//	
	//	ТаблицаСКД = НастройкиСКД.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	//	КолонкаГруппировкаПользователь = ТаблицаСКД.Колонки.Добавить();  
	//	КолонкаГруппировкаПользователь.Имя = "Роль";
	//	КолонкаГруппировкаПользователь.ПредставлениеПользовательскойНастройки = "Роль";
	//	КолонкаГруппировкаПользователь.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//	ПолеГруппировки = КолонкаГруппировкаПользователь.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Роль"); 
	//	
	//	// группировка по объектам метаданных
	//	ГруппировкаОбъект = ТаблицаСКД.Строки.Добавить();
	//	ГруппировкаОбъект.Имя = "ОбъектМетаданных";
	//	ГруппировкаОбъект.ПредставлениеПользовательскойНастройки = "Объект конфигурации";
	//	ГруппировкаОбъект.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//	ПолеГруппировки = ГруппировкаОбъект.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОбъектМетаданных");  
	//	
	//	// добавление полей по правам	
	//	ПоляСКД = СхемаКомпоновкиДанныхПоПравам.НаборыДанных[0].Поля;
	//	Для каждого ПолеСКД Из ПоляСКД Цикл	
	//		Если ЭтоПолеПрава(ПолеСКД.ПутьКДанным) Тогда		
	//			ГруппировкаПрава = ГруппировкаОбъект.Структура.Добавить();
	//			ГруппировкаПрава.Имя = ПолеСКД.ПутьКДанным;
	//			ГруппировкаПрава.ПредставлениеПользовательскойНастройки = ПолеСКД.Заголовок;
	//			ГруппировкаПрава.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//			ПолеГруппировки = ГруппировкаПрава.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным); 
	//		КонецЕсли;	
	//		ВыбранноеПолеПрава = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	//		ВыбранноеПолеПрава.Поле = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным);
	//		ВыбранноеПолеПрава.Заголовок  = ПолеСКД.Заголовок;
	//		ВыбранноеПолеПрава.Использование = Истина;
	//	КонецЦикла;
	//			
	//КонецЕсли;
	
	// группировки
	Если НастройкаГруппировокПоУмолчанию Тогда
		
		НастройкиСКД.Структура.Очистить();
		
		// группировка по объектам метаданных
		ГруппировкаОбъект = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаОбъект.Имя = "ОбъектМетаданных";
		ГруппировкаОбъект.ПредставлениеПользовательскойНастройки = "Объект конфигурации";
		ГруппировкаОбъект.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеГруппировки = ГруппировкаОбъект.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОбъектМетаданных");  
		
		// группировка по пользователям ИБ
		ГруппировкаПользователь = ГруппировкаОбъект.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПользователь.Имя = "ПользовательИБ";
		ГруппировкаПользователь.ПредставлениеПользовательскойНастройки = "Пользователь ИБ";
		ГруппировкаПользователь.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеГруппировки = ГруппировкаПользователь.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПользовательИБ"); 
		
		// группировка по ролям
		ГруппировкаРоль = ГруппировкаПользователь.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаРоль.Имя = "Роль";
		ГруппировкаРоль.ПредставлениеПользовательскойНастройки = "Роль";
		ГруппировкаРоль.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ПолеГруппировки = ГруппировкаРоль.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Роль");  		
		
		// добавление полей по правам	
		ПоляСКД = СхемаКомпоновкиДанныхПоПравам.НаборыДанных[0].Поля;
		Для каждого ПолеСКД Из ПоляСКД Цикл			
			Если ЭтоПолеПрава(ПолеСКД.ПутьКДанным) Тогда		
				ПолеГруппировки = ГруппировкаРоль.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным);							
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
	// условное оформление полей прав
	Если НастройкаОформленияПоУмолчанию Тогда
		
		НастройкиСКД.УсловноеОформление.Элементы.Очистить();
		ПоляСКД = СхемаКомпоновкиДанныхПоПравам.НаборыДанных[0].Поля;
		Для каждого ПолеСКД Из ПоляСКД Цикл	
			Если ЭтоПолеПрава(ПолеСКД.ПутьКДанным) Тогда
				ОформитьПолеПрава(НастройкиСКД, ПолеСКД, 0);
				ОформитьПолеПрава(НастройкиСКД, ПолеСКД, 1);
				Если МассивПравРЛС.Найти(ПолеСКД.Поле) <> Неопределено Тогда
					ОформитьПолеПрава(НастройкиСКД, ПолеСКД, 2);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
	КонецЕсли;
	
	// отборы 
	Если НастройкаОтборовПоУмолчанию Тогда
		
		НастройкиСКД.Отбор.Элементы.Очистить();
		
		// поле отбора по объектам метаданных
		ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектМетаданных");
		ЭлементОтбора.Использование = Ложь;
		
		// поле отбора по пользователям ИБ
		Если СпособГруппировки = "ПользователиИБ" ИЛИ СпособГруппировки = "ПользователиИБРоли" Тогда			
			ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПользовательИБ");
			ЭлементОтбора.Использование = Ложь;			
		КонецЕсли;
		
		// поле отбора по ролям
		Если СпособГруппировки = "Роли" ИЛИ СпособГруппировки = "ПользователиИБРоли" Тогда			
			ЭлементОтбора = НастройкиСКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роль");
			ЭлементОтбора.Использование = Ложь;			
		КонецЕсли;
				
	КонецЕсли;
	
	// другие настройки
	ВыводОтборов = НастройкиСКД.ПараметрыВывода.Элементы[13];
	ВыводОтборов.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ВыводОтборов.Использование = Истина;
	
	ВыводЗаголовка = НастройкиСКД.ПараметрыВывода.Элементы[10];
	ВыводЗаголовка.Значение      = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ВыводЗаголовка.Использование = Истина;
	
КонецПроцедуры

Процедура ОформитьПолеПрава(НастройкиСКД, ПолеСКД, ЗначениеПрава)

	// оформление
	ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Добавить();
	
	// цвет текста права
	ОформлениеЦветаТекста = ЭлементОформления.Оформление.Элементы[1];  
	ОформлениеЦветаТекста.Использование = Истина;
	ОформлениеЦветаТекста.Значение = ?(ЗначениеПрава = 0, WebЦвета.Красный, WebЦвета.Зеленый);
	                                     
	// ориентация текста
	ОформлениеОриентации = ЭлементОформления.Оформление.Элементы[11]; 
	ОформлениеОриентации.Значение      = 0;
	ОформлениеОриентации.Использование = Истина;
	
	// текст поля при выводе данных по РЛС
	ОформлениеТекста = ЭлементОформления.Оформление.Элементы[19]; 
	ОформлениеТекста.Использование = Истина;
	ОформлениеТекста.Значение = ?(ЗначениеПрава = 0, "Нет", "Да");
	
	// поля с РЛС пометим особым фоном
	Если ЗначениеПрава = 2 Тогда		
	    ОформлениеФона = ЭлементОформления.Оформление.Элементы[0]; 
		ОформлениеФона.Значение = WebЦвета.СеребристоСерый;
		ОформлениеФона.Использование = Истина
	КонецЕсли;
	
	// условия оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным); 
	ЭлементОтбора.ПравоеЗначение = ЗначениеПрава;
	
	// оформляемые поля
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным); 
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуПрав(ПользовательИБ = Неопределено, Роль = Неопределено, ПравоПользователяИБ = Истина)
	
	Если ОбъектыКонфигурации = "Конфигурация" Тогда
		ЗаполнитьСтрокуТаблицыПрав(ПользовательИБ, Роль, ПравоПользователяИБ, Метаданные);
	Иначе		
		Для каждого ОбъектКонфигурации Из Метаданные[ОбъектыКонфигурации] Цикл
			Если НужноЗаполнятьПрава(ОбъектКонфигурации.Имя, 0) Тогда
				ЗаполнитьСтрокуТаблицыПрав(ПользовательИБ, Роль, ПравоПользователяИБ, ОбъектКонфигурации);					
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьСтрокуТаблицыПрав(ПользовательИБ, Роль, ПравоПользователяИБ, ОбъектКонфигурации)
	
	// учтем отбор по подсистемам
	Если СписокОбъектовМетаданных.НайтиПоЗначению(ОбъектКонфигурации.Имя) = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	// добавим новую строку в таблицу прав
	СтрокаТаблицыПрав = ТаблицаПрав.Добавить();
	СтрокаТаблицыПрав.ПользовательИБ   = ?(ПользовательИБ = Неопределено, "", ПользовательИБ.Имя);
	СтрокаТаблицыПрав.Роль             = ?(Роль = Неопределено, "", Роль.Имя);
	СтрокаТаблицыПрав.ОбъектМетаданных = ?(ОбъектыКонфигурации = "Конфигурация", Метаданные.Имя, ОбъектКонфигурации.Имя);
		
	// если группировки по метаданным нет - значит права нас не интересуют
	Для каждого СтрокаГруппировок Из ГруппировкиОтчета Цикл
		Если СтрокаГруппировок.Значение.Имя = "ОбъектМетаданных" И НЕ СтрокаГруппировок.Пометка Тогда
			Возврат;
		КонецЕсли;		
	КонецЦикла;
	
	Если СпособГруппировки = "ОбъектыМетаданных" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоступа = Новый Структура("Доступность, ОграничениеУсловием");
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
				
		Если НЕ ЭтоПолеПрава(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Право = Колонка.Имя;
		ОбладательПрав   = ?(ПравоПользователяИБ, ПользовательИБ, Роль);
		
		УчитыватьРЛС = ИспользованиеРЛС И МассивПравРЛС.Найти(Право) <> Неопределено;
		
		// составим список полей объекта для проверки наличия использования РЛС
		Если УчитыватьРЛС Тогда
			
			Если ОбъектыКонфигурации = "РегистрыНакопления" ИЛИ ОбъектыКонфигурации = "РегистрыБухгалтерии" 
				ИЛИ ОбъектыКонфигурации = "РегистрыРасчета" ИЛИ ОбъектыКонфигурации = "Последовательности" Тогда
				
				// на регистры и последовательности нельзя накладывать РЛС по полям
				СписокПолейРЛС = "Период";
				
			Иначе
				
				СписокПолейРЛС = "";
				Для каждого СтандартныйРеквизит Из ОбъектКонфигурации.СтандартныеРеквизиты Цикл
					СписокПолейРЛС = СписокПолейРЛС + ?(ПустаяСтрока(СписокПолейРЛС), "", ",") + СтандартныйРеквизит.Имя;
				КонецЦикла;
				
				Если ОбъектыКонфигурации = "ЖурналыДокументов" Тогда // особенность журналов
					
					Для каждого ГрафаОбъекта Из ОбъектКонфигурации.Графы Цикл
						СписокПолейРЛС = СписокПолейРЛС + "," + ГрафаОбъекта.Имя;
					КонецЦикла;
					
				Иначе
					
					Для каждого РеквизитОбъекта Из ОбъектКонфигурации.Реквизиты Цикл
						СписокПолейРЛС = СписокПолейРЛС + "," + РеквизитОбъекта.Имя;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ОбъектыКонфигурации = "РегистрыСведений" Тогда
					Для каждого ИзмерениеОбъекта Из ОбъектКонфигурации.Измерения Цикл
						СписокПолейРЛС = СписокПолейРЛС + "," + ИзмерениеОбъекта.Имя;
					КонецЦикла;
					Для каждого РесурсОбъекта Из ОбъектКонфигурации.Ресурсы Цикл
						СписокПолейРЛС = СписокПолейРЛС + "," + РесурсОбъекта.Имя;
					КонецЦикла;
				ИначеЕсли ОбъектыКонфигурации <> "ЖурналыДокументов" Тогда // особенность журналов
					Для каждого ТабличнаяЧастьОбъекта Из ОбъектКонфигурации.ТабличныеЧасти Цикл
						СписокПолейРЛС = СписокПолейРЛС + "," + ТабличнаяЧастьОбъекта.Имя;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыДоступаРЛС = ПараметрыДоступа(Право, ОбъектКонфигурации, СписокПолейРЛС, ОбладательПрав);
			ЗаполнитьЗначенияСвойств(ПараметрыДоступа, ПараметрыДоступаРЛС);
			
		Иначе
			
			ПараметрыДоступа.Вставить("ОграничениеУсловием", Ложь);
			ПараметрыДоступа.Вставить("Доступность", ПравоДоступа(Право, ОбъектКонфигурации, ОбладательПрав));			
			
		КонецЕсли;
		
		ОтборПоЗначениюПрава  = ТаблицаПравДляВывода.Найти(Право, "Право").Отбор;		
		ЗначениеОтбораПоПраву = (ОтборПоЗначениюПрава = "Есть право");
		
		Если ЗначениеОтбораПоПраву = ПараметрыДоступа.Доступность ИЛИ ОтборПоЗначениюПрава = "Не установлен" Тогда
			
			// если в праве используется РЛС, то значение права принимает третье состояние
			Если ПараметрыДоступа.Доступность И ПараметрыДоступа.ОграничениеУсловием Тогда
				СтрокаТаблицыПрав[Право] = 2;
			Иначе
				СтрокаТаблицыПрав[Право] = ПараметрыДоступа.Доступность;
			КонецЕсли;
			
		Иначе
			
			ТаблицаПрав.Удалить(СтрокаТаблицыПрав);				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Функция НужноЗаполнятьПрава(ОбъектПрав, ИндексЭлементаОтбора)
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[ИндексЭлементаОтбора];
	ВидСравненияОтбора  = ЭлементОтбора.ВидСравнения;
	ЗначениеОтбора      = ЭлементОтбора.ПравоеЗначение;
	ИспользованиеОтбора = ЭлементОтбора.Использование;
	
	ПраваНужноЗаполнить = Истина;
	
	Если ИспользованиеОтбора Тогда
		
		Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ПраваНужноЗаполнить = ЗначениеОтбора.НайтиПоЗначению(ОбъектПрав) <> Неопределено;
		ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ПраваНужноЗаполнить = ЗначениеОтбора.НайтиПоЗначению(ОбъектПрав) = Неопределено;
		ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
			ПраваНужноЗаполнить = ЗначениеОтбора = ОбъектПрав;
		ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ПраваНужноЗаполнить = ЗначениеОтбора <> ОбъектПрав;
		Иначе
			ПраваНужноЗаполнить = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПраваНужноЗаполнить;
	
КонецФункции

Процедура СформироватьНаборыДанныхСистемыКомпановки()
	
	СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Очистить();
	ИсточникДанных = СхемаКомпоновкиДанныхПоПравам.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Очистить();		
	НаборДанных = СхемаКомпоновкиДанныхПоПравам.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИмяОбъекта     = "ТаблицаПрав";	
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	Для каждого Колонка Из ТаблицаПрав.Колонки Цикл		
		
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Колонка.Имя;
		ПолеНабораДанных.ПутьКДанным = Колонка.Имя;
		ПолеНабораДанных.Заголовок   = ?(ПустаяСтрока(Колонка.Заголовок), Колонка.Имя, Колонка.Заголовок);
		ПолеНабораДанных.ТипЗначения = Колонка.ТипЗначения;
		                      
		СписокДоступныхЗначений = Новый СписокЗначений;
		Если СтруктураДоступныхЗначенийДляОтборов.Свойство(ПолеНабораДанных.ПутьКДанным, СписокДоступныхЗначений) Тогда 
			ПолеНабораДанных.УстановитьДоступныеЗначения(СписокДоступныхЗначений);
		КонецЕсли;
		
		// оформление поля права
		Если НЕ ЭтоПолеПрава(ПолеНабораДанных.ПутьКДанным) Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексОФормления = 0 По 18 Цикл
			Оформление = ПолеНабораДанных.Оформление.Элементы[ИндексОФормления]; 
			Если ИндексОФормления = 8 Тогда  // гор. положение
				Оформление.Значение = ГоризонтальноеПоложение.Центр;
			ИначеЕсли ИндексОФормления = 9 Тогда  // верт. положение
				Оформление.Значение = ВертикальноеПоложение.Центр;
			ИначеЕсли ИндексОФормления = 10 Тогда // размещение
				Оформление.Значение = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			ИначеЕсли ИндексОФормления = 11 Тогда // ориентация текста
				Оформление.Значение = 90;
			ИначеЕсли ИндексОФормления = 12 Тогда  // формат
				Оформление.Значение = "БЛ=Нет; БИ=Да";
			ИначеЕсли ИндексОФормления = 15 Тогда  // мин. ширина
				Оформление.Значение = 10;
			ИначеЕсли ИндексОФормления = 16 Тогда  // макс. ширина
				Оформление.Значение = 10;	
			ИначеЕсли ИндексОФормления = 18 Тогда // макс. высота
				Оформление.Значение = 75;
			Иначе
				Продолжить;
			КонецЕсли;						
			Оформление.Использование = Истина;
		КонецЦикла;				
		
	КонецЦикла;             
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхПоПравам));
	
КонецПроцедуры

Функция ПолучитьСписокПравОбъектаКонфигурации(ОбъектКонфигурации)

	СписокПравОбъектаКонфигурации = Новый СписокЗначений;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ЭтоПланы = Найти(ВРег(ОбъектКонфигурации), "ПЛАНЫ");
	
	// общие реквизиты
	Если ОбъектКонфигурации = "ОбщиеРеквизиты" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
		СписокПравОбъектаКонфигурации.Добавить("Редактирование", "Редактирование");
	КонецЕсли;
	
	// интерфейсы
	Если ОбъектКонфигурации = "Интерфейсы" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Использование", "Использование");
	КонецЕсли;
	
	// критерии отбора, подсистемы, общие формы и команды
	Если ОбъектКонфигурации = "КритерииОтбора" ИЛИ ОбъектКонфигурации = "ОбщиеФормы" ИЛИ ОбъектКонфигурации = "ОбщиеКоманды" ИЛИ ОбъектКонфигурации = "Подсистемы" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
	КонецЕсли;
	
	// константы
	Если ОбъектКонфигурации = "Константы" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Изменение", "Изменение");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
		СписокПравОбъектаКонфигурации.Добавить("Редактирование", "Редактирование");
	КонецЕсли;
	
	// журналы документов
	Если ОбъектКонфигурации = "ЖурналыДокументов" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
	КонецЕсли;
	
	// последовательности
	Если ОбъектКонфигурации = "Последовательности" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Изменение", "Изменение");
	КонецЕсли;
	
	// документы
	Если ОбъектКонфигурации = "Документы" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Добавление", "Добавление");
		СписокПравОбъектаКонфигурации.Добавить("Изменение", "Изменение");
		СписокПравОбъектаКонфигурации.Добавить("Удаление", "Удаление");
		СписокПравОбъектаКонфигурации.Добавить("Проведение", "Проведение");
		СписокПравОбъектаКонфигурации.Добавить("ОтменаПроведения", "Отмена проведения");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
		СписокПравОбъектаКонфигурации.Добавить("Редактирование", "Редактирование");	
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдаление", "Интерактивное удаление");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяПометкаУдаления", "Интерактивная пометка удаления");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеСнятиеПометкиУдаления", "Интерактивное снятие пометки удаления");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдалениеПомеченных", "Интерактивное удаление помеченных");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеПроведение", "Интерактивное проведение");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеПроведениеНеОперативное", "Интерактивное проведение неоперативное");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяОтменаПроведения", "Интерактивная отмена проведения");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеИзменениеПроведенных", "Интерактивное изменение проведенных");
		СписокПравОбъектаКонфигурации.Добавить("ВводПоСтроке", "Ввод по строке");
	КонецЕсли;
	
	// справочники, планы, задачи, бизнесс-процессы 
	Если ОбъектКонфигурации = "Справочники" ИЛИ ОбъектКонфигурации = "Задачи" ИЛИ ОбъектКонфигурации = "БизнесПроцессы" ИЛИ ЭтоПланы Тогда
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Добавление", "Добавление");
		СписокПравОбъектаКонфигурации.Добавить("Изменение", "Изменение");
		СписокПравОбъектаКонфигурации.Добавить("Удаление", "Удаление");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
		СписокПравОбъектаКонфигурации.Добавить("Редактирование", "Редактирование");	
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдаление", "Интерактивное удаление");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяПометкаУдаления", "Интерактивная пометка удаления");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеСнятиеПометкиУдаления", "Интерактивное снятие пометки удаления");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдалениеПомеченных", "Интерактивное удаление помеченных");
		СписокПравОбъектаКонфигурации.Добавить("ВводПоСтроке", "Ввод по строке");
	КонецЕсли;
	
	// справочники и планы (кроме планов обмена)
	Если ЭтоПлатформа83 И (ОбъектКонфигурации = "Справочники" ИЛИ ЭтоПланы) И ОбъектКонфигурации <> "ПланыОбмена" Тогда
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдалениеПредопределенныхДанных", "Интерактивное удаление предопределенных данных");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяПометкаУдаленияПредопределенныхДанных", "Интерактивная пометка удаления предопределенных данных");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "Интерактивное снятие пометки удаления предопределенных данных");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных", "Интерактивное удаление помеченных предопределенных данных");
	КонецЕсли;
	
	// регистры
	Если Найти(ВРег(ОбъектКонфигурации), "РЕГИСТРЫ") Тогда		
		СписокПравОбъектаКонфигурации.Добавить("Чтение", "Чтение");
		СписокПравОбъектаКонфигурации.Добавить("Изменение", "Изменение");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
		СписокПравОбъектаКонфигурации.Добавить("Редактирование", "Редактирование");
		Если ОбъектКонфигурации = "РегистрыНакопления" ИЛИ ОбъектКонфигурации = "РегистрыБухгалтерии" ИЛИ (ОбъектКонфигурации = "РегистрыСведений" И ЭтоПлатформа83) Тогда 
			СписокПравОбъектаКонфигурации.Добавить("УправлениеИтогами", "Управление итогами");
		КонецЕсли;
	КонецЕсли;	
	
	// отчеты и обработки
	Если ОбъектКонфигурации = "Отчеты" ИЛИ ОбъектКонфигурации = "Обработки" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Использование", "Использование");
		СписокПравОбъектаКонфигурации.Добавить("Просмотр", "Просмотр");
	КонецЕсли;
	
	// конфигурация
	Если ОбъектКонфигурации = "Конфигурация" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Администрирование", "Администрирование");
		СписокПравОбъектаКонфигурации.Добавить("АдминистрированиеДанных", "Администрирование данных");
		СписокПравОбъектаКонфигурации.Добавить("ОбновлениеКонфигурацииБазыДанных", "Обновление конфигурации базы данных");
		СписокПравОбъектаКонфигурации.Добавить("МонопольныйРежим", "Монопольный режим");
		СписокПравОбъектаКонфигурации.Добавить("АктивныеПользователи", "Активные пользователи");
		СписокПравОбъектаКонфигурации.Добавить("ЖурналРегистрации", "Журнал регистрации");
		СписокПравОбъектаКонфигурации.Добавить("ТонкийКлиент", "Тонкий клиент");
		СписокПравОбъектаКонфигурации.Добавить("ВебКлиент", "Веб клиент");
		СписокПравОбъектаКонфигурации.Добавить("ТолстыйКлиент", "Толстый клиент");			
		СписокПравОбъектаКонфигурации.Добавить("ВнешнееСоединение", "Внешнее соединение");
		СписокПравОбъектаКонфигурации.Добавить("Automation", "Automation");
		СписокПравОбъектаКонфигурации.Добавить("РежимВсеФункции", "Режим все функции");
		СписокПравОбъектаКонфигурации.Добавить("СохранениеДанныхПользователя", "Сохранение данных пользователя");
		СписокПравОбъектаКонфигурации.Добавить("ИзменениеСтандартнойАутентификации", "Изменение стандартной аутентификации"); 
		СписокПравОбъектаКонфигурации.Добавить("ИзменениеСтандартнойАутентификацииСеанса", "Изменение стандартной аутентификации сеанса");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок", "Интерактивное открытие внешних обработок");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов", "Интерактивное открытие внешних отчетов");
		СписокПравОбъектаКонфигурации.Добавить("Вывод", "Вывод");
	КонецЕсли;
		
	// задачи
	Если ОбъектКонфигурации = "Задачи" Тогда
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяАктивация", "Интерактивная активация");
		СписокПравОбъектаКонфигурации.Добавить("Выполнение", "Выполнение");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивноеВыполнение", "Интерактивное выполнение");
	КонецЕсли;
	
	// бизнес-процессы
	Если ОбъектКонфигурации = "БизнесПроцессы" Тогда
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивнаяАктивация", "Интерактивная активация");
		СписокПравОбъектаКонфигурации.Добавить("Старт", "Старт");
		СписокПравОбъектаКонфигурации.Добавить("ИнтерактивныйСтарт", "Интерактивный старт");
	КонецЕсли;
	
	// параметры сеанса
	Если ОбъектКонфигурации = "ПараметрыСеанса" Тогда
		СписокПравОбъектаКонфигурации.Добавить("Получение", "Получение");
		СписокПравОбъектаКонфигурации.Добавить("Установка", "Установка");
	КонецЕсли;

	Возврат СписокПравОбъектаКонфигурации;
	
КонецФункции // ПолучитьСписокПравДляОбъектаКонфигурации()

Процедура СформироватьКолонкиТаблицыПрав(УказанСписокПравДляВывода = Ложь)
	
	ТаблицаПрав = Новый ТаблицаЗначений;
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число");
	
	// общие колонки	
	ТаблицаПрав.Колонки.Добавить("ПользовательИБ", ОписаниеТиповСтрока, "Пользователь ИБ");
	ТаблицаПрав.Колонки.Добавить("Роль", ОписаниеТиповСтрока, "Роль");
	ТаблицаПрав.Колонки.Добавить("ОбъектМетаданных", ОписаниеТиповСтрока, "Объект конфигурации");	
	
	// добавление колонок по правам
	Если УказанСписокПравДляВывода Тогда
		
		МассивПравДляВывода = ТаблицаПравДляВывода.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого СтрокаСпискаПрав Из МассивПравДляВывода Цикл
			ТаблицаПрав.Колонки.Добавить(СтрокаСпискаПрав.Право, ОписаниеТиповЧисло, СтрокаСпискаПрав.ПравоПредставление);
		КонецЦикла;			
		
	Иначе
		
		СписокПравОбъектаКонфигурации = ПолучитьСписокПравОбъектаКонфигурации(ОбъектыКонфигурации);
		
		Для каждого СтрокаПрава Из СписокПравОбъектаКонфигурации Цикл
			ТаблицаПрав.Колонки.Добавить(СтрокаПрава.Значение, ОписаниеТиповЧисло, СтрокаПрава.Представление);
		КонецЦикла;
		
	КонецЕсли;
		
	СформироватьНаборыДанныхСистемыКомпановки();
		
КонецПроцедуры

Процедура ПодготовитьОтчетКФормированию(ГруппировкиПоУмолчанию = Истина, ОтборыПоУмолчанию = Истина, ОформлениеПоУмолчанию = Истина)
	
	СтруктураДоступныхЗначенийДляОтборов.Очистить();
	
	// заполним список пользователей
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	СписокПометокПользователей = СписокПользователейИБ.Скопировать();
	СписокПользователейИБ.Очистить();
	Для каждого ПользовательИБ Из ПользователиИБ Цикл					
		СписокПользователейИБ.Добавить(ПользовательИБ.Имя, ПользовательИБ.Имя);				
	КонецЦикла;
	СтруктураДоступныхЗначенийДляОтборов.Вставить("ПользовательИБ", СписокПользователейИБ);
	
	// восстановим пометки в списке пользователей
	Для каждого ЭлементСпискаПометов Из СписокПометокПользователей Цикл		
		Если НЕ ЭлементСпискаПометов.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка = СписокПользователейИБ.НайтиПоЗначению(ЭлементСпискаПометов.Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// заполним список ролей
	СписокПометокРолей = СписокРолей.Скопировать();
	СписокРолей.Очистить();
	Для каждого Роль Из РолиКонфигурации Цикл
		СписокРолей.Добавить(Роль.Имя, Роль.Синоним);
	КонецЦикла;	
	СтруктураДоступныхЗначенийДляОтборов.Вставить("Роль", СписокРолей);
	
	// восстановим пометки в списке ролей
	Для каждого ЭлементСпискаПометов Из СписокПометокРолей Цикл		
		Если НЕ ЭлементСпискаПометов.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка = СписокРолей.НайтиПоЗначению(ЭлементСпискаПометов.Значение);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// заполним список объектов конфигурации
	ЗаполнитьСписокОбъектовМетаданныхПоПодсистемам();
	
	СхемаКомпоновкиДанныхПоПравам = Новый СхемаКомпоновкиДанных;
	
	СформироватьКолонкиТаблицыПрав();	
	СформироватьНастройкиОтчета(ГруппировкиПоУмолчанию, ОтборыПоУмолчанию, ОформлениеПоУмолчанию);
	
	Если ГруппировкиПоУмолчанию Тогда
		ЗаполнитьСписокГруппировокОтчета();
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСписокГруппировокОтчета()
	
	ГруппировкиОтчета.Очистить();
	СтруктураОтчета = КомпоновщикНастроек.Настройки.Структура;	
	Для НомерГруппировки = 0 По 10 Цикл	
		Если СтруктураОтчета.Количество() > 0 Тогда	
			ИмяГруппировки = СтруктураОтчета[0].Имя;
			Если ИмяГруппировки = "ОбъектМетаданных" Тогда
				КартинкаДляГруппировки = ЭлементыФормы.КартинкаОбъект.Картинка;
			ИначеЕсли ИмяГруппировки = "Роль" Тогда
				КартинкаДляГруппировки = ЭлементыФормы.КартинкаРоль.Картинка;
			ИначеЕсли ИмяГруппировки = "ПользовательИБ" Тогда
				КартинкаДляГруппировки = ЭлементыФормы.КартинкаПользователь.Картинка;
			КонецЕсли;
			ГруппировкиОтчета.Добавить(СтруктураОтчета[0], СтруктураОтчета[0].ПредставлениеПользовательскойНастройки, СтруктураОтчета[0].Использование, КартинкаДляГруппировки);
			СтруктураОтчета = СтруктураОтчета[0].Структура;
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьСписокПравДляВывода();
			
КонецПроцедуры

Процедура ЗаполнитьСписокПравДляВывода()
	
	ТаблицаПравДляВывода.Очистить();
	ПоляСКД = СхемаКомпоновкиДанныхПоПравам.НаборыДанных[0].Поля;
	
	Для каждого ПолеСКД Из ПоляСКД Цикл
		
		Если ЭтоПолеПрава(ПолеСКД.ПутьКДанным) Тогда
			СтрокаПрава = ТаблицаПравДляВывода.Добавить();
			СтрокаПрава.Право              = Новый ПолеКомпоновкиДанных(ПолеСКД.ПутьКДанным);
			СтрокаПрава.ПравоПредставление = ПолеСКД.Заголовок;
			СтрокаПрава.Отбор              = "Не установлен";
			СтрокаПрава.Пометка            = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ПорядокРасположенияПрав = ТаблицаПравДляВывода.ВыгрузитьКолонку("Право");
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруОтчетаСКД(Элемент = Неопределено)
	
	// работа со списком прав для вывода
	Если Элемент <> Неопределено Тогда
		
		Если Элемент.Имя = "УстановитьФлажки" Тогда
			ТаблицаПравДляВывода.ЗаполнитьЗначения(Истина, "Пометка");
		ИначеЕсли Элемент.Имя = "СнятьФлажки" Тогда
			ТаблицаПравДляВывода.ЗаполнитьЗначения(Ложь, "Пометка");
		КонецЕсли;	
		
		// установим зависимые права
		Если Элемент.Имя = "ТаблицаПравДляВывода" Тогда
			ТекДанные = Элемент.ТекущиеДанные;
			УстановитьЗависимостьПрав(ТекДанные.Право, ТекДанные.Пометка, ТекДанные.Отбор);
		КонецЕсли;
		
		// уберем использование ненужных отборов
		Если Элемент.Имя = "ГруппировкиОтчета" Тогда
			ТекДанные = Элемент.ТекущиеДанные;
			ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
			Если НЕ ТекДанные.Пометка Тогда				
				Если ТекДанные.Значение.Имя = "ОбъектМетаданных" Тогда
					ЭлементыОтбора[0].Использование = Ложь;
				КонецЕсли;
				Если ТекДанные.Значение.Имя = "ПользовательИБ" Тогда
					ЭлементыОтбора[1].Использование = Ложь;
				КонецЕсли;
				Если ТекДанные.Значение.Имя = "Роль" Тогда
					ЭлементыОтбора[2].Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	// список выбранных группировок
	СписокГруппировок = Новый СписокЗначений; 
	Для каждого ЭлементГруппировки Из ГруппировкиОтчета Цикл	
		
		Если НЕ ЭлементГруппировки.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗначениеГруппировки = ЭлементГруппировки.Значение;
		Если ЗначениеГруппировки.Имя = "ПользовательИБ" И ВключенРежимРедактированияПрав Тогда
			Если Элемент <> Неопределено И Элемент.Имя = "ГруппировкиОтчета" Тогда
				Предупреждение("В режиме редактирования прав нельзя использовать группировку по пользователям!", 10);
			КонецЕсли;
			ЭлементГруппировки.Пометка = Ложь;
			Продолжить;
		КонецЕсли;
		
		СписокГруппировок.Добавить(ЗначениеГруппировки, ЭлементГруппировки.Представление, Истина);
		
	КонецЦикла;

	// определение способа группирования данных по правам		
	ГруппироватьПоРоли           = Ложь;
	ГруппироватьПоПользователюИБ = Ложь;
	Для каждого ЭлементГруппировки Из СписокГруппировок Цикл
		ЗначениеГруппировки = ЭлементГруппировки.Значение;
		Если ЗначениеГруппировки.Имя = "Роль" Тогда 
			ГруппироватьПоРоли = Истина
		ИначеЕсли ЗначениеГруппировки.Имя = "ПользовательИБ" Тогда
			ГруппироватьПоПользователюИБ = Истина 
		КонецЕсли;	
	КонецЦикла;
	
	Если ГруппироватьПоРоли И ГруппироватьПоПользователюИБ Тогда
		СпособГруппировки = "ПользователиИБРоли";
	ИначеЕсли ГруппироватьПоРоли Тогда
		СпособГруппировки = "Роли";
	ИначеЕсли ГруппироватьПоПользователюИБ Тогда
		СпособГруппировки = "ПользователиИБ";
	Иначе
		СпособГруппировки = "ОбъектыМетаданных";
	КонецЕсли;
	
	СформироватьКолонкиТаблицыПрав(Истина);
		
	// заполнение структуры отчета СКД
	НастройкиСКД = КомпоновщикНастроек.Настройки;	
	СтруктураОтчета = НастройкиСКД.Структура;	
	СтруктураОтчета.Очистить();
	
	ЕстьГруппировкаПоМетаданным = Ложь;
	Для каждого ЭлементГруппировки Из СписокГруппировок Цикл
		
		Если ЭлементГруппировки.Значение.Имя = "ОбъектМетаданных" Тогда
			ЕстьГруппировкаПоМетаданным = Истина;
		КонецЕсли;		
		
		ЗначениеГруппировки = ЭлементГруппировки.Значение;
		
		ГруппировкаСКД = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаСКД.Имя = ЗначениеГруппировки.Имя;
		ГруппировкаСКД.ПредставлениеПользовательскойНастройки = ЗначениеГруппировки.ПредставлениеПользовательскойНастройки;
		ПолеГруппировкиСКД = ГруппировкаСКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиСКД.Поле = Новый ПолеКомпоновкиДанных(ГруппировкаСКД.Имя);
		
		ГруппировкаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		// в самую последнюю группировку включаем поля по правам
		Если СписокГруппировок.Индекс(ЭлементГруппировки)+1 = СписокГруппировок.Количество() И ЕстьГруппировкаПоМетаданным Тогда 
			Для каждого ПолеКомпоновки Из СхемаКомпоновкиДанныхПоПравам.НаборыДанных.НаборДанных1.Поля Цикл
				СтрокаПрава = ТаблицаПравДляВывода.Найти(Строка(ПолеКомпоновки.ПутьКДанным), "Право");
				Если СтрокаПрава <> Неопределено И СтрокаПрава.Пометка И СпособГруппировки <> "ОбъектыМетаданных" Тогда
					ПолеГруппировкиСКД = ГруппировкаСКД.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеГруппировкиСКД.Поле = Новый ПолеКомпоновкиДанных(ПолеКомпоновки.ПутьКДанным);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураОтчета = СтруктураОтчета[0].Структура;
		
	КонецЦикла;		
				
КонецПроцедуры

Процедура ПереместитьГруппировкуПравоОтчета(Кнопка)

	Если Найти(Кнопка.Имя, "Право") Тогда
		ВыделенныеСтроки = ЭлементыФормы.ТаблицаПравДляВывода.ВыделенныеСтроки;
		ЭлементДанных    = ТаблицаПравДляВывода;
	Иначе
		ВыделенныеСтроки = ЭлементыФормы.ГруппировкиОтчета.ВыделенныеСтроки;
		ЭлементДанных    = ГруппировкиОтчета;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		ИндексТекСтроки = ЭлементДанных.Индекс(ВыделенныеСтроки[0]);
		Если Найти(Кнопка.Имя, "Вверх") Тогда
			Если ИндексТекСтроки > 0 Тогда
				ЭлементДанных.Сдвинуть(ВыделенныеСтроки[0], -1);
				Если НЕ ЭлементДанных[ИндексТекСтроки].Пометка Тогда
					ПереместитьГруппировкуПравоОтчета(Кнопка);
				КонецЕсли;				
			КонецЕсли;
		Иначе
			Если ИндексТекСтроки < ЭлементДанных.Количество()-1 Тогда
				ЭлементДанных.Сдвинуть(ВыделенныеСтроки[0], 1);
				Если НЕ ЭлементДанных[ИндексТекСтроки].Пометка Тогда
					ПереместитьГруппировкуПравоОтчета(Кнопка);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтруктуруОтчетаСКД();	

КонецПроцедуры

Процедура НастроитьВидимостьИДоступностьЭлементов()			
	ЭлементыФормы.ОтборыОтчета.Колонки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанельПрава.Кнопки.ПереместитьПравоВверх.Доступность = НЕ ВключенРежимРедактированияПрав;
	ЭлементыФормы.КоманднаяПанельПрава.Кнопки.ПереместитьПравоВниз.Доступность  = НЕ ВключенРежимРедактированияПрав;	
КонецПроцедуры

Процедура ПроставитьОтборПоПраву(Кнопка)
	
	Если Кнопка.Имя = "ПолныеПрава" Тогда
		ЗначениеОтбора = "Есть право";
	ИначеЕсли Кнопка.Имя = "ОтсутствуютПрава" Тогда
		ЗначениеОтбора = "Нет права";
	Иначе
		ЗначениеОтбора = "Не установлен";
	КонецЕсли;
		
	ТаблицаПравДляВывода.ЗаполнитьЗначения(ЗначениеОтбора, "Отбор");	
	
КонецПроцедуры

Процедура УстановитьЗависимостьПрав(Знач Право, Пометка, Отбор, УстановкаНовыхПрав = Ложь)
				
	ИскатьЗависимое = НЕ (Отбор = "Нет права");
	
	СтрокиСвязи = ТаблицаЗависимостиПрав.НайтиСтроки(Новый Структура(?(ИскатьЗависимое, "ЗависимоеПраво", "Право"), Право));
	Для каждого СтрокаСвязи Из СтрокиСвязи Цикл
		
		Если УстановкаНовыхПрав Тогда // в случае редактирования прав 
			
			ЗависимоеПраво = ?(ИскатьЗависимое, СтрокаСвязи.Право, СтрокаСвязи.ЗависимоеПраво);
			
			// если в таблице прав нет колонки с таким правом, то это право не требуется учитывать 
			Если ТаблицаПрав.Колонки.Найти(ЗависимоеПраво) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// права на предопределенные данные доступны только начиная с платформы 8.3
			Если Найти(ВРег(ЗависимоеПраво), "ПРЕДОПРЕДЕЛЕННЫХ") <> 0 И НЕ ЭтоПлатформа83 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗависимыеПрава.Найти(ЗависимоеПраво) = Неопределено Тогда
				ЗависимыеПрава.Добавить(ЗависимоеПраво);					
			КонецЕсли;
			
			УстановитьЗависимостьПрав(?(ИскатьЗависимое, СтрокаСвязи.Право, СтрокаСвязи.ЗависимоеПраво), Истина, Отбор, Истина);	
			Продолжить;
			
		КонецЕсли;
		
		СтрокаЗависимогоПрава = ТаблицаПравДляВывода.Найти(?(ИскатьЗависимое, СтрокаСвязи.Право, СтрокаСвязи.ЗависимоеПраво), "Право");
		
		Если СтрокаЗависимогоПрава <> Неопределено Тогда
			СтрокаЗависимогоПрава.Отбор = ?(Отбор <> "Не установлен", Отбор, СтрокаЗависимогоПрава.Отбор);
			УстановитьЗависимостьПрав(СтрокаЗависимогоПрава.Право, ИскатьЗависимое, Отбор);	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОформитьСтрокуТабличногоПоля(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	// оформление строк таблицы прав
	Если Элемент.Имя = "ТаблицаПравДляВывода" Тогда	
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,?(ДанныеСтроки.Пометка, Истина, Ложь));				
		Если ДанныеСтроки.Отбор = "Не установлен" И ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Черный;
		ИначеЕсли ДанныеСтроки.Отбор = "Нет права" И ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		ИначеЕсли ДанныеСтроки.Отбор = "Есть право" И ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;		
	КонецЕсли;
	
	// оформление строк таблицы отборов
	Если Элемент.Имя = "ОтборыОтчета" Тогда
		Если ТипЗнч(ДанныеСтроки) <> Тип("ОтборКомпоновкиДанных") Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,,?(ДанныеСтроки.Использование, Истина, Ложь));				
			ЯчейкаОформления = ОформлениеСтроки.Ячейки.ЛевоеЗначениеДляКраткогоОтображенияЭлемента;
			Если ДанныеСтроки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектМетаданных") Тогда
				ЯчейкаОформления.Картинка = ЭлементыФормы.КартинкаОбъект.Картинка; 
			ИначеЕсли ДанныеСтроки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роль") Тогда
				ЯчейкаОформления.Картинка = ЭлементыФормы.КартинкаРоль.Картинка;
			ИначеЕсли ДанныеСтроки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПользовательИБ") Тогда
				ЯчейкаОформления.Картинка = ЭлементыФормы.КартинкаПользователь.Картинка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// оформление строк списка группировок
	Если Элемент.Имя = "ГруппировкиОтчета" Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,?(ДанныеСтроки.Пометка, Истина, Ложь));				
	КонецЕсли;
			
КонецПроцедуры

Процедура УпорядочитьСписокПравДляВывода()

	ИндексПрава = 0;
	Для каждого Право Из ПорядокРасположенияПрав Цикл	
		СтрокаПраваДляВывода = ТаблицаПравДляВывода.Найти(Право, "Право");
		ИндексПраваВывода    = ТаблицаПравДляВывода.Индекс(СтрокаПраваДляВывода);
		Смещение = ИндексПрава - ИндексПраваВывода; 
		ТаблицаПравДляВывода.Сдвинуть(СтрокаПраваДляВывода, Смещение);
		ИндексПрава = ИндексПрава + 1;
	КонецЦикла;	
	
	ЗаполнитьСтруктуруОтчетаСКД();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуИзмененныхПрав()

	Для каждого СтрокаПрав Из ТаблицаПрав Цикл
		
		СтрокаИсходныхПрав = ИсходнаяТаблицаПрав[ТаблицаПрав.Индекс(СтрокаПрав)];
		
		Для каждого Колонка Из ТаблицаПрав.Колонки Цикл
			
			Если ТаблицаИзмененныхПрав.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				ТаблицаИзмененныхПрав.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
			КонецЕсли;
			
			Если СтрокаПрав[Колонка.Имя] <> СтрокаИсходныхПрав[Колонка.Имя] Тогда
				СтрокаИзмененныхПрав = ТаблицаИзмененныхПрав.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИзмененныхПрав, СтрокаПрав);
				СтрокаИзмененныхПрав.ОбъектыКонфигурации = ОбъектыКонфигурации;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

Процедура ИзменитьЗначенияПрав(ЭлементРасшифровки, ЗначениеПрава, ГрупповоеИзменениеПрав = Ложь)

	ТекущееПолеРасшифровки = ЭлементРасшифровки.ПолучитьПоля()[0];	
	Родитель = ЭлементРасшифровки.ПолучитьРодителей()[0];
	
	Если ГрупповоеИзменениеПрав Тогда
		ЗначениеПолеГруппировки1 = ТекущееПолеРасшифровки;
	Иначе
		ЗначенияПолей = ДанныеРасшифровки.Элементы[Родитель.Идентификатор].ПолучитьПоля();
		Для каждого ЗначениеПоля Из ЗначенияПолей Цикл
			Если НЕ ЭтоПолеПрава(ЗначениеПоля.Поле) Тогда
				ЗначениеПолеГруппировки1 = ЗначениеПоля;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Попытка
		Родитель = ДанныеРасшифровки.Элементы[Родитель.ПолучитьРодителей()[0].Идентификатор].ПолучитьРодителей()[0];
	Исключение
		Предупреждение("Не удалось изменить значения прав!" + Символы.ПС + "Редактировать права можно только в разрезе ролей и объектов конфигурации!", 10);
		Возврат;
	КонецПопытки;

	ЗначениеПолеГруппировки2 = ДанныеРасшифровки.Элементы[Родитель.Идентификатор].ПолучитьПоля()[0];
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ЗначениеПолеГруппировки1.Поле, ЗначениеПолеГруппировки1.Значение);
	СтруктураПоиска.Вставить(ЗначениеПолеГруппировки2.Поле, ЗначениеПолеГруппировки2.Значение);
	
	Попытка
		СтрокаИсходнойТаблицыПрав = ИсходнаяТаблицаПрав.НайтиСтроки(СтруктураПоиска)[0];
		СтрокаТаблицыПрав = ТаблицаПрав.НайтиСтроки(СтруктураПоиска)[0];
	Исключение
		Предупреждение("Не удалось изменить значения прав!" + Символы.ПС + "Редактировать права можно только в разрезе ролей и объектов конфигурации!", 10);
		Возврат;
	КонецПопытки;
	
	Если НЕ ГрупповоеИзменениеПрав Тогда
		ИмяПрава = ТекущееПолеРасшифровки.Поле;
		Если ЗначениеПрава = 1 И СтрокаИсходнойТаблицыПрав[ИмяПрава] = 2 Тогда 
			СтрокаТаблицыПрав[ИмяПрава] = 2;
		Иначе
			СтрокаТаблицыПрав[ИмяПрава] = ЗначениеПрава;
		КонецЕсли;
	КонецЕсли;
	
	Если ГрупповоеИзменениеПрав Тогда
		
		// изменим значения всех прав в строке таблицы
		Для каждого Колонка Из ТаблицаПрав.Колонки Цикл	
			Если ЭтоПолеПрава(Колонка.Имя) Тогда
				Если ЗначениеПрава = 1 И СтрокаИсходнойТаблицыПрав[Колонка.Имя] = 2 Тогда
					СтрокаТаблицыПрав[Колонка.Имя] = 2; 
				Иначе
					СтрокаТаблицыПрав[Колонка.Имя] = ЗначениеПрава; 				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
	Иначе 	
		
		// изменим значения зависимых прав
		Для каждого Право Из ЗависимыеПрава Цикл	
			Если ЗначениеПрава = 1 И СтрокаИсходнойТаблицыПрав[Право] = 2 Тогда
				СтрокаТаблицыПрав[Право] = 2; 
			Иначе
				СтрокаТаблицыПрав[Право] = ЗначениеПрава; 				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	// изменим значения прав в табличном поле
	ПолеРезультата           = ЭлементыФормы.Результат;
	ТекОбластьОтчета         = ПолеРезультата.ТекущаяОбласть;
	НомТекСтрокиОтчета       = ТекОбластьОтчета.Верх;
	НомПоследнейКолонкиПрава = ПолеРезультата.ШиринаТаблицы;
	
	Для НомКолонки = 2 По НомПоследнейКолонкиПрава Цикл
		
		Право = СтрЗаменить(СокрЛП(ПолеРезультата.Область(2, НомКолонки).Текст), " ", "");
		ОбластьПрава         = ПолеРезультата.Область(НомТекСтрокиОтчета, НомКолонки);
		
		ТекущееЗначениеПрава = СтрокаТаблицыПрав[Право];	
				
		ОбластьПрава.Текст      = ?(ТекущееЗначениеПрава = 0, "Нет", "Да");		
		ОбластьПрава.ЦветТекста = ?(ТекущееЗначениеПрава = 0, WebЦвета.Красный, WebЦвета.Зеленый); 
		ЗначениеПраваИзменилось = ТекущееЗначениеПрава <> СтрокаИсходнойТаблицыПрав[Право];
		
		Если ТекущееЗначениеПрава = 2 Тогда 
			ОбластьПрава.ЦветФона = WebЦвета.СеребристоСерый;
		Иначе			
			ОбластьПрава.ЦветФона = ?(ЗначениеПраваИзменилось, WebЦвета.Голубой, WebЦвета.Белый);
		КонецЕсли;
		
		ОбластьПрава.Шрифт = ?(ЗначениеПраваИзменилось, Новый Шрифт("Arial",8,Истина), Новый Шрифт("Arial",8,Ложь));
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьНадписьПоСводнымДанным()

	ЭлементыФормы.ДействияФормы.Кнопки.ИнформационнаяНадпись.Текст = "Ролей: " + СписокРолей.Количество()
	+ "; Пользователей: " + СписокПользователейИБ.Количество() + "; Объектов: " + СписокОбъектовМетаданных.Количество();

КонецПроцедуры

Процедура ВыгрузитьПраваВФайл(ТаблицаРолей, ТаблицаПравДляВыгрузки)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогВыбораКаталога.Заголовок = "Выберите каталог для сохранения прав в xml-файл";
	
	Если НЕ ДиалогВыбораКаталога.Выбрать() Тогда 
		Если ВключенРежимРедактированияПрав Тогда
			ВключенРежимРедактированияПрав = НЕ ВключенРежимРедактированияПрав;
			КнопкаРедактированияПрав = ЭлементыФормы.ДействияФормы.Кнопки.РежимРедактированияПрав;
			КнопкаРедактированияПрав.Текст    = "Сохранить измененные права в файл";
			КнопкаРедактированияПрав.Картинка = БиблиотекаКартинок.СохранитьФайл;
			Заголовок = Метаданные().Синоним + " (Режим редактирования прав)";
		КонецЕсли;
		Возврат; 
	КонецЕсли;
	
	// создание файла прав для каждой роли
	Для каждого СтрокаРолей Из ТаблицаРолей Цикл
		
		ИмяРоли = СтрокаРолей.Роль;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ДиалогВыбораКаталога.Каталог + "\Роль." + ИмяРоли + ".Права.xml");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Rights");	
		ЗаписьXML.ЗаписатьАтрибут("xmlns",     "http://v8.1c.ru/8.2/roles");
		ЗаписьXML.ЗаписатьАтрибут("xmlns:xs",  "http://www.w3.org/2001/XMLSchema");
		ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьАтрибут("xsi:type",  "Rights");
		
		// заполнение данных по объектам
		СтрокиПрав = ТаблицаПравДляВыгрузки.НайтиСтроки(Новый Структура("Роль", ИмяРоли));
		Для каждого СтрокаПрав Из СтрокиПрав Цикл
			
			ОбъектКонфигурации = СтрокаПрав.ОбъектыКонфигурации;
			ИмяОбъекта         = СтрокаПрав.ОбъектМетаданных; 
			
			Объект = ПараметрыВыгрузкиXML.Найти(ОбъектКонфигурации, "НаРусскомЯзыке").НаАнглийскомЯзыке;			
			ЗаписьXML.ЗаписатьНачалоЭлемента("object");			
			ЗаписьXML.ЗаписатьНачалоЭлемента("name");
			ЗаписьXML.ЗаписатьТекст(Объект + "." + ИмяОбъекта);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			// заполнение данных по правам
			СписокПравДляЗаписи = ПолучитьСписокПравОбъектаКонфигурации(ОбъектКонфигурации);
			Для каждого Колонка Из ТаблицаПравДляВыгрузки.Колонки Цикл
				
				Если СписокПравДляЗаписи.НайтиПоЗначению(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				ИмяПрава      = ПараметрыВыгрузкиXML.Найти(Колонка.Имя, "НаРусскомЯзыке").НаАнглийскомЯзыке;
				ЗначениеПрава = ?(СтрокаПрав[Колонка.Имя], "true", "false");
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("right");					
				ЗаписьXML.ЗаписатьНачалоЭлемента("name");
				ЗаписьXML.ЗаписатьТекст(ИмяПрава);
				ЗаписьXML.ЗаписатьКонецЭлемента();					
				ЗаписьXML.ЗаписатьНачалоЭлемента("value");
				ЗаписьXML.ЗаписатьТекст(ЗначениеПрава);
				ЗаписьXML.ЗаписатьКонецЭлемента();					
				ЗаписьXML.ЗаписатьКонецЭлемента(); 				
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();  
			
		КонецЦикла;
		
		// общие данные файла
		ЗаписьXML.ЗаписатьНачалоЭлемента("setForNewObjects");
		ЗаписьXML.ЗаписатьТекст("false");
		ЗаписьXML.ЗаписатьКонецЭлемента();			
		ЗаписьXML.ЗаписатьНачалоЭлемента("setForAttributesByDefault");
		ЗаписьXML.ЗаписатьТекст("true");
		ЗаписьXML.ЗаписатьКонецЭлемента();			
		ЗаписьXML.ЗаписатьНачалоЭлемента("independentRightsOfChildObjects");
		ЗаписьXML.ЗаписатьТекст("false");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// запись файла
		ЗаписьXML.ЗаписатьКонецЭлемента(); 
		ЗаписьXML.Закрыть();
		Сообщить("Создан файл ""Роль." + ИмяРоли + ".Права.xml" + """, содержащий права для роли """ + ИмяРоли + """", СтатусСообщения.Информация);
		
		ТаблицаПравДляВыгрузки.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДеревоПодсистемКонфигурации(ПодсистемаМетаданные = Неопределено, Знач СтрокаДереваПодсистем = Неопределено)
	
	Если ПодсистемаМетаданные = Неопределено Тогда	
		ПодсистемаМетаданные  = Метаданные;
		СтрокаДереваПодсистем = ДеревоПодсистемКонфигурации;
		Для каждого ПодсистемаМетаданные Из ПодсистемаМетаданные.Подсистемы Цикл
			СформироватьДеревоПодсистемКонфигурации(ПодсистемаМетаданные, СтрокаДереваПодсистем);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДереваПодсистем = СтрокаДереваПодсистем.Строки.Добавить();
	СтрокаДереваПодсистем.МетаданныеПодсистемы = ПодсистемаМетаданные;
	СтрокаДереваПодсистем.СинонимПодсистемы    = ПодсистемаМетаданные.Синоним;
	СтрокаДереваПодсистем.Пометка              = Истина;
	
	Для каждого ПодсистемаМетаданные Из ПодсистемаМетаданные.Подсистемы Цикл
		СформироватьДеревоПодсистемКонфигурации(ПодсистемаМетаданные, СтрокаДереваПодсистем);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокОбъектовМетаданныхПоПодсистемам()

	ОтбиратьПоПодсистемам = ДеревоПодсистемКонфигурации.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь), Истина).Количество() > 0;
	МассивВыбранныхСтрокДереваПодсистем = ДеревоПодсистемКонфигурации.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);
	
	// подготовим массив выбранных подсистем	 
	Если ОтбиратьПоПодсистемам Тогда 		
		МассивОтобранныхПодсистем  = Новый Массив;		
		Для каждого СтрокаДереваПодсистем Из МассивВыбранныхСтрокДереваПодсистем Цикл
			МассивОтобранныхПодсистем.Добавить(СтрокаДереваПодсистем.МетаданныеПодсистемы);
		КонецЦикла;		
	КонецЕсли;
	
	КоличествоВыбранныхПодсистем = ?(ОтбиратьПоПодсистемам, МассивОтобранныхПодсистем.Количество(), МассивВыбранныхСтрокДереваПодсистем.Количество());
	ЭлементыФормы.НадписьОтборПодсистем.Заголовок = "Подсистемы (" + Строка(КоличествоВыбранныхПодсистем) + ")";
	
	// запомним отобранные объекты метаданных
	МассивОбъектовДляПометки = Новый Массив;
	Для каждого ЭлементСписка Из СписокОбъектовМетаданных Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивОбъектовДляПометки.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// заполним список объектов метаданных с учетом выбранных подсистем
	СписокОбъектовМетаданных.Очистить();
	Если ОбъектыКонфигурации = "Конфигурация" Тогда
		СписокОбъектовМетаданных.Добавить(Метаданные.Имя, Метаданные.Синоним);
	Иначе		
		Для каждого ОбъектКонфигурации Из Метаданные[ОбъектыКонфигурации] Цикл
			Если ОтбиратьПоПодсистемам Тогда
				Для каждого ПодсистемаМетаданные Из МассивОтобранныхПодсистем Цикл
					Если ПодсистемаМетаданные.Состав.Содержит(ОбъектКонфигурации) Тогда
						СписокОбъектовМетаданных.Добавить(ОбъектКонфигурации.Имя, ОбъектКонфигурации.Синоним);			
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				СписокОбъектовМетаданных.Добавить(ОбъектКонфигурации.Имя, ОбъектКонфигурации.Синоним);			
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	// восстановим отбор по объектам метаданных
	МассивОбъектовДляОтбора = Новый Массив;
	Для каждого ЭлементСписка Из СписокОбъектовМетаданных Цикл		
		Если МассивОбъектовДляПометки.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСписка.Пометка = Истина;
		МассивОбъектовДляОтбора.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	// установим соответствующий отбор в настройках компоновки
	ЭлементыОтбораКомпоновки = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Если ЭлементыОтбораКомпоновки.Количество() > 0 Тогда
		ЭлементОтбораОбъектов = ЭлементыОтбораКомпоновки[0];
		Если ЭлементОтбораОбъектов.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ ЭлементОтбораОбъектов.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ЭлементОтбораОбъектов.ПравоеЗначение.ЗагрузитьЗначения(МассивОбъектовДляОтбора);
		ИначеЕсли ЭлементОтбораОбъектов.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ ЭлементОтбораОбъектов.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ЭлементОтбораОбъектов.ПравоеЗначение = ?(МассивОбъектовДляОтбора.Количество() = 0, Неопределено, МассивОбъектовДляОтбора[0]);
		КонецЕсли;
	КонецЕсли;
		
	СтруктураДоступныхЗначенийДляОтборов.Вставить("ОбъектМетаданных", СписокОбъектовМетаданных);

КонецПроцедуры

Функция ЭтоПолеПрава(ИмяПоля)

	Возврат ВсеПраваКонфигурации.Найти(ИмяПоля) <> Неопределено;

КонецФункции // ЭтоПолеПрава()

//============================ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ==================================//

Процедура ДействияФормыСформироватьОтчет(Кнопка)
	
	НетГруппировок = Истина;                               
	Для каждого СтрокаГруппировок Из ГруппировкиОтчета Цикл
		Если СтрокаГруппировок.Пометка Тогда
			НетГруппировок = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	// проверки перед формированием отчета
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Если НетГруппировок Тогда
		Предупреждение("Не выбрана ни одна группировка отчета!", 10); 
	ИначеЕсли (СпособГруппировки = "Роли" ИЛИ СпособГруппировки = "ПользователиИБ" ИЛИ СпособГруппировки = "ПользователиИБРоли") 
		И ТаблицаПравДляВывода.Найти(Истина, "Пометка") = Неопределено Тогда
		Предупреждение("Не выбрано ни одного права для вывода в отчет!", 10);
	ИначеЕсли ВключенРежимРедактированияПрав И ТаблицаПравДляВывода.Найти(Истина, "Пометка") = Неопределено Тогда
		Предупреждение("Не выбрано ни одного права для редактирования!", 10);
	ИначеЕсли ((СпособГруппировки = "Роли" ИЛИ СпособГруппировки = "ОбъектыМетаданных") И ЭлементыОтбора[1].Использование) ИЛИ
		((СпособГруппировки = "ПользователиИБ" ИЛИ СпособГруппировки = "ОбъектыМетаданных") И ЭлементыОтбора[2].Использование) Тогда
		Предупреждение("Установленные отборы не соответствуют группировкам отчета!", 10);	
	Иначе		
		СформироватьОтчет();			 		
	КонецЕсли;
	
КонецПроцедуры
 	                                                    
Процедура ДействияФормыБыстраяНастройка(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ЭлементыФормы.ПанельНастройки.Свертка = ?(Кнопка.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Лево); 	
КонецПроцедуры
 
Процедура ОбъектыКонфигурацииПриИзменении(Элемент)
	
	Если ВключенРежимРедактированияПрав Тогда		
		ЗаполнитьТаблицуИзмененныхПрав();		
	КонецЕсли;
	
	ПодготовитьОтчетКФормированию(Ложь, Ложь);
	ЗаполнитьСписокПравДляВывода();
	ЗаполнитьСтруктуруОтчетаСКД();	
	
	ОбновитьНадписьПоСводнымДанным();
	
	// проверим возможность использования механизма РЛС
	ДоступенМеханизмРЛС = МассивОбъектовБезРЛС.Найти(ОбъектыКонфигурации) = Неопределено;
	Если НЕ ДоступенМеханизмРЛС Тогда		
		ИспользованиеРЛС = Ложь;
	КонецЕсли;	
	ЭлементыФормы.ИспользованиеРЛС.Доступность = ДоступенМеханизмРЛС;
	
	МожноРедактироватьПрава = Ложь;
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	// Создадим и инициализируем обработчик расшифровки 
	ОбработкаРасшифровки   = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхПоПравам));
	ДоступныеДействия      = Новый Массив;
	ДополнительныеДействия = Новый СписокЗначений;
	ВыполненноеДействие    = Неопределено;
	ТекОбластьОтчета       = Элемент.ТекущаяОбласть;
		
	СтруктураПоиска        = Новый Структура;
	ЭлементРасшифровки     = ДанныеРасшифровки.Элементы[Расшифровка];
	ТекущееПолеРасшифровки = ЭлементРасшифровки.ПолучитьПоля()[0];
	
	ЗначениеПоляРасшифровки = ТекущееПолеРасшифровки.Значение;
	Если ТипЗнч(ЗначениеПоляРасшифровки) = Тип("Число") И ВключенРежимРедактированияПрав И МожноРедактироватьПрава Тогда // действия с правами 
				    
		// изменим значение текущего права в табличном поле	
		ТекОбластьОтчета.Текст      = ?(ТекОбластьОтчета.Текст = "Да", "Нет", "Да");
		ТекОбластьОтчета.ЦветТекста = ?(ТекОбластьОтчета.Текст = "Да", WebЦвета.Зеленый, WebЦвета.Красный);
		ЗначениеТекущегоПрава       = ?(ТекОбластьОтчета.Текст = "Да", 1, 0);
				
		// найдем права, зависимые от текущего права                                     
		ЗависимыеПрава = Новый Массив;
		Отбор = ?(ЗначениеТекущегоПрава, "Есть право", "Нет права");
		УстановитьЗависимостьПрав(ТекущееПолеРасшифровки.Поле, Истина, Отбор, Истина);	
		
		// изменим значение текущего права и зависимых прав в таблице прав
		ИзменитьЗначенияПрав(ЭлементРасшифровки, ЗначениеТекущегоПрава);
		
	Иначе // действия с объектами, пользователями и ролями 
		
		Если ТекущееПолеРасшифровки.Поле = "ОбъектМетаданных" Тогда // действия с объектами
			
			ИмяОбъектаКонфигурации = ЗначениеПоляРасшифровки;
			Если ОбъектыКонфигурации <> "Конфигурация" Тогда
				ОбъектКонфигурации = Метаданные[ОбъектыКонфигурации][ИмяОбъектаКонфигурации];
			КонецЕсли;
			
			Если ТекОбластьОтчета.Лево = 1 И ВключенРежимРедактированияПрав И МожноРедактироватьПрава Тогда
				ДополнительныеДействия.Добавить("УстановитьВсеПрава", "Установить все права",, ЭлементыФормы.КартинкаПолныеПрава.Картинка);
				ДополнительныеДействия.Добавить("УбратьВсеПрава", "Убрать все права",, ЭлементыФормы.КартинкаНетПрав.Картинка);
			КонецЕсли;
			
			Если ОбъектыКонфигурации <> "Конфигурация" Тогда
				ДополнительныеДействия.Добавить("ОткрытьСписок", "Открыть список",, ЭлементыФормы.КартинкаОбъект.Картинка);
			КонецЕсли;
			
			ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, ДополнительныеДействия);
			
			Если ВыполненноеДействие = "УстановитьВсеПрава" Тогда
				
				ИзменитьЗначенияПрав(ЭлементРасшифровки, 1, Истина);
				
			ИначеЕсли ВыполненноеДействие = "УбратьВсеПрава" Тогда	
				
				ИзменитьЗначенияПрав(ЭлементРасшифровки, 0, Истина);
				
			ИначеЕсли ВыполненноеДействие = "ОткрытьСписок" И ОбъектКонфигурации <> Неопределено Тогда
				
				Попытка
					Выполнить(ОбъектыКонфигурации + "." + ОбъектКонфигурации.Имя + 
					?(ОбъектыКонфигурации = "Отчеты" ИЛИ ОбъектыКонфигурации = "Обработки", ".ПолучитьФорму().Открыть()", ".ПолучитьФормуСписка().Открыть()"));
				Исключение
					Предупреждение("По выбранным объектам метаданных невозможно открыть их список!", 10);
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ТекущееПолеРасшифровки.Поле = "ПользовательИБ" Тогда // действия с пользователями
			
			ИмяПользователя = ЗначениеПоляРасшифровки;	
			ПользовательИБ  = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
			
			ДополнительныеДействия.Добавить("РолиПользователя", "Роли пользователя",,ЭлементыФормы.КартинкаРоль.Картинка);
			
			Если ЕстьСправочникПользователей Тогда
				ДополнительныеДействия.Добавить("ОткрытьКарточкуПользователя", "Открыть карточку пользователя",,ЭлементыФормы.КартинкаПользователь.Картинка);
			КонецЕсли;
			
			ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, ДополнительныеДействия);
			
			Если ВыполненноеДействие = "РолиПользователя" Тогда 
				
				// отметим роли, которые уже назначены пользователю ИБ	
				СписокРолей.ЗаполнитьПометки(Ложь);
				РолиПользователя = Новый Массив;
				Для каждого СтрокаРолей Из СписокРолей Цикл
					ИмяРоли = СтрокаРолей.Значение;
					Роль = РолиКонфигурации.Найти(ИмяРоли);
					Если ПользовательИБ.Роли.Содержит(Роль) Тогда
						СтрокаРолей.Пометка = Истина;
						РолиПользователя.Добавить(ИмяРоли);
					КонецЕсли;						
				КонецЦикла;
				
				Если СписокРолей.ОтметитьЭлементы("Роли пользователя: " + ИмяПользователя) Тогда
					
					// назначим/удалим у пользователя ИБ выбранные роли
					Для каждого СтрокаРолей Из СписокРолей Цикл		
						
						Роль = РолиКонфигурации.Найти(СтрокаРолей.Значение);
						ПользователюНазначенаРоль = РолиПользователя.Найти(Роль.Имя) <> Неопределено;
						
						Если СтрокаРолей.Пометка И НЕ ПользователюНазначенаРоль Тогда					
							ПользовательИБ.Роли.Добавить(Роль);
							Сообщить("Пользователю """ + ИмяПользователя + """ назначена роль: " + Роль.Представление(), СтатусСообщения.Информация);
						ИначеЕсли НЕ СтрокаРолей.Пометка И ПользователюНазначенаРоль Тогда
							ПользовательИБ.Роли.Удалить(Роль);
							Сообщить("Пользователю """ + ИмяПользователя + """ убрали роль: " + Роль.Представление(), СтатусСообщения.Информация);
						КонецЕсли;	
						
					КонецЦикла;
					
					Попытка
						ПользовательИБ.Записать();
					Исключение
						Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Внимание);
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли ВыполненноеДействие = "ОткрытьКарточкуПользователя" Тогда
				
				// откроем соответствующий элемент справочника пользователей
				Пользователь = Справочники.Пользователи.НайтиПоКоду(ИмяПользователя);
				Если НЕ Пользователь.Пустая() Тогда
					Пользователь.ПолучитьОбъект().ПолучитьФорму().Открыть();
				Иначе
					Предупреждение("Пользователь с именем """ + ИмяПользователя + """ в справочнике ""Пользователи"" не найден!", 10);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущееПолеРасшифровки.Поле = "Роль" Тогда // действия с ролями
			
			ИмяРоли = ЗначениеПоляРасшифровки;	
			Роль    = РолиКонфигурации.Найти(ИмяРоли);
			
			Если ТекОбластьОтчета.Лево = 1 И ВключенРежимРедактированияПрав Тогда
				ДополнительныеДействия.Добавить("УстановитьВсеПрава", "Установить все права",, ЭлементыФормы.КартинкаПолныеПрава.Картинка);
				ДополнительныеДействия.Добавить("УбратьВсеПрава", "Убрать все права",, ЭлементыФормы.КартинкаНетПрав.Картинка);
			КонецЕсли;
			
			ДополнительныеДействия.Добавить("ПользователиРоли", "Пользователи роли",, ЭлементыФормы.КартинкаПользователь.Картинка);
			ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, ДополнительныеДействия);
			
			Если ВыполненноеДействие = "УстановитьВсеПрава" Тогда
				
				ИзменитьЗначенияПрав(ЭлементРасшифровки, 1, Истина);
				
			ИначеЕсли ВыполненноеДействие = "УбратьВсеПрава" Тогда
				
				ИзменитьЗначенияПрав(ЭлементРасшифровки, 0, Истина);
				
			ИначеЕсли ВыполненноеДействие = "ПользователиРоли" Тогда					
				
				// отметим пользователей, которым уже назначена выбранная роль
				СписокПользователейИБ.ЗаполнитьПометки(Ложь);
				ПользователиСДаннойРолью = Новый Массив; 
				Для каждого СтрокаПользователей Из СписокПользователейИБ Цикл
					ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтрокаПользователей.Значение);
					Если ПользовательИБ.Роли.Содержит(Роль) Тогда
						СтрокаПользователей.Пометка = Истина;
						ПользователиСДаннойРолью.Добавить(ПользовательИБ.Имя);
					КонецЕсли;						
				КонецЦикла;
				
				Если СписокПользователейИБ.ОтметитьЭлементы("Пользователи роли: " + Роль.Синоним) Тогда
					
					// присвоим/удалим роль у выбранных пользователей
					Для каждого СтрокаПользователей Из СписокПользователейИБ Цикл
						
						ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтрокаПользователей.Значение);								
						ПользователюНазначенаРоль = ПользователиСДаннойРолью.Найти(ПользовательИБ.Имя) <> Неопределено;
						
						Если СтрокаПользователей.Пометка И НЕ ПользователюНазначенаРоль Тогда			
							ПользовательИБ.Роли.Добавить(Роль);
							Сообщить("Роль """ + Роль.Представление() + """ назначена пользователю: " + ПользовательИБ.Имя, СтатусСообщения.Информация);
						ИначеЕсли НЕ СтрокаПользователей.Пометка И ПользователюНазначенаРоль Тогда 
							ПользовательИБ.Роли.Удалить(Роль);
							Сообщить("Роль """ + Роль.Представление() + """ убрана у пользователя: " + ПользовательИБ.Имя, СтатусСообщения.Информация);
						КонецЕсли;
						
						Попытка
							ПользовательИБ.Записать();
						Исключение
							Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Внимание);
						КонецПопытки;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ДействияФормыРежимРедактированияПрав(Кнопка)
			
	ЕстьГруппировкаПоОбъектам = Ложь;
	Для каждого СтрокаГруппировок Из ГруппировкиОтчета Цикл
		Если СтрокаГруппировок.Значение.Имя = "ОбъектМетаданных" И СтрокаГруппировок.Пометка Тогда
			ЕстьГруппировкаПоОбъектам = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СпособГруппировки <> "Роли" ИЛИ НЕ ЕстьГруппировкаПоОбъектам Тогда
		Предупреждение("Редактировать права можно только в разрезе ролей и объектов конфигурации!", 10);
		Возврат;
	КонецЕсли;
	
	Если НЕ МожноРедактироватьПрава Тогда
		Предупреждение("Для начала редактирования прав необходимо сформировать отчет!", 10);
		Возврат;
	КонецЕсли;
	
    ВключенРежимРедактированияПрав = НЕ ВключенРежимРедактированияПрав;
    Кнопка.Текст    = ?(ВключенРежимРедактированияПрав, "Сохранить измененные права в файл", "Режим редактирования прав");
	Кнопка.Картинка = ?(ВключенРежимРедактированияПрав, БиблиотекаКартинок.СохранитьФайл, БиблиотекаКартинок.РедактироватьВДиалоге);
	Заголовок       = ?(ВключенРежимРедактированияПрав, Метаданные().Синоним + " (Режим редактирования прав)", Метаданные().Синоним);
	
	Если ВключенРежимРедактированияПрав Тогда
				
		Если ТаблицаПрав.Количество() = 0 Тогда
			УпорядочитьСписокПравДляВывода();
			ЗаполнитьСтруктуруОтчетаСКД();			
		КонецЕсли;
		
		ИсходнаяТаблицаПрав = ТаблицаПрав.Скопировать();
		
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьЭлементов();
	
	ЗаполнитьТаблицуИзмененныхПрав();
	
	// создание таблицы измененных прав и выгрузка ее данных в xml-файлы
	Если НЕ ВключенРежимРедактированияПрав Тогда	
				
		Если ТаблицаИзмененныхПрав.Количество() = 0 Тогда 
			Предупреждение("Изменений прав не произведено!", 10);
			Возврат; 
		КонецЕсли;
		
		ТаблицаИзмененныхПрав.Сортировать("Роль, ОбъектыКонфигурации");				
		ТаблицаРолей = ТаблицаИзмененныхПрав.Скопировать(,"Роль"); 
		ТаблицаРолей.Свернуть("Роль");
		
		ВыгрузитьПраваВФайл(ТаблицаРолей, ТаблицаИзмененныхПрав);
		
		//// покажем отчет по измененным правам (не реализовано)		
		//Отчет = ВнешниеОтчеты.Создать(ИспользуемоеИмяФайла);
		//Отчет.СхемаКомпоновкиДанных = СхемаКомпоновкиДанных;
		//Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
		//ФормаОтчета = Отчет.ПолучитьФорму();
		//ФормаОтчета.ОбъектыКонфигурации     = ОбъектыКонфигурации;
		//ФормаОтчета.ОтчетПоИзмененнымПравам = Истина;
		//ФормаОтчета.ТаблицаИзмененныхПрав   = ТаблицаИзмененныхПрав;
		//ФормаОтчета.Заголовок               = ФормаОтчета.Заголовок + "; Измененные права по объектам конфигурации: " + ОбъектыКонфигурации;
		//ФормаОтчета.Открыть();
		//ФормаОтчета.ЭлементыФормы.ДействияФормы.Видимость = Ложь;
		//ФормаОтчета.ЭлементыФормы.ПанельНастройки.Свертка = РежимСверткиЭлементаУправления.Лево;
		//ФормаОтчета.СформироватьОтчет();
		//ФормаОтчета.ЭлементыФормы.Результат.Записать(ДиалогВыбораКаталога.Каталог + "\Отчет.mxl");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПравДляВыводаОтборПриИзменении(Элемент)
		
	ТекДанные = ЭлементыФормы.ТаблицаПравДляВывода.ТекущиеДанные;	
	ТекДанные.Пометка = Истина;
		
	УстановитьЗависимостьПрав(ТекДанные.Право, Истина, ТекДанные.Отбор);
	ЗаполнитьСтруктуруОтчетаСКД();
		
КонецПроцедуры

Процедура ПриОткрытии()
	
	Заголовок = Метаданные().Синоним;
	
	СформироватьДеревоПодсистемКонфигурации();
	
	ПодготовитьОтчетКФормированию();
	НастроитьВидимостьИДоступностьЭлементов();
	ОбновитьНадписьПоСводнымДанным();
	
	ЭлементыФормы.НадписьОтборПодсистем.Видимость = ДеревоПодсистемКонфигурации.Строки.Количество() <> 0;	
	ЭлементыФормы.ПанельНастройки.Свертка = ?(ЭлементыФормы.ДействияФормы.Кнопки.БыстраяНастройка.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Лево); 			
	ЭлементыФормы.ДействияФормы.Кнопки.СоздатьРольПоПравамПользователя.Картинка = ЭлементыФормы.КартинкаПользователь.Картинка;
	//ЭлементыФормы.ДействияФормы.Кнопки.СравнениеПрав.Кнопки.СравнитьПраваДвухРолей.Картинка = ЭлементыФормы.КартинкаРоль.Картинка;
	//ЭлементыФормы.ДействияФормы.Кнопки.СравнениеПрав.Кнопки.СравнитьПраваДвухПользователей.Картинка = ЭлементыФормы.КартинкаПользователь.Картинка;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Предупреждение("Для использования отчета необходимо обладать административными правами!", 10);
		//Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСоздатьРольПоПравамПользователя(Кнопка)
	
	// интерактивный выбор пользователя ИБ
	СписокВыбораПользователя = Новый СписокЗначений;
	Для каждого ПользовательИБ Из ПользователиИБ Цикл
		 СписокВыбораПользователя.Добавить(ПользовательИБ, ПользовательИБ.Имя);
	КонецЦикла;
	ЭлементСпискаВыбораПользователя = СписокВыбораПользователя.ВыбратьЭлемент("Выберите пользователя ИБ для выгрузки прав");
	
	Если ЭлементСпискаВыбораПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПользовательИБ = ЭлементСпискаВыбораПользователя.Значение;
	
	// ввод имени новой роли
	~Метка:
	ИмяРоли = "";
	Если НЕ ВвестиСтроку(ИмяРоли, "Введите имя новой роли") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРоли = СокрЛП(ИмяРоли);
	
	Если ПустаяСтрока(ИмяРоли) Тогда
		Предупреждение("Имя роли не указано!", 10);  
		Перейти ~Метка;
	ИначеЕсли Найти(ИмяРоли, " ") <> 0 Тогда
		Предупреждение("В имени роли нельзя использовать пробелы!", 10);
		Перейти ~Метка;
	КонецЕсли;
	
	ТаблицаРолей = Новый ТаблицаЗначений;
	ТаблицаРолей.Колонки.Добавить("Роль");
	СтрокаРоли = ТаблицаРолей.Добавить();
	СтрокаРоли.Роль = ИмяРоли;
	
	// сбросим использование отборов
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ЭлементОтбора.Использование = Ложь;
	КонецЦикла;
	
	ИспользованиеРЛС = Ложь;
		
	// сформируем последовательно таблицы прав по всем объектам метаданным и сохраним их в массиве
	МассивТаблицПравДляВыгрузки = Новый Массив;
	СписокОбъектовКонфигурации  = ЭлементыФормы.ОбъектыКонфигурации.СписокВыбора;
	СпособГруппировки           = "ПользователиИБ";	
	ТекущиеОбъектыКонфигурации  = ОбъектыКонфигурации;
	
	Для каждого ЭлементСпискаОбъектов Из СписокОбъектовКонфигурации Цикл
		
		ОбъектыКонфигурации = ЭлементСпискаОбъектов.Значение;
		
		ОбъектыКонфигурацииПриИзменении(ЭлементыФормы.ОбъектыКонфигурации);
		
		СформироватьКолонкиТаблицыПрав();	
		ЗаполнитьСписокПравДляВывода();
		ЗаполнитьТаблицуПрав(ВыбранныйПользовательИБ);
		
		// дозаполним сформированную таблицу прав недостающими данными
		ТаблицаПрав.ЗаполнитьЗначения(ИмяРоли, "Роль");
		ТаблицаПрав.Колонки.Добавить("ОбъектыКонфигурации");
		ТаблицаПрав.ЗаполнитьЗначения(ОбъектыКонфигурации, "ОбъектыКонфигурации");
		
		МассивТаблицПравДляВыгрузки.Добавить(ТаблицаПрав.Скопировать());
		
	КонецЦикла;
	
	// сформируем колонки сводной таблицы прав по всем существующим в платформе правам
	СводнаяТаблицаПравДляВыгрузки = Новый ТаблицаЗначений;
	СводнаяТаблицаПравДляВыгрузки.Колонки.Добавить("Роль");                    
	СводнаяТаблицаПравДляВыгрузки.Колонки.Добавить("ОбъектыКонфигурации");
	СводнаяТаблицаПравДляВыгрузки.Колонки.Добавить("ОбъектМетаданных");
	Для каждого ИмяПрава Из ВсеПраваКонфигурации Цикл	
		СводнаяТаблицаПравДляВыгрузки.Колонки.Добавить(ИмяПрава);
	КонецЦикла;
	
	// заполним сводную таблицу прав данными из массива сформированных таблиц
	Для каждого ТаблицаПравДляВыгрузки Из МассивТаблицПравДляВыгрузки Цикл
		Для каждого СтрокаТаблицыВыгрузки Из ТаблицаПравДляВыгрузки Цикл
			ЗаполнитьЗначенияСвойств(СводнаяТаблицаПравДляВыгрузки.Добавить(), СтрокаТаблицыВыгрузки);	
		КонецЦикла;
	КонецЦикла;
	
	// восстановим настройки формы
	ТаблицаПрав.Очистить();
	ОбъектыКонфигурации = ТекущиеОбъектыКонфигурации;
	ОбъектыКонфигурацииПриИзменении(ЭлементыФормы.ОбъектыКонфигурации);
	СформироватьКолонкиТаблицыПрав();	
	ЗаполнитьСписокПравДляВывода();
	
	// выгрузим сводную таблицу прав в xml-файл роли
	ВыгрузитьПраваВФайл(ТаблицаРолей, СводнаяТаблицаПравДляВыгрузки);
	
КонецПроцедуры

Процедура ДействияФормыОПрограмме(Кнопка)
	ОткрытьСправкуФормы();
КонецПроцедуры

Процедура ДействияФормыИнтернетПубликация(Кнопка)
	ЗапуститьПриложение("http://infostart.ru/public/138324/");
КонецПроцедуры

Процедура ОтборыОтчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТекущаяСтрокаОтбора  = Элемент.ТекущаяСтрока;
	ПолеОтбораКомпоновки = ТекущаяСтрокаОтбора.ЛевоеЗначение;
	
	Если ТекущаяСтрокаОтбора.ПравоеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПолеОтбораМетаданных   = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("ОбъектМетаданных");
	ЭтоПолеОтбораРоли         = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("Роль");
	ЭтоПолеОтбораПользователя = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("ПользовательИБ");	
	
	Если ТекущаяСтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно ИЛИ ТекущаяСтрокаОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда		
						
		Если ЭтоПолеОтбораМетаданных Тогда
			РедактируемыйСписокОтбора = СписокОбъектовМетаданных;
		ИначеЕсли ЭтоПолеОтбораРоли Тогда	
			РедактируемыйСписокОтбора = СписокРолей;
		ИначеЕсли ЭтоПолеОтбораПользователя Тогда	
			РедактируемыйСписокОтбора = СписокПользователейИБ;
		Иначе
			Возврат;
		КонецЕсли;
		
		ЭлементСписка = РедактируемыйСписокОтбора.НайтиПоЗначению(ТекущаяСтрокаОтбора.ПравоеЗначение);			
		РедактируемыйСписокОтбора.ЗаполнитьПометки(Ложь);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьОтборПодсистемНажатие(Элемент)
	
	ПолучитьФорму("ФормаОтбораПодсистем").ОткрытьМодально();	
	
	ЗаполнитьСписокОбъектовМетаданныхПоПодсистемам();	
	СформироватьНаборыДанныхСистемыКомпановки();
	
	ОбновитьНадписьПоСводнымДанным();
	
КонецПроцедуры

Процедура ОтборыОтчетаПравоеЗначениеДляКраткогоОтображенияЭлементаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаОтбора  = ЭлементыФормы.ОтборыОтчета.ТекущаяСтрока;
	ПолеОтбораКомпоновки = ТекущаяСтрокаОтбора.ЛевоеЗначение;
	
	Если ТекущаяСтрокаОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке И ТекущаяСтрокаОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеВСписке Тогда	
		Возврат;
	КонецЕсли;
	
	ЭтоПолеОтбораМетаданных   = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("ОбъектМетаданных");
	ЭтоПолеОтбораРоли         = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("Роль");
	ЭтоПолеОтбораПользователя = ПолеОтбораКомпоновки = Новый ПолеКомпоновкиДанных("ПользовательИБ");	
		
	// редактирование списка значений элемента отбора		
	Если ЭтоПолеОтбораМетаданных Тогда
		РедактируемыйСписокОтбора = СписокОбъектовМетаданных;
		ЗаголовокФормыОтбора = "объекты конфигурации";
		ЗаголовокКолонкиСпискаОтбора = "Объект конфигурации";
	ИначеЕсли ЭтоПолеОтбораРоли Тогда	
		РедактируемыйСписокОтбора = СписокРолей;
		ЗаголовокФормыОтбора = "роли";
		ЗаголовокКолонкиСпискаОтбора = "Роль";
	ИначеЕсли ЭтоПолеОтбораПользователя Тогда	
		РедактируемыйСписокОтбора = СписокПользователейИБ;
		ЗаголовокФормыОтбора = "пользователей ИБ";
		ЗаголовокКолонкиСпискаОтбора = "Пользователь ИБ";
	КонецЕсли;
	
	Если РедактируемыйСписокОтбора.Количество() = 0 Тогда
		Предупреждение("Отсутствуют объекты выбранного вида для настройки отбора!", 10);
		Возврат;
	КонецЕсли;
	
	ФормаОтбораДанных = ПолучитьФорму("ФормаОтбораДанных");
	ФормаОтбораДанных.Заголовок = "Выберите " + ЗаголовокФормыОтбора + " для отбора данных"; 
	ФормаОтбораДанных.СписокОбъектовДляОтбора = РедактируемыйСписокОтбора; 
	ФормаОтбораДанных.ЭлементыФормы.СписокОбъектовДляОтбора.Колонки.Представление.ТекстШапки = ЗаголовокКолонкиСпискаОтбора;
	ФормаОтбораДанных.ОткрытьМодально();
	
	МассивОтобранныхЭлементов = Новый Массив;
	Для каждого ЭлементСписка Из РедактируемыйСписокОтбора Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивОтобранныхЭлементов.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяСтрокаОтбора.ПравоеЗначение.ЗагрузитьЗначения(МассивОтобранныхЭлементов);
	
КонецПроцедуры

Процедура ОтборыОтчетаПравоеЗначениеДляКраткогоОтображенияЭлементаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельПраваВыводПрограммных(Кнопка)
	
	Для каждого СтрокаТаблицыВыводаПрав Из ТаблицаПравДляВывода Цикл	
		СтрокаТаблицыВыводаПрав.Пометка = МассивПрограммныхПрав.Найти(СтрокаТаблицыВыводаПрав.Право) <> Неопределено;		
	КонецЦикла;
	
	ЗаполнитьСтруктуруОтчетаСКД();
	
КонецПроцедуры

Процедура КоманднаяПанельПраваВыводИнтерактивных(Кнопка)
	
	Для каждого СтрокаТаблицыВыводаПрав Из ТаблицаПравДляВывода Цикл	
		СтрокаТаблицыВыводаПрав.Пометка = МассивПрограммныхПрав.Найти(СтрокаТаблицыВыводаПрав.Право) = Неопределено;		
	КонецЦикла;
	
	ЗаполнитьСтруктуруОтчетаСКД();
	
КонецПроцедуры

Процедура ИспользованиеРЛСПриИзменении(Элемент)
	
	Если ОбъектыКонфигурации = "Константы" Тогда		
		Предупреждение("У выбранных объектов конфигурации отсутствует возможность настройки RLS!", 10);
		Возврат;
	КонецЕсли;
	
	СформироватьКолонкиТаблицыПрав(Истина);
	ЗаполнитьСтруктуруОтчетаСКД();
	
КонецПроцедуры

Процедура ДействияФормыСообщитьОбОшибке(Кнопка)	
	ЗапуститьПриложение("mailto:bassgood@yandex.ru");
КонецПроцедуры

//============================ СРАВНЕНИЕ ПРАВ ДВУХ РОЛЕЙ/ПОЛЬЗОВАТЕЛЕЙ НЕ РЕАЛИЗОВАНО ==================================//

Процедура ДействияФормыСравнитьПраваДвухРолей(Кнопка)
	
	СписокВыбораРолей = Новый СписокЗначений;
		
	Для каждого РольМетаданные Из РолиКонфигурации Цикл
		СписокВыбораРолей.Добавить(РольМетаданные, РольМетаданные.Синоним);
	КонецЦикла;
	
	Если НЕ СписокВыбораРолей.ОтметитьЭлементы("Выберите две роли для сравнения") Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяРоль = Неопределено;
	ВтораяРоль = Неопределено;
	ВыбраноБолееДвухРолей = Ложь;
	Для каждого ЭлементСписка Из СписокВыбораРолей Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;                                  
		
		Если ПерваяРоль = Неопределено Тогда
			ПерваяРоль = ЭлементСписка.Значение;
		ИначеЕсли ВтораяРоль = Неопределено Тогда
			ВтораяРоль = ЭлементСписка.Значение;
		Иначе
			ВыбраноБолееДвухРолей = Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ПерваяРоль = Неопределено ИЛИ ВтораяРоль = Неопределено ИЛИ ВыбраноБолееДвухРолей Тогда 
		Предупреждение("Для сравнения прав необходимо выбрать две роли!", 10);
		Возврат;
	КонецЕсли;
	
	СпособГруппировки = "Роли";
	СформироватьКолонкиТаблицыПрав();	
	ЗаполнитьСписокПравДляВывода();

	// сформируем таблицы прав для двух ролей
	ЗаполнитьТаблицуПрав(,ПерваяРоль, Ложь);
	ТаблицаПравПерваяРоль = ТаблицаПрав.Скопировать();
	ТаблицаПрав.Очистить();
	
	ЗаполнитьТаблицуПрав(,ВтораяРоль, Ложь);
	
	//
	Для каждого СтрокаПервойРоли Из ТаблицаПравПерваяРоль Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), СтрокаПервойРоли);
		
		//СтрокаТаблицыПрав = ТаблицаПравПерваяРоль.Добавить();
		//СтрокаТаблицыПрав.ОбъектМетаданных = СтрокаПервойРоли.ОбъектМетаданных;
		//СтрокаТаблицыПрав.Роль = СтрокаПервойРоли.Роль;
		//
		//ИндексСтроки     = ТаблицаПравПерваяРоль.Индекс(СтрокаПервойРоли);
		//СтрокаВторойРоли = ТаблицаПравВтораяРоль.Получить(ИндексСтроки);
		//
		//Для каждого КолонкаСравнения Из ТаблицаПрав.Колонки Цикл
		//	
		//	ИмяКолонки = КолонкаСравнения.Имя;
		//				
		//	Если НЕ ЭтоПолеПрава(ИмяКолонки) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	Если СтрокаПервойРоли[ИмяКолонки] = СтрокаВторойРоли[ИмяКолонки] Тогда
		//		СтрокаТаблицыПрав[ИмяКолонки] = 1;
		//	Иначе	
		//		СтрокаТаблицыПрав[ИмяКолонки] = 0;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
	КонецЦикла;
	
	СформироватьОтчет(Истина);
					
КонецПроцедуры

Процедура ДействияФормыСравнитьПраваДвухПользователей(Кнопка)
	
КонецПроцедуры

