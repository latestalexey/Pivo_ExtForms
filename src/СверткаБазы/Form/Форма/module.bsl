Процедура ЗаполнитьТаблицыРегистровСведений()
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.СписанныеТовары.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.ABCКлассификацияПокупателей.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.ПричиныЗакрытияЗаказов.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.ПланФактПродаж.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.ЦеныНоменклатуры.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.ЦеныНоменклатурыКонтрагентов.Имя;
	//НеИспользуемыеРегистрыСведений.Добавить().Регистр = Метаданные.РегистрыСведений.КассыОстаток.имя;
	//НеИспользуемыеРегистрыСведений.Сортировать("Регистр");
	//НовСтр = ОчищаемыеРегистрыСведений.Добавить();
	//НовСтр.Регистр = Метаданные.РегистрыСведений.ЗначенияСвойствОбъектов.Имя;
	//НовСтр.Поле = "Объект";
	//НовСтр = ОчищаемыеРегистрыСведений.Добавить();
	//НовСтр.Регистр = Метаданные.РегистрыСведений.КатегорииОбъектов.Имя;
	//НовСтр.Поле = "Объект";
	//НовСтр = ОчищаемыеРегистрыСведений.Добавить();
	//НовСтр.Регистр = Метаданные.РегистрыСведений.НазначенияСвойствОбъектов.Имя;
	//НовСтр.Поле = "Объект";
	//НовСтр = ОчищаемыеРегистрыСведений.Добавить();
	//НовСтр.Регистр = Метаданные.РегистрыСведений.ВыдачаТовара.Имя;
	//НовСтр.Поле = "Документ";
	//НовСтр = ОчищаемыеРегистрыСведений.Добавить();
	//НовСтр.Регистр = Метаданные.РегистрыСведений.ПолучениеТовара.Имя;
	//НовСтр.Поле = "Документ";
КонецПроцедуры
Функция ЕстьНаличиеВТаблицеИсключений(Рег)
	Если НеИспользуемыеРегистрыСведений.Найти( Рег, "Регистр") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
Функция ЕстьНаличиеВТаблицеОчищаемых(Рег)
	Если ОчищаемыеРегистрыСведений.Найти( Рег, "Регистр") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
Функция ЕстьНаличиеВТаблицеОчищаемыхНакоплений(Рег)
	Если ОчищаемыеРегистрыНакопления.Найти( Рег, "Регистр") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
Функция ЕстьВЗапрещенных(Вид = "", Тип = "")
	Если Вид = "" Тогда
		Если ЗапрещенныеВидыДокументов.Найти( ЗначениеВСтрокуВнутр(Тип), "ОписаниеТипа") = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если ЗапрещенныеВидыДокументов.Найти( Вид, "Документ") = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции
Процедура ПосчитатьПроцентОбщейСворачиваемости()
	ИтМожно = 0;
	ИтНельзя = 0;
	Для каждого Док из ВидыДокументов Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) как Кол
		|ИЗ
		|	Документ." + Док.Документ + " КАК Док
		|Где Док.Дата <= &Дата И ПометкаУдаления = Ложь";
		Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
		ИтМожно = ИтМожно + Запрос.Выполнить().Выгрузить()[0].Кол;
	КонецЦикла;
	Для каждого Док из ЗапрещенныеВидыДокументов Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) как Кол
		|ИЗ
		|	Документ." + Док.Документ + " КАК Док
		|Где Док.Дата <= &Дата И ПометкаУдаления = Ложь";
		Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
		ИтНельзя = ИтНельзя + Запрос.Выполнить().Выгрузить()[0].Кол;
	КонецЦикла;
	Если итМожно+итНельзя = 0 Тогда
		ЭлементыФормы.ОбщаяИнформация.Заголовок = "В выборке нет документов, измените дату";
	Иначе
		ЭлементыФормы.ОбщаяИнформация.Заголовок = "Общая сворачиваемость на текущих настройках: " + итМожно + " к общему количеству " + (итНельзя+итМожно) + ", общая сворачиваемость " + Окр(итМожно*100/(итМожно+итНельзя), 2) + "%";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТаблицыВидовДокументов()
	ЗапрещенныеВидыДокументов.Очистить();
	ВидыДокументов.Очистить();
	Для каждого Док из Метаданные.Документы Цикл
		Состояние("Обработка документа " + Док.Имя + " ...");
		Регистры = Док.Движения;
		Поиск = Ложь;
		Причина = "";
		Для каждого Рег из Регистры Цикл
			Если Метаданные.РегистрыСведений.Содержит(Рег) Тогда
				Если Строка(Рег.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
					Если Не ЕстьНаличиеВТаблицеИсключений(Рег.Имя) Тогда
						Поиск = Истина;
						Причина = Причина + Рег.Имя + ";";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Строка(Док.УдалениеДвижений) = "НеУдалятьАвтоматически" Тогда
			Поиск = Истина;
			Причина = Причина + "Движения не удаляются автоматически";
		КонецЕсли;
		// посчитаем количество документов
		Если Поиск Тогда
			Стр = ЗапрещенныеВидыДокументов.Добавить();
			Стр.Документ = Док.имя;
			Стр.ОписаниеТипа = ЗначениеВСтрокуВнутр(Тип("ДокументСсылка." + Док.имя));
			стр.Причина = Причина;
		Иначе
			Стр = ВидыДокументов.Добавить();
			Стр.Документ = Док.имя;
		КонецЕсли;
	КонецЦикла;
	Состояние("Обработка ...");
	ВидыДокументов.Сортировать("Документ");
	ЗапрещенныеВидыДокументов.Сортировать("Документ");
	ПосчитатьПроцентОбщейСворачиваемости();
КонецПроцедуры
Процедура ЗаполнитьОчищаемыеРегистрыНакопления()
	ОчищаемыеРегистрыНакопления.Очистить();
	Для каждого Док из ВидыДокументов Цикл
		Движ = Метаданные.Документы.Найти(Док.Документ).Движения;
		Для каждого Рег из Движ Цикл
			Если Метаданные.РегистрыНакопления.Содержит(Рег) Тогда
				Если Строка(Рег.ВидРегистра) = "Остатки" Тогда
					ПоискРегистра = ОчищаемыеРегистрыНакопления.Найти(Рег.Имя, "Регистр");
					Если ПоискРегистра = Неопределено Тогда
						НовСтр = ОчищаемыеРегистрыНакопления.Добавить();
						НовСтр.Регистр = Рег.имя;
						Сп = Новый СписокЗначений;
						сп.Добавить(Док.Документ);
						НовСтр.ВидыДок = ЗначениеВСтрокуВнутр(сп);
					Иначе
						сп = ЗначениеИзСтрокиВнутр(ПоискРегистра.ВидыДок);
						сп.добавить(Док.Документ);
						ПоискРегистра.ВидыДок = ЗначениеВСтрокуВнутр(сп);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КОнецЦикла;
	КОнецЦикла;
КонецПроцедуры
Процедура ЗаполнитьРазрешенныеДокументы()
	РазрешенныеДокументы.Очистить();
	Состояние("Заполнение списка документов к удалению ...");
	Для каждого ВидДок из ВидыДокументов Цикл
		// переберем все документы на удаление запросом и заполним таблицу разрешенных документов
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|Ссылка
		|ИЗ Документ." + ВидДок.Документ + "
		|Где Дата <= &Дата И ПометкаУдаления = Ложь";
		Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
		ТЗ = Запрос.Выполнить().Выгрузить();
		Для каждого стр из ТЗ Цикл
			НовСтр = РазрешенныеДокументы.Добавить();
			НовСтр.Тип = ВидДок.Документ;
			НовСтр.Ссылка = стр.Ссылка;
		КонецЦикла;
	КонецЦикла;
	Если ПоказыватьУдаляемыеДокументы Тогда
		Таб = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("РазрешенныеДокументы");
		Для каждого Док из РазрешенныеДокументы Цикл
			Обл = Макет.ПолучитьОбласть("Строка");
			Обл.Параметры.Документ = Док.Ссылка;
			Таб.Вывести(Обл);
		КонецЦикла;
		Таб.Показать();
	КонецЕсли;
КонецПроцедуры
Функция РаспарситьТипДокумента(Тип)
	Поиск = СтрЗаменить(Тип, "Документ ссылка: ", "");
	Для каждого Док из Метаданные.Документы Цикл
		Если нРег(СокрЛП(Док.Синоним)) = нРег(СокрЛП(Поиск)) Тогда
			Возврат Док.имя;
		КонецЕсли;
	КонецЦикла;
КонецФункции
Функция ПолучитьТЗПоРегиструСведений(РегСВ)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Поле");
	ТЗ.Колонки.Добавить("ОдинТип");
	ТЗ.Колонки.Добавить("ЛишниеТипы");
	ТЗ.Колонки.Добавить("СписокТипов");
	Для каждого Изм из РегСв.Измерения Цикл
		МассТипов = Изм.Тип.Типы();
		лишниеТипы = 0;
		Для каждого Тип из МассТипов Цикл
			// проверим есть ли там документ вообще
			Если Лев(Строка(Тип), 8) <> "Документ" Тогда
				// это не документ!
				лишниеТипы = лишниеТипы+1;
				Продолжить;
			КонецЕсли;
			// документ удалять нельзя, он в измерении
			// проверим в списке запрещенных документов, дабы не плодить инфу!
			Если ЕстьВЗапрещенных( РаспарситьТипДокумента(Тип)) Тогда
				Продолжить;
			КонецЕсли;
			// в запрещенных нету, надо делать запрос!
			Строка = ТЗ.Найти(Изм.Имя, "Поле");
			Если Строка = Неопределено Тогда
				Строка = ТЗ.Добавить();
				Строка.Поле = Изм.имя;
				Строка.СписокТипов = Новый СписокЗначений;
				Строка.ОдинТип = Истина;
			КонецЕсли;
			Если Строка.СписокТипов.Количество() > 0 Тогда
				Строка.ОдинТип = Ложь;
			КонецЕсли;
			Строка.СписокТипов.Добавить(РаспарситьТипДокумента(Тип));
		КонецЦикла;
		Если Строка <> Неопределено Тогда
			Если Строка.Поле = Изм.Имя Тогда
				Строка.ЛишниеТипы = лишниеТипы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Ресурс из РегСв.Ресурсы Цикл
		МассТипов = Ресурс.Тип.Типы();
		лишниеТипы = 0;
		Для каждого Тип из МассТипов Цикл
			// проверим есть ли там документ вообще
			Если Лев(Строка(Тип), 8) <> "Документ" Тогда
				// это не документ!
				лишниеТипы = лишниеТипы+1;
				Продолжить;
			КонецЕсли;
			// документ удалять нельзя, он в ресурсе
			// проверим в списке запрещенных документов, дабы не плодить инфу!
			Если ЕстьВЗапрещенных( РаспарситьТипДокумента(Тип)) Тогда
				Продолжить;
			КонецЕсли;
			// в запрещенных нету, надо делать запрос!
			Строка = ТЗ.Найти(Ресурс.Имя, "Поле");
			Если Строка = Неопределено Тогда
				Строка = ТЗ.Добавить();
				Строка.Поле = Ресурс.имя;
				Строка.СписокТипов = Новый СписокЗначений;
				Строка.ОдинТип = Истина;
			КонецЕсли;
			Если Строка.СписокТипов.Количество() > 0 Тогда
				Строка.ОдинТип = Ложь;
			КонецЕсли;
			Строка.СписокТипов.Добавить(РаспарситьТипДокумента(Тип));
		КонецЦикла;
		Если Строка <> Неопределено Тогда
			Если Строка.Поле = Ресурс.Имя Тогда
				Строка.ЛишниеТипы = лишниеТипы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Реквизит из регСв.реквизиты Цикл
		МассТипов = Реквизит.Тип.Типы();
		лишниеТипы = 0;
		Для каждого Тип из МассТипов Цикл
			// проверим есть ли там документ вообще
			Если Лев(Строка(Тип), 8) <> "Документ" Тогда
				// это не документ!
				лишниеТипы = лишниеТипы+1;
				Продолжить;
			КонецЕсли;
			// документ удалять нельзя, он в Реквизит
			// проверим в списке запрещенных документов, дабы не плодить инфу!
			Если ЕстьВЗапрещенных( РаспарситьТипДокумента(Тип)) Тогда
				Продолжить;
			КонецЕсли;
			// в запрещенных нету, надо делать запрос!
			Строка = ТЗ.Найти(Реквизит.Имя, "Поле");
			Если Строка = Неопределено Тогда
				Строка = ТЗ.Добавить();
				Строка.Поле = Реквизит.имя;
				Строка.СписокТипов = Новый СписокЗначений;
				Строка.ОдинТип = Истина;
			КонецЕсли;
			Если Строка.СписокТипов.Количество() > 0 Тогда
				Строка.ОдинТип = Ложь;
			КонецЕсли;
			Строка.СписокТипов.Добавить(РаспарситьТипДокумента(Тип));
		КонецЦикла;
		Если Строка <> Неопределено Тогда
			Если Строка.Поле = Реквизит.Имя Тогда
				Строка.ЛишниеТипы = лишниеТипы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
Функция ПолучитьТЗПоРегиструНакопления(РегНак)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Поле");
	ТЗ.Колонки.Добавить("ОдинТип");
	ТЗ.Колонки.Добавить("ЛишниеТипы");
	ТЗ.Колонки.Добавить("СписокТипов");
	Для каждого Изм из РегНак.Измерения Цикл
		МассТипов = Изм.Тип.Типы();
		лишниеТипы = 0;
		Для каждого Тип из МассТипов Цикл
			// проверим есть ли там документ вообще
			Если Лев(Строка(Тип), 8) <> "Документ" Тогда
				// это не документ!
				лишниеТипы = лишниеТипы+1;
				Продолжить;
			КонецЕсли;
			// документ удалять нельзя, он в измерении
			// проверим в списке запрещенных документов, дабы не плодить инфу!
			Если ЕстьВЗапрещенных( РаспарситьТипДокумента(Тип)) Тогда
				Продолжить;
			КонецЕсли;
			// в запрещенных нету, надо делать запрос!
			Строка = ТЗ.Найти(Изм.Имя, "Поле");
			Если Строка = Неопределено Тогда
				Строка = ТЗ.Добавить();
				Строка.Поле = Изм.имя;
				Строка.СписокТипов = Новый СписокЗначений;
				Строка.ОдинТип = Истина;
			КонецЕсли;
			Если Строка.СписокТипов.Количество() > 0 Тогда
				Строка.ОдинТип = Ложь;
			КонецЕсли;
			Строка.СписокТипов.Добавить(РаспарситьТипДокумента(Тип));
		КонецЦикла;
		Если Строка <> Неопределено Тогда
			Если Строка.Поле = Изм.Имя Тогда
				Строка.ЛишниеТипы = лишниеТипы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Реквизит из РегНак.реквизиты Цикл
		МассТипов = Реквизит.Тип.Типы();
		лишниеТипы = 0;
		Для каждого Тип из МассТипов Цикл
			// проверим есть ли там документ вообще
			Если Лев(Строка(Тип), 8) <> "Документ" Тогда
				// это не документ!
				лишниеТипы = лишниеТипы+1;
				Продолжить;
			КонецЕсли;
			// документ удалять нельзя, он в Реквизит
			// проверим в списке запрещенных документов, дабы не плодить инфу!
			Если ЕстьВЗапрещенных( РаспарситьТипДокумента(Тип)) Тогда
				Продолжить;
			КонецЕсли;
			// в запрещенных нету, надо делать запрос!
			Строка = ТЗ.Найти(Реквизит.Имя, "Поле");
			Если Строка = Неопределено Тогда
				Строка = ТЗ.Добавить();
				Строка.Поле = Реквизит.имя;
				Строка.СписокТипов = Новый СписокЗначений;
				Строка.ОдинТип = Истина;
			КонецЕсли;
			Если Строка.СписокТипов.Количество() > 0 Тогда
				Строка.ОдинТип = Ложь;
			КонецЕсли;
			Строка.СписокТипов.Добавить(РаспарситьТипДокумента(Тип));
		КонецЦикла;
		Если Строка <> Неопределено Тогда
			Если Строка.Поле = Реквизит.Имя Тогда
				Строка.ЛишниеТипы = лишниеТипы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
Процедура ПоискДокументовВИзмеренияхИРесурсах(Таб)
	Макет = ПолучитьМакет("ЗапрещенныеДокументы");
	Обл = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(Обл);
	Сообщить("" + ТекущаяДата() + ": Контроль списков документов к удалению");
	Удаления = Ложь;
	Для каждого РегСв из Метаданные.РегистрыСведений Цикл
		ОбработкаПрерыванияПользователя();
		Если ЕстьНаличиеВТаблицеОчищаемых(РегСв.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Состояние("Регистр сведений " + регСв.имя + ": Обработка");
		ТЗ = ПолучитьТЗПоРегиструСведений(РегСВ);
		Если ТЗ.Количество() = 0 Тогда
			// в этом регистре сведений ни в измерениях, ни в ресурсах, ни в реквизитах нету документов!
			// либо все виды документов в запрещенных
			Продолжить;
		КонецЕсли;
		// а теперь пишем запрос на получение всех документов по полям
		Состояние("Регистр сведений " + регСв.имя + ": Формирование запроса");
		Запрос = Новый Запрос;
		// заполним поля
		Для каждого стр Из ТЗ Цикл
			Состояние(регСв.имя + " по полю " + стр.Поле + ": Формирование запроса");
			Т = "ВЫБРАТЬ";
			Если Строка(РегСв.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
				Т = Т + "
				|	Регистратор,
				|	Регистратор.Дата КАК РегДата,
				|	" + СокрЛП(стр.Поле) + ",
				|	" + СокрЛП(стр.Поле) + ".Дата как ДатаПоля";
			Иначе
				Т = Т + "
				|	" + СокрЛП(стр.Поле);
			КонецЕсли;
			// теперь клеим условия
			Т = Т + "
			|ИЗ
			|	РегистрСведений." + СокрЛП(РегСв.Имя) + "
			|ГДЕ";
			Если Стр.ОдинТип и стр.ЛишниеТипы = 0 Тогда
				// условие по ссылке не нужно
				Продолжить;
			ИначеЕсли Стр.ОдинТип и стр.ЛишниеТипы > 0 Тогда
				// указываем ссылку только на один тип
				ЕстьУсловия = Истина;
				Т = Т + "
				|	" + Стр.Поле + " ССЫЛКА " + стр.СписокТипов[0];
			Иначе
				ЕстьУсловия = Истина;
				Т = Т + "
				|	(";
				Для каждого Тип из стр.СписокТипов Цикл
					Т = Т + "
					|	" + стр.Поле + " ССЫЛКА Документ." + СокрЛП(Тип.Значение) + " ИЛИ";
				КонецЦикла;
				// удалим последний ИЛИ
				Т = Лев(Т, СтрДлина(Т) - 3);
				// теперь закроем скобку
				Т = Т + "
				|	)";
			КонецЕсли;
			// теперь поставим группировки
			Если Строка(РегСв.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
				Т = Т + "
				|СГРУППИРОВАТЬ ПО
				|	Регистратор,
				|	" + СокрЛП(стр.Поле);
			Иначе
				Т = Т + "
				|СГРУППИРОВАТЬ ПО
				|	" + СокрЛП(стр.Поле);
			КонецЕсли;
			Запрос = Новый Запрос;
			Запрос.Текст = Т;
			ТЗДок = Запрос.Выполнить().Выгрузить();
			Состояние("Регистр сведений " + регСв.имя + " по полю " + стр.Поле + ": Проверка списка документов к удалению ...");
			итКол = ТЗДок.Количество();
			Для Ном = 0 По ТЗДок.Количество() - 1 Цикл
				Док = ТЗДок[Ном];
				Состояние("Регистр сведений " + РегСв.имя + " поле " + стр.Поле + ":Проверка списка документов к удалению ... " + Окр( (Ном+1)*100/итКол, 2) + "%");
				ОбработкаПрерыванияПользователя();
				Если Док.ДатаПоля = NULL Тогда
					Продолжить;
				КонецЕсли;
				Если Док.ДатаПоля > КонецДня(Дата) Тогда
					Продолжить;
				Иначе
					Если Строка(РегСв.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
						// проверим регистратор
						Если Док.РегДата = NULL Тогда
							Продолжить;
						КонецЕсли;
						Если Док.РегДата > КонецДня(Дата) Тогда
							// регистратор который 100% не будет удален
							Поиск = РазрешенныеДокументы.Найти(Док[стр.Поле], "Ссылка");
							Если Поиск <> Неопределено Тогда
								РазрешенныеДокументы.Удалить( Поиск);
								Удаления = Истина;
								Обл = Макет.ПолучитьОбласть("Строка");
								Обл.Параметры.Документ = Строка(Док[стр.Поле]);
								Обл.Параметры.Причина = "Регистр сведений " + регСв.имя + " по полю " + стр.Поле;
								Таб.Вывести(Обл);
							КонецЕсли;
						Иначе
							// регистратор возможно будет удален
							Если РазрешенныеДокументы.Найти(Док.Регистратор, "Ссылка") = Неопределено Тогда
								// регистратор удален не будет
								Поиск = РазрешенныеДокументы.Найти(Док[стр.Поле], "Ссылка");
								Если Поиск <> Неопределено Тогда
									РазрешенныеДокументы.Удалить( Поиск);
									Удаления = Истина;
									Обл = Макет.ПолучитьОбласть("Строка");
									Обл.Параметры.Документ = Строка(Док[стр.Поле]);
									Обл.Параметры.Причина = "Регистр сведений " + регСв.имя + " по полю " + стр.Поле;
									Таб.Вывести(Обл);
								КонецЕсли;
							Иначе
								// регистратор будет удалятся, пофигу на все
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// нет подчинения регистратору
						Поиск = РазрешенныеДокументы.Найти(Док[стр.Поле], "Ссылка");
						Если Поиск <> Неопределено Тогда
							РазрешенныеДокументы.Удалить( Поиск);
							Удаления = Истина;
							Обл = Макет.ПолучитьОбласть("Строка");
							Обл.Параметры.Документ = Строка(Док[стр.Поле]);
							Обл.Параметры.Причина = "Регистр сведений " + регСв.имя + " по полю " + стр.Поле;
							Таб.Вывести(Обл);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	// теперь поищем в регистрах накопления в измерерния
	Для каждого РегНак из Метаданные.РегистрыНакопления Цикл
		ОбработкаПрерыванияПользователя();
		Если ЕстьНаличиеВТаблицеОчищаемыхНакоплений(РегНак.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Состояние("Регистр накопления " + РегНак.имя + ": Обработка ");
		ТЗ = ПолучитьТЗПоРегиструНакопления(РегНак);
		Если ТЗ.Количество() = 0 Тогда
			// в этом регистре накполения ни в измерениях, ни в реквизитах нету документов!
			// либо все виды документов в запрещенных
			Продолжить;
		КонецЕсли;
		// а теперь пишем запрос на получение всех документов по полям
		Состояние("Регистр накопления " + РегНак.имя + " : Формирование запроса");
		Запрос = Новый Запрос;
		// заполним поля
		Для каждого стр Из ТЗ Цикл
			Состояние("Регистр накопления " + РегНак.имя + " поле " + стр.Поле + ": Формирование запроса");
			Т = "ВЫБРАТЬ";
			Т = Т + "
			|	Регистратор,
			|	Регистратор.Дата как РЕГДАТА,
			|	" + СокрЛП(стр.Поле) + ",
			|	" + СокрЛП(стр.Поле) + ".Дата как ДатаПоля";
			// теперь клеим условия
			Т = Т + "
			|ИЗ
			|	РегистрНакопления." + СокрЛП(РегНак.Имя) + "
			|ГДЕ";
			Если Стр.ОдинТип и стр.ЛишниеТипы = 0 Тогда
				// условие по ссылке не нужно
				Продолжить;
			ИначеЕсли Стр.ОдинТип и стр.ЛишниеТипы > 0 Тогда
				// указываем ссылку только на один тип
				ЕстьУсловия = Истина;
				Т = Т + "
				|	" + Стр.Поле + " ССЫЛКА " + стр.СписокТипов[0];
			Иначе
				ЕстьУсловия = Истина;
				Т = Т + "
				|	(";
				Для каждого Тип из стр.СписокТипов Цикл
					Т = Т + "
					|	" + стр.Поле + " ССЫЛКА Документ." + СокрЛП(Тип.Значение) + " ИЛИ";
				КонецЦикла;
				// удалим последний ИЛИ
				Т = Лев(Т, СтрДлина(Т) - 3);
				// теперь закроем скобку
				Т = Т + "
				|	)";
			КонецЕсли;
			// теперь поставим группировки
			Т = Т + "
			|СГРУППИРОВАТЬ ПО";
			Т = Т + "
			|	Регистратор,
			|	" + СокрЛП(стр.Поле);
			Запрос = Новый Запрос;
			Запрос.Текст = Т;
			Запрос.УстановитьПараметр("Период", КонецДня(Дата));
			ТЗДок = Запрос.Выполнить().Выгрузить();
			Состояние("Регистр накопления " + РегНак.имя + " поле " + стр.Поле + ":Проверка списка документов к удалению ...");
			итКол = ТЗДок.Количество();
			Для Ном = 0 По ТЗДок.Количество() - 1 Цикл
				Док = ТЗДок[Ном];
				Состояние("Регистр накопления " + РегНак.имя + " поле " + стр.Поле + ":Проверка списка документов к удалению ... " + Окр( (Ном+1)*100/итКол, 2) + "%");
				ОбработкаПрерыванияПользователя();
				Если Док.ДатаПоля = NULL Тогда
					Продолжить;
				КонецЕсли;
				Если Док.ДатаПоля > КонецДня(Дата) Тогда
					Продолжить;
				Иначе
					// проверим регистратор
					Если Док.РегДата = NULL Тогда
						Продолжить;
					КонецЕсли;
					Если Док.РегДата > КонецДня(Дата) Тогда
						// регистратор который 100% не будет удален
						Поиск = РазрешенныеДокументы.Найти(Док[стр.Поле], "Ссылка");
						Если Поиск <> Неопределено Тогда
							РазрешенныеДокументы.Удалить( Поиск);
							Удаления = Истина;
							Обл = Макет.ПолучитьОбласть("Строка");
							Обл.Параметры.Документ = Строка(Док[стр.Поле]);
							Обл.Параметры.Причина = "Регистр накопления " + РегНак.имя + " по полю " + стр.Поле;
							Таб.Вывести(Обл);
						КонецЕсли;
					Иначе
						// регистратор возможно будет удален
						Если РазрешенныеДокументы.Найти(Док.Регистратор, "Ссылка") = Неопределено Тогда
							// регистратор удален не будет
							Поиск = РазрешенныеДокументы.Найти(Док[стр.Поле], "Ссылка");
							Если Поиск <> Неопределено Тогда
								РазрешенныеДокументы.Удалить( Поиск);
								Удаления = Истина;
								Обл = Макет.ПолучитьОбласть("Строка");
								Обл.Параметры.Документ = Строка(Док[стр.Поле]);
								Обл.Параметры.Причина = "Регистр накопления " + РегНак.имя + " по полю " + стр.Поле;
								Таб.Вывести(Обл);
							КонецЕсли;
						Иначе
							// регистратор будет удалятся, пофигу на все
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Если Удаления Тогда
		Сообщить("" + ТекущаяДата() + ":Перезапуск контроля списков документов к удалению");
		ПоискДокументовВИзмеренияхИРесурсах(Таб);
	КонецЕсли;
КонецПроцедуры
Функция ВернутьМДПоСтроке(Стр, МД = 0)
	// сначала поделим на точки
	Поиск = Найти(Стр, ".");
	Тип = Лев(Стр, Поиск - 1);
	Вид = Сред(Стр, Поиск+1);
	Если Тип = "Справочник" Тогда
		МД = Метаданные.Справочники[Вид];
		Возврат Справочники[Вид];
	ИначеЕсли Тип = "Документ" Тогда
		МД = Метаданные.Документы[Вид];
		Возврат Документы[Вид];
	ИначеЕсли Лев(Тип, 15) = "РегистрСведений" Тогда
		МД = Метаданные.РегистрыСведений[Вид];
		Возврат РегистрыСведений[Вид];
	ИначеЕсли Лев(Тип, 17)= "РегистрНакопления" Тогда
		МД = Метаданные.РегистрыНакопления[Вид];
		Возврат РегистрыНакопления[Вид];
	ИначеЕсли Лев(Тип, 14) = "РегистрРасчета" Тогда
		МД = Метаданные.РегистрыРасчета[Вид];
		Возврат РегистрыРасчета[Вид];
	КонецЕсли;	
КонецФункции
Функция ВернутьТаблицуОстатков()
	ТЗДок = РазрешенныеДокументы.Выгрузить();
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Регистр");
	ТЗ.Колонки.Добавить("ТаблицаОстатков", Новый ОписаниеТипов("ТаблицаЗначений"));
	Для каждого Рег из ОчищаемыеРегистрыНакопления Цикл
		ОбработкаПрерыванияПользователя();
		сп = ЗначениеИзСтрокиВнутр(Рег.ВидыДок);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ОтобранныеДокументы
		|ИЗ
		|	&РазрешенныеДокументы как ТБЛ
		|ГДЕ
		|	ТБЛ.Тип в (&СписокВидов)";
		Запрос.УстановитьПараметр("РазрешенныеДокументы", ТЗДок);
		Запрос.УстановитьПараметр("СписокВидов", сп);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		ЗапросПоОстаткам = Новый Запрос;
		ЗапросПоОстаткам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		// теперь построим запрос по остаткам регистра накоплений
		Регистр = Метаданные.РегистрыНакопления.Найти(Рег.Регистр);
		Т = "ВЫБРАТЬ";
		// здесь сделаем остаток
		Для каждого Ресурс из Регистр.Ресурсы Цикл
			Т = Т + "
			|	ВЫБОР
			|		КОГДА Рег.ВидДвижения = &Приход ТОГДА
			|			" + Ресурс.Имя + "
			|		Иначе
			|			-" + Ресурс.Имя + "
			|	КОНЕЦ как Ост" + Ресурс.Имя + ",";
		КонецЦикла;
		Для каждого Изм из Регистр.Измерения Цикл
			Т = Т + "
			|	Рег." + Изм.Имя + ",";
		КонецЦикла;
		// отрежем последнюю запятую
		Т = Лев( Т, СтрДлина(Т) - 1);
		Т = Т + "
		|ИЗ
		|	(ВЫБРАТЬ ССЫЛКА ИЗ ОтобранныеДокументы) как Док
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления." + Рег.Регистр + " КАК Рег
		|	ПО Док.Ссылка = Рег.Регистратор";
		//|ГДЕ Рег.Активность = ИСТИНА";
		
		// теперь сделаем запрос вложенным и сгруппируем с суммой
		ТВнеш = "ВЫБРАТЬ";
		Для каждого Ресурс из Регистр.Ресурсы Цикл
			ТВнеш = ТВнеш + "
			|	СУММА(Внутр.Ост" + Ресурс.Имя + ") КАК СумОст" + Ресурс.Имя + ",";
		КонецЦикла;
		Для каждого Изм из Регистр.Измерения Цикл
			ТВнеш = ТВнеш + "
			|	Внутр." + Изм.Имя + ",";
		КонецЦикла;
		// отрежем последнюю запятую
		ТВнеш = Лев( ТВнеш, СтрДлина(ТВнеш) - 1);		
		ТВнеш = ТВнеш + "
		|ИЗ (" + Т + ") как Внутр
		|СГРУППИРОВАТЬ ПО";
		Для каждого Изм из Регистр.Измерения Цикл
			ТВнеш = ТВнеш + "
			|	Внутр." + Изм.Имя + ",";
		КонецЦикла;
		// отрежем последнюю запятую
		ТВнеш = Лев( ТВнеш, СтрДлина(ТВнеш) - 1);
		ТВнеш = ТВнеш + "
		|ИМЕЮЩИЕ";
		Для каждого Ресурс из Регистр.Ресурсы Цикл
			ТВнеш = ТВнеш + "
			|	(СУММА(Внутр.Ост" + Ресурс.Имя + ") <> 0) ИЛИ";
		КонецЦикла;
		// отрежем последнее ИЛИ
		ТВнеш = Лев( ТВнеш, СтрДлина(ТВнеш) - 3);
		ЗапросПоОстаткам.Текст = ТВнеш;
		ЗапросПоОстаткам.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		ЗапросПоОстаткам.УстановитьПараметр("Дата", КонецДня(дата));
		// запишем в таблицу остатков
		НовСтр = ТЗ.Добавить();
		НовСтр.Регистр = Рег.Регистр;
		Состояние("Выполнение запроса по остаткам регистра накопления " + Рег.Регистр);
		НовСтр.ТаблицаОстатков = ЗапросПоОстаткам.Выполнить().Выгрузить();
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
Процедура Свертка()
	ТЗ = ВернутьТаблицуОстатков();
	Сообщить("" + ТекущаяДата() + ": Получены остатки по удаляемым документам");
	// создадим документ
	Состояние("Создание документов с остатками ...");
	итКолЗаписей = 0;
	Для каждого Рег из ТЗ Цикл
		Состояние("Создание документа по регистру " + Рег.Регистр + " ...");
		колСтр = Рег.ТаблицаОстатков.Количество();
		Если колСтр = 0 Тогда
			Продолжить;
		КонецЕсли;
		НовДок = Документы.КорректрировкаЗаписейРегистра.СоздатьДокумент();
		НовДок.Дата = КонецДня( Дата);
		НовДок.Комментарий = "Ввод остатков по регистру накопления " + Рег.Регистр;
		НовДок.Записать( РежимЗаписиДокумента.Запись);
		НовДок.Записать( РежимЗаписиДокумента.Проведение);
		НовДок.Движения.Найти(Рег.Регистр);
		Набор = НовДок.Движения.Найти(Рег.Регистр);
		Набор.Прочитать();
		Набор.Очистить();
		итКолЗаписей = итКолЗаписей + колСтр;
		Для ном = 0 по КолСтр - 1 Цикл
			стр = Рег.ТаблицаОстатков[Ном];
			Состояние("Создание документа по регистру " + Рег.Регистр + " ... " + Окр(Ном*100/КолСтр, 2) + "%");
			НовСтр = Набор.Добавить();
			НовСтр.Активность = Истина;
			НовСтр.Период = КонецДня(Дата);
			НовСтр.ВидДвижения = ВидДвиженияНакопления.Приход;
			// переберем колонки
			Для каждого Кол из Рег.ТаблицаОстатков.Колонки Цикл
				Если Лев(Кол.Имя, 6) = "СумОст" Тогда
					НовСтр[Сред(Кол.Имя, 7)] = стр[Кол.Имя];
				Иначе
					НовСтр[Кол.Имя] = стр[Кол.Имя];
				КонецЕсли;
			КонецЦикла;
			// проверим кратность строки, может пора создавать новый документ
			Деление = (Ном+1) / КоличествоЗаписейДокументов;
			Если (Деление) = Окр(Деление) Тогда
				Состояние("Запись движений документа по регистру " + рег.Регистр + " ( всего строк " + КолСтр + "; текущее " + Окр(Ном*100/КолСтр, 2) + "%)...");
				Набор.Записать();
				// создадим ещё один документ
				НовДок = Документы.КорректрировкаЗаписейРегистра.СоздатьДокумент();
				НовДок.Дата = КонецДня( Дата);
				НовДок.Комментарий = "Ввод остатков по регистру накопления " + Рег.Регистр;
				НовДок.Записать( РежимЗаписиДокумента.Запись);
				НовДок.Записать( РежимЗаписиДокумента.Проведение);
				НовДок.Движения.Найти(Рег.Регистр);
				Набор = НовДок.Движения.Найти(Рег.Регистр);
				Набор.Прочитать();
				Набор.Очистить();
			КонецЕсли;
		КонецЦикла;
		Состояние("Запись движений документа по регистру " + рег.Регистр + " ( всего строк " + КолСтр + ", " + Окр(Ном*100/КолСтр, 2) + "%)...");
		Набор.Записать();
	КонецЦикла;
	Сообщить("" + ТекущаяДата() + ": Созданы документы по вводу остатков регистров");
	Сообщить("Всего новых записей регистров " + итКолЗаписей);
    // очистим регистры сведений
	Состояние("Очистка регистров сведений ...");
	ЗаписейУдалено = 0;
	Для каждого Рег из ОчищаемыеРегистрыСведений Цикл
		Состояние("Очистка регистра сведений " + Рег.Регистр + "...");
		// создадим временную таблицу со списком докумнетов
		ЗапросПоДокументам = Новый Запрос;
		ЗапросПоДокументам.Текст = "ВЫБРАТЬ ССЫЛКА ПОМЕСТИТЬ ОтобранныеДокументы
		|ИЗ
		|	&РазрешенныеДокументы как ТБЛ";
		ЗапросПоДокументам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросПоДокументам.УстановитьПараметр("РазрешенныеДокументы", РазрешенныеДокументы);
        ЗапросПоДокументам.Выполнить();
		// теперь сделаем запрос по регистру сведений
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Рег.* ИЗ ОтобранныеДокументы ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + Рег.Регистр + " как РЕГ ПО ОтобранныеДокументы.Ссылка = " + Рег.Поле;
		Запрос.МенеджерВременныхТаблиц = ЗапросПоДокументам.МенеджерВременныхТаблиц;
		ТЗ = Запрос.Выполнить().Выгрузить();
		Регистр = Метаданные.РегистрыСведений.Найти(Рег.Регистр);
		Менеджер = ВернутьМДПоСтроке( "РегистрСведений." + Рег.Регистр);
		Кол = 0;
		Для каждого стр из ТЗ Цикл
			Кол = Кол + 1;
			Состояние("Очистка регистра сведений " + Рег.Регистр + "... " + Окр(Кол*100/тз.Количество(),2) + "%");
			Если стр[0] = NULL Тогда
				Продолжить;
			КонецЕсли;
			Набор = Менеджер.СоздатьНаборЗаписей();
			Если Регистр.ОсновнойОтборПоПериоду Тогда
				Набор.Отбор.Период.Установить(стр.Период);
			КонецЕсли;
			Для каждого Изм из Регистр.Измерения Цикл
				Набор.Отбор[Изм.Имя].Установить(Стр[Изм.Имя]);
			КонецЦикла;
			Набор.Прочитать();
			// запишем с замещением
			Для каждого Запись Из Набор Цикл
				ЗаписейУдалено = ЗаписейУдалено + 1;
				Набор.Удалить(Запись);
			КонецЦикла;
			Набор.Записать(Истина);
		КонецЦикла;
	КонецЦикла;
	Сообщить("" + ТекущаяДата() + ": Очищены не подчиненные регистры сведений, " + ЗаписейУдалено + " записей");
    ВремяНачала = ТекущаяДата();
	ПредыдущееВремя = ВремяНачала;
	ПорядковыйНомер = 0;
	Состояние("Удаление документов ...");
	итКол = РазрешенныеДокументы.Количество();
	Для каждого Док из РазрешенныеДокументы Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		// расчет сколько времени осталось
		СреднееВремяОдногоДокумента = (ТекущаяДата() - ВремяНачала)/ПорядковыйНомер;
		ВремяПредыдущего = ТекущаяДата() - ПредыдущееВремя;
		РасчетноеВремя = СреднееВремяОдногоДокумента;
		// если время предыдущего больше среднего, то расчитываем по среднему
		Если ВремяПредыдущего > СреднееВремяОдногоДокумента*1.5 Тогда
			РасчетноеВремя = Окр(СреднееВремяОдногоДокумента*1,1, 0);
		КонецЕсли;
		ОсталосьСекунд = (итКол - ПорядковыйНомер)*РасчетноеВремя;
		Часы = Цел(ОсталосьСекунд/(60*60));
		Минуты = Цел((ОсталосьСекунд - Часы*60*60)/60);
		Состояние("(Осталось " + Часы + " ч. " + минуты + " м.) Установка пометки удаления " + Окр(Док.НомерСтроки*100/итКол,2) + "% : " + Док.Ссылка);
		ПредыдущееВремя = ТекущаяДата();
		// собственно обработка документа
		Попытка
			Если Док.Ссылка.Проведен Тогда
				Док.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			Если Не Док.Ссылка.ПометкаУдаления Тогда
				Док.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		Исключение
			Сообщить("Документ " + Док.Ссылка + " не обработан, по причине
			|" + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	Сообщить("Удалено " + итКол + " документов");

	Сообщить("" + ТекущаяДата() + ": Конец");
КонецПроцедуры
//--------------------------------------------------------------------------
// кнопки формы
Процедура ВыполнитьНажатие(Элемент)
	Свертка();
КонецПроцедуры
Процедура АнализНажатие(Элемент)
	ОбработкаПрерыванияПользователя();
	Сообщить("" + ТекущаяДата() + ": Начало");
	ЗаполнитьРазрешенныеДокументы();
	Сообщить("" + ТекущаяДата() + ": Заполнение списков документов к удалению");
	ЗаполнитьОчищаемыеРегистрыНакопления();
	ХотелиУдалить = РазрешенныеДокументы.Количество();
	ЭлементыФормы.ИтоговаяИнформация.Заголовок = "Хотели удалить " + ХотелиУдалить;
	Если Не ПростоСворачивать Тогда
		Таб = Новый ТабличныйДокумент;
		ПоискДокументовВИзмеренияхИРесурсах(Таб);
		Таб.Показать();
	КонецЕсли;
	Если ХотелиУдалить = 0 Тогда
		ЭлементыФормы.ИтоговаяИнформация.Заголовок = "Удалять нечего";
	Иначе
		ЭлементыФормы.ИтоговаяИнформация.Заголовок = ЭлементыФормы.ИтоговаяИнформация.Заголовок + ", к удалению " + РазрешенныеДокументы.Количество() + "; сворачиваемость " + Окр(100*РазрешенныеДокументы.Количество()/ХотелиУдалить, 2) + "%";
		ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры
Процедура Кнопка1Нажатие(Элемент)
	СпВыбора = Новый СписокЗначений;
	Для каждого Рег из Метаданные.РегистрыСведений Цикл
		Если Строка(Рег.РежимЗаписи) <> "ПодчинениеРегистратору" Тогда
			Продолжить;
		КонецЕсли;
		Если НеИспользуемыеРегистрыСведений.Найти(Рег.Имя, "Регистр") = Неопределено Тогда
			спВыбора.Добавить(Рег.имя);
		КонецЕсли;
	КонецЦикла;
	СпВыбора.СортироватьПоЗначению();
	Выбор = СпВыбора.ВыбратьЭлемент( "Выберите регистр сведений");
	Если Выбор <> Неопределено Тогда
		Если НеИспользуемыеРегистрыСведений.Найти( Выбор.Значение, "Регистр") = Неопределено Тогда
			НеИспользуемыеРегистрыСведений.Добавить().Регистр = Выбор.Значение;
			НеИспользуемыеРегистрыСведений.Сортировать("Регистр");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура Кнопка2Нажатие(Элемент)
	Если ЭлементыФормы.НеИспользуемыеРегистрыСведений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НеИспользуемыеРегистрыСведений.Удалить( ЭлементыФормы.НеИспользуемыеРегистрыСведений.ТекущиеДанные);
КонецПроцедуры
Процедура Кнопка3Нажатие(Элемент)
	Если ЭлементыФормы.ВидыДокументов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ЭлементыФормы.ВидыДокументов.ТекущиеДанные;
	ЗапрещенныеВидыДокументов.Добавить().Документ = ТекДанные.Документ;
	ВидыДокументов.Удалить( ТекДанные);
	ЗапрещенныеВидыДокументов.Сортировать("Документ");
	ПосчитатьПроцентОбщейСворачиваемости();
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
КонецПроцедуры
Процедура Кнопка4Нажатие(Элемент)
	СпВыбора = Новый СписокЗначений;
	Для каждого Рег из Метаданные.РегистрыСведений Цикл
		Если Строка(Рег.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
			Продолжить;
		КонецЕсли;
		Если ОчищаемыеРегистрыСведений.Найти( Рег.имя, "Регистр") = Неопределено Тогда
			спВыбора.Добавить(Рег.имя);
		КонецЕсли;
	КонецЦикла;
	СпВыбора.СортироватьПоЗначению();
	Выбор = СпВыбора.ВыбратьЭлемент( "Выберите регистр сведений");
	Если Выбор <> Неопределено Тогда
		Если ОчищаемыеРегистрыСведений.Найти( Выбор.Значение, "Регистр") = Неопределено Тогда
			ОчищаемыеРегистрыСведений.Добавить().Регистр = Выбор.Значение;
			ОчищаемыеРегистрыСведений.Сортировать("Регистр");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура Кнопка5Нажатие(Элемент)
	Если ЭлементыФормы.ОчищаемыеРегистрыСведений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОчищаемыеРегистрыСведений.Удалить( ЭлементыФормы.ОчищаемыеРегистрыСведений.ТекущиеДанные);
КонецПроцедуры
Процедура Кнопка6Нажатие(Элемент)
	Если ЭлементыФормы.ВидыДокументов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ЭлементыФормы.ВидыДокументов.ТекущиеДанные;
	Пока ВидыДокументов.Количество() <> 1 Цикл
		Для каждого Стр из ВидыДокументов Цикл
			Если Стр = ТекДанные Тогда
				Продолжить;
			КонецЕсли;
			ЗапрещенныеВидыДокументов.Добавить().Документ = Стр.Документ;
			ВидыДокументов.Удалить( Стр);
		КонецЦикла;
	КонецЦикла;
	ЗапрещенныеВидыДокументов.Сортировать("Документ");
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
КонецПроцедуры
Процедура Кнопка7Нажатие(Элемент)
	ЗаполнитьТаблицыВидовДокументов();
	ЗаполнитьОчищаемыеРегистрыНакопления();
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Анализ.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
КонецПроцедуры
Процедура ОсновныеДействияФормыДействие(Кнопка)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Регистр");
	ТЗ.Колонки.Добавить("Результат");
	Регистры = Метаданные.РегистрыНакопления;
	Для Ном = 0 По Регистры.Количество() - 1 Цикл
		#Если Клиент Тогда
			Состояние("Выполнено " + Окр(Ном/Регистры.Количество(), 2)*100 + "%...");
		#КонецЕсли
		Регистр = Регистры[Ном];
		Если Строка(Регистр.ВидРегистра) = "Обороты" Тогда
			Продолжить;
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток,";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		// теперь поставим выборку ИЗ
		Запрос.Текст = Запрос.Текст + "
		|Из
		|	РегистрНакопления." + Регистр.Имя + ".Остатки КАК Рег";
		Стр = ТЗ.Добавить();
		Стр.Регистр = Регистр.Имя;
		//Запрос.УстановитьПараметр("Дата", НачалоДня(Дата+1));
		Стр.Результат = Запрос.Выполнить().Выгрузить();
	КонецЦикла;
	// теперь выводим таблицу
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ОбщийДляАрхивов");
	Обл = Макет.ПолучитьОбласть("ШапкаРегистров");
	Обл.Параметры.Узел = ПланыОбмена.Реплика.ЭтотУзел().Наименование;
	Обл.Параметры.Дата = НачалоДня(Дата+60*60*24);
	Таб.Вывести(Обл);
	Для каждого стр из ТЗ Цикл
		Обл = Макет.ПолучитьОбласть("Регистр|Заголовок");
		Обл.Параметры.Регистр = стр.Регистр;
		Таб.Вывести(Обл);
		Для Ном = 0 По стр.Результат.Колонки.Количество() - 1 Цикл
			Обл = Макет.ПолучитьОбласть("Регистр|ресурсы");
			Обл.Параметры.Имя = стр.Результат.Колонки[Ном].Имя;
			Обл.Параметры.Значение = стр.Результат.Получить(0)[Ном];
			Таб.Присоединить(Обл);
		КонецЦикла;
	КонецЦикла;
    Таб.Показать();
КонецПроцедуры
Процедура Кнопка8Нажатие(Элемент)
	ЭтаФорма.Закрыть();
КонецПроцедуры
Процедура КоманднаяПанель1Действие5(Кнопка)
	Если Вопрос("Документы будут удалены. Свертки не будет! Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Внимание") = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	структ = Новый Структура;
	структ.Вставить("Дата", Дата);
	структ.Вставить("Свертка", Истина);
    ВремяНачала = ТекущаяДата();
	ПредыдущееВремя = ВремяНачала;
	ПорядковыйНомер = 0;
	Состояние("Удаление документов ...");
	итКол = РазрешенныеДокументы.Количество();
	Для каждого Док из РазрешенныеДокументы Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		// расчет сколько времени осталось
		СреднееВремяОдногоДокумента = (ТекущаяДата() - ВремяНачала)/ПорядковыйНомер;
		ВремяПредыдущего = ТекущаяДата() - ПредыдущееВремя;
		РасчетноеВремя = СреднееВремяОдногоДокумента;
		// если время предыдущего больше среднего, то расчитываем по среднему
		Если ВремяПредыдущего > СреднееВремяОдногоДокумента*1.5 Тогда
			РасчетноеВремя = Окр(СреднееВремяОдногоДокумента*1,1, 0);
		КонецЕсли;
		ОсталосьСекунд = (итКол - ПорядковыйНомер)*РасчетноеВремя;
		Часы = Цел(ОсталосьСекунд/(60*60));
		Минуты = Цел((ОсталосьСекунд - Часы*60*60)/60);
		Состояние("(Осталось " + Часы + " ч. " + минуты + " м.) Установка пометки удаления " + Окр(Док.НомерСтроки*100/итКол,2) + "% : " + Док.Ссылка);
		ПредыдущееВремя = ТекущаяДата();
		// собственно обработка документа
		Попытка
			Если Док.Ссылка.Проведен Тогда
				Док.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			Если Не Док.Ссылка.ПометкаУдаления Тогда
				Док.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		Исключение
			Сообщить("Документ " + Док.Ссылка + " не обработан, по причине
			|" + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
	Сообщить("Удалено " + итКол + " документов");
	структ.Свертка = Ложь;

	Сообщить("" + ТекущаяДата() + ": Конец");
КонецПроцедуры
Процедура КоманднаяПанель1Действие(Кнопка)
	Выбор = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Выбор.Каталог = "C:\";
	Выбор.Фильтр = "Таблицы mxl(*.mxl*)|*.mxl";
	Если Не Выбор.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	ФайлСохранения = Выбор.ВыбранныеФайлы[0];
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПолныеОстатки");
	Регистры = Метаданные.РегистрыНакопления;
	Для Ном = 0 По Регистры.Количество() - 1 Цикл
		ОбработкаПрерыванияПользователя();
		Регистр = Регистры[Ном];
		Если Строка(Регистр.ВидРегистра) = "Обороты" Тогда
			Продолжить;
		КонецЕсли;
		Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
		Обл.Параметры.Регистр = Регистр.Имя;
		Таб.Вывести(Обл);
		ОбщийПроцент = Окр(Ном/Регистры.Количество(), 2)*100;		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Измерение.Имя + ",";
		КонецЦикла;
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток,";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		// теперь поставим выборку ИЗ
		Запрос.Текст = Запрос.Текст + "
		|Из
		|	РегистрНакопления." + Регистр.Имя + ".Остатки КАК Рег
		|УПОРЯДОЧИТЬ ПО";
		// добавим сортировку, чтобы во всех базах был одинаковый результат запроса
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Измерение.Имя + ",";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		//Запрос.УстановитьПараметр("Дата", НачалоДня(Дата+1));
		Состояние("( Обш. " + ОбщийПроцент + "%) Выполнение запроса по регистру " + Регистр.Имя + "...");
		Результат = Запрос.Выполнить().Выгрузить();
		Состояние("( Обш. " + ОбщийПроцент + "%) Вывод данных по регистру " + Регистр.Имя + "..." );
		// нарисуем колонки
		Для каждого Колонка из Результат.Колонки Цикл
			Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
			Обл.Параметры.Кол = Колонка.Имя;
			Таб.Присоединить(Обл);
		КонецЦикла;
		// теперь выведем строки
		ИтКол = Результат.Количество();
		Для Ном2 = 0 По ИтКол - 1 Цикл
			ОбработкаПрерыванияПользователя();
			Состояние("( Обш. " + ОбщийПроцент + "%) Вывод данных по регистру " + Регистр.Имя + "... " + Окр((Ном2+1)*100/итКол,2) + "%");
			Стр = Результат[Ном2];
			Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
			Обл.Параметры.НомСтр = Ном2;
			Таб.Вывести(Обл);
			Для каждого Колонка из Результат.Колонки Цикл
				Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
				Обл.Параметры.Значение = Стр[Колонка.Имя];
				Таб.Присоединить(Обл);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Таб.Записать(ФайлСохранения, ТипФайлаТабличногоДокумента.MXL);
КонецПроцедуры
Процедура КоманднаяПанель1Действие1(Кнопка)
	Выбор = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Выбор.Каталог = "C:\";
	Выбор.Фильтр = "Текстовые файлы(*.txt*)|*.txt";
	Если Не Выбор.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	ОбщТЗ = Новый ТаблицаЗначений;
	ОбщТЗ.Колонки.Добавить("Регистр");
	ОбщТЗ.Колонки.Добавить("Остатки", Новый ОписаниеТипов("ТаблицаЗначений"));
	ФайлСохранения = Выбор.ВыбранныеФайлы[0];
	Регистры = Метаданные.РегистрыНакопления;
	Для Ном = 0 По Регистры.Количество() - 1 Цикл
		ОбработкаПрерыванияПользователя();
		Регистр = Регистры[Ном];
		Если Строка(Регистр.ВидРегистра) = "Обороты" Тогда
			Продолжить;
		КонецЕсли;
		ОбщийПроцент = Окр(Ном/Регистры.Количество(), 2)*100;		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Измерение.Имя + ",";
		КонецЦикла;		
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток,";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		// теперь поставим выборку ИЗ
		Запрос.Текст = Запрос.Текст + "
		|Из
		|	РегистрНакопления." + Регистр.Имя + ".Остатки КАК Рег
		|ГДЕ";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток <> 0 ИЛИ";
		КонецЦикла;
		// уберем ИЛИ
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО";
		// добавим сортировку, чтобы во всех базах был одинаковый результат запроса
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток,";
		КонецЦикла;
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Измерение.Имя + ",";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		//Запрос.УстановитьПараметр("Дата", НачалоДня(Дата+1));
		Состояние("(" + ОбщийПроцент + "%) Выполнение запроса по регистру " + Регистр.Имя + "...");
		Результат = Запрос.Выполнить().Выгрузить();
		НовСтр = ОбщТЗ.Добавить();
		НовСтр.Регистр = Регистр.Имя;
		НовСтр.Остатки = Результат;
	КонецЦикла;
	Состояние("Запись файла");
	ЗначениеВФайл(ФайлСохранения, ОбщТЗ);
КонецПроцедуры
Процедура КоманднаяПанель1Действие2(Кнопка)
	Выбор = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Выбор.Каталог = "C:\";
	Выбор.Фильтр = "Текстовые файлы(*.txt*)|*.txt";
	Если Не Выбор.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	ФайлОткрытия = Выбор.ВыбранныеФайлы[0];
	Состояние("Чтение старого снимка");
	СтарТЗ = ЗначениеИзФайла(ФайлОткрытия);
	
	ОбщТЗ = Новый ТаблицаЗначений;
	ОбщТЗ.Колонки.Добавить("Регистр");
	ОбщТЗ.Колонки.Добавить("Остатки", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПолныеОстатки");
	
	Регистры = Метаданные.РегистрыНакопления;
	Для Ном = 0 По Регистры.Количество() - 1 Цикл
		ОбработкаПрерыванияПользователя();
		Регистр = Регистры[Ном];
		Если Строка(Регистр.ВидРегистра) = "Обороты" Тогда
			Продолжить;
		КонецЕсли;
		ОбщийПроцент = Окр(Ном/Регистры.Количество(), 2)*100;		
		Запрос = Новый Запрос;
		// поместим в менеджер старые остатки
		СтарСтрока = СтарТЗ.найти(Регистр.Имя, "Регистр");
		Если СтарСтрока = Неопределено Тогда
			Сообщить("Не найден регистр " + Регистр.Имя + " в старом снимке");
			Продолжить;
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ стар ИЗ &СтарыеОстатки как стар";
		Запрос.УстановитьПараметр("СтарыеОстатки", СтарСтрока.Остатки);
		Состояние("(" + ОбщийПроцент + "%) Выборка старых остатков по регистру " + Регистр.Имя + "...");
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Измерение.Имя + ",";
		КонецЦикла;		
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток,";
		КонецЦикла;
		// уберем запятую
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
		// теперь поставим выборку ИЗ
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ Тек
		|Из
		|	РегистрНакопления." + Регистр.Имя + ".Остатки КАК Рег
		|ГДЕ";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Запрос.Текст = Запрос.Текст + "
			|Рег." + Ресурс.Имя + "Остаток <> 0 ИЛИ";
		КонецЦикла;
		// уберем ИЛИ
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
		//Запрос.УстановитьПараметр("Дата", НачалоДня(Дата+1));
		Состояние("(" + ОбщийПроцент + "%) Выполнение запроса по регистру " + Регистр.Имя + "...");
		Запрос.Выполнить();
		
		// теперь пишем запрос на разницу таблиц
		Сравнение = Новый Запрос;
		Сравнение.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		Сравнение.Текст = "ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|Тек." + Измерение.Имя + ",";
		КонецЦикла;
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|ЕСТЬNULL(Тек." + Ресурс.Имя + "Остаток, Неопределено) КАК " + Ресурс.Имя + "ОстатокТек,
			|ЕСТЬNULL(Стар." + Ресурс.Имя + "Остаток, Неопределено) КАК " + Ресурс.Имя + "ОстатокСтар,";
		КонецЦикла;				
		// уберем запятую
		Сравнение.Текст = Лев(Сравнение.Текст, СтрДлина(Сравнение.Текст)-1);
		Сравнение.Текст = Сравнение.Текст + "
		|ИЗ
		|	Тек
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Стар ПО";
		// перечислим соединения
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|Тек." + Измерение.Имя + " = Стар." + Измерение.Имя + " И";
		КонецЦикла;
		// уберем И
		Сравнение.Текст = Лев(Сравнение.Текст, СтрДлина(Сравнение.Текст)-1);
		// теперь наложим условия ГДЕ
		Сравнение.Текст = "ВЫБРАТЬ * ИЗ (" + Сравнение.Текст + ") как Влож
		|ГДЕ
		|	(";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|	Влож." + Ресурс.Имя + "ОстатокТек <> Влож." + Ресурс.Имя + "ОстатокСтар ИЛИ";
		КонецЦикла;
		// уберем ИЛИ
		Сравнение.Текст = Лев(Сравнение.Текст, СтрДлина(Сравнение.Текст)-3);
		Сравнение.Текст = Сравнение.Текст + "
		|	)
		|	ИЛИ
		|	(";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|	Влож." + Ресурс.Имя + "ОстатокСтар = Неопределено И";
		КонецЦикла;
		// уберем И
		Сравнение.Текст = Лев(Сравнение.Текст, СтрДлина(Сравнение.Текст)-1);
		Сравнение.Текст = Сравнение.Текст + "
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		ВложенныйДляNULL = "
		|ВЫБРАТЬ";
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			ВложенныйДляNULL = ВложенныйДляNULL + "
			|Стар." + Измерение.Имя + ",";
		КонецЦикла;
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			ВложенныйДляNULL = ВложенныйДляNULL + "
			|ЕСТЬNULL(Тек." + Ресурс.Имя + "Остаток, Неопределено) КАК " + Ресурс.Имя + "ОстатокТек,
			|ЕСТЬNULL(Стар." + Ресурс.Имя + "Остаток, Неопределено) КАК " + Ресурс.Имя + "ОстатокСтар,";
		КонецЦикла;				
		// уберем запятую
		ВложенныйДляNULL = Лев(ВложенныйДляNULL, СтрДлина(ВложенныйДляNULL)-1);
		ВложенныйДляNULL = ВложенныйДляNULL + "
		|ИЗ
		|	Тек
		|	ПРАВОЕ СОЕДИНЕНИЕ
		|	Стар ПО";
		// перечислим соединения
		Для Ном2 = 0 По Регистр.Измерения.Количество() - 1 Цикл
			Измерение = Регистр.Измерения[Ном2];
			ВложенныйДляNULL = ВложенныйДляNULL + "
			|Тек." + Измерение.Имя + " = Стар." + Измерение.Имя + " И";
		КонецЦикла;
		// уберем И
		ВложенныйДляNULL = Лев(ВложенныйДляNULL, СтрДлина(ВложенныйДляNULL)-1);
		// теперь наложим условия ГДЕ
		Сравнение.Текст = СРАВНЕНИЕ.Текст + "ВЫБРАТЬ * ИЗ (" + ВложенныйДляNULL + ") как Влож
		|ГДЕ
		|	(";
		Для Ном2 = 0 По Регистр.Ресурсы.Количество() - 1 Цикл
			Ресурс = Регистр.Ресурсы[Ном2];
			Сравнение.Текст = Сравнение.Текст + "
			|	Влож." + Ресурс.Имя + "ОстатокТек = Неопределено И";
		КонецЦикла;
		// уберем И
		Сравнение.Текст = Лев(Сравнение.Текст, СтрДлина(Сравнение.Текст)-1);
		Сравнение.Текст = Сравнение.Текст + "
		|	)";
        Состояние("(" + ОбщийПроцент + "%) Выполнение запроса сравнения по регистру " + Регистр.Имя + "...");
		ТЗСравнения = Сравнение.Выполнить().Выгрузить();
		Если ТЗСравнения.Количество() > 0 Тогда
			// выводим шапку
			Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
			Обл.Параметры.Регистр = Регистр.Имя;
			Таб.Вывести(Обл);		
			// нарисуем колонки
			Для каждого Колонка из ТЗСравнения.Колонки Цикл
				Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
				Обл.Параметры.Кол = Колонка.Имя;
				Таб.Присоединить(Обл);
			КонецЦикла;
		Иначе
			Продолжить;
		КонецЕсли;
		// теперь выводим разницу
		НомСтр = 0;
		Для каждого стр из ТЗСравнения Цикл
			// сразу выводим на экран
			Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
			НомСтр = НомСтр + 1;
			Обл.Параметры.НомСтр = НомСтр;
			Таб.Вывести(Обл);
			Для каждого Колонка из ТЗСравнения.Колонки Цикл
				Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
				Обл.Параметры.Значение = стр[Колонка.Имя];
				Таб.Присоединить(Обл);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Состояние("Сравнение таблиц");
	//Если ОбщТЗ.Количество() <> СтарТЗ.Количество() Тогда
	//	Сообщить("В таблицах разное количество регистров, сравнение бессмысленно!");
	//	Возврат;
	//КонецЕсли;
	//Для Ном = 0 По ОбщТЗ.Количество() - 1 Цикл
	//	// сразу рулим в строки
	//	СтрокаОбщ = ОбщТЗ[Ном];
	//	Поиск = СтарТЗ.Найти(СтрокаОбщ.Регистр, "Регистр");
	//	Если Поиск = Неопределено Тогда
	//		Сообщить("В старой таблице остатков не найден регистр " + СтрокаОбщ.Регистр);
	//		Продолжить;
	//	КонецЕсли;
	//	ВыводШапки = Ложь;
	//	НомСтр = 0;
	//	ИтКол = СтрокаОбщ.Остатки.Количество();
	//	// вычислим измерения и ресурсы для поиска
	//	ИскомыйРегистр = Метаданные.РегистрыНакопления.Найти(СтрокаОбщ.Регистр);
	//	Если ИскомыйРегистр = Неопределено Тогда
	//		Сообщить("Критическая ошибка сравнения по регистру " + СтрокаОбщ.Регистр);
	//		Продолжить;
	//	КонецЕсли;
	//	спИзмерений = Новый СписокЗначений;
	//	Для каждого Измерение из ИскомыйРегистр.Измерения Цикл
	//		спИзмерений.Добавить(Измерение.Имя);
	//	КонецЦикла;
	//	спРесурсов = Новый СписокЗначений;
	//	Для каждого Ресурс из ИскомыйРегистр.Ресурсы Цикл
	//		спРесурсов.Добавить(Ресурс.Имя + "Остаток");
	//	КонецЦикла;
	//	Если итКол <> 0 Тогда
	//		Состояние("Сравнение остатков по регистру " + СтрокаОбщ.Регистр + " ...");
	//	КонецЕсли;
	//	// сначала пробежимся левой стороной
	//	НомерСтроки = 0;
	//	Для каждого стр из СтрокаОбщ.Остатки Цикл
	//		ОбработкаПрерыванияПользователя();
	//		НомерСтроки = НомерСтроки + 1;
	//		Состояние("Сравнение остатков по регистру " + СтрокаОбщ.Регистр + " ... " + Окр((НомерСтроки)*100/итКол,2) + "%");
	//		// сделаем отбор
	//		Отбор = Новый Структура;
	//		Для каждого Изм из спИзмерений Цикл
	//			отбор.Вставить(Изм.Значение, стр[Изм.Значение]);
	//		КонецЦикла;
	//		// теперь поиск
	//		МассивПоиска = Поиск.Остатки.НайтиСтроки(Отбор);
	//		Если МассивПоиска.Количество() = 0 Тогда
	//			// такой строки в старых остатках нет
	//			Если Не ВыводШапки Тогда
	//				Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
	//				Обл.Параметры.Регистр = СтрокаОбщ.Регистр;
	//				Таб.Вывести(Обл);		
	//				// нарисуем колонки
	//				Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//					Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
	//					Обл.Параметры.Кол = Колонка.Имя;
	//					Таб.Присоединить(Обл);
	//				КонецЦикла;
	//				ВыводШапки = Истина;
	//			КонецЕсли;
	//			Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
	//			Обл.Параметры.НомСтр = "В старых нет строки";
	//			Таб.Вывести(Обл);
	//			Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//				Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
	//				Обл.Параметры.Значение = стр[Колонка.Имя];
	//				Таб.Присоединить(Обл);
	//			КонецЦикла;
	//			НомСтр = НомСтр + 1;
	//		Иначе
	//			// есть строки
	//			Если МассивПоиска.Количество() = 1 Тогда
	//				// есть ОДНА строка соответствия, проверим ресурсы
	//				флЕстьОтличия = Ложь;
	//				Для каждого Рес из спРесурсов Цикл
	//					Если стр[Рес.Значение] <> МассивПоиска[0][Рес.Значение] Тогда
	//						флЕстьОтличия = Истина;
	//						Прервать;
	//					КонецЕсли;
	//				КонецЦикла;
	//				Если флЕстьОтличия Тогда
	//					Если Не ВыводШапки Тогда
	//						Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
	//						Обл.Параметры.Регистр = СтрокаОбщ.Регистр;
	//						Таб.Вывести(Обл);		
	//						// нарисуем колонки
	//						Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//							Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
	//							Обл.Параметры.Кол = Колонка.Имя;
	//							Таб.Присоединить(Обл);
	//						КонецЦикла;
	//						ВыводШапки = Истина;
	//					КонецЕсли;
	//					// выводим строки
	//					Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
	//					Обл.Параметры.НомСтр = "" + НомСтр + " отличия в строках";
	//					Таб.Вывести(Обл);
	//					Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//						Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
	//						Обл.Параметры.Значение = стр[Колонка.Имя];
	//						Таб.Присоединить(Обл);
	//					КонецЦикла;
	//					Обл = Макет.ПолучитьОбласть("СтрокаРегистраСтар|Заголовок");
	//					Обл.Параметры.НомСтр = "" + НомСтр + " отличия в строках";
	//					Таб.Вывести(Обл);
	//					Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//						Обл = Макет.ПолучитьОбласть("СтрокаРегистраСтар|Ячейка");
	//						Обл.Параметры.Значение = МассивПоиска[0][Колонка.Имя];
	//						Таб.Присоединить(Обл);
	//					КонецЦикла;
	//					НомСтр = НомСтр + 1;
	//				КонецЕсли;
	//				Поиск.Остатки.Удалить(МассивПоиска[0]);
	//			Иначе
	//				// найдено несколько строк!
	//				Если Не ВыводШапки Тогда
	//					Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
	//					Обл.Параметры.Регистр = СтрокаОбщ.Регистр;
	//					Таб.Вывести(Обл);		
	//					// нарисуем колонки
	//					Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//						Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
	//						Обл.Параметры.Кол = Колонка.Имя;
	//						Таб.Присоединить(Обл);
	//					КонецЦикла;
	//					ВыводШапки = Истина;
	//				КонецЕсли;
	//				// выводим строки
	//				Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
	//				Обл.Параметры.НомСтр = "" + НомСтр + " отличия в строках";
	//				Таб.Вывести(Обл);
	//				Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//					Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
	//					Обл.Параметры.Значение = стр[Колонка.Имя];
	//					Таб.Присоединить(Обл);
	//				КонецЦикла;
	//				Обл = Макет.ПолучитьОбласть("СтрокаРегистраСтар|Заголовок");
	//				Обл.Параметры.НомСтр = "" + НомСтр + " отличия в строках";
	//				Таб.Вывести(Обл);
	//				Для каждого СтрокаПоиска Из МассивПоиска Цикл
	//					Для каждого Колонка из стр.Остатки.Колонки Цикл
	//						Обл = Макет.ПолучитьОбласть("СтрокаРегистраСтар|Ячейка");
	//						Обл.Параметры.Значение = СтрокаПоиска[Колонка.Имя];
	//						Таб.Присоединить(Обл);
	//					КонецЦикла;
	//					Поиск.Остатки.Удалить(СтрокаПоиска);						
	//				КонецЦикла;
	//				НомСтр = НомСтр + 1;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	// теперь пробежимся правой стороной
	//	Для каждого стр из Поиск.Остатки Цикл
	//		ОбработкаПрерыванияПользователя();			
	//		// сделаем отбор
	//		Отбор = Новый Структура;
	//		Для каждого Изм из спИзмерений Цикл
	//			отбор.Вставить(Изм.Значение, стр[Изм.Значение]);
	//		КонецЦикла;
	//		// теперь поиск
	//		МассивПоиска = СтрокаОбщ.Остатки.НайтиСтроки(Отбор);
	//		Если МассивПоиска.Количество() = 0 Тогда
	//			// такой строки в старых остатках нет
	//			Если Не ВыводШапки Тогда
	//				Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Заголовок");
	//				Обл.Параметры.Регистр = Поиск.Регистр;
	//				Таб.Вывести(Обл);		
	//				// нарисуем колонки
	//				Для каждого Колонка из Поиск.Остатки.Колонки Цикл
	//					Обл = Макет.ПолучитьОбласть("ШапкаРегистра|Ячейка");
	//					Обл.Параметры.Кол = Колонка.Имя;
	//					Таб.Присоединить(Обл);
	//				КонецЦикла;
	//				ВыводШапки = Истина;
	//			КонецЕсли;
	//			Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Заголовок");
	//			Обл.Параметры.НомСтр = "В текущих нет строки";
	//			Таб.Вывести(Обл);
	//			Для каждого Колонка из СтрокаОбщ.Остатки.Колонки Цикл
	//				Обл = Макет.ПолучитьОбласть("СтрокаРегистра|Ячейка");
	//				Обл.Параметры.Значение = стр[Колонка.Имя];
	//				Таб.Присоединить(Обл);
	//			КонецЦикла;
	//			НомСтр = НомСтр + 1;
	//		Иначе
	//			// эти строки уже выведены
	//		КонецЕсли;
	//	КонецЦикла;		
	//КонецЦикла;
	Таб.Показать();
КонецПроцедуры
//--------------------------------------------------------------------------
// события формы
Процедура ПриОткрытии()
	ПростоСворачивать = Истина;
	КоличествоЗаписейДокументов = 5000;
	Дата = Дата("20061231");
	//УстановитьМонопольныйРежим(Истина);
	ЗаполнитьТаблицыРегистровСведений();
	ЗаполнитьТаблицыВидовДокументов();
	ЗаполнитьОчищаемыеРегистрыНакопления();
	ПосчитатьПроцентОбщейСворачиваемости();
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
КонецПроцедуры
Процедура ПриЗакрытии()
	УстановитьМонопольныйРежим( ложь);
КонецПроцедуры
Процедура ДатаПриИзменении(Элемент)
	ПосчитатьПроцентОбщейСворачиваемости();
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;	
КонецПроцедуры
//--------------------------------------------------------------------------
// события таблиц
Процедура ВидыДокументовПередУдалением(Элемент, Отказ)
	Если ЭлементыФормы.ВидыДокументов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекДанные = ЭлементыФормы.ВидыДокументов.ТекущиеДанные;
	ЗапрещенныеВидыДокументов.Добавить().Документ = ТекДанные.Документ;
	ВидыДокументов.Удалить( ТекДанные);
	ЗапрещенныеВидыДокументов.Сортировать("Документ");
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Анализ.Доступность = Ложь;
КонецПроцедуры
Процедура ЗапрещенныеВидыДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры
Процедура ВидыДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры
Процедура ЗапрещенныеВидыДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры
Процедура НеИспользуемыеРегистрыСведенийПередУдалением(Элемент, Отказ)
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Анализ.Доступность = Ложь;
КонецПроцедуры
Процедура ОчищаемыеРегистрыСведенийПередУдалением(Элемент, Отказ)
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Выполнить.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.УдалитьДокументы.Доступность = Ложь;
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Анализ.Доступность = Ложь;	
КонецПроцедуры


