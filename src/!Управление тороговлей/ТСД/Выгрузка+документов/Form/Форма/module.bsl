Перем мСписокТерминалов;
Перем мОбъект;
Перем мФорматУмолч Экспорт;
Перем мСохрФормат;

Перем мДанныеСервера;
Перем мНетОшибки;
Перем мОшибкаНеизвестно;
Перем мStorageConnector;      
Перем мДокЗагружены;
Перем мФорматПользователя; 
Перем мТипСвязи;
Перем мИмяДляХраненияНастроек Экспорт;
Перем БатчДрайвер;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

Функция ПолучитьОписаниеОбработки(ИмяФайлаОбработки)
	
	Результат = "";
	
	Попытка
		ОбрОбслуживания   = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
		Форма             = ОбрОбслуживания.ПолучитьФорму();
		Результат         = Форма.ПолучитьОписание().Наименование;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
 	Возврат Результат;
	
КонецФункции

Функция ПолучитьПринадлежностьОбработкиКДрайверу(Знач ОписаниеОбработки)
	
	КодДрайвера = Неопределено;
	ОписаниеОбработки = нрег(ОписаниеОбработки);
	
	Если Найти(ОписаниеОбработки,"cleverence")>0 или Найти(ОписаниеОбработки,"клеверенс")>0 Тогда
		Если Найти(ОписаниеОбработки,"wi-fi")>0 и (Найти(ОписаниеОбработки,"проф")>0 или Найти(ОписаниеОбработки,"prof")>0) Тогда
			КодДрайвера = 1;     //Wi-Fi ПРОФ
		ИначеЕсли Найти(ОписаниеОбработки,"wi-fi")>0 и Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0  Тогда
			КодДрайвера = 2;     //Wi-Fi
		ИначеЕсли Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0 и Найти(ОписаниеОбработки,"wi-fi")= 0 Тогда
			КодДрайвера = 3;     //батч
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодДрайвера;
	
КонецФункции
// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент, ПодключИдентификатор=Неопределено)

	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;

	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");

	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Компьютер                      = &Компьютер "+?(Найти(мНазваниеКонфигурации,"управлениеторговлей")>0 и мВерсияКонфигурации >= 10030608 ," И РегТО.Подключено ","")+"
		| и РегТО.Вид=ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ТерминалСбораДанных)");
		ИмяКомпьютераТО = "";
		Выполнить("ИмяКомпьютераТО = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()");
		Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютераТО+"/"+ИмяПользователя());
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			//**
			ИмяВременногФайла = ПолучитьИмяВременногоФайла(".epf");
			МакетОбработки = СтрокаТО.Модель.ОбработкаОбслуживания.Обработка.Получить();
			МакетОбработки.Записать(ИмяВременногФайла);	
			ПутьКФайлуВнешнейОбработки = ИмяВременногФайла;
			ОписаниеОбработки = ПолучитьОписаниеОбработки(ИмяВременногФайла);
			ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
            Если ЗначениеЗаполнено(ОбработкаКлеверенс) Тогда
				Идентификатор = СтрокаТО.Идентификатор;
				Наименование  = СтрокаТО.Наименование;
				Обработка     = Неопределено;
				Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),Новый Структура(),ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
				Модель        = СтрокаТО.Модель.Модель;
				мМодельПодключаемогоТО = Модель;
 
				Результат = "";
				выполнить("Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка)");
				
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Объект    = Неопределено;
				Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Результат = Обработка.Подключить(Объект);
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Оборудование                             = ТО.Добавить();
				Оборудование.Вид                         = Вид;
				Оборудование.Ссылки                      = 1;
				Оборудование.Идентификатор               = Идентификатор;
				Оборудование.Наименование                = Наименование;
				Оборудование.Обработка                   = Обработка;
				Оборудование.Объект                      = Объект;
				Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);

				СообщенияКлиента = Клиенты[Клиент];
				Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
				Сообщения.Колонки.Добавить("Идентификатор");
				Сообщения.Колонки.Добавить("Вид");
				Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
				Сообщения.ЗаполнитьЗначения(Вид,           "Вид");

				Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
					Клиенты[Клиент] = Сообщения;
				Иначе
					Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
						СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
					КонецЦикла;
				КонецЕсли;
            КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);

				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ПоследняяОшибка;

КонецФункции // ПодключитьОборудование()


// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)

	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)
	
	Перем ОбработкаОбслуживания;
	
	Результат = мНетОшибки;
 	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)).ПолучитьОбъект();
		
		Если ТО.ТипПрофиля = 1 Тогда
			Профиль = "Все станции\Все пользователи";
		Иначе
			ТаблицаПрофилей = "";
			Выполнить("ТаблицаПрофилей		= тоПолучитьТаблицуПрофилей(ТО)");
			ФормаВыбораПрофиля	= ТО.ПолучитьФорму("ВыборПрофиля");
			ФормаВыбораПрофиля.ТаблицаПрофилей	= ТаблицаПрофилей;
			ФормаВыбораПрофиля.ТипПрофиля		= ТО.ТипПрофиля;
			
			Профиль = ФормаВыбораПрофиля.ОткрытьМодально();
			Если ФормаВыбораПрофиля.Модифицированность Тогда
				ПараметрыСтр = ЗначениеВСтрокуВнутр(ТаблицаПрофилей);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(Профиль) Тогда
				Возврат мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТО	= ТО.ПолучитьСтруктуруПараметров(Профиль);
		
		Если ПараметрыТО.Количество() = 0 Тогда
			ПараметрыТО.Вставить("_ИнициализацияНастроек", Истина);
		КонецЕсли;
		РезультатВыполнения ="";
		Выполнить("РезультатВыполнения	= тоИнициализацияОбработкиОбслуживания(ТО, ПараметрыТО, ОбработкаОбслуживания)");
		  //подключить из драйвера, проверить
		Если РезультатВыполнения.Ошибка Тогда
			Предупреждение(РезультатВыполнения.Описание+Символы.ВК+Символы.ПС+РезультатВыполнения.Подробно);
			//Возврат мОшибкаНеизвестно;
		КонецЕсли;
		Объект = Новый Структура;
		Драйвер = "";
		Выполнить("Драйвер = глТорговоеОборудование.CLTC1C");
		Объект.Вставить("Параметры",ПараметрыТО);
		Объект.Вставить("Драйвер",Драйвер);
		Объект.Вставить("ИДУстройства","");
		Объект.Вставить("Модель",ТО.Наименование);
		Объект.Вставить("ОписаниеОшибки","");
		
		Попытка
			Если ОбработкаОбслуживания.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Обработка = ОбработкаОбслуживания;
			Результат = мНетОшибки;
		исключение
			Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		Если ОбработкаОбъект.мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  
			Попытка
				ТО = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Исключение
				ТО = Идентификатор
			КонецПопытки;
			
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = ""; 
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,Справочники.ТорговоеОборудование.ТСДКлеверенсСофт)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					//СохраненныеНастройки = ТО.КлеверенсНастройки.Получить();
					СохраненныеНастройки   = ВосстановитьЗначение(xmlСтрока(ТО));
					Объект = Новый Структура;
					Объект.Вставить("Параметры",СохраненныеНастройки);
					Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
					Объект.Вставить("Модель",СтрокаТСД.Оборудование);
					Объект.Вставить("ИДУстройства","");
					Объект.Вставить("ОписаниеОшибки","");
					
					Попытка
						ДвоичныеДанныеОбработки = ТО.КлеверенсНастройкаТСД.Получить();
						ФайлВременнойОбработки = ПолучитьИмяВременногоФайла("epf");
						ДвоичныеДанныеОбработки.Записать(ФайлВременнойОбработки);
						Обработка = ВнешниеОбработки.Создать(ФайлВременнойОбработки);
						Результат = мНетОшибки;
						Обработка.мПараметры = Объект.Параметры;
					Исключение
						Сообщить("Не обнаружена обработка настроек драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
					КонецПопытки;   					
					
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
						
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
					исключение
						Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой. Проверьте настройки оборудования!",20,"Изменение данных");
						//ФормаНастроек = ТО.ПолучитьФорму();
						//ФормаНастроек.ОткрытьМодально();
						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли;  			
		Иначе    			
			ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = "";
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,ТО)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					СохраненныеНастройки = "";    
					Выполнить("СохраненныеНастройки = Справочники.ВнешниеРесурсы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
					Если СохраненныеНастройки.Пустая() Тогда
						Сообщить("В справочнике ""Внешние ресурсы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
					Иначе
						СохраненныеНастройки = СохраненныеНастройки.Значение.Получить();
						ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
						Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
							Объект = Новый Структура;
							Объект.Вставить("Параметры",СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]);
							Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
							Объект.Вставить("Модель",СтрокаТСД.Оборудование);
							Объект.Вставить("ИДУстройства","");
							Объект.Вставить("ОписаниеОшибки","");
						КонецЕсли;
						Попытка
							Обработка = ВнешниеОбработки.Создать(Объект.Параметры.ПутьКОбработке);
							Результат = мНетОшибки;
							Обработка.мПараметры = Объект.Параметры;
						Исключение
							Сообщить("Не обнаружена обработка настроек драйвера. 
							|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
							Результат = мОшибкаНеизвестно;
						КонецПопытки;
					КонецЕсли;
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
						//переподключить с параметрами из драйвера{ 
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
						
						Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
							Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
							|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						//переподключить с параметрами из драйвера}
					исключение
						Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда
		СохраненныеНастройки = "";    
		Выполнить("СохраненныеНастройки = Справочники.ВнешниеПечатныеФормы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
		Если СохраненныеНастройки.Пустая() Тогда
			Сообщить("В справочнике ""Внешние печатные формы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
			|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
			Результат = мОшибкаНеизвестно;
		Иначе
			СохраненныеНастройки = СохраненныеНастройки.Хранилище.Получить();
			ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
			
			Параметры = Новый Структура;
			Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
				Параметры = СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]; 
			КонецЕсли;
			
			Попытка
				//сохранить из хранилища обработку и создать ее.
				Обработка = ВнешниеОбработки.Создать(Параметры.ПутьКОбработке);
				Результат = мНетОшибки;
				Обработка.мПараметры = Параметры;
			Исключение
				Сообщить("Не обнаружена обработка настроек драйвера. 
				|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
				Результат = мОшибкаНеизвестно;
			КонецПопытки;
		КонецЕсли;
		Попытка
			Объект = Новый Структура;
			Объект.Вставить("Параметры",Параметры);
			Объект.Вставить("Драйвер","");
			Объект.Вставить("Модель",ТерминалСбораДанных);
			Объект.Вставить("ИДУстройства","");
			Объект.Вставить("ОписаниеОшибки","");
			
			Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Результат = мНетОшибки;
			//переподключить с параметрами из драйвера{ 
			ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
			
			Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
				Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
				|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			//переподключить с параметрами из драйвера}
		исключение
			Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;
	Иначе	
		ТО = ПолучитьТО();
		Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
		Если Оборудование = Неопределено Тогда
 			ПодключитьОборудование(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных, ЭтаФорма, Идентификатор);
			ТО = ПолучитьТО();
			Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
			Если Оборудование = Неопределено Тогда
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;	
		
		Если Оборудование <> Неопределено Тогда
			Обработка = Оборудование.Обработка;
			Объект    = Оборудование.Объект;
			Результат = Обработка.Подключить(Объект);
			Если ЗначениеЗаполнено(Результат) Тогда
				мОписаниеОшибки = Объект.ОписаниеОшибки;
				Ошибка = "";
				Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
				Результат = Ошибка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка
		мТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера(); 
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
		//Заголовок = "Клеверенс Софт: Выгрузка документов на ТСД [драйвер "+мТипПодключенногоДрайвера+"]" 
		сЗаголовок = "Клеверенс Софт: Выгрузка документов на ТСД [" + Объект.Драйвер.GetDriverType() + ", версия ";
		сЗаголовок = сЗаголовок + Объект.Драйвер.ПолучитьНомерВерсии() + "]";
		ЭтаФорма.Заголовок = сЗаголовок;
	Исключение
		мТипПодключенногоДрайвера = "";
		мИмяДляХраненияНастроек   = мИмяДляХраненияНастроекПрефикс;
		Заголовок = "Клеверенс Софт: Выгрузка документов на ТСД";
	КонецПопытки;
	
	Если (не (Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  ИЛИ Найти(мНазваниеКонфигурации,"штрихм") >0)) и  Обработка <> Неопределено Тогда
		ОписаниеОбработки   = ПолучитьОписаниеОбработки(Обработка.ИспользуемоеИмяФайла);
		ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
		ПодключенныйДрайвер = ПолучитьПринадлежностьОбработкиКДрайверу("Клеверенс " + мТипПодключенногоДрайвера);
		
		Если Не ПустаяСтрока(мТипПодключенногоДрайвера) И ЗначениеЗаполнено(ОбработкаКлеверенс) и ОбработкаКлеверенс <> ПодключенныйДрайвер Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
			Результат = "Обработка обслуживания не соответствует подключенному драйверу";
			Объект    = Неопределено;
		КонецЕсли;
	КонецЕсли;	
		
	мВидимостьЭлементовФормы = Результат = мНетОшибки;
	ВидимостьЭлементовФормы();
	
	Возврат Результат;

КонецФункции // ПолучитьОбъектДрайвера()

Процедура ЗагрузитьФормат(Ключ = Неопределено)  Экспорт
	
	Спис = ВосстановитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов"); 	
	
	мСохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	
	ПоУмолчанию = Ложь;
	Если Не ЗначениеЗаполнено(мСохрФормат) Тогда
		ПоУмолчанию = Истина;
	ИначеЕсли мСохрФормат.Количество() = 0 Тогда
		ПоУмолчанию = Истина;	
	ИначеЕсли Не ЗначениеЗаполнено(Спис) Тогда
		ПоУмолчанию = Истина;		
	ИначеЕсли Спис.Количество() = 0 Тогда
		ПоУмолчанию = Истина;		
	КонецЕсли;
	
	
	Если ПоУмолчанию Тогда
		мСохрФормат = мФорматУмолч;	
		
		///////
		Спис = Новый СписокЗначений;
		
		Для каждого СтрокаДокумент из мСохрФормат Цикл
			Документ = Метаданные.Документы.Найти(СтрокаДокумент.Ключ);
			Если Документ <> Неопределено Тогда
				//ТаблДокументы.Вставить(СтрокаДокумент.Ключ, СтрокаДокумент.Значение);
				Спис.Добавить(СтрокаДокумент.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		СохранитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов", Спис);
		///////
		
		СохранитьЗначение(мИмяДляХраненияНастроек, мФорматУмолч);
	КонецЕсли;
	
	ЭлементыФормы.ТипДокумента1С.СписокВыбора.Очистить();
	Если Спис <> Неопределено И Спис.Количество() > 0 Тогда
		Для каждого КлючЗнач из мСохрФормат Цикл
			
			Если Спис.НайтиПоЗначению(КлючЗнач.Ключ) = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			
			ИмяДок = Неопределено;
			Объект = Метаданные.Документы.Найти(КлючЗнач.Ключ);
			Если Объект <> Неопределено Тогда
				ИмяДок = Объект.Синоним;
			Иначе
				ИмяДок = КлючЗнач.Ключ;
			КонецЕсли;	
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Добавить(КлючЗнач.Ключ, ИмяДок);	
		КонецЦикла;	
	КонецЕсли;
	
	Если ЭлементыФормы.ТипДокумента1С.СписокВыбора.Количество() > 0 Тогда
		ЭлементыФормы.ТипДокумента1С.СписокВыбора.СортироватьПоПредставлению();
		ЭлементыФормы.ТипДокумента1С.Значение = ЭлементыФормы.ТипДокумента1С.СписокВыбора[0].Значение;
	КонецЕсли;
		
	ЗначениеПоКлючу = ЭлементыФормы.ТипДокумента1С.СписокВыбора.НайтиПоЗначению(Ключ);
	
	Если ЗначениеПоКлючу <> Неопределено Тогда
		 ЭлементыФормы.ТипДокумента1С.Значение = ЗначениеПоКлючу.Значение;
	ИначеЕсли ЭлементыФормы.ТипДокумента1С.СписокВыбора.Количество() = 0 Тогда
		ЭлементыФормы.ТипДокумента1С.Значение = Неопределено;	 
	КонецЕсли;
	
	УстановитьДокументИнфо();
	
КонецПроцедуры	

Процедура ОбновитьКонтрольКоличества() Экспорт
	
	СохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	Если СохрФормат = Неопределено Тогда
		СохрФормат = мФорматУмолч;
	КонецЕсли;
	 
	ФорматДок = СохрФормат.Получить(ТипДокумента1С);
	
	КонтрольКоличества = Ложь;
	ОтборПоЯчейкам     = Ложь;
	
	Если ФорматДок <> Неопределено Тогда
		ФорматДок.Свойство("КонтрольКоличества", КонтрольКоличества);
		ФорматДок.Свойство("ОтборПоЯчейкам", ОтборПоЯчейкам);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	Отказ = (мСписокТерминалов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	КонецЕсли;	
	
	СоздатьФорматУмолч();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	БатчДрайвер = Нрег(мТипПодключенногоДрайвера) = "batch";

	Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  ИЛИ Найти(мНазваниеКонфигурации, "штрихм") > 0
		 Тогда
		СписокТерминалов = новый СписокЗначений;
		Для Каждого Устройство Из мСписокТерминалов Цикл
			СписокТерминалов.Добавить(Строка(Устройство.УникальныйИдентификатор()), Устройство.Наименование);
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
		СписокТерминалов = мСписокТерминалов;
	Иначе
		Выполнить("ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма)");
		СписокТерминалов = "";
		Выполнить("СписокТерминалов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокТерминалов)");
	КонецЕсли;
	
	ЭлементыФормы.ТерминалСбораДанных.СписокВыбора = СписокТерминалов;

	ТерминалСбораДанных                              = СписокТерминалов[0].Значение;
	ЭлементыФормы.ТерминалСбораДанных.ТолькоПросмотр = (СписокТерминалов.Количество() = 1);
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ЗначениеЗаполнено(НачальноеЗначениеВыбора) и  НачальноеЗначениеВыбора.Свойство("НастройкиТСД") Тогда  //AVA. 22.05.2014. №159.
		Если ТерминалСбораДанных <> xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД) Тогда
			ТерминалСбораДанных = xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД);
			ТерминалСбораДанныхПриИзменении(Неопределено);
		КонецЕсли;
	Иначе 		
		ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
		Если ПоследняяРаботаСТО <> Неопределено и  СписокТерминалов.НайтиПоЗначению(ПоследняяРаботаСТО)<> Неопределено Тогда
			ТерминалСбораДанных =  ПоследняяРаботаСТО;
			мСохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
			ТерминалСбораДанныхПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;

	ЗагрузитьФормат();
	УстановитьДокументИнфо();
	ЗаполнитьПользователей();
	ОбновитьКонтрольКоличества();
	ВидимостьЭлементовФормы();
	
	//восстановить порядок колонок при последнем сохранении.начало.   //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	ПорядокКолонокТабличныхЧастей = ВосстановитьЗначение(ОбработкаОбъект.Метаданные().Имя + "ПорядокКолонокТабличныхПолей");
	Если ПорядокКолонокТабличныхЧастей <> Неопределено Тогда
		Попытка
			КолонкиТПДокументыСервера = ПорядокКолонокТабличныхЧастей.ДокументыСервера;
			Для каждого Колонка из КолонкиТПДокументыСервера Цикл
				КолонкаТаблицы   =  ЭлементыФормы.ДокументыСервера.Колонки.Найти(Колонка.Имя);
				ЗаполнитьЗначенияСвойств(КолонкаТаблицы,Колонка);
 				ЭлементыФормы.ДокументыСервера.Колонки.Сдвинуть(КолонкаТаблицы,КолонкиТПДокументыСервера.индекс(Колонка) -ЭлементыФормы.ДокументыСервера.Колонки.Индекс(КолонкаТаблицы));				
			КонецЦикла;
 		Исключение
 		КонецПопытки;
	КонецЕсли;
	//восстановить порядок колонок при последнем сохранении.Окончание.
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		ЗагрузитьНастройкиДляКонфигурацииИзФайла(); //AVA. 26.05.2014. №159.
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьНастройкиДляКонфигурацииИзФайла() Экспорт
	
	//+AVA. 26.05.2014. №159.
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда // настройки для ШтрихМ		
		ДокументДляВыгрузки = НачальноеЗначениеВыбора.Документ;
		ЗагрузитьБезВопроса = Ложь;
		Если НачальноеЗначениеВыбора.Свойство("ЗагрузитьБезВопроса") Тогда
			ЗагрузитьБезВопроса = НачальноеЗначениеВыбора.ЗагрузитьБезВопроса;
		КонецЕсли;
		
 		МетаданныеДокумента1С =  ДокументДляВыгрузки.Метаданные();
		ИмяДляПоиска = МетаданныеДокумента1С.Имя;
		МетаданныеДокумента1СРеквизиты = МетаданныеДокумента1С.Реквизиты;
		
		НастройкаВыгрузкиДокумента =  ЭлементыФормы.ТипДокумента1С.СписокВыбора.НайтиПоЗначению(ИмяДляПоиска);
		//НастройкаВыгрузкиДокумента =  мСохрФормат.Получить(ИмяДляПоиска);
		Если ЗагрузитьБезВопроса = истина ИЛИ НастройкаВыгрузкиДокумента = Неопределено Тогда // добавить настройку с текущим типом документа
			//загрузка настроек выгрузки документа из xml файла
			Если ЗагрузитьБезВопроса = истина ИЛИ Вопрос("Не найдена настройка выгрузки документа 1С на терминал сбора данных (ТСД)?
				|Заполнить настройки из файла?
				|Если ответить ""Нет"", тогда в открывшейся форме необходимо настроить выгрузку документа на ТСД вручную. ", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
				
				ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				
				ДиалогВыбораФайла.Фильтр     =	"Файл с настройкой выгрузки документа 1С на ТСД (*.xml)|*.xml";
				ДиалогВыбораФайла.Расширение =	"xml";   
				ДиалогВыбораФайла.Заголовок  =	"Выберите файл с настройкой выгрузки документа 1С на терминал сбора данных (ТСД)";
				
				Реквизиты = Новый ТаблицаЗначений;
				Реквизиты.Колонки.Добавить("Выгружать");
				Реквизиты.Колонки.Добавить("Реквизит");
				Реквизиты.Колонки.Добавить("ПолеДокументаТСД");
				
				ТаблПолей = Новый ТаблицаЗначений;
				ТаблПолей.Колонки.Добавить("Выгружать");
				ТаблПолей.Колонки.Добавить("ПолеДокумента1С");
				ТаблПолей.Колонки.Добавить("ПолеСтрокиДокументаТСД");
				
				КонтрольКоличества = Ложь;
				ОтборПоЯчейкам     = Ложь;
				КоллективнаяРабота = Ложь;	
				
				Если ДиалогВыбораФайла.Выбрать() Тогда
					
					ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;					
					
					Чтение = Новый ЧтениеXML; 
					Чтение.ОткрытьФайл(ПутьКФайлу); 
 					
					ЛокальноеИмя = "";
					ИмяТабличнойЧасти = "Товары";
					Пока Чтение.Прочитать() Цикл 
						Если ЛокальноеИмя = "ДопНастройки" Тогда
							Если ВозможностьЧтенияXML(Чтение) Тогда
								Значение = ПрочитатьXML(Чтение);
								Если Чтение.Имя  = "КонтрольКоличества" Тогда
									КонтрольКоличества = Значение; 
								КонецЕсли;
								Если Чтение.Имя  = "КоллективнаяРабота" Тогда
									КоллективнаяРабота = Значение;
								КонецЕсли;									
								Если Чтение.Имя  = "ОтборПоЯчейкам" Тогда
									ОтборПоЯчейкам = Значение;
								КонецЕсли;	
							КонецЕсли;
							продолжить
						КонецЕсли;						
						
						Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
							Если Чтение.Имя = "Документ" Тогда
 							    ЛокальноеИмя = "Документ"; 
							ИначеЕсли Чтение.Имя = "Шапка" Тогда
								ЛокальноеИмя = "Шапка";
							ИначеЕсли Чтение.Имя = "ТабЧасть" Тогда
								ЛокальноеИмя = "ТабЧасть";
								ИмяТабличнойЧасти = Чтение.ПолучитьАтрибут(0);
								Продолжить;
							ИначеЕсли Чтение.Имя = "ДопНастройки" Тогда
								ЛокальноеИмя = "ДопНастройки";
							КонецЕсли;
										
							Если Чтение.КоличествоАтрибутов() > 0 Тогда
								Реквизит1С  = Чтение.ПолучитьАтрибут(0);
								РеквизитТСД = Чтение.ПолучитьАтрибут(1);
								Если ЛокальноеИмя = "Шапка" Тогда
									//проверить существование реквизита 1С
									РеквизитДокумента1С = МетаданныеДокумента1СРеквизиты.Найти(Реквизит1С);
									Если РеквизитДокумента1С = неопределено тогда 										
										Попытка
											РеквизитДокумента1С = МетаданныеДокумента1С.СтандартныеРеквизиты[Реквизит1С];
 										Исключение
											РеквизитДокумента1С = неопределено;  											
										КонецПопытки;
									КонецЕсли;
									
									Если РеквизитДокумента1С <> неопределено тогда
										НоваяСтрока                  = Реквизиты.Добавить();
										НоваяСтрока.Выгружать        = Истина;
										НоваяСтрока.Реквизит         = Реквизит1С;
										НоваяСтрока.ПолеДокументаТСД = РеквизитТСД;
									Иначе
										Сообщить("В файле настроек указано заполнение значения реквизита """+РеквизитТСД+""" шапки документа ТСД значением реквизита """+Реквизит1С+""" документа 1С.
										|Нет реквизита с таким именем в документе 1С. Проверьте правильность указания настроек в файле!");
									КонецЕсли; 									
								ИначеЕсли ЛокальноеИмя = "ТабЧасть" Тогда	
									РеквизитТабличнойЧастиДокумента1С = МетаданныеДокумента1С.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(Реквизит1С);
									Если РеквизитТабличнойЧастиДокумента1С <> неопределено тогда 
										НоваяСтрока                        = ТаблПолей.Добавить();
										НоваяСтрока.Выгружать              = Истина;
										НоваяСтрока.ПолеДокумента1С        = Реквизит1С;
										НоваяСтрока.ПолеСтрокиДокументаТСД = РеквизитТСД;
									Иначе
										Сообщить("В файле настроек указано заполнение реквизита """+РеквизитТСД+""" таблицы документа ТСД значением реквизита """+Реквизит1С+""" табличной части """+ИмяТабличнойЧасти+""" документа 1С.
										|Нет реквизита с таким именем в табличной части. Проверьте правильность указания настроек в файле!");
									КонецЕсли; 	
								ИначеЕсли ЛокальноеИмя = "Документ" Тогда
									ИмяДокумента1С_  = Чтение.ПолучитьАтрибут(0);
									ИмяДокументаТСД_ = Чтение.ПолучитьАтрибут(1);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли; 						
					КонецЦикла;
					
					Если ИмяДокумента1С_ <> ИмяДляПоиска Тогда //загружать только настройки, предназначенные для выбранного документа (для случая, если ошиблись в выборе файла xml)
						Предупреждение("Вы пытаетесь загрузить настройки, предназначенные для другого документа 1С. Проверьте файл настроек!",20,"Изменение данных");
						Возврат ложь;
					КонецЕсли;
					
					ФорматДок = Новый Структура;
					ФорматДок.Вставить("КонтрольКоличества", КонтрольКоличества);
					ФорматДок.Вставить("ОтборПоЯчейкам", ОтборПоЯчейкам);
					ФорматДок.Вставить("ИсполняемыйНаСервере", КоллективнаяРабота);					
					ФорматДок.Вставить("ТипДокументаСмартс", ИмяДокументаТСД_);
					ФорматДок.Вставить("Реквизиты", Реквизиты);       	
					ФорматДок.Вставить("ТабличнаяЧасть", ИмяТабличнойЧасти);
					ТипыДокументовТСД = Неопределено;
					Если мEnv = Неопределено Тогда
						Попытка
							СоздатьStorageConnector();
							Если мStorageConnector <> Неопределено Тогда
								мEnv = мStorageConnector.ПолучитьСреду();
								ТипыДокументовТСД = мEnv.DocumentTypes;
							КонецЕсли;
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					Иначе
						ТипыДокументовТСД = мEnv.DocumentTypes;
					КонецЕсли;
					
					Если ТипыДокументовТСД <> Неопределено Тогда
						Для каждого ТипДокументаТСД из ТипыДокументовТСД Цикл
  							Если ТипДокументаТСД.name = ИмяДокументаТСД_ Тогда
								ФорматДок.Вставить("ТипДокументаСмартсСиноним", ТипДокументаТСД.Alias);
							КонецЕсли; 
						КонецЦикла;	
					КонецЕсли;  
					
					ФорматДок.Вставить("ФорматВыгрузки", ТаблПолей); 					
					мСохрФормат.Вставить(ИмяДокумента1С_, ФорматДок);
 					СохранитьЗначение(мИмяДляХраненияНастроек, мСохрФормат);
					
					Спис = ВосстановитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов");
					Если Спис = Неопределено Тогда
						Спис = Новый СписокЗначений;
					КонецЕсли;
					Спис.Добавить(ИмяДокумента1С_);
					СохранитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов", Спис);
					ЗагрузитьФормат();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
 		ЭлементыФормы.ТипДокумента1С.Значение = ИмяДляПоиска;
		ЭлементыФормы.Документ1С.Значение     = ДокументДляВыгрузки;
		ВыбранныйДокумент1С                   = ДокументДляВыгрузки;
		УстановитьДокументИнфо();
	КонецЕсли;
	
	Возврат Истина;
	//-AVA. 26.05.2014. №159.
	
КонецФункции

Процедура ВидимостьЭлементовФормы()
	
	ЭлементыФормы.Панель.Доступность = мВидимостьЭлементовФормы;
    ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыВыполнить.Доступность = ЭлементыФормы.Панель.Доступность;
	
КонецПроцедуры

Процедура СоздатьФорматУмолч()
	ТаблДокументы = Новый Соответствие();
	
	СтруктураДокПоУмолчанию = Новый Структура;
	
    ОперацияПриемкаТСДНазвание = ?(НЕ (Нрег(мТипПодключенногоДрайвера) = "wi-fi prof"),"Приход на склад","Приемка товара");
	
	мБатчДрайвер =  Нрег(мТипПодключенногоДрайвера) = "batch";

	Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		СтруктураДокПоУмолчанию.Вставить("РасходнаяНакладная","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ЗаказПоставщику",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("ИнвентаризацияТовара","Инвентаризация");
		СтруктураДокПоУмолчанию.Вставить("ПриходнаяНакладная",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("СписаниеТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровПоставщику","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровОтПокупателя",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("АктПереоценки","Переоценка");
	ИначеЕсли Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
		СтруктураДокПоУмолчанию.Вставить("РеализацияТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ОприходованиеТоваров",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("ИнвентаризацияТоваров","Инвентаризация");
		СтруктураДокПоУмолчанию.Вставить("ПоступлениеТоваров",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("СписаниеТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровПоставщику","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровОтПокупателя",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("УстановкаЦенНоменклатурыВМагазине","Переоценка");
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		СтруктураДокПоУмолчанию.Вставить("РасходнаяНакладная","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ЗаказПоставщику",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("Инвентаризация","Инвентаризация");
		СтруктураДокПоУмолчанию.Вставить("ПриходнаяНакладная",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("РасходнаяНакладная","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("Списание","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратПоставщику","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратОтПокупателя",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("АктОПереоценке","Переоценка");
	ИначеЕсли Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда
		СтруктураДокПоУмолчанию.Вставить("РеализацияТоваровУслуг","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ЗаказПоставщику",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("Инвентаризация","Инвентаризация");
		СтруктураДокПоУмолчанию.Вставить("ПоступлениеТоваров",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("РеализацияТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("СписаниеТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратПоставщику","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратОтПокупателя",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("Переоценка","Переоценка");
	Иначе
		СтруктураДокПоУмолчанию.Вставить("ЗаказПокупателя","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ЗаказПоставщику",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("ИнвентаризацияТоваровНаСкладе","Инвентаризация");
		СтруктураДокПоУмолчанию.Вставить("ПоступлениеТоваровУслуг",ОперацияПриемкаТСДНазвание);
		СтруктураДокПоУмолчанию.Вставить("РеализацияТоваровУслуг","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("СписаниеТоваров","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровПоставщику","Подбор заказа");
		СтруктураДокПоУмолчанию.Вставить("ВозвратТоваровОтПокупателя",ОперацияПриемкаТСДНазвание);  	
		СтруктураДокПоУмолчанию.Вставить("ПереоценкаТоваровВРознице","Переоценка");
	КонецЕсли;
	
	//Спис = Новый СписокЗначений;
	//
	Для каждого СтрокаДокумент из СтруктураДокПоУмолчанию Цикл
		Документ = Метаданные.Документы.Найти(СтрокаДокумент.Ключ);
		Если Документ <> Неопределено Тогда
			ТаблДокументы.Вставить(СтрокаДокумент.Ключ, СтрокаДокумент.Значение);
			//Спис.Добавить(СтрокаДокумент.Ключ);
		КонецЕсли;
	КонецЦикла;
	//
	//СохранитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов", Спис);	

	ТаблПолей = Новый ТаблицаЗначений;
	ТаблПолей.Колонки.Добавить("Выгружать");
	ТаблПолей.Колонки.Добавить("ПолеДокумента1С");
    ТаблПолей.Колонки.Добавить("ПолеСтрокиДокументаТСД");
	
	строка = ТаблПолей.Добавить();
	строка.Выгружать = Истина;
	строка.ПолеДокумента1С = "Номенклатура";
	строка.ПолеСтрокиДокументаТСД = "ИдТовара";
	
	строка = ТаблПолей.Добавить();
	строка.Выгружать = Истина;
	строка.ПолеДокумента1С = "Количество";
	строка.ПолеСтрокиДокументаТСД = "КоличествоПлан";

	строка = ТаблПолей.Добавить();
	строка.Выгружать = Истина;
	строка.ПолеДокумента1С = "ЕдиницаИзмерения";
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		строка.ПолеДокумента1С = "Единица";
	КонецЕсли;
	строка.ПолеСтрокиДокументаТСД = "ИдУпаковки";
	
	строка = ТаблПолей.Добавить();
	строка.Выгружать = Истина;
	строка.ПолеДокумента1С = "ХарактеристикаНоменклатуры";
	строка.ПолеСтрокиДокументаТСД = "descr"; 
	
	строка = ТаблПолей.Добавить();
	строка.Выгружать = Истина;
	строка.ПолеДокумента1С = "СерияНоменклатуры";
	строка.ПолеСтрокиДокументаТСД = "serial"; 
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Выгружать");
	Реквизиты.Колонки.Добавить("Реквизит");
	Реквизиты.Колонки.Добавить("ПолеДокументаТСД");
	
	мФорматУмолч = Новый Соответствие();
	
	ТипыДокументовТСД = Неопределено;
	Если мEnv = Неопределено Тогда
		Попытка
			СоздатьStorageConnector();
			Если мStorageConnector <> Неопределено Тогда
				мEnv = мStorageConnector.ПолучитьСреду();
				ТипыДокументовТСД = мEnv.DocumentTypes;
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ТипыДокументовТСД = мEnv.DocumentTypes;
	КонецЕсли;
	
	Для каждого КлючЗнач из ТаблДокументы Цикл   
		ФорматДок = Новый Структура;
		ФорматДок.Вставить("ТипДокументаСмартс", КлючЗнач.Значение);
 		Если ТипыДокументовТСД <> Неопределено Тогда
			Для каждого ТипДокументаТСД из ТипыДокументовТСД Цикл
				ИмяДокумента = ТипДокументаТСД.name;
				Если ИмяДокумента = КлючЗнач.Значение Тогда
					ФорматДок.Вставить("ТипДокументаСмартсСиноним", ТипДокументаТСД.Alias);
				КонецЕсли; 
			КонецЦикла;	
		КонецЕсли;  
 		
		ФорматДок.Вставить("Реквизиты", Реквизиты);       	
		ФорматДок.Вставить("ТабличнаяЧасть", "Товары");
		
		ЕстьЯчекаВТЧ = Метаданные.Документы[КлючЗнач.Ключ].ТабличныеЧасти["Товары"].Реквизиты.Найти("Ячейка") <> неопределено; 
		Если  ЕстьЯчекаВТЧ Тогда
			ТаблПолей1 = ТаблПолей.Скопировать();
			строка = ТаблПолей1.Добавить();
			строка.Выгружать              = Истина;
			строка.ПолеДокумента1С        = "Ячейка";
			строка.ПолеСтрокиДокументаТСД = "ШтрихкодПервогоМеста"; 
		Иначе
			ТаблПолей1 = ТаблПолей.Скопировать();
		КонецЕсли;
		
		ДокументПереоценка = Ложь;
		Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
			ДокументПереоценка = КлючЗнач.Ключ = "АктПереоценки";
			ПолеДокумента1СЦенаВРознице ="Цена"; 
		ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
			ДокументПереоценка = КлючЗнач.Ключ = "АктОПереоценке"; 			
			ПолеДокумента1СЦенаВРознице ="НоваяРозничнаяЦена"; 
		ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
			ДокументПереоценка = КлючЗнач.Ключ = "Переоценка"; 			
			ПолеДокумента1СЦенаВРознице ="Цена"; 
		ИначеЕсли Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
			ДокументПереоценка = КлючЗнач.Ключ = "УстановкаЦенНоменклатурыВМагазине";
			ПолеДокумента1СЦенаВРознице = "ЦенаВРознице";
		иначе
			ДокументПереоценка = КлючЗнач.Ключ = "ПереоценкаТоваровВРознице";
			ПолеДокумента1СЦенаВРознице = "ЦенаВРознице";	
		КонецЕсли;
				
		Если ДокументПереоценка Тогда
			строка = ТаблПолей1.Добавить();
			строка.Выгружать              = Истина;
			строка.ПолеДокумента1С        = ПолеДокумента1СЦенаВРознице;
			строка.ПолеСтрокиДокументаТСД = "price"; 
		Иначе
			Попытка
				ВТЧдокументаЕстьРеквизитЦена = Метаданные.Документы[КлючЗнач.Ключ].ТабличныеЧасти.Товары.Реквизиты.Найти("Цена") <>Неопределено;
				Если ВТЧдокументаЕстьРеквизитЦена Тогда
					строка = ТаблПолей1.Добавить();
					строка.Выгружать              = Истина;
					строка.ПолеДокумента1С        = "Цена";
					строка.ПолеСтрокиДокументаТСД = "price"; 
				КонецЕсли;
			исключение
			КонецПопытки;
		КонецЕсли;
		
		ФорматДок.Вставить("ФорматВыгрузки", ТаблПолей1);
 		
		мФорматУмолч.Вставить(КлючЗнач.Ключ, ФорматДок); 
	КонецЦикла;	
	
КонецПроцедуры

Функция ТолькоЦифрыИзСтроки(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт

    
    Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
        Возврат 0;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
        Возврат 0;
    КонецЕсли; 
    
    Если НЕ УчитыватьПробелы Тогда
        СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
    КонецЕсли;
    
    Стр = "";
    Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
        КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
        Цифра = Сред(СтрокаПроверки, а, 1);
        Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
            Стр = Стр + Цифра;
        КонецЕсли; 
    КонецЦикла; 

    Если НЕ УчитыватьЛидирующиеНули Тогда
        Стр = Число(Стр);
    КонецЕсли;
    
    Возврат Стр;
    
КонецФункции

Процедура ПодключитьТерминал()
	Если мОбъект = Неопределено Тогда
		Обработка = Неопределено;
		Объект    = Неопределено;
		Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
		Если Объект = Неопределено Тогда
			Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		мОбъект = Объект;
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьДокумент()
	Если Документ1С = Неопределено Тогда
		Сообщить("Не выбран документ 1С для выгрузки!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ПодключитьТерминал();
	
	ИмяТипаДок = Неопределено;
	ФорматРеквизитов = Неопределено;
	ТабличнаяЧасть = Неопределено;
	ФорматТаблЧасти = Неопределено;
	ИсполняемыйНаСервере = Ложь;
	
	времКонтрольКоличества = Неопределено;
	
	СохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	Если СохрФормат = Неопределено Тогда
		СохрФормат = мФорматУмолч;
	КонецЕсли;
	 
	ФорматДок = СохрФормат.Получить(ТипДокумента1С);
	Если ФорматДок <> Неопределено Тогда
		ФорматДок.Свойство("ТипДокументаСмартс", ИмяТипаДок);
		ФорматДок.Свойство("Реквизиты", ФорматРеквизитов);
		ФорматДок.Свойство("ТабличнаяЧасть", ТабличнаяЧасть);
		ФорматДок.Свойство("ФорматВыгрузки", ФорматТаблЧасти);
		ФорматДок.Свойство("КонтрольКоличества", времКонтрольКоличества);
		ФорматДок.Свойство("ИсполняемыйНаСервере", ИсполняемыйНаСервере);
	Иначе
		Предупреждение("Для типа документа 1С " + ТипДокумента1С + " не задан формат выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если ИсполняемыйНаСервере = Неопределено Тогда
		ИсполняемыйНаСервере = Ложь;	
	КонецЕсли;
	
	Если БатчДрайвер Тогда
		ИсполняемыйНаСервере = Ложь;		
	КонецЕсли;
	
	//проверка выгружен ли документ{
	ДокументыМСМАРТС = мОбъект.Драйвер.ПолучитьДокументы(Неопределено);
	Если НЕ (ДокументыМСМАРТС = Неопределено Или ДокументыМСМАРТС = Null) Тогда
		ДокументУжеВыгруженНаТСД = Ложь;
		Для инд=0 По ДокументыМСМАРТС.Количество-1 Цикл
			ДокументМСМАРТС = ДокументыМСМАРТС.Элемент(инд);
			Если  ДокументМСМАРТС.Имя = Строка(Документ1С) И ДокументМСМАРТС.ИмяТипаДокумента = ИмяТипаДок Тогда
				ДокументУжеВыгруженНаТСД = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если ДокументУжеВыгруженНаТСД Тогда
			Если Вопрос("Документ уже выгружен на ТСД. Перезаписать?", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Нет Тогда
				Возврат
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//проверка выгружен ли документ}
	
	Если ФорматРеквизитов = Неопределено Тогда
		ФорматРеквизитов = Новый ТаблицаЗначений;
		ФорматРеквизитов.Колонки.Добавить("Выгружать");
		ФорматРеквизитов.Колонки.Добавить("Реквизит");
		ФорматРеквизитов.Колонки.Добавить("ПолеДокументаТСД");	
	КонецЕсли;	
	
	Если ТабличнаяЧасть = Неопределено Тогда
		ТабличнаяЧасть = "Товары";
	КонецЕсли;
	
	ТаблЧ = ВыбранныйДокумент1С.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧасть);
	Если ТаблЧ = Неопределено Тогда
		Сообщить("В выбранном документе отсутствует табличная часть " + ТабличнаяЧасть + ", выгрузка не возможна. Задайте правильный формат выгрузки.", СтатусСообщения.Важное);
		Возврат;	
	КонецЕсли;
	
	Если ФорматТаблЧасти = Неопределено Тогда
		ФорматТаблЧасти = Новый ТаблицаЗначений;
		ФорматТаблЧасти.Колонки.Добавить("Выгружать");
		ФорматТаблЧасти.Колонки.Добавить("ПолеДокумента1С");
	    ФорматТаблЧасти.Колонки.Добавить("ПолеСтрокиДокументаТСД");
		
		Если ТаблЧ.Реквизиты.Найти("Номенклатура") <> Неопределено Тогда
			строка = ФорматТаблЧасти.Добавить();
			строка.Выгружать = Истина;
			строка.ПолеДокумента1С = "Номенклатура";
			строка.ПолеСтрокиДокументаТСД = "ИдТовара";
		КонецЕсли;
		
		Если ТаблЧ.Реквизиты.Найти("Количество") <> Неопределено Тогда
			строка = ФорматТаблЧасти.Добавить();
			строка.Выгружать = Истина;
			строка.ПолеДокумента1С = "Количество";
			строка.ПолеСтрокиДокументаТСД = "КоличествоПлан";
		КонецЕсли;
		Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
			Если ТаблЧ.Реквизиты.Найти("Единица") <> Неопределено Тогда
				строка = ФорматТаблЧасти.Добавить();
				строка.Выгружать = Истина;
				строка.ПолеДокумента1С = "Единица";
				строка.ПолеСтрокиДокументаТСД = "ИдУпаковки"; 
			КонецЕсли;
		Иначе
			Если ТаблЧ.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
				строка = ФорматТаблЧасти.Добавить();
				строка.Выгружать = Истина;
				строка.ПолеДокумента1С = "ЕдиницаИзмерения";
				строка.ПолеСтрокиДокументаТСД = "ИдУпаковки"; 
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблЧ.Реквизиты.Найти("ХарактеристикаНоменклатуры") <> Неопределено Тогда
			строка = ФорматТаблЧасти.Добавить();
			строка.Выгружать = Истина;
			строка.ПолеДокумента1С = "ХарактеристикаНоменклатуры";
			строка.ПолеСтрокиДокументаТСД = "descr"; 
		КонецЕсли;

		Если ТаблЧ.Реквизиты.Найти("СерияНоменклатуры") <> Неопределено Тогда
			строка = ФорматТаблЧасти.Добавить();
			строка.Выгружать = Истина;
			строка.ПолеДокумента1С = "СерияНоменклатуры";
			строка.ПолеСтрокиДокументаТСД = "serial"; 
		КонецЕсли;
	
	КонецЕсли;
	
	Попытка
		ДокументТСД = Новый COMОбъект("Cleverence.Warehouse.Document");
		ДокументТСД.Ид = СокрЛП(ВыбранныйДокумент1С.Метаданные().Имя + "#"+XMLСтрока(ВыбранныйДокумент1С.ссылка));//когда в номере запрещенные знаки, ошибки появляются
		ДокументТСД.ИмяТипаДокумента = ИмяТипаДок;
		        		
		Если СвязьССервером() Тогда
			Если ВыгрузитьОбщДок Тогда
				ДокументТСД.ИмяПользователя = "";
				ДокументТСД.ВыдаватьПоШтрихкоду = Истина;
				//ДокументТСД.Штрихкод = ТолькоЦифрыИзСтроки(ВыбранныйДокумент1С.Номер); // закомментировано 22.01.2013, нужно всегда проставлять, для всех видов драйверов
			Иначе
				ДокументТСД.ИмяПользователя = Пользователь;
			КонецЕсли;
		Иначе
			ДокументТСД.ИмяПользователя = "оператор";
		КонецЕсли;
		
		ДокументТСД.Штрихкод = ТолькоЦифрыИзСтроки(ВыбранныйДокумент1С.Номер);
		
		ДокументТСД.ИдСклада = "1";
		ДокументТСД.Имя = Строка(Документ1С);
		ДокументТСД.ДатаСоздания = ТекущаяДата();
		
		ДокументТСД.УстановитьПоле("КонтрольКолва", ?(КонтрольКоличества,1,0));
		ДокументТСД.УстановитьПоле("ПоЯчейкам", ?(ОтборПоЯчейкам,1,0));
		// ДокументТСД.УстановитьПоле("ИсполняемыйНаСервере", ?(ИсполняемыйНаСервере,1,0));
		ДокументТСД.ИсполняемыйНаСервере = ИсполняемыйНаСервере;

		Если времКонтрольКоличества <> КонтрольКоличества Тогда
			ФорматДок.Вставить("КонтрольКоличества", КонтрольКоличества);
			СохрФормат.Вставить(ТипДокумента1С, ФорматДок);
			СохранитьЗначение(мИмяДляХраненияНастроек, СохрФормат);
		КонецЕсли;
		
		Для каждого строкаРекв из ФорматРеквизитов Цикл
			Если Не строкаРекв.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			значение = ВыбранныйДокумент1С[строкаРекв.Реквизит];
			
			Если не ТипЗначенияДоступенВСМАРТС(значение) Тогда
				значение = Строка(значение);
				значение = ?(значение = "<>","",значение);
			КонецЕсли;
			Если ЗначениеЗаполнено(значение) Тогда
				ДокументТСД.УстановитьПоле(строкаРекв.ПолеДокументаТСД, значение);
			КонецЕсли;
		КонецЦикла;
		
		Инд = 1;
		Для каждого строка из ВыбранныйДокумент1С[ТабличнаяЧасть] Цикл
			Товар = Неопределено;
			СтрокаДокументаТСД = Новый COMОбъект("Cleverence.Warehouse.DocumentItem");
			
			Для каждого строкаФормата из ФорматТаблЧасти Цикл
				Если Не строкаФормата.Выгружать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТаблЧ.Реквизиты.Найти(строкаФормата.ПолеДокумента1С) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					значение = строка[строкаФормата.ПолеДокумента1С];
				Исключение
					Продолжить;
				КонецПопытки;
				
				ИмяПоляТСД = строкаФормата.ПолеСтрокиДокументаТСД;
				Если ИмяПоляТСД = "ProductId" или ИмяПоляТСД = "ИдТовара" Тогда
					СтрокаДокументаТСД.ИдТовара = XMLСтрока(Значение);
					Товар = значение;
				ИначеЕсли ИмяПоляТСД = "DeclaredQuantity" или ИмяПоляТСД = "КоличествоПлан"  Тогда
					СтрокаДокументаТСД.КоличествоПлан = значение;
				ИначеЕсли ИмяПоляТСД = "CurrentQuantity" или ИмяПоляТСД = "КоличествоФакт" Тогда
					СтрокаДокументаТСД.КоличествоФакт = значение;
				ИначеЕсли ИмяПоляТСД = "FirstStorageBarcode" или ИмяПоляТСД = "ШтрихкодПервогоМеста" Тогда
					СтрокаДокументаТСД.ШтрихкодПервогоМеста = СокрЛП(значение);
				ИначеЕсли ИмяПоляТСД = "PackingId" или ИмяПоляТСД = "ИдУпаковки" Тогда
					СтрокаДокументаТСД.ИдУпаковки = СокрЛП(значение.Наименование);
				ИначеЕсли ИмяПоляТСД = "SSCC" или ИмяПоляТСД = "КодЕдиницыХранения" Тогда
					СтрокаДокументаТСД.КодЕдиницыХранения = СокрЛП(значение);
				ИначеЕсли ИмяПоляТСД = "RegisteredDate" или ИмяПоляТСД = "ДатаРегистрации" Тогда
					СтрокаДокументаТСД.ДатаРегистрации = значение;
				ИначеЕсли ИмяПоляТСД = "ExpiredDate" или ИмяПоляТСД = "СрокГодности" Тогда
					СтрокаДокументаТСД.СрокГодности = значение;
				ИначеЕсли ИмяПоляТСД = "SecondStorageBarcode" или ИмяПоляТСД = "ШтрихкодВторогоМеста" Тогда
					СтрокаДокументаТСД.ШтрихкодВторогоМеста = СокрЛП(значение);
				Иначе
					Если не ТипЗначенияДоступенВСМАРТС(значение) Тогда
						значение = СокрЛП(значение);
						значение = ?(значение = "<>","",значение);
					КонецЕсли;  
					Если ЗначениеЗаполнено(значение) Тогда  						
						СтрокаДокументаТСД.УстановитьПоле(ИмяПоляТСД, значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПустаяСтрока(СтрокаДокументаТСД.ИдТовара) Тогда
				Сообщить("В строке документа " + Инд + " не выгружается товар: не заполнено обязательное поле ""ИдТовара"" строки документа ТСД, проверьте формат выгрузки документа. " , СтатусСообщения.Важное);
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаДокументаТСД.ИдУпаковки) И ЗначениеЗаполнено(Товар) И ТипЗнч(Товар)= Тип("СправочникСсылка.Номенклатура") Тогда
				Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
					ЕдиницаХраненияОстатков =  Товар.БазоваяЕдиницаИзмерения;
				ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
					ЕдиницаХраненияОстатков =  Товар.БазоваяЕдиница;
				ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
					ЕдиницаХраненияОстатков =  Товар.БазоваяЕдиницаИзмерения;
				иначе
					ЕдиницаХраненияОстатков =  Товар.ЕдиницаХраненияОстатков;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЕдиницаХраненияОстатков) Тогда
					СтрокаДокументаТСД.ИдУпаковки = СокрЛП(ЕдиницаХраненияОстатков.Наименование);
				КонецЕсли;   
			КонецЕсли;

			Если ПустаяСтрока(СтрокаДокументаТСД.ИдУпаковки) Тогда
				Сообщить("В строке документа " + Инд + " не выгружается единица измерения (упаковка): не заполнено обязательное поле ""ИдУпаковки"" строки документа ТСД, проверьте формат выгрузки документа." , СтатусСообщения.Важное);
			КонецЕсли;
			
			ДокументТСД.СтрокиПлан.Добавить(СтрокаДокументаТСД);
			Инд = Инд + 1;
		КонецЦикла;
		
		Если Нрег(мТипПодключенногоДрайвера) = "wi-fi prof" Тогда
			мОбъект.Драйвер.ПроверятьСтрокиДокумента(Ложь);
		КонецЕсли;
		
		Ответ = мОбъект.Драйвер.ВыгрузитьДокумент(ДокументТСД);		
		Если Не Ответ Тогда
			НомерОшибки = мОбъект.Драйвер.ПолучитьОшибку(мОбъект.ОписаниеОшибки);
			Сообщить("Ошибка: " + мОбъект.ОписаниеОшибки, СтатусСообщения.Важное);
			Возврат;
		Иначе
			Сообщить("Документ """ + ВыбранныйДокумент1С + """ выгружен на ТСД.", СтатусСообщения.Обычное);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Ошибка при выгрузке документа!");
	КонецПопытки;

	мОбъект.Драйвер.ОсвободитьРесурсы();
	
КонецПроцедуры

Функция ТипЗначенияДоступенВСМАРТС(Результат) Экспорт
	
	Если ТипЗнч(Результат)  =  Тип("Число")
		или  ТипЗнч(Результат)  =  Тип("Строка")
        или  ТипЗнч(Результат)  =  Тип("Булево") 
		или  ТипЗнч(Результат)  =  Тип("Дата")
		Тогда 
		Возврат Истина
	Иначе
		Возврат ложь;		
	КонецЕсли;
		
КонецФункции   

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыгрузитьДокумент();
	
КонецПроцедуры

Процедура ТипДокумента1СПриИзменении(Элемент) Экспорт
	
	Документ1С = Неопределено;
	УстановитьДокументИнфо();
	ЗаполнитьПользователей();
	ОбновитьКонтрольКоличества();
	
КонецПроцедуры

Процедура ДокументВыборНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ТипДокумента1С.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПодбора = Документы[ЭлементыФормы.ТипДокумента1С.Значение].ПолучитьФормуВыбора(, ЭлементыФормы.Документ1С);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Истина;
	ФормаПодбора.МножественныйВыбор = Ложь;
		
	ФормаПодбора.Открыть();
	
КонецПроцедуры

Процедура Документ1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ВыбранныйДокумент1С = ВыбранноеЗначение.ПолучитьОбъект();
	КонецЕсли;
	
КонецПроцедуры

Процедура Документ1СОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ВыбранныйДокумент1С <> Неопределено и Документ1С <> Неопределено Тогда
		ВыбранныйДокумент1С.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФорматВыгрузкиНажатие(Элемент)	
	
	мПоследнийТипДокумента1С = ТипДокумента1С;
	
	Форма = ПолучитьФорму("ФормаСпискаДокументов", ЭтаФорма);
	Форма.ТекущийТипДокумента = ЭлементыФормы.ТипДокумента1С.Значение;
	Форма.ОткрытьМодально();
	
	ЗагрузитьФормат(мПоследнийТипДокумента1С); 
	
	Если ТипДокумента1С <> мПоследнийТипДокумента1С Тогда
		ТипДокумента1СПриИзменении(ЭлементыФормы.ТипДокумента1С);	
	КонецЕсли;
	
	ЗаполнитьПользователей();
	
КонецПроцедуры

Функция ПолучитьСтрокуПодключения(ИпАдрес)
	
	СтрокаПодключения = ИпАдрес;
	Если ПустаяСтрока(СтрокаПодключения) Тогда
		СтрокаПодключения = "localhost:"+?((Нрег(мТипПодключенногоДрайвера) = "wi-fi prof"),"9500","9400");
	КонецЕсли;
	
	СтрокаПодключения = НРег(СокрЛП(СтрокаПодключения));
	Если СтрДлина(СтрокаПодключения) < 8 Тогда
		СтрокаПодключения = "http://" + СтрокаПодключения;	
	Иначе
		Если Лев(СтрокаПодключения, 7) <> "http://" И Лев(СтрокаПодключения, 8) <> "https://" Тогда
			СтрокаПодключения = "http://" + СтрокаПодключения;	
		КонецЕсли;
	КонецЕсли;
			
	Если Прав(СтрокаПодключения, 5) <> ".asmx" Тогда
		
		Инд = 0;
		Если Лев(СтрокаПодключения, 7) = "http://" Тогда
			Инд = 7;
		ИначеЕсли Лев(СтрокаПодключения, 8) = "https://" Тогда
			Инд = 8;
        КонецЕсли;
		
		Если Найти(Прав(СтрокаПодключения, СтрДлина(СтрокаПодключения)-Инд), ":") = 0 Тогда
			СтрокаПодключения = СтрокаПодключения + ?((Нрег(мТипПодключенногоДрайвера) = "wi-fi prof"),":9500",":9400");
		КонецЕсли;
		СтрокаПодключения = СтрокаПодключения + "/MobileSMARTS/DataStorage.asmx";
	КонецЕсли;	
			
	Возврат СтрокаПодключения;
	
КонецФункции

Функция ПолучитьStorageConnector(АдресСервера, Прокси, ПортПрокси)
	
	СтрокаПодключения = ПолучитьСтрокуПодключения(АдресСервера);
	
	Попытка
		StorageConnector = Новый COMОбъект("Cleverence.Warehouse.StorageConnector");
	Исключение
		Сообщить("Ошибка при создании компоненты Cleverence.Warehouse.StorageConnector");	
		Возврат Неопределено;
	КонецПопытки;
	
	Если StorageConnector = Неопределено Тогда 
		Сообщить("Ошибка при создании компоненты Cleverence.Warehouse.StorageConnector");	
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Если ПустаяСтрока(Прокси) Тогда
			StorageConnector.НастроитьСоединение(СтрокаПодключения);		
		Иначе
			StorageConnector.НастроитьСоединениеЧерезПрокси(СтрокаПодключения, Прокси, ПортПрокси);
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при подключении к серверу терминалов. Проверьте параметры подключения.");	
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат StorageConnector;
	
КонецФункции

Процедура СоздатьStorageConnector()
	
	Если Нрег(мТипПодключенногоДрайвера) = "batch" Тогда
		Возврат
	КонецЕсли;
	
	Если мОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мОбъект.Параметры.ОбменЧерезПапку Тогда
		Возврат;
	КонецЕсли;
	
	Если мStorageConnector = Неопределено Тогда
		времСтрокаПодключенияКСерверу = Неопределено;
		времПрокси                    = Неопределено;
		времПортПрокси                = Неопределено;
		
		мОбъект.Параметры.Свойство("ТипСвязи", мТипСвязи);
		мОбъект.Параметры.Свойство("СтрокаПодключенияКСерверу", времСтрокаПодключенияКСерверу);
		
		мТипСвязи = ?(мТипСвязи = "Сервер" ,1,0);
		
		мОбъект.Параметры.Свойство("Прокси", времПрокси);
	    мОбъект.Параметры.Свойство("ПортПрокси", времПортПрокси);
		
		СтрокаПодключенияКСерверу = ?(времСтрокаПодключенияКСерверу = Неопределено, "localhost", времСтрокаПодключенияКСерверу); 
		Прокси = ?(времПрокси = Неопределено, "", времПрокси);
	    ПортПрокси = ?(времПортПрокси = Неопределено, 0, времПортПрокси);

		Попытка
			мStorageConnector = ПолучитьStorageConnector(СтрокаПодключенияКСерверу, Прокси, ПортПрокси);
			Если  мStorageConnector = Неопределено Тогда
				мВидимостьЭлементовФормы = Ложь;
				ВидимостьЭлементовФормы();
			КонецЕсли;
		Исключение
			Сообщить("Ошибка при получении компоненты StorageConnector", СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПользователей()
	
	ЭлементыФормы.Пользователь.СписокВыбора.Очистить();
	Если мEnv = Неопределено или мСохрФормат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаДок = "";
	Попытка
		ФорматДок = мСохрФормат.Получить(ТипДокумента1С);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ФорматДок <> Неопределено Тогда
		ФорматДок.Свойство("ТипДокументаСмартс", ИмяТипаДок);
	Иначе
		Возврат;
	КонецЕсли;	

	Если ПустаяСтрока(ИмяТипаДок) Тогда
		Возврат;
	КонецЕсли;	
	
	Для инд = 0 По мEnv.Пользователи.Количество-1 Цикл
		ПользовательТСД = мEnv.Пользователи.Элемент(инд);		
		Если Не ПустаяСтрока(ИмяТипаДок) Тогда
			Для инд1 = 0 По мEnv.ГруппыПользователей.Количество-1 Цикл
				ГруппаПользователейТСД = мEnv.ГруппыПользователей.Элемент(инд1);				
				Если ПользовательТСД.ИмяГруппы = ГруппаПользователейТСД.Имя Или ПользовательТСД.ИмяГруппы = ГруппаПользователейТСД.Ид Тогда	
					Для инд2 = 0 По ГруппаПользователейТСД.ТипыДокументов.Count_2-1 Цикл
						ТипДокументаТСД = ГруппаПользователейТСД.ТипыДокументов.Item(инд2);
						Если ТипДокументаТСД.Name = ИмяТипаДок Тогда
							ЭлементыФормы.Пользователь.СписокВыбора.Добавить(ПользовательТСД.Ид, ПользовательТСД.Имя); 
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
            КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементыФормы.Пользователь.СписокВыбора.Количество() > 0 Тогда
		Пользователь = ЭлементыФормы.Пользователь.СписокВыбора[0].Значение;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьПользователей() Экспорт
	ПодключитьТерминал();
    ЭлементыФормы.Пользователь.СписокВыбора.Очистить();
	ЭлементыФормы.Пользователь.Значение = "";	
	
	СоздатьStorageConnector();
	
	ОбновитьИнтерфейс1();
	
	Если мStorageConnector = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мEnv = мStorageConnector.ПолучитьСреду();
	ОбновитьПользователей();
	
	УстановитьДоступностьФлажкаВыгрузитьОбщийДокумент();

КонецПроцедуры

Процедура УстановитьДоступностьФлажкаВыгрузитьОбщийДокумент()
	
	Если мОбъект = Неопределено тогда 
		Возврат
	КонецЕсли;
 
		ИсполняемыйНаСервере = Ложь;
 	СохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	Если СохрФормат = Неопределено Тогда
		СохрФормат = мФорматУмолч;
	КонецЕсли;
	 
	ФорматДок = СохрФормат.Получить(ТипДокумента1С);
	Если ФорматДок <> Неопределено Тогда
 		ФорматДок.Свойство("ИсполняемыйНаСервере", ИсполняемыйНаСервере);
	КонецЕсли;
	
	Если ИсполняемыйНаСервере = Неопределено Тогда
		ИсполняемыйНаСервере = Ложь;	
	КонецЕсли;
	
	Если ИсполняемыйНаСервере Тогда
		ВыгрузитьОбщДок = Истина; 
	КонецЕсли;
	
	ЭлементыФормы.ГруппаИсполнитель.Видимость      = не ИсполняемыйНаСервере и мТипСвязи;
	ЭлементыФормы.ВыгрузитьОбщДок.Видимость        = не ИсполняемыйНаСервере и мТипСвязи;
	ЭлементыФормы.НадписьПользовательТСД.Видимость = не ИсполняемыйНаСервере и мТипСвязи;
	ЭлементыФормы.Пользователь.Видимость           = не ИсполняемыйНаСервере и мТипСвязи;
	
	ЭлементыФормы.НадписьОбщийДокумент.Видимость = ИсполняемыйНаСервере и мТипСвязи; 	 
	
КонецПроцедуры

Процедура ВыгрузитьОбщДокПриИзменении(Элемент)
	
	ЭлементыФормы.Пользователь.Доступность = Не ВыгрузитьОбщДок;
	
КонецПроцедуры

Процедура ТерминалСбораДанныхПриИзменении(Элемент = Неопределено)
	
	ВидимостьЭлементовФормы();
	мОбъект = Неопределено;
	мStorageConnector = Неопределено;
	ПодключитьТерминал();
	ЗаполнитьПользователей();
	ЗагрузитьСписокДокументов();
	
КонецПроцедуры

Процедура ЗагрузитьСписокДокументов()
	
	ДокументыСервера.Очистить();
	
	Если СвязьССервером() Тогда
		ПодключитьТерминал();	
		Если  мОбъект = Неопределено Тогда
			Предупреждение("Список документов не получен! Проверьте связь с сервером.");
			Возврат;
		КонецЕсли;
		
		СоздатьStorageConnector();
		
		ДокументыМСМАРТС = мStorageConnector.ПолучитьДокументы("", Ложь);
		Если ДокументыМСМАРТС = Неопределено Или ДокументыМСМАРТС = Null Тогда
			Предупреждение("Список документов не получен! Проверьте связь с сервером.");
			Возврат;
		КонецЕсли;
	Иначе	
		Если мОбъект = Неопределено Тогда
			Возврат
		КонецЕсли;
		ДокументыМСМАРТС = мОбъект.Драйвер.ПолучитьДокументы(Неопределено);
		Если ДокументыМСМАРТС = Неопределено Или ДокументыМСМАРТС = Null Тогда
			Предупреждение("Список документов не получен! Проверьте связь с терминалом.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для инд=0 По ДокументыМСМАРТС.Count-1 Цикл
		ДокументМСМАРТС         = ДокументыМСМАРТС.Элемент(инд);
		Строка                  = ДокументыСервера.Добавить();
		Строка.Документ         = ДокументМСМАРТС.Имя;
		Строка.Ид               = ДокументМСМАРТС.Ид;
		Строка.Изменен          = ДокументМСМАРТС.Изменен;
		Строка.Завершен         = ДокументМСМАРТС.Завершен;
		Строка.ДатаДокументаТСД = ДокументМСМАРТС.ДатаСоздания;
		Строка.СтрокФакт        = ДокументМСМАРТС.СтрокиФакт.Количество;
		Если ДокументМСМАРТС.CreatedOnPDA  = Истина Тогда
			Строка.СтрокЗавл = 0;
		Иначе
			Строка.СтрокЗавл = ДокументМСМАРТС.СтрокиПлан.Количество;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДокументМСМАРТС.Назначение) Тогда
			Строка.Пользователь = ДокументМСМАРТС.Назначение;
		Иначе
			Строка.Пользователь = ДокументМСМАРТС.ИмяПользователя;
		КонецЕсли;
		
		Строка.ТСД = ДокументМСМАРТС.DeviceIP;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПриСменеСтраницыПанель(Элемент, ТекущаяСтраница)	
	
	Если ТекущаяСтраница = 1 Тогда
		ЗагрузитьСписокДокументов();
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель2ОтметитьВсе(Кнопка)
	
	Для каждого Строка из ДокументыСервера Цикл
		Строка.Включен = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель2СнятьВсе(Кнопка)
	
	Для каждого Строка из ДокументыСервера Цикл
		Строка.Включен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель2УдалитьВыбранные(Кнопка)
 	
 	Если  ДокументыСервера.Найти(Истина,"Включен") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
 	Если Вопрос("Удалить выбранные документы?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если мStorageConnector = Неопределено Тогда
		СписокИд = Новый СписокЗначений;
		Для каждого Строка из ДокументыСервера Цикл
			Если Строка.Включен = Истина Тогда
				СписокИд.Добавить(Строка.Ид);
			КонецЕсли;
		КонецЦикла;
		мОбъект.Драйвер.УдалитьДокументы(СписокИд);
	Иначе
		Для каждого Строка из ДокументыСервера Цикл
			Если Строка.Включен = Истина Тогда
				мStorageConnector.RemoveDocument(Строка.Ид);
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;      	
	
	ЗагрузитьСписокДокументов();
	
КонецПроцедуры

Процедура КоманднаяПанель2Действие(Кнопка)
	
	ЗагрузитьСписокДокументов();
	
КонецПроцедуры

Процедура ТипДокумента1СОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЭлементыФормы.ТипДокумента1С.СписокВыбора.Количество()>0 тогда
		Если Вопрос("Очистить список типов документов?", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Очистить();
			ТипДокумента1С = "";
			мФорматПользователя = Истина;
			СохранитьЗначение(мИмяДляХраненияНастроек,Новый Соответствие);
			СохранитьЗначение(мИмяДляХраненияНастроек+"_ФормаСпискаДокументов",Новый СписокЗначений);
			ЗаполнитьПользователей();
		Конецесли;	
	КонецЕсли;
	
	Если ЭлементыФормы.ТипДокумента1С.СписокВыбора.Количество() = 0 и Вопрос("Вернуть формат по умолчанию?", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
		мФорматПользователя = Ложь;
		СохранитьЗначение(мИмяДляХраненияНастроек+"_мФорматПользователя",мФорматПользователя);
		Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ИначеЕсли  Найти(мНазваниеКонфигурации,"штрихм")>0 Тогда
		ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда
		Иначе
			Выполнить("ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма)");//избавляемя от "циклической ссылки"
		КонецЕсли;
		НачальноеЗначениеВыбора = Неопределено;
		ПриОткрытии();
	КонецЕсли;
	
	ЭлементыФормы.Документ1С.Значение = Неопределено;
		
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение(мИмяДляХраненияНастроек+"_мФорматПользователя",мФорматПользователя);
	
	СохранитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО",ТерминалСбораДанных);
	
	ПорядокКолонокТабличныхЧастей  = Новый Структура;
	ТаблицаДокументыСервера = Новый ТаблицаЗначений;
	ТаблицаДокументыСервера.Колонки.Добавить("Имя");
	ТаблицаДокументыСервера.Колонки.Добавить("Ширина");
	ТаблицаДокументыСервера.Колонки.Добавить("Видимость");
	Для каждого колонка из Элементыформы.ДокументыСервера.Колонки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументыСервера.Добавить(),колонка);
	КонецЦикла;
	ПорядокКолонокТабличныхЧастей.Вставить("ДокументыСервера", ТаблицаДокументыСервера);
	СохранитьЗначение(ОбработкаОбъект.Метаданные().Имя+"ПорядокКолонокТабличныхПолей",ПорядокКолонокТабличныхЧастей); //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	          
КонецПроцедуры

Функция СвязьССервером()
	
	Возврат (мТипСвязи = 1); 
	
КонецФункции

Процедура ОбновитьИнтерфейс1()
	
	ВидимостьЭлементовWiFi                                    = СвязьССервером();
	ЭлементыФормы.НадписьПользовательТСД.Видимость            = ВидимостьЭлементовWiFi;
	ЭлементыФормы.Пользователь.Видимость                      = ВидимостьЭлементовWiFi;
	ЭлементыФормы.ВыгрузитьОбщДок.Видимость                   = ВидимостьЭлементовWiFi;
	ЭлементыФормы.Панель.Страницы.СтраницаДокументы.Заголовок = ?(ВидимостьЭлементовWiFi,"Документы сервера","Документы терминала");
	ЭлементыФормы.ГруппаИсполнитель.Видимость                 = ВидимостьЭлементовWiFi;
		
КонецПроцедуры	

Процедура ОсновныеДействияФормыСправка(Кнопка)

	ФормаСправки = ПолучитьФорму("ФормаСправки");
	ФормаСправки.МакетСправки = "Окно обработки выгрузки документов батч.mht";
	Если мТипСвязи = 1 Тогда
		ФормаСправки.МакетСправки = "Окно обработки выгрузки документов wi-fi.mht";
	КонецЕсли;
	
	ФормаСправки.Заголовок = "Справка к форме """+ЭтаФорма.Заголовок+""" обработки """+ ОбработкаОбъект.Метаданные().Синоним+"""";
	
	Если НЕ ФормаСправки.Открыта() Тогда
		ФормаСправки.Открыть();
	Иначе
		ФормаСправки.ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДокументыСервераПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.Ячейки.СтрокФакт.Значение <  ОформлениеСтроки.Ячейки.СтрокЗавл.Значение Тогда 
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		иначе
			ОформлениеСтроки.ЦветТекста =  ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
	КонецЦикла;	


КонецПроцедуры

Процедура УстановитьДокументИнфо() Экспорт
	
	ФорматДок = мСохрФормат.Получить(ТипДокумента1С);
	Если ФорматДок <> Неопределено Тогда
		времТипДокументаСмартс        = Неопределено;
		времТипДокументаСмартсСиноним = Неопределено;
		
		ФорматДок.Свойство("ТипДокументаСмартс", времТипДокументаСмартс);
		ФорматДок.Свойство("ТипДокументаСмартсСиноним", времТипДокументаСмартсСиноним);
		
		Если времТипДокументаСмартс <> Неопределено Тогда
			ЭлементыФормы.ДокументИнфо.Заголовок = "Выгрузка на ТСД в документ """ + ?(ЗначениеЗаполнено(времТипДокументаСмартсСиноним),времТипДокументаСмартсСиноним,времТипДокументаСмартс)+"""";
		Иначе
			ЭлементыФормы.ДокументИнфо.Заголовок = "Для типа документа 1С """ + ТипДокумента1С + """ не задан тип документа Mobile SMARTS для выгрузки.";
		КонецЕсли;	
	Иначе
		ЭлементыФормы.ДокументИнфо.Заголовок = "Формат выгрузки не задан!";
	КонецЕсли;
	
КонецПроцедуры

Процедура ТерминалСбораДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	//+AVA. 22.05.2014. №159.
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и мВерсияКонфигурации >= 5020109  Тогда
		Попытка
			НастройкиТСД = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(ТерминалСбораДанных));
		Исключение
			НастройкиТСД = ТерминалСбораДанных
		КонецПопытки; 
		
		ФормаТСД = НастройкиТСД.ПолучитьФорму();
		ФормаТСД.ОткрытьМодально(); 	
		//Если ФормаТСД.НастройкиКлеверенсИзменены тогда
			ТерминалСбораДанныхПриИзменении();
		//КонецЕсли;
	КонецЕсли;
	//-AVA. 22.05.2014. №159.

КонецПроцедуры

мСписокТерминалов           = Неопределено;
мНетОшибки                  = Неопределено;
мОшибкаНеизвестно           = Неопределено;

Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТорговоеОборудование.Ссылка как Идентификатор
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
	|ГДЕ
	|	ТорговоеОборудование.КодВида = ""ТСД""
	|	и ТорговоеОборудование.ПодключатьПриЗапуске 
	|	И (НЕ ТорговоеОборудование.ПометкаУдаления)");
	
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
ИначеЕсли  Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
	
	//+AVA. 22.05.2014. №159.
	Если мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  		
		ЭлементыФормы.ТерминалСбораДанных.КнопкаОткрытия = Истина;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиТорговогоОборудования.НастройкаТорговогоОборудования КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиТорговогоОборудования КАК НастройкиТорговогоОборудования
		|ГДЕ
		|	НастройкиТорговогоОборудования.НастройкаПоУмолчанию
		|	И НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ТипОборудования.Драйвер.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|	И НЕ НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ПометкаУдаления");  		
	Иначе 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТорговоеОборудование.Ссылка как Идентификатор
		|ИЗ
		|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
		|ГДЕ
		|	ТорговоеОборудование.Родитель = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ТерминалыСбораДанных)
		|	И (НЕ ТорговоеОборудование.ПометкаУдаления)
		|	И ТорговоеОборудование.Драйвер В
		|			(ВЫБРАТЬ
		|				ДрайвераТорговогоОборудования.Ссылка
		|			ИЗ
		|				Справочник.ДрайвераТорговогоОборудования КАК ДрайвераТорговогоОборудования
		|			ГДЕ
		|				ДрайвераТорговогоОборудования.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|				И (НЕ ДрайвераТорговогоОборудования.ПометкаУдаления))");
	КонецЕсли;
	//-AVA. 22.05.2014. №159.
	
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда
	мСписокТерминалов = новый СписокЗначений;
	мСписокТерминалов.Добавить("Клеверенс (список поддерживаемых ТСД в справке)");
	мНетОшибки         = "Нет ошибки";
	мОшибкаНеизвестно  = "Ошибка не известна";    	
Иначе	
	Выполнить("мСписокТерминалов = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных)");
	Выполнить("мНетОшибки = Перечисления.ТООшибкиОбщие.ПустаяСсылка()");
	Выполнить("мОшибкаНеизвестно = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
КонецЕсли;

//мИмяДляХраненияНастроекПрефикс = "CleverenceВыгрузкаДокументов"+мНазваниеКонфигурации;
мИмяДляХраненияНастроек        = мИмяДляХраненияНастроекПрефикс;
мДокЗагружены           = Ложь;  
мФорматПользователя     = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_мФорматПользователя"); 
мФорматПользователя     = ?(мФорматПользователя = неопределено,Ложь,мФорматПользователя);  

Заголовок = "Клеверенс Софт: Выгрузка документов на ТСД";
мВидимостьЭлементовФормы = Ложь;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек{
мТипПодключенногоДрайвера = "";
Если мСписокТерминалов.Количество() > 0 Тогда
	ТерминалСбораДанных                              = мСписокТерминалов[0];
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТерминалСбораДанных =  Строка(ТерминалСбораДанных.УникальныйИдентификатор());
	КонецЕсли;
	
	ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
	Если ПоследняяРаботаСТО <> Неопределено Тогда
		для каждого СтрокаТерминал из мСписокТерминалов Цикл
			Если Найти(мНазваниеКонфигурации, "штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
				ТерминалСбораДанных_ =  Строка(СтрокаТерминал.УникальныйИдентификатор());
			Иначе
				ТерминалСбораДанных_ =  ТерминалСбораДанных
			КонецЕсли;
			Если ТерминалСбораДанных_ =  ПоследняяРаботаСТО Тогда
				ТерминалСбораДанных =   ПоследняяРаботаСТО;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
     	
	Обработка = Неопределено;
	Объект    = Неопределено;
	ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	мОбъект = Объект;
	Если Объект <> Неопределено Тогда
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
	КонецЕсли;
	Если Обработка <> Неопределено Тогда
		Если Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда 
			мСписокТерминалов.Очистить();
			ОбработкаОписание = Обработка.ПолучитьОписание();
			Для каждого СтрокаМассива из ОбработкаОписание.СписокМоделей  Цикл
				мСписокТерминалов.Добавить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек{