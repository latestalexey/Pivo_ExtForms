Перем мСписокТерминалов;
Перем мОбъект Экспорт;
Перем мПрефиксВесовогоТовара;
Перем мДлинаКодаВесовогоТовара;
            
Перем мEAN8;
Перем мEAN13;
Перем мCODE39;

Перем мНетОшибки;
Перем мОшибкаНеизвестно;
Перем мОшибкаНеизвестныйШтрихкод;

Перем мФорма;
Перем мДанныеСервера;
Перем мПараметрыСвязиСтрокТЧ;
Перем мКартинкаСерийныеНомера;
Перем мИмяДляХраненияНастроекПрефикс Экспорт;
Перем мИспользоватьСерии;
Перем мПоказатьСерийныеНомераШтрихМ;
Перем мВидимостьЭлементовФормы Экспорт;
Перем ЕстьСправочникХарактеристикиНоменклатуры;

Перем ДокТСДИд;
Перем ДокТСДПоЯчекам;
Перем ТЗНовыеШтрихкоды Экспорт;

Перем ТаблицаСоВсемиПолямиДокументаТСД Экспорт;
Перем ГруппроватьСтрокиТаблицыТовары Экспорт;

Перем НоваяработаССериями;

Перем ДокументыМСМАРТС;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент, ПодключИдентификатор=Неопределено)
	
	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;
	
	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	
	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегТО.Идентификатор КАК Идентификатор,
	|	РегТО.Модель.Наименование КАК Наименование,
	|	РегТО.Модель КАК Модель,
	|	РегТО.Параметры КАК Параметры
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|	РегТО.Компьютер = &Компьютер
	|	"+?(Найти(мНазваниеКонфигурации,"управлениеторговлей")>0 и мВерсияКонфигурации >= 10030608 ," И РегТО.Подключено ","")+" и РегТО.Вид=ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ТерминалСбораДанных)");
	ИмяКомпьютераТО = "";
	Выполнить("ИмяКомпьютераТО = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()");
	Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютераТО+"/"+ИмяПользователя());
	СтрокиТО = Запрос.Выполнить().Выгрузить();
	СтрокаТО = Неопределено;
	Для Каждого СтрокаТО Из СтрокиТО Цикл
		Если ПодключИдентификатор <> Неопределено и СтрокаТО.Идентификатор <> ПодключИдентификатор Тогда  //AVA. 15.04.2014. №123
			Продолжить
		КонецЕсли;
		ИмяВременногФайла = ПолучитьИмяВременногоФайла(".epf");
		МакетОбработки = СтрокаТО.Модель.ОбработкаОбслуживания.Обработка.Получить();
		МакетОбработки.Записать(ИмяВременногФайла);	
		ПутьКФайлуВнешнейОбработки = ИмяВременногФайла;
		ОписаниеОбработки = ПолучитьОписаниеОбработки(ИмяВременногФайла);
		ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
		Если ЗначениеЗаполнено(ОбработкаКлеверенс) Тогда
			Идентификатор = СтрокаТО.Идентификатор;
			Наименование  = СтрокаТО.Наименование;
			Обработка     = Неопределено;
			Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
			Новый Структура(),
			ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
			Модель        = СтрокаТО.Модель.Модель;
			мМодельПодключаемогоТО = Модель;
			Результат = "";
			Выполнить("Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка)");
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = "";
				Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;
			
			Объект    = Неопределено;
			Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = "";
				Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;
			
			//+AVA. 15.04.2014. №123. 
 			//Результат = Обработка.Подключить(Объект);
			//Если ЗначениеЗаполнено(Результат) Тогда
			//	мОписаниеОшибки = Объект.ОписаниеОшибки;
			//	Ошибка = "";
			//	Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
			//	Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
			//	ПоследняяОшибка = Результат;
			//	Продолжить;
			//КонецЕсли;
			 //-AVA. 15.04.2014. №123. 

			Оборудование                             = ТО.Добавить();
			Оборудование.Вид                         = Вид;
			Оборудование.Ссылки                      = 1;
			Оборудование.Идентификатор               = Идентификатор;
			Оборудование.Наименование                = Наименование;
			Оборудование.Обработка                   = Обработка;
			Оборудование.Объект                      = Объект;
			Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);
			
			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(Вид,           "Вид");
			
			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;
 		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследняяОшибка;
	
КонецФункции // ПодключитьОборудование()


// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)

	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

Функция ПолучитьПринадлежностьОбработкиКДрайверу(Знач ОписаниеОбработки)
	
	КодДрайвера = Неопределено;
	ОписаниеОбработки = нрег(ОписаниеОбработки);
	
	Если Найти(ОписаниеОбработки,"cleverence")>0 или Найти(ОписаниеОбработки,"клеверенс")>0 Тогда
		Если Найти(ОписаниеОбработки,"wi-fi")>0 и (Найти(ОписаниеОбработки,"проф")>0 или Найти(ОписаниеОбработки,"prof")>0) Тогда
			КодДрайвера = 1;     //Wi-Fi ПРОФ
		ИначеЕсли Найти(ОписаниеОбработки,"wi-fi")>0 и Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0  Тогда
			КодДрайвера = 2;     //Wi-Fi
		ИначеЕсли Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0 и Найти(ОписаниеОбработки,"wi-fi")= 0 Тогда
			КодДрайвера = 3;     //батч
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодДрайвера;
	
КонецФункции

Функция ПолучитьОписаниеОбработки(ИмяФайлаОбработки)
	
	Результат = "";
	
	Попытка
		ОбрОбслуживания   = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
		Форма             = ОбрОбслуживания.ПолучитьФорму();
		Результат         = Форма.ПолучитьОписание().Наименование;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
 	Возврат Результат;
	
КонецФункции

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект, СоздатьСПодключениемДрайвера = Истина)
	Перем ОбработкаОбслуживания;
	
	Результат = мНетОшибки;
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)).ПолучитьОбъект();
		
		Если ТО.ТипПрофиля = 1 Тогда
			Профиль = "Все станции\Все пользователи";
		Иначе
			ТаблицаПрофилей = "";
			Выполнить("ТаблицаПрофилей		= тоПолучитьТаблицуПрофилей(ТО)");
			ФормаВыбораПрофиля	= ТО.ПолучитьФорму("ВыборПрофиля");
			ФормаВыбораПрофиля.ТаблицаПрофилей	= ТаблицаПрофилей;
			ФормаВыбораПрофиля.ТипПрофиля		= ТО.ТипПрофиля;
			
			Профиль = ФормаВыбораПрофиля.ОткрытьМодально();
			Если ФормаВыбораПрофиля.Модифицированность Тогда
				ПараметрыСтр = ЗначениеВСтрокуВнутр(ТаблицаПрофилей);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(Профиль) Тогда
				Возврат мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТО	= ТО.ПолучитьСтруктуруПараметров(Профиль);
		
		Если ПараметрыТО.Количество() = 0 Тогда
			ПараметрыТО.Вставить("_ИнициализацияНастроек", Истина);
		КонецЕсли;
		РезультатВыполнения ="";
		Выполнить("РезультатВыполнения	= тоИнициализацияОбработкиОбслуживания(ТО, ПараметрыТО, ОбработкаОбслуживания)");
		
		Если РезультатВыполнения.Ошибка Тогда
			Предупреждение(РезультатВыполнения.Описание+Символы.ВК+Символы.ПС+РезультатВыполнения.Подробно);
			Возврат мОшибкаНеизвестно;
		КонецЕсли;
		
		Объект = Новый Структура;
		Драйвер = "";
		Выполнить("Драйвер = глТорговоеОборудование.CLTC1C");
		Объект.Вставить("Параметры",ПараметрыТО);
		Объект.Вставить("Драйвер",Драйвер);
		Объект.Вставить("ИДУстройства","");
		Объект.Вставить("Модель",ТО.Наименование);
		Объект.Вставить("ОписаниеОшибки","");
		
		Попытка
			Если ОбработкаОбслуживания.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Обработка = ОбработкаОбслуживания;
			Результат = мНетОшибки;
		исключение
			Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации,"штрихм")> 0 Тогда
		Если мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  
			Попытка
				ТО = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Исключение
				ТО = Идентификатор
			КонецПопытки;
			
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = ""; 
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,Справочники.ТорговоеОборудование.ТСДКлеверенсСофт)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					//СохраненныеНастройки = ТО.КлеверенсНастройки.Получить();
					СохраненныеНастройки   = ВосстановитьЗначение(xmlСтрока(ТО));
					Объект = Новый Структура;
					Объект.Вставить("Параметры",СохраненныеНастройки);
					Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
					Объект.Вставить("Модель",СтрокаТСД.Оборудование);
					Объект.Вставить("ИДУстройства","");
					Объект.Вставить("ОписаниеОшибки","");
					
					Попытка
						ДвоичныеДанныеОбработки = ТО.КлеверенсНастройкаТСД.Получить();
						ФайлВременнойОбработки = ПолучитьИмяВременногоФайла("epf");
						ДвоичныеДанныеОбработки.Записать(ФайлВременнойОбработки);
						Обработка = ВнешниеОбработки.Создать(ФайлВременнойОбработки);						
						Результат = мНетОшибки;
						Обработка.мПараметры = Объект.Параметры;
					Исключение
						Сообщить("Не обнаружена обработка настроек драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
					КонецПопытки;   					
					
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
						
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
					исключение
						Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой. Проверьте настройки оборудования!",20,"Изменение данных");
 						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли; 			
		Иначе
			ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = "";
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,ТО)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					СохраненныеНастройки = "";    
					Выполнить("СохраненныеНастройки = Справочники.ВнешниеРесурсы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
					Если СохраненныеНастройки.Пустая() Тогда
						Сообщить("В справочнике ""Внешние ресурсы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
					Иначе
						СохраненныеНастройки = СохраненныеНастройки.Значение.Получить();
						ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
						Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
							Объект = Новый Структура;
							Объект.Вставить("Параметры",СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]);
							Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
							Объект.Вставить("Модель",СтрокаТСД.Оборудование);
							Объект.Вставить("ИДУстройства","");
							Объект.Вставить("ОписаниеОшибки","");
						КонецЕсли;
						Попытка
							Обработка = ВнешниеОбработки.Создать(Объект.Параметры.ПутьКОбработке);
							Результат = мНетОшибки;
							Обработка.мПараметры = Объект.Параметры;
						Исключение
							Сообщить("Не обнаружена обработка настроек драйвера. 
							|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
							Результат = мОшибкаНеизвестно;
						КонецПопытки;
					КонецЕсли;
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
						//переподключить с параметрами из драйвера{ 
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
						
						Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
							Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
							|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						//переподключить с параметрами из драйвера}
					исключение
						Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
		СохраненныеНастройки = "";    
		Выполнить("СохраненныеНастройки = Справочники.ВнешниеПечатныеФормы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
		Если СохраненныеНастройки.Пустая() Тогда
			Сообщить("В справочнике ""Внешние печатные формы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
			|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
			Результат = мОшибкаНеизвестно;
		Иначе
			СохраненныеНастройки = СохраненныеНастройки.Хранилище.Получить();
			ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
			
			Параметры = Новый Структура;
			Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
				Параметры = СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]; 
			КонецЕсли;
			
			Попытка
				//сохранить из хранилища обработку и создать ее.
				Обработка = ВнешниеОбработки.Создать(Параметры.ПутьКОбработке);
				Результат = мНетОшибки;
				Обработка.мПараметры = Параметры;
			Исключение
				Сообщить("Не обнаружена обработка настроек драйвера. 
				|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
				Результат = мОшибкаНеизвестно;
			КонецПопытки;
		КонецЕсли;
		Попытка
			Объект = Новый Структура;
			Объект.Вставить("Параметры",Параметры);
			Объект.Вставить("Драйвер","");
			Объект.Вставить("Модель",ТерминалСбораДанных);
			Объект.Вставить("ИДУстройства","");
			Объект.Вставить("ОписаниеОшибки","");
			
			Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Результат = мНетОшибки;
			//переподключить с параметрами из драйвера{ 
			ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
			
			Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
				Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
				|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			//переподключить с параметрами из драйвера}
		исключение
			Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;		
	Иначе
		ПодключитьОборудование(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных, ЭтаФорма, Идентификатор);
		ТО = ПолучитьТО();
		Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
		Если Оборудование = Неопределено Тогда
			Результат = мОшибкаНеизвестно;
		КонецЕсли;
 		Если Оборудование <> Неопределено Тогда
			Обработка = Оборудование.Обработка;
			Объект    = Оборудование.Объект;
			Если СоздатьСПодключениемДрайвера Тогда
				Результат = Обработка.Подключить(Объект);
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Результат = Ошибка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		мТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера(); 
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера; 
		сЗаголовок = "Клеверенс Софт: Загрузка данных с ТСД [" + Объект.Драйвер.GetDriverType() + ", версия ";
		сЗаголовок = сЗаголовок + Объект.Драйвер.ПолучитьНомерВерсии() + "]";
		ЭтаФорма.Заголовок = сЗаголовок;
	Исключение
 		мТипПодключенногоДрайвера = "";
		мИмяДляХраненияНастроек   = мИмяДляХраненияНастроекПрефикс;
		Заголовок = "Клеверенс Софт: Загрузка данных с ТСД";
	КонецПопытки;
	
	Если (не (Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  ИЛИ Найти(мНазваниеКонфигурации, "штрихм") > 0))и  Обработка <> Неопределено Тогда
		ОписаниеОбработки   = ПолучитьОписаниеОбработки(Обработка.ИспользуемоеИмяФайла);
		ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
		ПодключенныйДрайвер = ПолучитьПринадлежностьОбработкиКДрайверу("Клеверенс " + мТипПодключенногоДрайвера);
		
		Если Не ПустаяСтрока(мТипПодключенногоДрайвера) И ЗначениеЗаполнено(ОбработкаКлеверенс) и ОбработкаКлеверенс <> ПодключенныйДрайвер Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
			Результат = "Обработка обслуживания не соответствует подключенному драйверу";
			Объект    = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	мВидимостьЭлементовФормы = Результат = мНетОшибки;
	ВидимостьЭлементовФормы();	
	
	Возврат Результат;
	
КонецФункции // ПолучитьОбъектДрайвера()


Процедура ПодключитьТерминал()
	
	Если мОбъект = Неопределено Тогда
		Обработка = Неопределено;
		Объект    = Неопределено;
		Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
		Если Объект = Неопределено Тогда
			Сообщить("Не удалось получить объект драйвера ТСД: "+ Результат, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		мОбъект = Объект;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьКоличествоВТЧДокумента(ВыбранныйДокумент1С,ИмяТЧ,НастройкаЗаполненияТабличнойЧастиДокумента = Неопределено);
	
	//+AVA. 11.12.2014. №225. При загрузке в документ 1С, если настроено заполнение какой-то определенной колонки, то очищать значение только этой колонки, другие не очищать..
	Если НастройкаЗаполненияТабличнойЧастиДокумента <> Неопределено Тогда
		Для Каждого СтрокаНастройки из НастройкаЗаполненияТабличнойЧастиДокумента Цикл
			Если Не СтрокаНастройки.Выгружать Тогда
				Продолжить;
			КонецЕсли; 
			
			Для каждого СтрокаТаблицы из ВыбранныйДокумент1С[ИмяТЧ] Цикл 
				СтрокаТаблицы[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = 0;
			КонецЦикла;	
		КонецЦикла;
	Иначе
		ТаблЧасть = ВыбранныйДокумент1С.Метаданные().ТабличныеЧасти[ИмяТЧ];
		ТаблЧастьРеквизиты = ТаблЧасть.Реквизиты;
		Для каждого РеквизитТаблЧасти из ТаблЧастьРеквизиты Цикл
			РеквизитТаблЧастиИмя = РеквизитТаблЧасти.Имя;
			Если Найти(РеквизитТаблЧастиИмя, "Количество") > 0 Тогда
				Для каждого СтрокаТаблицы из ВыбранныйДокумент1С[ИмяТЧ] Цикл 
				СтрокаТаблицы[РеквизитТаблЧастиИмя] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;
	//-AVA. 11.12.2014. №225.  	
	
КонецПроцедуры

Процедура ОбработкаСтрокиТабличнойЧасти(ТаблЧасть,СтрокаТабличнойЧасти,ВыбранныйДокумент1С,ЕстьЦена,ЕстьКоличество,ЕстьСумма,ЕстьСтавкаНДС,ЕстьСуммаНДС)
	
	Если ЕстьСумма И ЕстьЦена и ЕстьКоличество Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		Попытка
			СвойстваТЧТовары = Новый Структура;
			СвойстваТЧТовары.Вставить("ИмяТЧ", "Товары");
			СвойстваТЧТовары.Вставить("ХарактеристикаНоменклатуры");
			СвойстваТЧТовары.Вставить("ЕдиницаИзмерения");
			СвойстваТЧТовары.Вставить("Цена");
			
			//+AVA. 06.03.2014. №105.
			КатегорияЦен = "";
			Попытка
				Выполнить("КатегорияЦен = ВыбранныйДокумент1С.КатегорияЦен");
			Исключение
				Выполнить("КатегорияЦен = Справочники.КатегорииЦен.Закупочная");
			КонецПопытки;
			СвойстваТЧТовары.Вставить("КатегорияЦен",КатегорияЦен);
			//-AVA. 06.03.2014. №105.
			
			Если ТипДокумента1С <> "ИнвентаризацияТовара" Тогда
				Выполнить("тчПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С, СвойстваТЧТовары)");
			КонецЕсли;	
			
			// №512 +
			Если ЕстьСумма И ЕстьЦена И ЕстьКоличество И ЕстьСтавкаНДС И ЕстьСуммаНДС Тогда
				Выполнить("СтрокаТабличнойЧасти.СуммаНДС = Окр(СтрокаТабличнойЧасти.Сумма / 100 * ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), 2);");
			КонецЕсли;
			// №512 -
			
			Если ТаблЧасть.Реквизиты.Найти("НомерГТД") <> Неопределено и не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
				СтрокаТабличнойЧасти.НомерГТД = СтрокаТабличнойЧасти.Номенклатура.НомерГТД;
			КонецЕсли;
			Если ТаблЧасть.Реквизиты.Найти("СтранаПроисхождения") <> Неопределено и не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения) Тогда
				СтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;          
			КонецЕсли;
		Исключение
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
		Если ЕстьСтавкаНДС и не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			Попытка
				Если ЗначениеЗаполнено(ВыбранныйДокумент1С.Склад)  Тогда
					Выполнить("СтрокаТабличнойЧасти.СтавкаНДС = Ценообразование.СформироватьСтавкуНДС(ТекущаяДата(), ВыбранныйДокумент1С.Склад, СтрокаТабличнойЧасти.Номенклатура)");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) тогда
					Выполнить("СтрокаТабличнойЧасти.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяСтавкаНДС"")");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С, ВыбранныйДокумент1С.УчитыватьНДС, ВыбранныйДокумент1С.СуммаВключаетНДС)");
		Исключение
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		Попытка
			Выполнить("ПриИзмененииНоменклатурыВСтрокеДокумента(СтрокаТабличнойЧасти,ВыбранныйДокумент1С,ТипДокумента1С,Справочники.Номенклатура.ПустаяСсылка(), ДеревоНастроекПользователя)");
			Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;
			Выполнить("ИзменениеСуммыНДССтрокиДокумента(ВыбранныйДокумент1С, СтрокаТабличнойЧасти, ВыбранныйДокумент1С.Метаданные().Имя)");
		Исключение
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
		Попытка
			СтрокаТабличнойЧасти.СуммаВсего = СтрокаТабличнойЧасти.Сумма;
			Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС ) Тогда
				СтавкаНДС = СтрокаТабличнойЧасти.СтавкаНДС.Ставка;
				СтрокаТабличнойЧасти.СуммаНДС  = Окр((СтрокаТабличнойЧасти.СуммаВсего * СтавкаНДС)/(100 + СтавкаНДС), 2);
			КонецЕсли;
		Исключение
		КонецПопытки;	
	Иначе //УТ,УПП,КА
		Попытка
			Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С);");
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С);");
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С);");
		Исключение
		КонецПопытки; 		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДокумент1С()
	
	СозданНовый = Ложь;
	
	Если Товары.Найти(Истина,"Загружать") = Неопределено Тогда
		Сообщить("Нет товаров для добавления в документ!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;

	Если ВыбранныйДокумент1С = Неопределено Тогда
		Если ТипДокумента1С = Неопределено Тогда
			Сообщить("Не выбран тип документа 1С и сам документ для заполнения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		Ответ = Вопрос("Не выбран документ 1С для заполнения. Создать новый?", РежимДиалогаВопрос.ОКОтмена,,,"Изменение данных");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
    		Возврат Ложь;
		КонецЕсли;	
		
		НовыйДокумент1С = Документы[ЭлементыФормы.ТипДокумента1С.Значение].СоздатьДокумент();
		НовыйДокумент1С.Дата = ТекущаяДата();
		СозданНовый = Истина;
		ВыбранныйДокумент1С = НовыйДокумент1С;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйДокумент1С) <> Тип("ДокументОбъект."+ТипДокумента1С) Тогда
		//+ZHKN. 02.12.2014. №248 Штрих-М заполнение открытой формы
		Если ТипЗнч(ВыбранныйДокумент1СОбъект) = Тип("ДокументОбъект."+ТипДокумента1С) Тогда
			ВыбранныйДокумент1С = ВыбранныйДокумент1СОбъект;	
		Иначе
			ВыбранныйДокумент1С = ВыбранныйДокумент1С.ПолучитьОбъект();
		КонецЕсли;
		//-ZHKN. 02.12.2014.
	КонецЕсли;
	
	ЕстьТовары = Ложь;
	ЕстьКомплектующие = Ложь;
	
	ТабличнаяЧастьДляЗаполнения = "Товары";
	ФормаНастройкиЗаполненияДокумента = ПолучитьФорму("ФормаФорматЗагрузки");
	ФормаНастройкиЗаполненияДокумента.ТипДокумента = ТипДокумента1С;
	СохраненнаяНастройка = ФормаНастройкиЗаполненияДокумента.ПолучитьСохраненнуюНастройку();
	
	НастройкаЗаполненияТабличнойЧастиДокумента = Неопределено;
	НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента = Неопределено;
	
	НастройкаЗаполненияОчищатьКоличество = Ложь;
	СписокОчисткиКоличества = ВосстановитьЗначение(мИмяДляХраненияНастроек+"ОчищатьКолВо");
	Если СписокОчисткиКоличества <> Неопределено И СписокОчисткиКоличества.НайтиПоЗначению(ТипДокумента1С) <> Неопределено Тогда
		НастройкаЗаполненияОчищатьКоличество = Истина;		
	КонецЕсли;

	Если СохраненнаяНастройка <> Неопределено тогда
		Если СохраненнаяНастройка.Свойство("НастройкаПоДокументам") и СохраненнаяНастройка.НастройкаПоДокументам.Свойство(ТипДокумента1С)
			и не СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].ИспользоватьСтандартнуюНастройку Тогда
			ТабличнаяЧастьДляЗаполнения                = СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].ТабличнаяЧасть;
			НастройкаЗаполненияТабличнойЧастиДокумента = СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].ФорматЗагрузки;
			Если СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].Свойство("ФорматПоискаНоменклатуры") Тогда
				НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента  = СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].ФорматПоискаНоменклатуры;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьТЧСерийныеНомера = ВыбранныйДокумент1С.Метаданные().ТабличныеЧасти.Найти("СерийныеНомера") <> Неопределено;

	ТаблЧасть = ВыбранныйДокумент1С.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьДляЗаполнения);
	Если ТаблЧасть <> Неопределено Тогда		
		ЕстьТовары = Истина;
 		Если ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения].Количество() > 0 Тогда
			Режим = РежимДиалогаВопрос.ДаНетОтмена;
			Ответ = Вопрос("Очистить табличную часть """+ТабличнаяЧастьДляЗаполнения+""" документа перед заполнением?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
				ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения].Очистить();
				Если ЕстьТЧСерийныеНомера Тогда
					ВыбранныйДокумент1С["СерийныеНомера"].Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
 	
	ЕстьНоменклатура                  = ТаблЧасть.Реквизиты.Найти("Номенклатура") <> Неопределено;  	
	ЕстьЕдиницаИзмерения              = (ТаблЧасть.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено) 
	                                      или (Найти(мНазваниеКонфигурации, "штрихм") > 0 и ТаблЧасть.Реквизиты.Найти("Единица") <> Неопределено);
	ЕстьКоличество                    = ТаблЧасть.Реквизиты.Найти("Количество") <> Неопределено;
	ЕстьКоличествоФактическое         = ТаблЧасть.Реквизиты.Найти("КоличествоФактическое") <> Неопределено; // ZHKN. 13.11.2014. №217 Штрих-М, изменения в обработке загрузки
	ЕстьКоэффициент                   = ТаблЧасть.Реквизиты.Найти("Коэффициент") <> Неопределено; 	
	ЕстьХарактеристика                = ТаблЧасть.Реквизиты.Найти("ХарактеристикаНоменклатуры") <> Неопределено;
	ЕстьСерия                         = ТаблЧасть.Реквизиты.Найти("СерияНоменклатуры") <> Неопределено;
	ЕстьЦена                          = ТаблЧасть.Реквизиты.Найти("Цена") <> Неопределено;
	ЕстьЦенаВРознице                  = ТаблЧасть.Реквизиты.Найти("ЦенаВРознице") <> Неопределено;
	ЕстьСумма                         = ТаблЧасть.Реквизиты.Найти("Сумма") <> Неопределено;
	ЕстьСуммаКнижн                    = ТаблЧасть.Реквизиты.Найти("СуммаКнижн") <> Неопределено; //ZHKN. 30.07.2015. №434 Добавляет факт кол-во, но не пересчитывается разница между План/факт
	ЕстьСуммаФакт                     = ТаблЧасть.Реквизиты.Найти("СуммаФакт") <> Неопределено;
	ЕстьЯчейка                        = ТаблЧасть.Реквизиты.Найти("Ячейка") <> Неопределено;	
	
	ЕстьСтавкаНДС                     = ТаблЧасть.Реквизиты.Найти("СтавкаНДС") <> Неопределено;
	ЕстьСуммаНДС                      = ТаблЧасть.Реквизиты.Найти("СуммаНДС") <> Неопределено;
	
	ЕстьКоличествоКнижн               = ТаблЧасть.Реквизиты.Найти("КоличествоКнижн") <> Неопределено; //ZHKN. 30.07.2015. №434 Добавляет факт кол-во, но не пересчитывается разница между План/факт
	ЕстьКоличествоФакт                = ТаблЧасть.Реквизиты.Найти("КоличествоФакт") <> Неопределено;	                                     


	НаименованиеРеквизитаЕдИзмВТЧ     = "ЕдиницаИзмерения";
	
	НаименованиеРеквизитаКлючСвязиВТЧ = "КлючСвязи";
	
	ЕстьКлючСвязи = ТаблЧасть.Реквизиты.Найти(НаименованиеРеквизитаКлючСвязиВТЧ) <> Неопределено;

	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		НаименованиеРеквизитаЕдИзмВТЧ     = "Единица";
		НаименованиеРеквизитаКлючСвязиВТЧ = "УникальныйНомерСтрокиДокумента";
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 и ТипДокумента1С = "ИнвентаризацияТовара" Тогда
		НаименованиеРеквизитаЕдИзмВТЧ     = "ЕдиницаИзмеренияУчет";	
	КонецЕсли;

	ДокументУстановкаЦенНоменклатуры = мНазваниеКонфигурации = "управлениеторговлей" и ТипДокумента1С = "УстановкаЦенНоменклатуры";
	КоличествоТиповЦенВДокументе = 0;
	Если ДокументУстановкаЦенНоменклатуры Тогда
		Если ВыбранныйДокумент1С.ТипыЦен.Количество() = 0 Тогда
			СписокЦен = новый СписокЗначений;
			
			ТипыЦенВыборка = Справочники.ТипыЦенНоменклатуры.Выбрать();
			Пока ТипыЦенВыборка.Следующий() цикл
				Если не ТипыЦенВыборка.ПометкаУдаления Тогда
					СписокЦен.Добавить(ТипыЦенВыборка.Ссылка,"("+ТипыЦенВыборка.Ссылка.Код+") "+ТипыЦенВыборка.Ссылка);  					
				КонецЕсли;
			КонецЦикла;
			СписокЦен.ОтметитьЭлементы("Выберите типы цен для заполнения");
			Для каждого ЭлементСписка из СписокЦен Цикл
				Если ЭлементСписка.Пометка Тогда
					НоваяСтрока =  ВыбранныйДокумент1С.ТипыЦен.Добавить();
					НоваяСтрока.ТипЦен = ЭлементСписка.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		КоличествоТиповЦенВДокументе = ВыбранныйДокумент1С.ТипыЦен.Количество();
	КонецЕсли;
	
	ТоварыДляЗагрузкиВДокумент1С = Товары.НайтиСтроки(Новый Структура("Загружать",Истина));
	
	Если НастройкаЗаполненияОчищатьКоличество Тогда
 		ОчиститьКоличествоВТЧДокумента(ВыбранныйДокумент1С,ТабличнаяЧастьДляЗаполнения, НастройкаЗаполненияТабличнойЧастиДокумента);//ZHKN. 25.03.2014. №119. Ошибка настройки очищения количества
 	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	Для каждого Строка из ТоварыДляЗагрузкиВДокумент1С Цикл
		ПараметрыОтбора.Очистить();
		Если НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента <> Неопределено и  НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента.колонки.Найти("ПолеТабличнойЧастиОбработки") <> Неопределено Тогда
			Для каждого СтрокаНастроек Из НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента Цикл
				Если  СтрокаНастроек.Выгружать и ЗначениеЗаполнено(СтрокаНастроек.ПолеТабличнойЧастиДокумента) и ЗначениеЗаполнено(СтрокаНастроек.ПолеТабличнойЧастиОбработки) Тогда
 					//+MAV. 27.08.2014. №207. Поиск строк ТЧ по новым полям ТСД.
 					Если Найти(Нрег(СтрокаНастроек.ПолеТабличнойЧастиОбработки),"новоеполе") > 0 ИЛИ Найти(Нрег(СтрокаНастроек.ПолеТабличнойЧастиОбработки),"полешапки") > 0
						ИЛИ Найти(Нрег(СтрокаНастроек.ПолеТабличнойЧастиОбработки),"полестроки") > 0 Тогда    
						ЗначениеДопПоля = ПолучитьЗначениеПоляДокументаТСД(СтрокаНастроек.ПолеТабличнойЧастиДокумента,Строка.ДокументТСД,Строка.НомерСтрокиДокументаТСД,СтрокаНастроек.ПолеТабличнойЧастиОбработки);
						Если ЗначениеЗаполнено(ЗначениеДопПоля) Тогда  //AVA. 11.12.2014. №225
							ПараметрыОтбора.Вставить(СтрокаНастроек.ПолеТабличнойЧастиДокумента, ЗначениеДопПоля);
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(Строка[СтрокаНастроек.ПолеТабличнойЧастиОбработки]) Тогда //AVA. 11.12.2014. №225
							ПараметрыОтбора.Вставить(СтрокаНастроек.ПолеТабличнойЧастиДокумента, Строка[СтрокаНастроек.ПолеТабличнойЧастиОбработки]);
						КонецЕсли;
					КонецЕсли;  
					//-MAV. 27.08.2014. №207. Поиск строк ТЧ по новым полям ТСД.
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтбора.Количество() = 0 Тогда
			Если ЕстьНоменклатура Тогда
				ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			КонецЕсли;
 			Если ЕстьХарактеристика и ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры)  Тогда
				ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
			КонецЕсли;
			
			Если ЕстьСерия Тогда
 				Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
					ПараметрыОтбора.Вставить("СерияНоменклатуры", Строка.СерияНоменклатуры);
				Иначе
					ПараметрыОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());
				КонецЕсли;
 			КонецЕсли;
			
			Если ЕстьЦена и ЗначениеЗаполнено(Строка.Цена) Тогда
				ПараметрыОтбора.Вставить("Цена", Строка.Цена);
			КонецЕсли;  
		КонецЕсли;
		
		НайденныеСтроки = Неопределено;
		
		Попытка
			НайденныеСтроки = ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения].НайтиСтроки(ПараметрыОтбора);
		исключение
		КонецПопытки;
		
		Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = НайденныеСтроки[0];
			
			// +ZHKN. 13.11.2014. №217 Штрих-М, изменения в обработке загрузки
			Если ЕстьКоличество И ЕстьКоличествоФактическое и (НастройкаЗаполненияТабличнойЧастиДокумента = Неопределено Или Не ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента)) Тогда
				//СтрокаТабличнойЧасти.Количество = ПолучитьКоличествоПланВПересчетеНаТекущийКоэффициентСтроки(Строка, СтрокаТабличнойЧасти,НаименованиеРеквизитаЕдИзмВТЧ);
				СтрокаТабличнойЧасти.КоличествоФактическое = ПолучитьКоличествоВПересчетеНаТекущийКоэффициентСтроки(Строка, СтрокаТабличнойЧасти,НаименованиеРеквизитаЕдИзмВТЧ);
			// -ZHKN. 13.11.2014.
			
			// +AVA. 21.05.2014. №154 Пересчитывать упаковки при загрузке
			ИначеЕсли ЕстьКоличество и (НастройкаЗаполненияТабличнойЧастиДокумента = Неопределено Или Не ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента)) Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ПолучитьКоличествоВПересчетеНаТекущийКоэффициентСтроки(Строка, СтрокаТабличнойЧасти,НаименованиеРеквизитаЕдИзмВТЧ);
			КонецЕсли;			
			// +AVA. 21.05.2014.
			
			//+ZHKN. 30.07.2015. №434 Добавляет факт кол-во, но не пересчитывается разница между План/факт
			// Альфа-Авто
			Если ЕстьКоличество И ЕстьКоличествоКнижн И ЕстьКоличествоФакт Тогда
				//СтрокаТабличнойЧасти.КоличествоКнижн = Строка.КоличествоПлан;
				СтрокаТабличнойЧасти.КоличествоФакт	= Строка.КоличествоФакт;
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоФакт - СтрокаТабличнойЧасти.КоличествоКнижн;
			КонецЕсли;	
			//-ZHKN. 30.07.2015.
		Иначе
			СтрокаТабличнойЧасти = Неопределено;
			Если ЕстьТовары Тогда
				СтрокаТабличнойЧасти = ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения].Добавить();
				Если Найти(мНазваниеКонфигурации,"штрихм")> 0 Тогда 
                    Попытка                                                                       					
						Выполнить("СтрокаТабличнойЧасти.УникальныйНомерСтрокиДокумента = ОпределитьНовыйНомерВКолонке(ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения], ""УникальныйНомерСтрокиДокумента"")");
					Исключение 
					КонецПопытки;
                КонецЕсли;
 			Иначе
				Прервать;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Номенклатура = Строка.Номенклатура;
			
			Если ЕстьЕдиницаИзмерения Тогда
				СтрокаТабличнойЧасти[НаименованиеРеквизитаЕдИзмВТЧ] = Строка.ЕдиницаИзмерения;   				
				Попытка
					Если ТипДокумента1С = "ИнвентаризацияТовара" и НаименованиеРеквизитаЕдИзмВТЧ <> "ЕдиницаИзмерения" Тогда
						СтрокаТабличнойЧасти["ЕдиницаИзмерения"] = Строка.ЕдиницаИзмерения;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;

			// +ZHKN. 13.11.2014. №217 Штрих-М, изменения в обработке загрузки
			Если ЕстьКоличество И ЕстьКоличествоФактическое и не ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента) Тогда
				СтрокаТабличнойЧасти.Количество = Строка.КоличествоПлан;
				СтрокаТабличнойЧасти.КоличествоФактическое = Строка.КоличествоФакт;
			// -ZHKN. 13.11.2014.
			ИначеЕсли ЕстьКоличество и не ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента) Тогда
				СтрокаТабличнойЧасти.Количество = Строка.КоличествоФакт;
			КонецЕсли;
			
			//+ZHKN. 30.07.2015. №434 Добавляет факт кол-во, но не пересчитывается разница между План/факт
			// Альфа-Авто
			Если ЕстьКоличество И ЕстьКоличествоКнижн И ЕстьКоличествоФакт Тогда
				СтрокаТабличнойЧасти.КоличествоКнижн = Строка.КоличествоПлан;
				СтрокаТабличнойЧасти.КоличествоФакт	= Строка.КоличествоФакт;
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоФакт - СтрокаТабличнойЧасти.КоличествоКнижн;
			КонецЕсли;	
			//-ZHKN. 30.07.2015.
			
			Если ЕстьХарактеристика Тогда
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
			Если ЕстьСерия Тогда
				СтрокаТабличнойЧасти.СерияНоменклатуры = Строка.СерияНоменклатуры;
			КонецЕсли;
			
			Если ЕстьКоэффициент Тогда
				Если ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
					СтрокаТабличнойЧасти.Коэффициент = Строка.ЕдиницаИзмерения.Коэффициент;
				Иначе
					СтрокаТабличнойЧасти.Коэффициент  = 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьЦена Тогда
				СтрокаТабличнойЧасти.Цена = Строка.Цена;
			КонецЕсли;
			
			Если ЕстьЦенаВРознице Тогда
				СтрокаТабличнойЧасти.ЦенаВРознице = Строка.Цена;
			КонецЕсли;  
			
			Если ЕстьЯчейка Тогда
				СтрокаТабличнойЧасти.Ячейка = Строка.ЯчейкаОткуда;
			КонецЕсли; 	
		КонецЕсли;
		
 		Попытка //ут 10.3, КА, УПП
			Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
			КонецЕсли;	
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ВыбранныйДокумент1С)");
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента) 
			и  НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента <> Неопределено
			и  НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента.колонки.Найти("ПолеТабличнойЧастиОбработки") <> Неопределено  Тогда  
			Для каждого СтрокаНастройки из НастройкаЗаполненияТабличнойЧастиДокумента Цикл
				Если  СтрокаНастройки.Выгружать Тогда					
					Попытка
						СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] + 
						ПолучитьКоличествоВПересчетеНаТекущийКоэффициентСтроки(Строка, СтрокаТабличнойЧасти,НаименованиеРеквизитаЕдИзмВТЧ,СтрокаНастройки.ПолеТабличнойЧастиОбработки); //AVA. 21.05.2014. №154
					Исключение
						Попытка
							СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = Строка[СтрокаНастройки.ПолеТабличнойЧастиОбработки];
						Исключение
							СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = ПолучитьЗначениеПоляДокументаТСД(СтрокаНастройки.ПолеТабличнойЧастиДокумента,Строка.ДокументТСД,Строка.НомерСтрокиДокументаТСД,СтрокаНастройки.ПолеТабличнойЧастиОбработки);
						КонецПопытки;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  			
		
		ОбработкаСтрокиТабличнойЧасти(ТаблЧасть,СтрокаТабличнойЧасти,ВыбранныйДокумент1С,ЕстьЦена,ЕстьКоличество,ЕстьСумма,ЕстьСтавкаНДС,ЕстьСуммаНДС);
		
		//+ZHKN. 30.07.2015. №434 Добавляет факт кол-во, но не пересчитывается разница между План/факт
		// Альфа-Авто
		Если ЕстьСумма И ЕстьСуммаКнижн И ЕстьСуммаФакт Тогда
			Если СтрокаТабличнойЧасти.СуммаКнижн = 0 Тогда 
				СтрокаТабличнойЧасти.СуммаКнижн = Строка.СуммаПлан;
			КонецЕсли;
			СтрокаТабличнойЧасти.СуммаФакт	= Строка.СуммаФакт;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаФакт - СтрокаТабличнойЧасти.СуммаКнижн;
		КонецЕсли;	
		//-ZHKN. 30.07.2015.
		
		Если ДокументУстановкаЦенНоменклатуры Тогда
			Если ЕстьЦена Тогда
				СтрокаТабличнойЧасти.Цена = Строка.Цена;
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипЦен) Тогда
				ТипЦен = ВыбранныйДокумент1С.ТипыЦен[0].ТипЦен;				
				СтрокаТабличнойЧасти.ТипЦен               = ТипЦен;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.СпособРасчетаЦены    = ТипЦен.СпособРасчетаЦены;
				СтрокаТабличнойЧасти.Валюта               = ТипЦен.ВалютаЦены;	
			Конецесли;
			
			//1. когда документ сохранен ранее, то нужно перезаполнить строки
			Для каждого СтрокаТабличнойЧасти из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(НастройкаЗаполненияТабличнойЧастиДокумента) 
					и  НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента <> Неопределено
					и  НастройкаПоискаНоменклатурыВТабличнойЧастиДокумента.колонки.Найти("ПолеТабличнойЧастиОбработки") <> Неопределено  Тогда
					
					Для каждого СтрокаНастройки из НастройкаЗаполненияТабличнойЧастиДокумента Цикл
						Если  СтрокаНастройки.Выгружать Тогда
							Попытка
								СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] + Строка[СтрокаНастройки.ПолеТабличнойЧастиОбработки];
							Исключение
								СтрокаТабличнойЧасти[СтрокаНастройки.ПолеТабличнойЧастиДокумента] = Строка[СтрокаНастройки.ПолеТабличнойЧастиОбработки];
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;  			
				ОбработкаСтрокиТабличнойЧасти(ТаблЧасть,СтрокаТабличнойЧасти,ВыбранныйДокумент1С,ЕстьЦена,ЕстьКоличество,ЕстьСумма,ЕстьСтавкаНДС,ЕстьСуммаНДС);
				Если ЕстьЦена Тогда
					СтрокаТабличнойЧасти.Цена = Строка.Цена;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипЦен) тогда
					Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПроцентСкидкиНаценки) Тогда
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ТипЦен.ПроцентСкидкиНаценки;
					КонецЕсли;
					Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СпособРасчетаЦены) Тогда
						СтрокаТабличнойЧасти.СпособРасчетаЦены = СтрокаТабличнойЧасти.ТипЦен.СпособРасчетаЦены;
					КонецЕсли;					
					Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
						СтрокаТабличнойЧасти.Валюта = СтрокаТабличнойЧасти.ТипЦен.ВалютаЦены;
					КонецЕсли;
 				КонецЕсли;
			КонецЦикла;
				
			//2.нужно добавить строку для каждого типа цен
				Для каждого ЭлементТипЦен из ВыбранныйДокумент1С.ТипыЦен Цикл
					ТипЦен = ЭлементТипЦен.ТипЦен;
					Если ТипЦен <> СтрокаТабличнойЧасти.ТипЦен Тогда
						НоваяСтрока = ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТабличнойЧасти);
						НоваяСтрока.ТипЦен               = ТипЦен;
						НоваяСтрока.ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;
						НоваяСтрока.СпособРасчетаЦены    = ТипЦен.СпособРасчетаЦены;
						НоваяСтрока.Валюта               = ТипЦен.ВалютаЦены;						
					КонецЕсли;
				КонецЦикла;
			Продолжить;
		КонецЕсли; 			
 		
		Если ЕстьТЧСерийныеНомера и ЕстьКлючСвязи и 
			ВестиСерийныеНомера(СтрокаТабличнойЧасти.Номенклатура) //AVA. 11.12.2014. №267
			Тогда
			//добавим серийные номера в документ{
			Если СтрокаТабличнойЧасти[НаименованиеРеквизитаКлючСвязиВТЧ] = 0 Тогда //нет серийных номеров у номенклатуры в документе
				СтрокаТабличнойЧасти[НаименованиеРеквизитаКлючСвязиВТЧ] = ПолучитьНовыйКлючСвязи(ВыбранныйДокумент1С, ТабличнаяЧастьДляЗаполнения, НаименованиеРеквизитаКлючСвязиВТЧ);
			КонецЕсли;
			СерийныеНомераНоменклатуры = СерийныеНомера.НайтиСтроки(Новый структура(НаименованиеРеквизитаКлючСвязиВТЧ,Строка[НаименованиеРеквизитаКлючСвязиВТЧ]));
			Для каждого СтрокаСН из СерийныеНомераНоменклатуры Цикл
				Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
					СерийныйНомерВДокументе = ВыбранныйДокумент1С.СерийныеНомера.НайтиСтроки(Новый Структура("Номенклатура,СерийныйНомер",СтрокаТабличнойЧасти.Номенклатура,Строка(СтрокаСН.СерийныйНомер)));//проверка на уже существующие в документе
					СерийныйНомерВДокументе = ?(СерийныйНомерВДокументе.Количество() = 0, неопределено,1);
				иначе
					СерийныйНомерВДокументе = ВыбранныйДокумент1С.СерийныеНомера.Найти(СтрокаСН.СерийныйНомер,"СерийныйНомер");//проверка на уже существующие в документе
				КонецЕсли;
				Если СерийныйНомерВДокументе = Неопределено Тогда
					НоваяСтрокаСН = ВыбранныйДокумент1С.СерийныеНомера.Добавить();
					НоваяСтрокаСН[НаименованиеРеквизитаКлючСвязиВТЧ]  = СтрокаТабличнойЧасти[НаименованиеРеквизитаКлючСвязиВТЧ];
					НоваяСтрокаСН.СерийныйНомер = СтрокаСН.СерийныйНомер;
					Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
						НоваяСтрокаСН.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
					конецЕсли;
				КонецЕсли;
			КонецЦикла;
			//добавим серийные номера в документ}
		КонецЕсли;
	КонецЦикла;
	
	//+AVA. 11.12.2014. №267
	//уберем ключ связи из таблицы товары, если для него нет пары в таблице серийные номера
	Если ЕстьТЧСерийныеНомера и ЕстьКлючСвязи Тогда
		Для Каждого ТекСтрока Из ВыбранныйДокумент1С[ТабличнаяЧастьДляЗаполнения] Цикл
 			Если ВыбранныйДокумент1С.СерийныеНомера.Найти(ТекСтрока[НаименованиеРеквизитаКлючСвязиВТЧ], НаименованиеРеквизитаКлючСвязиВТЧ) = Неопределено Тогда
				ТекСтрока[НаименованиеРеквизитаКлючСвязиВТЧ] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-AVA. 11.12.2014. №267
	
	//+ZHKN. 19.08.2015. №434 Альфа-Авто Сумма списания не меняется.
	// ВыбранныйДокумент1С.ПолучитьФорму().Открыть();
	ФормаТекущегоДокумента = ВыбранныйДокумент1С.ПолучитьФорму();
	
	Если Найти(мНазваниеКонфигурации, "автосалон5") > 0 И ТипДокумента1С = "ПеремещениеТоваров" Тогда
		Для Каждого ДанныеСтрокиТаб Из ФормаТекущегоДокумента.ЭлементыФормы.Товары.Значение Цикл
			ВыбранныйДокумент1С.ОбработкаРеквизита("Товары.Номенклатура",ДанныеСтрокиТаб,ФормаТекущегоДокумента);
		КонецЦикла;
	КонецЕсли;
	
	ФормаТекущегоДокумента.Открыть();
	//-ZHKN. 19.08.2015. №434
	
	Если СозданНовый = Истина Тогда
		ВыбранныйДокумент1С = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Процедура проверяет максимальное значение ключа связи. 
//
Процедура ПроверитьМаксЗначениеКлюча(ПараметрыСвязиСтрокТЧ, ДокументОбъект, ИмяТЧ, НаименованиеРеквизитаКлючСвязиВТЧ)
	
	Если ПараметрыСвязиСтрокТЧ[ИмяТЧ].СвободныйКлюч <> Неопределено Тогда
		Возврат; // «не занятый» ключ уже был определен ранее.
	КонецЕсли;
	
	// При первом обращении «свободный» ключ необходимо рассчитать.
	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		ПараметрыСвязиСтрокТЧ[ИмяТЧ].СвободныйКлюч = 1; // отсчет начинается с нуля
	Иначе
		
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;				
		СписокКлючей.ЗагрузитьЗначения(ДокументОбъект[ИмяТЧ].ВыгрузитьКолонку(НаименованиеРеквизитаКлючСвязиВТЧ));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		ПараметрыСвязиСтрокТЧ[ИмяТЧ].СвободныйКлюч = СписокКлючей[0].Значение + 1;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьМаксЗначениеКлюча()

// Функция формирует значение нового ключа связи.
//
// Параметры функции
// ПараметрыСвязиСтрокТЧ – соответствие, в котором сохраняется текущее «свободное» значение ключа
// ДокументОбъект – документ, 
// ИмяТЧ – имя «основной» табличной части объекта,
// ПроверятьМаксЗначение – флаг необходимости проверки начальной инициализации ключа
//
Функция ПолучитьНовыйКлючСвязи(ДокументОбъект, ИмяТЧ, НаименованиеРеквизитаКлючСвязиВТЧ)
	
	ПараметрыСвязиСтрокТЧ = Новый Соответствие;
	ПараметрыСвязиСтрокТЧ.Вставить(ИмяТЧ, Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь)); 
	 	
	ПроверитьМаксЗначениеКлюча(ПараметрыСвязиСтрокТЧ, ДокументОбъект, ИмяТЧ, НаименованиеРеквизитаКлючСвязиВТЧ);
	
	МаксКлюч = ПараметрыСвязиСтрокТЧ[ИмяТЧ].СвободныйКлюч; // берется текущее «свободное» значение ключа

	ПараметрыСвязиСтрокТЧ[ИмяТЧ].СвободныйКлюч = МаксКлюч + 1; // после чего «свободное» значение увеличивается на единицу

	ПараметрыСвязиСтрокТЧ[ИмяТЧ].ФлагМодификации = Истина; // устанавливаем признак  модифицированности
	
	Возврат МаксКлюч;
	
КонецФункции // ПолучитьНовыйКлючСвязи()
 
// +AVA. 21.05.2014. №154 Пересчитывать упаковки при загрузке
Функция ПолучитьКоличествоВПересчетеНаТекущийКоэффициентСтроки(Строка, СтрокаТабличнойЧасти,НаименованиеРеквизитаЕдИзмВТЧ,ПолеТабличнойЧастиОбработки = "")
	
	Попытка
		Коэффициент1С = ?(СтрокаТабличнойЧасти[НаименованиеРеквизитаЕдИзмВТЧ].Коэффициент = 0, 1, СтрокаТабличнойЧасти[НаименованиеРеквизитаЕдИзмВТЧ].Коэффициент); 
	Исключение
		Коэффициент1С = 1;
	КонецПопытки;
	
	Если (Найти(мНазваниеКонфигурации,"штрихм")>0 и Строка.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиница) 
		ИЛИ 
		(Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 и Строка.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения) Тогда
		КоэффициентТСД = 1;	
	Иначе
		//КоэффициентТСД = ?(СтрокаТабличнойЧасти[НаименованиеРеквизитаЕдИзмВТЧ].Коэффициент = 0, 1, Строка[НаименованиеРеквизитаЕдИзмВТЧ].Коэффициент);
		КоэффициентТСД = ?(СтрокаТабличнойЧасти[НаименованиеРеквизитаЕдИзмВТЧ].Коэффициент = 0, 1, Строка.ЕдиницаИзмерения.Коэффициент); 
	КонецЕсли;
	
	Количество = Строка[?(ЗначениеЗаполнено(ПолеТабличнойЧастиОбработки),ПолеТабличнойЧастиОбработки,"КоличествоФакт")] / Коэффициент1С * КоэффициентТСД;
	
	Возврат Количество;
	
КонецФункции
// -AVA. 21.05.2014.

Функция ПолучитьЗначениеПоляДокументаТСД(ПолеТабличнойЧастиДокумента,ПолеШапкиДокументаТСД_Имя,ПолеСтрокиДокументаТСД_НомерСтроки,КолонкаТаблицыИмя)
	
	Результат = "";
	
	СтруктураПоискаДополнительныхПолей = Новый Структура("ПолеШапкиДокументаТСД_Имя,ПолеСтрокиДокументаТСД_НомерСтроки");
	
	СтруктураПоискаДополнительныхПолей.Вставить("ПолеШапкиДокументаТСД_Имя",ПолеШапкиДокументаТСД_Имя);
	СтруктураПоискаДополнительныхПолей.Вставить("ПолеСтрокиДокументаТСД_НомерСтроки",Строка(ПолеСтрокиДокументаТСД_НомерСтроки));			
	НайденныеСтроки = ТаблицаСоВсемиПолямиДокументаТСД.НайтиСтроки(СтруктураПоискаДополнительныхПолей);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		Попытка
			Результат = НайденнаяСтрока[КолонкаТаблицыИмя];
		Исключение
			Сообщить("Ошибка заполнения реквизита """+ПолеТабличнойЧастиДокумента+""" строки табличной части. Проверьте настройки заполнения документа 1С. Подробно :"+ОписаниеОшибки(),СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли; 	
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСТСДНажатие(Элемент)
	
	Если ЗаполнитьДокумент1С() = Истина Тогда
		УдалитьВыбранныеДокументы("Удалить загруженные документы с терминала?");
	КонецЕсли;

КонецПроцедуры

Процедура КомандыДокументовВыделитьВсе(Кнопка)
	
	ДокументыТСД.ЗаполнитьЗначения(Истина, "Загружать");
	
КонецПроцедуры

Процедура КомандыДокументовОчиститьВыделение(Кнопка)
	
	ДокументыТСД.ЗаполнитьЗначения(Ложь, "Загружать");
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = (мСписокТерминалов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	КонецЕсли;
	
КонецПроцедуры

Функция РазбитьСтр(Стр, РазбитьПо)
	
	Массив = Новый Массив;
	Пока СтрДлина(Стр) > 0 Цикл
		Инд = Найти(Стр, РазбитьПо);
		Если Инд > 0 Тогда
			Поле = СокрЛП(Лев(Стр, Инд-1));
			Массив.Добавить(Поле);
			Стр = Прав(Стр, СтрДлина(Стр)-Инд);
		Иначе
			Массив.Добавить(Стр);
			Прервать;
		КонецЕсли;		
	КонецЦикла;
 	Возврат Массив;
	
КонецФункции

Процедура ЗаполнитьСписокДокументов(ТерминалСбораДанных)
	
	ПодключитьТерминал();
	
	Если мОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСвязи = Неопределено;
	мОбъект.Параметры.Свойство("ТипСвязи", ТипСвязи);
	
	Если ТипСвязи = "Сервер" Тогда
		ЭлементыФормы.ДокументыТСД.Колонки.Терминал.Видимость    = Истина; 
		ЭлементыФормы.ДокументыТСД.Колонки.ИдТерминала.Видимость = Истина;
		ЭлементыФормы.ДокументыТСД.Колонки.IP.Видимость          = Истина;
	Иначе
		ЭлементыФормы.ДокументыТСД.Колонки.Терминал.Видимость    = Ложь; 
		ЭлементыФормы.ДокументыТСД.Колонки.ИдТерминала.Видимость = Ложь;
		ЭлементыФормы.ДокументыТСД.Колонки.IP.Видимость          = Ложь;
	КонецЕсли;
	
	времПрефиксВесовогоТовара = Неопределено;
	мОбъект.Параметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
	мПрефиксВесовогоТовара = ?(времПрефиксВесовогоТовара = Неопределено, ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
	
	времДлинаКодаВесовогоТовара = Неопределено;
	мОбъект.Параметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
	мДлинаКодаВесовогоТовара = ?(времДлинаКодаВесовогоТовара = Неопределено, ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
	
	ЭлементыФормы.ДокументыТСД.Доступность = Истина;
	ЭлементыФормы.КомандыДокументов.Доступность = Истина;
		
	ДокументыТСД.Очистить();
	СписДокументов = Новый СписокЗначений;
	
	Если ДокументыМСМАРТС = Неопределено Тогда         //AVA. 15.04.2014. №123.
		ДокументыМСМАРТС = мОбъект.Драйвер.ПолучитьДокументы(Неопределено);
	КонецЕсли;

	Если НЕ (ДокументыМСМАРТС = Неопределено Или ДокументыМСМАРТС = Null) Тогда
		
		// 20.11.2013 +
		СписокТиповДокумента = Новый СписокЗначений;
		// 20.11.2013 -
		
		Для инд=0 По ДокументыМСМАРТС.Количество-1 Цикл
			ДокументМСМАРТС = ДокументыМСМАРТС.Элемент(инд);   
			
			// 20.11.2013 +
			Если СписокТиповДокумента.НайтиПоЗначению(ДокументМСМАРТС.ИмяТипаДокумента) = Неопределено Тогда	
				СписокТиповДокумента.Добавить(ДокументМСМАРТС.ИмяТипаДокумента);	
			КонецЕсли;				
			// 20.11.2013 -
			
			Строка = ДокументыТСД.Добавить();
			Строка.Загружать     = Истина;
			Строка.Документ      = ДокументМСМАРТС.Имя;
			Строка.ДатаДокумента = ДокументМСМАРТС.ДатаСоздания;
			Строка.ИдДокумента   = ДокументМСМАРТС.Ид;
			Строка.Изменен       = ДокументМСМАРТС.Изменен;
			Строка.Завершен      = ДокументМСМАРТС.Завершен;
			
			Если Не ПустаяСтрока(ДокументМСМАРТС.Назначение) Тогда
				Строка.Пользователь = ДокументМСМАРТС.Назначение;
			Иначе
				Строка.Пользователь = ДокументМСМАРТС.ИмяПользователя;
			КонецЕсли;
			
			Строка.Терминал    = ДокументМСМАРТС.DeviceName;
			Строка.ИдТерминала = ДокументМСМАРТС.DeviceId;
			Строка.IP          = ДокументМСМАРТС.DeviceIP;
			Строка.СтрокЗавл   = ДокументМСМАРТС.СтрокиПлан.Количество;
			Строка.СтрокФакт   = ДокументМСМАРТС.СтрокиФакт.Количество;
			
		КонецЦикла;
		
		// 20.11.2013 +
		Если СписокТиповДокумента.Количество() > 1 Тогда
			КомандыДокументовОчиститьВыделение(ЭлементыФормы.КомандыДокументов.Кнопки.ОчиститьВыделение);	
		КонецЕсли;
		// 20.11.2013 -		
	Иначе
		мВидимостьЭлементовФормы = Ложь;
		ВидимостьЭлементовФормы();
		Предупреждение("Ошибка при подключении. Проверьте параметры подключения в обработке подключения драйвера.",,"Изменение данных");
		мОбъект.Драйвер.ПолучитьОшибку(мОбъект.ОписаниеОшибки);
		Сообщить("Не удалось получить список документов! Ошибка: " + мОбъект.ОписаниеОшибки);
	КонецЕсли;
	
	ПроверитьНаличиеНовыхШтрихкодов();
 	
	мОбъект.Драйвер.ОсвободитьРесурсы();	
	
КонецПроцедуры

Процедура ПроверитьНаличиеНовыхШтрихкодов(ЗапросНаОткрытиеФормыДобавленияНовыхШтрихКодов = Ложь)
	
	ТаблицаНовыхШтрихкодов = Новый ТаблицаЗначений;
	Ответ = мОбъект.Драйвер.ЗагрузитьНовыеШтрихкоды(ТаблицаНовыхШтрихкодов);
	мОбъект.Драйвер.ОсвободитьРесурсы();
	Если Ответ Тогда
		Для каждого СтрокаТЧ из ТаблицаНовыхШтрихкодов Цикл
			Если НЕ ШтрихКодЕстьВБазе(Ложь,СтрокаТЧ.Штрихкод) Тогда
				ЗаполнитьЗначенияСвойств(ТЗНовыеШтрихкоды.Добавить(),СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		
		НазваниеКнопки =  "ЗагрузитьНовыеШтрихКоды";
		КнопкаКоманднойПанели = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти(НазваниеКнопки);
		Если КнопкаКоманднойПанели <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(КнопкаКоманднойПанели);
		КонецЕсли;
		
		Если ТЗНовыеШтрихкоды.Количество()>0 Тогда
			КнопкаСерийныеНомера =  ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Добавить(НазваниеКнопки, ТипКнопкиКоманднойПанели.Действие,"Загрузить новые штрихкоды" ,  Новый Действие("КоманднаяПанельТоварыЗагрузитьНовыеШтрихКоды"));
			КнопкаСерийныеНомера.Подсказка = "Загрузить новые штрихкоды";
			КнопкаСерийныеНомера.Картинка    =  Новый Картинка(ОбработкаОбъект.ПолучитьМакет("КартинкаШтрихкод"));
			КнопкаСерийныеНомера.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросНаОткрытиеФормыДобавленияНовыхШтрихКодов и ТЗНовыеШтрихкоды.Количество()>0 Тогда
		Если Вопрос("На ТСД были добавлены новые штрихкоды. Привязать новые штрихкоды к номенклатуре?", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
			КоманднаяПанельТоварыЗагрузитьНовыеШтрихКоды();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура КоманднаяПанельТоварыЗагрузитьНовыеШтрихКоды()
	
	ФормаЗагрузкиНовыхШтрихкодов = ПолучитьФорму("ФормаЗагрузкиНовыхШтрихкодов",ЭтаФорма);
 	ФормаЗагрузкиНовыхШтрихкодов.Открыть();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭлементыФормы.Товары.Колонки.ЯчейкаКуда.Видимость   = Ложь;
	ЭлементыФормы.Товары.Колонки.ЯчейкаОткуда.Видимость = Ложь;

	ЭлементыФормы.Товары.Колонки.СерияНоменклатуры.Видимость = мИспользоватьСерии;
	
	мПрефиксВесовогоТовара = ПолучитьПрефиксВесовогоТовара();
	мДлинаКодаВесовогоТовара = ПолучитьДлинуКодаВесовогоТовара();
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		СписокТерминалов = новый СписокЗначений;
		Для Каждого Устройство Из мСписокТерминалов Цикл
			СписокТерминалов.Добавить(Строка(Устройство.УникальныйИдентификатор()), Устройство.Наименование);
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		СписокТерминалов = новый СписокЗначений;
		Для Каждого Устройство Из мСписокТерминалов Цикл
			СписокТерминалов.Добавить(Строка(Устройство.УникальныйИдентификатор()), Устройство.Наименование);
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
	   СписокТерминалов = мСписокТерминалов;
	Иначе	
		Выполнить("ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма)");
		СписокТерминалов = "";
		Выполнить("СписокТерминалов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокТерминалов)");
	КонецЕсли;
	
	ЭлементыФормы.ТерминалСбораДанных.СписокВыбора = СписокТерминалов;
	
	ТерминалСбораДанных                              = СписокТерминалов[0].Значение;
	ЭлементыФормы.ТерминалСбораДанных.ТолькоПросмотр = (СписокТерминалов.Количество() = 1);
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ЗначениеЗаполнено(НачальноеЗначениеВыбора) и  НачальноеЗначениеВыбора.Свойство("НастройкиТСД") Тогда  //AVA. 22.05.2014. №159.
		Если ТерминалСбораДанных <> xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД) Тогда
			ТерминалСбораДанных = xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД);
			ТерминалСбораДанныхПриИзменении(Неопределено);
		КонецЕсли;
	Иначе
		ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
		Если ПоследняяРаботаСТО <> Неопределено и  СписокТерминалов.НайтиПоЗначению(ПоследняяРаботаСТО)<> Неопределено Тогда
			ТерминалСбораДанных =  ПоследняяРаботаСТО;
			мСохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
			ТерминалСбораДанныхПриИзменении(Неопределено);
		КонецЕсли;                                      	
	КонецЕсли;

	СохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	Если СохрФормат = Неопределено Тогда
		СохрФормат = ОбработкаОбъект.ПолучитьСписокДокументовПоУмолчнию();	
	КонецЕсли;
	
	Для каждого Строка из СохрФормат Цикл
		ТипДок = Строка.Значение;
		
		Док = Метаданные.Документы.Найти(ТипДок);
		Если Док <> Неопределено Тогда
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Добавить(ТипДок, Док.Представление());	
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокДокументов(ТерминалСбораДанных);
	
	ВидимостьЭлементовФормы();
	
	//восстановить порядок колонок при последнем сохранении.начало.   //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	ПорядокКолонокТабличныхЧастей = ВосстановитьЗначение(ОбработкаОбъект.Метаданные().Имя + "ПорядокКолонокТабличныхПолей");
	Если ПорядокКолонокТабличныхЧастей <> Неопределено Тогда
		Попытка
			Попытка
				//+AVA. 15.04.2014. №123.  несколько раз вызываются процедуры драйвера "Подключить","ПолучитьДокументы".
				ТаблицаСоВсемиПолямиДокументаТСД = ПолучитьСписокКолонокДляТаблицыЗначенийИзДокументовТСД(ДокументыМСМАРТС);
				ДобавитьДополнительныеКолонкиВЭлементФормыТовары(); 
				//-AVA. 15.04.2014. №123.  несколько раз вызываются процедуры драйвера "Подключить","ПолучитьДокументы".
			Исключение
			КонецПопытки;
			
			КолонкиТПТовары  = ПорядокКолонокТабличныхЧастей.Товары;
			Для каждого Колонка из КолонкиТПТовары Цикл
				КолонкаТаблицы   =  ЭлементыФормы.Товары.Колонки.Найти(Колонка.Имя);
				ЗаполнитьЗначенияСвойств(КолонкаТаблицы,Колонка);
				ЭлементыФормы.Товары.Колонки.Сдвинуть(КолонкаТаблицы,КолонкиТПТовары.индекс(Колонка) - ЭлементыФормы.Товары.Колонки.Индекс(КолонкаТаблицы));				
			КонецЦикла;
			
			КолонкиТПДокументыТСД = ПорядокКолонокТабличныхЧастей.ДокументыТСД;
			Для каждого Колонка из КолонкиТПДокументыТСД Цикл
				КолонкаТаблицы   =  ЭлементыФормы.ДокументыТСД.Колонки.Найти(Колонка.Имя);
				ЗаполнитьЗначенияСвойств(КолонкаТаблицы,Колонка);
				ЭлементыФормы.ДокументыТСД.Колонки.Сдвинуть(КолонкаТаблицы,КолонкиТПДокументыТСД.индекс(Колонка) -ЭлементыФормы.ДокументыТСД.Колонки.Индекс(КолонкаТаблицы));			
			КонецЦикла;  
		Исключение
		КонецПопытки;
	КонецЕсли;
	//восстановить порядок колонок при последнем сохранении.Окончание.
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда // настройки для ШтрихМ	
		ЗагрузитьНастройкиЗагрузкиДокумента1СИзФайла(); //AVA. 26.05.2014. №159.
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьНастройкиЗагрузкиДокумента1СИзФайла() Экспорт //AVA. 26.05.2014. №159.
	
	//+AVA. 26.05.2014. №159.
	Если  ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда // настройки для ШтрихМ	
		//+ZHKN. 02.12.2014. №248 Штрих-М заполнение открытой формы
		Документ1СДляЗагрузки 	= Неопределено;
		
		Если НачальноеЗначениеВыбора.Свойство("Документ") Тогда
			Документ1СДляЗагрузки 	= НачальноеЗначениеВыбора.Документ;	
		ИначеЕсли НачальноеЗначениеВыбора.Свойство("ФормаДокумента") Тогда
			ВыбранныйДокумент1СОбъект = НачальноеЗначениеВыбора.ФормаДокумента.ДокументОбъект;
			Документ1СДляЗагрузки 	= НачальноеЗначениеВыбора.ФормаДокумента.ДокументОбъект.Ссылка;	
		КонецЕсли;
		//-ZHKN. 02.12.2014.
 		ЗагрузитьБезВопроса = Ложь;
		Если НачальноеЗначениеВыбора.Свойство("ЗагрузитьБезВопроса") Тогда
			ЗагрузитьБезВопроса = НачальноеЗначениеВыбора.ЗагрузитьБезВопроса;
		КонецЕсли;
		МетаданныеДокумента1С = Документ1СДляЗагрузки.Метаданные();
		ИмяДляПоиска          = МетаданныеДокумента1С.Имя;
		НастройкаЗагрузкиДокумента =  ЭлементыФормы.ТипДокумента1С.СписокВыбора.НайтиПоЗначению(ИмяДляПоиска);
		Если ЗагрузитьБезВопроса = Истина  или НастройкаЗагрузкиДокумента = Неопределено тогда
			СписокТиповДокументов1С = ЭлементыФормы.ТипДокумента1С.СписокВыбора;
			СписокТиповДокументов1С.Добавить(ИмяДляПоиска,МетаданныеДокумента1С.Синоним);
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Добавить(ИмяДляПоиска,МетаданныеДокумента1С.Синоним);
			СохранитьЗначение(мИмяДляХраненияНастроек, СписокТиповДокументов1С);
			
			//загрузка настроек выгрузки документа из xml файла
			Если ЗагрузитьБезВопроса = истина ИЛИ Вопрос("Не найдена настройка загрузки документа ТСД в документ 1С?
				|Заполнить настройки из файла?
				|Если ответить ""Нет"", тогда в открывшейся форме необходимо настроить загрузку документа в 1С вручную. ", РежимДиалогаВопрос.ДаНет, 0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
				
				ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				
				ДиалогВыбораФайла.Фильтр     =	"Файл с настройкой загрузки документа ТСД в 1С (*.xml)|*.xml";
				ДиалогВыбораФайла.Расширение =	"xml";   
				ДиалогВыбораФайла.Заголовок  =	"Выберите файл с настройкой загрузки документа терминала сбора данных (ТСД) в 1С";
				
				ФорматПоискаНоменклатуры = Новый ТаблицаЗначений;
				ФорматПоискаНоменклатуры.Колонки.Добавить("Выгружать");
				ФорматПоискаНоменклатуры.Колонки.Добавить("ПолеТабличнойЧастиДокумента");
				ФорматПоискаНоменклатуры.Колонки.Добавить("ПолеТабличнойЧастиОбработки");
				
				ФорматЗагрузки = Новый ТаблицаЗначений;
				ФорматЗагрузки.Колонки.Добавить("Выгружать");
				ФорматЗагрузки.Колонки.Добавить("ПолеТабличнойЧастиДокумента");
				ФорматЗагрузки.Колонки.Добавить("ПолеТабличнойЧастиОбработки");
				
				ИспользоватьСтандартнуюНастройку = Истина;
 				
				Если ДиалогВыбораФайла.Выбрать() Тогда
					
					ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;					
					
					Чтение = Новый ЧтениеXML; 
					Чтение.ОткрытьФайл(ПутьКФайлу); 
 					
					ЛокальноеИмя = "";
					ИмяТабличнойЧасти = "Товары";
					Пока Чтение.Прочитать() Цикл 
						Если ЛокальноеИмя = "ДопНастройки" Тогда
							Если ВозможностьЧтенияXML(Чтение) Тогда
								Значение = ПрочитатьXML(Чтение);
								Если Чтение.Имя  = "ИспользоватьСтандартнуюНастройку" Тогда
									ИспользоватьСтандартнуюНастройку = Значение; 
								КонецЕсли;
							КонецЕсли;
							продолжить
						КонецЕсли;						
						
						Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента тогда
							Если Чтение.Имя = "Документ" Тогда
 							    ЛокальноеИмя = "Документ"; 
							ИначеЕсли Чтение.Имя = "ФорматПоискаНоменклатуры" Тогда
								ЛокальноеИмя = "ФорматПоискаНоменклатуры";
							ИначеЕсли Чтение.Имя = "ТабЧасть" Тогда
								ЛокальноеИмя = "ТабЧасть";
								ИмяТабличнойЧасти = Чтение.ПолучитьАтрибут(0);
								Продолжить;
							ИначеЕсли Чтение.Имя = "ДопНастройки" Тогда
								ЛокальноеИмя = "ДопНастройки";
							КонецЕсли;
										
							Если Чтение.КоличествоАтрибутов() > 0 Тогда
								Реквизит1С  = Чтение.ПолучитьАтрибут(0);
								РеквизитТСД = Чтение.ПолучитьАтрибут(1);
								Если ЛокальноеИмя = "ФорматПоискаНоменклатуры" Тогда
									//проверить существование реквизита таблицы
									РеквизитДокумента1С = МетаданныеДокумента1С.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(Реквизит1С);
									Если РеквизитДокумента1С = неопределено тогда 										
										Попытка
											РеквизитДокумента1С = МетаданныеДокумента1С.СтандартныеРеквизиты[Реквизит1С];
 										Исключение
											РеквизитДокумента1С = неопределено;  											
										КонецПопытки;
									КонецЕсли;
									
									Если РеквизитДокумента1С <> неопределено тогда
										НоваяСтрока                             = ФорматПоискаНоменклатуры.Добавить();
										НоваяСтрока.Выгружать                   = Истина;
										НоваяСтрока.ПолеТабличнойЧастиДокумента = Реквизит1С;
										НоваяСтрока.ПолеТабличнойЧастиОбработки = РеквизитТСД;
									Иначе
										Сообщить("В файле настроек указан поиск строк в документе 1С по реквизиту с именем """+Реквизит1С+""".
										|Нет реквизита с таким именем в документе 1С. Проверьте правильность указания настроек в файле!");
									КонецЕсли; 									
								ИначеЕсли ЛокальноеИмя = "ТабЧасть" Тогда	
									РеквизитТабличнойЧастиДокумента1С = МетаданныеДокумента1С.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(Реквизит1С);
									Если РеквизитТабличнойЧастиДокумента1С <> неопределено тогда 
										НоваяСтрока                             = ФорматЗагрузки.Добавить();
										НоваяСтрока.Выгружать                   = Истина;
										НоваяСтрока.ПолеТабличнойЧастиДокумента = Реквизит1С;
										НоваяСтрока.ПолеТабличнойЧастиОбработки = РеквизитТСД;
									Иначе
										Сообщить("В файле настроек указано заполнение реквизита табличной части """+ИмяТабличнойЧасти+"""  с именем """+Реквизит1С+""".
										|Нет реквизита с таким именем в документе 1С. Проверьте правильность указания настроек в файле!");
									КонецЕсли; 
								ИначеЕсли ЛокальноеИмя = "Документ" Тогда
									ИмяДокумента1С_  = Чтение.ПолучитьАтрибут(0);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли; 						
					КонецЦикла;
					
					Если ИмяДокумента1С_ <> ИмяДляПоиска Тогда //загружать только настройки, предназначенные для выбранного документа (для случая, если ошиблись в выборе файла xml)
						Предупреждение("Вы пытаетесь загрузить настройки, предназначенные для другого документа 1С. Проверьте файл настроек!",20,"Изменение данных");
						Возврат ложь;
					КонецЕсли;
					
					ФормаФорматЗагрузки = Получитьформу("ФормаФорматЗагрузки");
					ФормаФорматЗагрузки.ТипДокумента = ИмяДляПоиска;
					СтруктураНастройки  = ФормаФорматЗагрузки.ПолучитьСтруктуруНастройки();
					
					Если ФормаФорматЗагрузки.ПолучитьНастройку(СтруктураНастройки) Тогда
						мСтруктураНастройки = СтруктураНастройки.СохраненнаяНастройка;
						Если  СтруктураНастройки.СохраненнаяНастройка.Свойство("НастройкаПоДокументам") Тогда
							мСтруктураНастройкиДокумента1 = СтруктураНастройки.СохраненнаяНастройка.НастройкаПоДокументам;	
						иначе
							мСтруктураНастройкиДокумента1 = Новый Структура;
						КонецЕсли;
					Иначе
						мСтруктураНастройки           = Новый Структура;
						мСтруктураНастройкиДокумента1 = Новый Структура;
					КонецЕсли;  					
					мСтруктураНастройкиДокумента = Новый Структура;
					мСтруктураНастройкиДокумента.Вставить("ИспользоватьСтандартнуюНастройку",ИспользоватьСтандартнуюНастройку);
					мСтруктураНастройкиДокумента.Вставить("ТабличнаяЧасть",ИмяТабличнойЧасти);
					мСтруктураНастройкиДокумента.Вставить("ФорматЗагрузки",ФорматЗагрузки);
					мСтруктураНастройкиДокумента.Вставить("ФорматПоискаНоменклатуры",ФорматПоискаНоменклатуры);
					
					мСтруктураНастройкиДокумента1.Вставить(ИмяДляПоиска,мСтруктураНастройкиДокумента);
					мСтруктураНастройки.Вставить("НастройкаПоДокументам",мСтруктураНастройкиДокумента1);
					СтруктураНастройки.Вставить("СохраненнаяНастройка", мСтруктураНастройки);
					
					ФормаФорматЗагрузки.СохранитьНастройку(СтруктураНастройки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗагрузитьБезВопроса = Ложь Тогда
			ЭлементыФормы.ТипДокумента1С.Значение = ИмяДляПоиска;
			//+ZHKN. 02.12.2014. №248 Штрих-М заполнение открытой формы
			Если ТипЗнч(ВыбранныйДокумент1СОбъект) = Тип("ДокументОбъект."+ИмяДляПоиска) Тогда
				ЭлементыФормы.НадписьНовыйДокумент.Видимость = Истина;
				ВыбранныйДокумент1С = Документ1СДляЗагрузки;
			Иначе	
				ЭлементыФормы.Документ1С.Значение     = Документ1СДляЗагрузки;
				ВыбранныйДокумент1С                   = Документ1СДляЗагрузки;
			КонецЕсли;
			//-ZHKN. 02.12.2014.
			
			//попытаться найти документ 1С в списке документов 1С, если документ найден, заполнить нижнюю ТЧ обработки
			ИдДокумента1С = ИмяДляПоиска+"#"+XMLСтрока(Документ1СДляЗагрузки);
			Для каждого СтрокаТЧ из ДокументыТСД Цикл
				СтрокаТЧ.Загружать = СтрокаТЧ.ИдДокумента = ИдДокумента1С ;
			КонецЦикла;
			Если ДокументыТСД.НайтиСтроки(Новый Структура("Загружать",Истина)).Количество()>0 Тогда
				ЗагрузитьДанныеНажатие(Неопределено,Истина); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Истина;
	//-AVA. 26.05.2014. №159.
	
КонецФункции

Процедура ВосстановитьДополнительныхПолей()
	
	//восстановить порядок колонок при последнем сохранении.начало.   //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	ПорядокКолонокТабличныхЧастей = ВосстановитьЗначение(ОбработкаОбъект.Метаданные().Имя + "ПорядокКолонокТабличныхПолей");
	Если ПорядокКолонокТабличныхЧастей <> Неопределено Тогда
		Попытка
			КолонкиТПТовары  = ПорядокКолонокТабличныхЧастей.Товары;
			Для каждого Колонка из КолонкиТПТовары Цикл
				Если Найти(Колонка.Имя,"ПолеШапкиДокументаТСД_") или Найти(Колонка.Имя,"ПолеСтрокиДокументаТСД_") > 0 Тогда 
					КолонкаТаблицы   =  ЭлементыФормы.Товары.Колонки.Найти(Колонка.Имя);
					ЗаполнитьЗначенияСвойств(КолонкаТаблицы,Колонка);
					ЭлементыФормы.Товары.Колонки.Сдвинуть(КолонкаТаблицы,КолонкиТПТовары.индекс(Колонка) - ЭлементыФормы.Товары.Колонки.Индекс(КолонкаТаблицы));				
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//восстановить порядок колонок при последнем сохранении.Окончание.
	
КонецПроцедуры

Процедура ДокументВыборНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ЭлементыФормы.ТипДокумента1С.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаПодбора = Документы[ЭлементыФормы.ТипДокумента1С.Значение].ПолучитьФормуВыбора(, ЭлементыФормы.Документ1С);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Истина;
	ФормаПодбора.МножественныйВыбор = Ложь;
		
	ФормаПодбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура Документ1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранныйДокумент1С = ВыбранноеЗначение.ПолучитьОбъект();
	Документ1С = ВыбранныйДокумент1С;
	
КонецПроцедуры

Процедура Документ1СОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ВыбранныйДокумент1С <> Неопределено Тогда
		ВыбранныйДокумент1С.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипДокумента1СПриИзменении(Элемент)
	
	Документ1С = Неопределено;
	ВыбранныйДокумент1С = Неопределено;
	
	мТип = ТипЗнч(ЭлементыФормы.Документ1С.Значение);
	
	ЭлементыФормы.Документ1С.Значение = ЭлементыФормы.Документ1С.ОграничениеТипа.ПривестиЗначение(Документы[Элемент.Значение].ПустаяСсылка());
	// 20.11.2013 +
	ЭлементыФормы.НадписьНовыйДокумент.Видимость = Истина;	
	// 20.11.2013 -
КонецПроцедуры

Процедура ТерминалСбораДанныхПриИзменении(Элемент = Неопределено)
	
	ДокументыМСМАРТС = Неопределено;  //AVA. 15.04.2014. №123.
	мОбъект          = Неопределено;
	
	ПодключитьТерминал();
	Если мВидимостьЭлементовФормы Тогда
		ЗаполнитьСписокДокументов(ТерминалСбораДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандыДокументовДействие(Кнопка)
	
	ДокументыМСМАРТС = Неопределено; //AVA. 15.04.2014. №123.
	
	ЗаполнитьСписокДокументов(ТерминалСбораДанных);
	
КонецПроцедуры

Функция ПолучитьПрефиксВесовогоТовара()
	
	ПрефиксВесовогоТовара = "";
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ПрефиксВесовогоТовара = Справочники.ФорматыШтрихКодов.ВключаетКоличество.ПрефиксШК;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		ВесовыеШтрихКодыВыборка = Справочники.ВесовыеШтрихКоды.Выбрать(,,,"Код Возр");
		Пока ВесовыеШтрихКодыВыборка.Следующий() Цикл
			Если НЕ ВесовыеШтрихКодыВыборка.ПометкаУдаления Тогда
				ПрефиксВесовогоТовара =   Лев(ВесовыеШтрихКодыВыборка.Код,2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
		ПрефиксВесовогоТовара = Константы.ПрефиксВесовогоШК.Получить(); 	
	Иначе
		Инфо = Новый СистемнаяИнформация; 
		ВерсияПриложения = Инфо.ВерсияПриложения;
		ЗнакиВерсии = РазбитьСтр(ВерсияПриложения, ".");
		Если ЗнакиВерсии.Количество() >= 4 Тогда
			Если (ЗнакиВерсии[0] = "10") И (ЗнакиВерсии[1] = "3") И (Число(ЗнакиВерсии[2]) <= 5) Тогда
				ПрефиксВесовогоТовара = "2" + Константы.ПрефиксШтучногоТовара.Получить();
			Иначе
				ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
			КонецЕсли;
		Иначе
			ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
		КонецЕсли;
	КонецЕсли;
	Возврат ПрефиксВесовогоТовара;
	
КонецФункции

Функция ПолучитьДлинуКодаВесовогоТовара() Экспорт
	
	Перем ДлинаКодаВесовогоТовара;	
	Если Метаданные.Константы.Найти("ДлинаКодаВесовогоТовара") <> Неопределено Тогда
		ДлинаКодаВесовогоТовара = Константы.ДлинаКодаВесовогоТовара;
	ИначеЕсли Найти(мНазваниеКонфигурации,"автосалон5") > 0	Тогда
		ДлинаКодаВесовогоТовара = 6;	
	Иначе
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	Возврат ДлинаКодаВесовогоТовара;
	
КонецФункции

Процедура ТипыДокументов1СНажатие(Элемент)	
	
	Форма = ПолучитьФорму("ФормаСпискаДокументов",ЭтаФорма);
	// 20.11.2013 +
	//Форма.ОбнулятьКоличПередЗаполнением = ОбнулятьКоличПередЗаполнением; 
	// 20.11.2013 -
	Форма.ОткрытьМодально();
	
	ЭлементыФормы.ТипДокумента1С.СписокВыбора.Очистить();
	СохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
	Если СохрФормат = Неопределено Тогда
		СохрФормат = ОбработкаОбъект.ПолучитьСписокДокументовПоУмолчнию();	
	КонецЕсли;
	
	Для каждого Строка из СохрФормат Цикл
		ТипДок = Строка.Значение;
		Док = Метаданные.Документы.Найти(ТипДок);
		Если Док <> Неопределено Тогда
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Добавить(ТипДок, Док.Представление());	
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементыФормы.ТипДокумента1С.СписокВыбора.НайтиПоЗначению(ТипДокумента1С)= Неопределено тогда
		ТипДокумента1С = Неопределено;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(Документ1С) и Документ1С.метаданные().Имя = ТипДокумента1С) Тогда
		Документ1С = Неопределено;
		Если ЗначениеЗаполнено(ТипДокумента1С) Тогда
			ЭлементыФормы.Документ1С.Значение = ЭлементыФормы.Документ1С.ОграничениеТипа.ПривестиЗначение(Документы[ТипДокумента1С].ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	// 20.11.2013 +
	//Если Форма.НажатаКнопкаOK Тогда
	//	ОбнулятьКоличПередЗаполнением = Форма.ОбнулятьКоличПередЗаполнением;
	//КонецЕсли;
	// 20.11.2013 -
	
КонецПроцедуры

Функция ПолучитьШКИзСтрокиДокумента(СтрокаДокументаТСД) 
	
	//+AVA. 07.04.2014. Именен порядок получения штрихкода из полей документа ТСД.	
	//ШК = СтрокаДокументаТСД.ПолучитьПоле("code");
	//Если ШК = Неопределено Или ПустаяСтрока(ШК) Или
	//	ШК = "00000000" Или ШК = "0" Или Найти(ШК, "{") > 0 Тогда
	//		ШК = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	//КонецЕсли;
	ШК = СтрокаДокументаТСД.ПолучитьПоле("barcode");
	Если не ЗначениеЗаполнено(ШК)Тогда
		code = СтрокаДокументаТСД.ПолучитьПоле("code");
		Если ЗначениеЗаполнено(code) и code <> "00000000" и code <> "0" и Найти(code, "{") = 0 Тогда
			ШК = code;
		КонецЕсли
	КонецЕсли;
 	//-AVA. 07.04.2014. Именен порядок получения штрихкода из полей документа ТСД.
	
	Если ШК <> Неопределено Тогда
		Инд = Найти(ШК, "|");
		Если Инд > 0 Тогда
			ШК = Лев(ШК, Инд-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШК;
	
КонецФункции

Функция ЗагрузитьНовыеШтрихкоды(Объект)
	ТаблицаНовыхШтрихкодов = Новый ТаблицаЗначений;
	ДобавленныеШК = Новый СписокЗначений;
	
	Ответ = Объект.Драйвер.ЗагрузитьНовыеШтрихкоды(ТаблицаНовыхШтрихкодов);	
	Объект.Драйвер.ОсвободитьРесурсы();
	
	Если Ответ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаНовыхШтрихкодов Цикл
			КодТовара = СтрокаТаблицы.КодТовара;
			Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	ШтрихКоды.Владелец КАК Владелец
				|ИЗ
				|	Справочник.ШтрихКоды КАК ШтрихКоды
				|ГДЕ
				|	ШтрихКоды.Наименование = &Штрихкод");
			ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|    РегШК.Номенклатура                   КАК Владелец
				|ИЗ
				|    РегистрСведений.Штрихкоды        КАК РегШК
				|ГДЕ
				|    РегШК.Штрихкод = &Штрихкод
				|");
			ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
				Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	ШтрихКоды.Объект Как Владелец
 				|ИЗ
				|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
				|ГДЕ
				|	ШтрихКоды.Штрихкод = &Штрихкод");		
			Иначе	
				Запрос = Новый Запрос("
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|    РегШК.Владелец                   КАК Владелец
				|ИЗ
				|    РегистрСведений.Штрихкоды        КАК РегШК
				|ГДЕ
				|    РегШК.Штрихкод = &Штрихкод
				|");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Штрихкод", СтрокаТаблицы.Штрихкод);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Продолжить;	
			КонецЕсли;
			
			Товар = НайтиНоменклатуруПоКоду(КодТовара);
			
			Если ЗначениеЗаполнено(Товар) Тогда
				Отбор = Новый Структура("Наименование");
				Отбор.Наименование = СтрокаТаблицы.НаименованиеУпаковки;
				Выборка = Справочники.ЕдиницыИзмерения.Выбрать(,Товар.Ссылка, Отбор); 				
				Если Не Выборка.Следующий() Тогда
					Сообщить("Загрузка новых штрихкодов: не найдена единица измерения с именем '" + СтрокаТаблицы.НаименованиеУпаковки + "'", СтатусСообщения.ОченьВажное);
					Продолжить;
				КонецЕсли;
				Если Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
					Запись = Справочники.ШтрихКоды.СоздатьЭлемент();
					Запись.Владелец     = Товар.Ссылка;
					Запись.Единица      = Выборка.Ссылка;
					Запись.Наименование = СтрокаТаблицы.Штрихкод;
					ХарактеристикаИмя = СтрокаТаблицы.Характеристика;
					Если ХарактеристикаИмя <> Неопределено И Не ПустаяСтрока(ХарактеристикаИмя) и ЕстьСправочникХарактеристикиНоменклатуры Тогда
						Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ХарактеристикаИмя,,,Товар.Ссылка);
						Если Характеристика = Неопределено Или 
							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда						
							Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаИмя,,,Товар.Ссылка);	
						КонецЕсли;
						
						Если Характеристика <> Неопределено И 
							Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда				
							Запись.ХарактеристикаНоменклатуры = Характеристика;	
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
					Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаНоменклатура] = Товар.Ссылка;
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаУпаковка] = Выборка.Ссылка; 
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаГдеХранитсяШтрихКод] = СтрокаТаблицы.Штрихкод;
					
					ХарактеристикаИмя = СтрокаТаблицы.Характеристика;
					Если ХарактеристикаИмя <> Неопределено И Не ПустаяСтрока(ХарактеристикаИмя)и ЕстьСправочникХарактеристикиНоменклатуры Тогда
						Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ХарактеристикаИмя,,,Товар.Ссылка);
						Если Характеристика = Неопределено Или 
							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда						
							Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаИмя,,,Товар.Ссылка);	
						КонецЕсли;
						
						Если Характеристика <> Неопределено И 
							Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда				
							Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаХарактеристика] = Характеристика;	
						КонецЕсли;
					КонецЕсли;
					Выполнить("Запись.ТипШтрихкода = ОпределениеТипаШтрихКода(Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаГдеХранитсяШтрихКод])");
				ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
					Запись = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаНоменклатура] = Товар.Ссылка;
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаУпаковка] = Выборка.Ссылка; 
					Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаГдеХранитсяШтрихКод] = СтрокаТаблицы.Штрихкод;
					
					ХарактеристикаИмя = СтрокаТаблицы.Характеристика;
					Если ХарактеристикаИмя <> Неопределено И Не ПустаяСтрока(ХарактеристикаИмя)и ЕстьСправочникХарактеристикиНоменклатуры Тогда
						Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ХарактеристикаИмя,,,Товар.Ссылка);
						Если Характеристика = Неопределено Или 
							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда						
							Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаИмя,,,Товар.Ссылка);	
						КонецЕсли;
						
						Если Характеристика <> Неопределено И 
							Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда				
							Запись[СтруктураОбъектаХраненияШтрихкодов.НазваниеРеквизитаХарактеристика] = Характеристика;	
						КонецЕсли;
					КонецЕсли;
				Иначе
					Запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
					Запись.Владелец = Товар.Ссылка;
					Запись.ЕдиницаИзмерения = Выборка.Ссылка; 
					Запись.Штрихкод = СтрокаТаблицы.Штрихкод;
					Если Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
					Иначе
						Запись.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					ХарактеристикаИмя = СтрокаТаблицы.Характеристика;
					Если ХарактеристикаИмя <> Неопределено И Не ПустаяСтрока(ХарактеристикаИмя)и ЕстьСправочникХарактеристикиНоменклатуры Тогда
						Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ХарактеристикаИмя,,,Товар.Ссылка);
						Если Характеристика = Неопределено Или 
							Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда						
							Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ХарактеристикаИмя,,,Товар.Ссылка);	
						КонецЕсли;
						
						Если Характеристика <> Неопределено И 
							Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда				
							Запись.ХарактеристикаНоменклатуры = Характеристика;	
						КонецЕсли;
					КонецЕсли;
					
					Если Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
					Иначе
						СерияИмя = СтрокаТаблицы.СерияНоменклатуры;
						Если СерияИмя <> Неопределено И Не ПустаяСтрока(СерияИмя) Тогда
							Серия = Справочники.СерииНоменклатуры.НайтиПоКоду(СерияИмя,,,Товар.Ссылка);
							Если Серия = Неопределено Или 
								Серия = Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда						
								Серия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(СерияИмя,,,Товар.Ссылка);	
							КонецЕсли;
							
							Если Серия <> Неопределено И 
								Серия <> Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда				
								Запись.СерияНоменклатуры = Серия;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ТипШтрихкодаEAN13ТО = "";
					Выполнить("ТипШтрихкодаEAN13ТО = РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(СтрокаТаблицы.Штрихкод)");
					Если ТипШтрихкодаEAN13ТО Тогда
						Запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
					Иначе
						Запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39;
					КонецЕсли;
				КонецЕсли;
				Попытка
					Запись.Записать();					
					ДобавленныеШК.Добавить(СтрокаТаблицы.Штрихкод);
				Исключение
					Сообщить("Для товара '" + Товар.Наименование + "' не удалось добавить штрихкод '" + СтрокаТаблицы.Штрихкод + "'. Ошибка: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);	
					Продолжить;	
				КонецПопытки;
				
				Сообщить("Для товара '" + Товар.Наименование + "' добавлен штрихкод '" + СтрокаТаблицы.Штрихкод + "'");
			Иначе
				Сообщить("Загрузка новых штрихкодов: не найдена номенклатура с кодом '" + КодТовара + "'", СтатусСообщения.ОченьВажное);
			КонецЕсли;
		КонецЦикла;	
		Ответ = Объект.Драйвер.ОбновитьШтрихкоды(ДобавленныеШК);
	КонецЕсли;
	
	Если Не Ответ Тогда
		ОписаниеОшибки = "";
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(ОписаниеОшибки);
		Сообщить("Ошибка при загрузке новых штрихкодов: " + ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьХарактеристику(ИмяХарактеристики, Номенклатура)
	
	Характеристика = Неопределено;
	Если не ЕстьСправочникХарактеристикиНоменклатуры Тогда
		Возврат Характеристика;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ИмяХарактеристики,,,Номенклатура);
	Если ХарактеристикаНоменклатуры	<> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
		Характеристика = ХарактеристикаНоменклатуры;
	Иначе
		Если Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
			Если Номенклатура.ВидНоменклатуры <> Неопределено И Не Номенклатура.ВидНоменклатуры.Пустая() Тогда
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(ИмяХарактеристики,,,Номенклатура.ВидНоменклатуры);
				Если ХарактеристикаНоменклатуры	<> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
					Характеристика = ХарактеристикаНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Характеристика;
КонецФункции

Функция ПолучитьЯчейкуНоменклатуры(ЯчейкаНаименование);
	
	Если Найти(мНазваниеКонфигурации, "автосалон5") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Справочники.ЯчейкиХранения.НайтиПоКоду(ЯчейкаНаименование);
	
КонецФункции

Процедура ДобавитьСтрокуДокументаВТаблицуТоваров(СтрокаТаблицыДокумента,ЕстьВесТовар,мПрефиксВесовогоТовара,ОтсканированыЯчейки,ДокументТСД,НомерСтрокиДокументаТСД)
	
	Номенклатура               = Неопределено;
	ХарактеристикаНоменклатуры = Неопределено;
	СерияНоменклатуры          = Неопределено;
	Качество                   = Неопределено;
	ЕдиницаИзмерения           = Неопределено;
	Цена                       = Неопределено; 
	
	ШК         = ПолучитьШКИзСтрокиДокумента(СтрокаТаблицыДокумента);
	Количество = СтрокаТаблицыДокумента.КоличествоФакт;
	КоличПлан  = СтрокаТаблицыДокумента.КоличествоПлан;
	Код        = СтрокаТаблицыДокумента.ИдТовара;
	
	Цена          = СтрокаТаблицыДокумента.ПолучитьПоле("price");
	СерийныйНомер = СтрокаТаблицыДокумента.ПолучитьПоле("sn");
	// + ZHKN. 12.02.2014. №80. Новая работа с сериями.	
	Если НоваяработаССериями Тогда
		СерияНоменклатуры = СтрокаТаблицыДокумента.ПолучитьПоле("serial");
	КонецЕсли;
	// - ZHKN. 12.02.2014.
	
	
	//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
	ИдУпаковки = СтрокаТаблицыДокумента.ИдУпаковки;
	ПорядковыйНомерСимвола_ = найти(ИдУпаковки,"_");
	Если ПорядковыйНомерСимвола_ > 0 Тогда
		ИдУпаковки_2 = Лев(ИдУпаковки,ПорядковыйНомерСимвола_ - 1);
	КонецЕсли;  						
	//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
	
	ЯчейкаОткуда   = ПолучитьЯчейкуНоменклатуры(СтрокаТаблицыДокумента.ШтрихкодПервогоМеста);
	ЯчейкаКуда     = ПолучитьЯчейкуНоменклатуры(СтрокаТаблицыДокумента.ШтрихкодВторогоМеста);
                                                                                               	
	Если ОтсканированыЯчейки = Ложь тогда
		ОтсканированыЯчейки  =  ЗначениеЗаполнено(ЯчейкаОткуда) или ЗначениеЗаполнено(ЯчейкаКуда);
	КонецЕсли;
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 
		ИЛИ Найти(мНазваниеКонфигурации, "автосалон5") > 0  Тогда
		ТипШтрихкодаEAN8ТО  = СтрДлина(ШК) = 8;	
		ТипШтрихкодаEAN13ТО = СтрДлина(ШК) = 13;
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТипШтрихкодаEAN8ТО = "";
		Выполнить("ТипШтрихкодаEAN8ТО = ОпределениеТипаШтрихКода(ШК) = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8");
		ТипШтрихкодаEAN13ТО = "";
		Выполнить("ТипШтрихкодаEAN13ТО = ОпределениеТипаШтрихКода(ШК) = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13");
	Иначе
		ТипШтрихкодаEAN8ТО = "";
		Выполнить("ТипШтрихкодаEAN8ТО = РаботаСТорговымОборудованием.ТипШтрихкодаEAN8ТО(ШК)");
		ТипШтрихкодаEAN13ТО = "";
		Выполнить("ТипШтрихкодаEAN13ТО = РаботаСТорговымОборудованием.ТипШтрихкодаEAN13ТО(ШК)");
	КонецЕсли;
	
	Если ТипШтрихкодаEAN8ТО Тогда
		ТипШК = мEAN8;
	ИначеЕсли ТипШтрихкодаEAN13ТО Тогда
		ТипШК = мEAN13;
	Иначе
		ТипШК = мCODE39;
	КонецЕсли;
	
	НоменклатураНайдена = Ложь;
	
	ЧислоЗнаковПослеЗапятойВВесе = мОбъект.Параметры.ЧислоЗнаковПослеЗапВВесе;
	сч = 1;
	КоэффициентВычисленияВеса = 1;
	Пока сч <= ЧислоЗнаковПослеЗапятойВВесе Цикл КоэффициентВычисленияВеса = КоэффициентВычисленияВеса*10;	сч = сч + 1;КонецЦикла;    					
 
	Если ЕстьВесТовар = Истина 
		И ЗначениеЗаполнено(мПрефиксВесовогоТовара)
		И ЗначениеЗаполнено(мДлинаКодаВесовогоТовара)
		И ТипШК = мEAN13 Тогда
		Если  Лев(ШК, 2) = мПрефиксВесовогоТовара и Найти(мНазваниеКонфигурации,"автосалон5")>0 Тогда
			ПрефикКодаТовара = ПараметрыСеанса.ПодразделениеКомпании.Префикс+"Б";			
			КодТовара = Сред(ШК,3,мДлинаКодаВесовогоТовара);
			НайденныйТовар = справочники.Номенклатура.найтиПоКоду(ПрефикКодаТовара+КодТовара);
			Если не ЗначениеЗаполнено(НайденныйТовар) Тогда
				НайденныйТовар = справочники.Номенклатура.найтиПоКоду(КодТовара);
			КонецЕсли;
			Если не ЗначениеЗаполнено(НайденныйТовар) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст="
				|ВЫБРАТЬ  первые 1
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Код ПОДОБНО ""%"" +&Код+""%""
				| И (НЕ Номенклатура.ЭтоГруппа)";
				запрос.УстановитьПараметр("Код",КодТовара);
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					НайденныйТовар = Результат.Ссылка; 
					НоменклатураНайдена = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НоменклатураНайдена Тогда
				Номенклатура               = НайденныйТовар;
				ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				СерияНоменклатуры          = Неопределено;
				Качество                   = Неопределено;
				ЕдиницаИзмерения           = НайденныйТовар.ОсновнаяЕдиницаИзмерения;
			//	КоличествоТовара = Сред(ШК,3+мДлинаКодаВесовогоТовара,СтрДлина(ШК) -(3+мДлинаКодаВесовогоТовара));  
			//КоличествоТовара = число(КоличествоТовара)/КоэффициентВычисленияВеса;
			//	Количество = КоличествоТовара;
			КонецЕсли;
		иначеЕсли  Лев(ШК, 2) = мПрефиксВесовогоТовара Тогда //ут упп ка
			КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
			КоличествоТовара = Сред(ШК, 3 + мДлинаКодаВесовогоТовара, 10 - мДлинаКодаВесовогоТовара);
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ //ПЕРВЫЕ 1
			|    РегКВТ.Номенклатура                         КАК Номенклатура,
			|    РегКВТ.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|    РегКВТ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
			|    РегКВТ.СерияНоменклатуры                    КАК СерияНоменклатуры,
			|    ВЫБОР
			|        КОГДА РегКВТ.Качество = Значение(Справочник.Качество.ПустаяСсылка) ТОГДА
			|            Значение(Справочник.Качество.Новый) 
			|        ИНАЧЕ
			|            РегКВТ.Качество
			|    КОНЕЦ                                       КАК Качество
			|ИЗ
			|    РегистрСведений.КодыВесовогоТовара          КАК РегКВТ
			|ГДЕ
			|    РегКВТ.Код = &Код
			|");
			Запрос.УстановитьПараметр("Код",Число(КодТовара));   			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				РезультатЗапроса = РезультатЗапроса.Выбрать();
				Пока РезультатЗапроса.Следующий()Цикл
					Номенклатура               = РезультатЗапроса.Номенклатура;
					ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
					СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
					Качество                   = РезультатЗапроса.Качество;
					ЕдиницаИзмерения           = РезультатЗапроса.ЕдиницаИзмерения;
					//КоличествоТовара = число(КоличествоТовара)/КоэффициентВычисленияВеса;
					//Количество = КоличествоТовара;
					НоменклатураНайдена = Истина;
					Если Строка(РезультатЗапроса.Номенклатура.Код) = Строка(СтрокаТаблицыДокумента.ИдТовара) Тогда
						Прервать
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		Если мОбъект.Параметры.ИспШаблоныВесовогоТовара 
			и Лев(ШК, СтрДлина(мПрефиксВесовогоТовара)) = мПрефиксВесовогоТовара 
			Тогда
			
			КодТовара        = Сред(ШК, 3, мДлинаКодаВесовогоТовара);
			ВнутреннийКодНоменклатурыСовпадаетСКодомНоменклатуры = "";
			Выполнить("ВнутреннийКодНоменклатурыСовпадаетСКодомНоменклатуры = ПараметрыСеанса.ВнутреннийКодНоменклатурыСовпадаетСКодомНоменклатуры");
			Попытка
				КодТовара = число(КодТовара);
				Номенклатура =  НайтиНоменклатуруПоКоду(КодТовара);
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
					Запрос.УстановитьПараметр("КодТовара", КодТовара);
					Если ВнутреннийКодНоменклатурыСовпадаетСКодомНоменклатуры Тогда 			
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	Номенклатура.Ссылка КАК Номенклатура,
						|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
						|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения
						|ИЗ
						|	Справочник.Номенклатура КАК Номенклатура
						|ГДЕ
						|	Номенклатура.Ссылка = &Номенклатура"; 				
					Иначе  				
						Запрос.Текст =	
						"ВЫБРАТЬ
						|	ВнутренниеКодыТоваров.Номенклатура,
						|	ВнутренниеКодыТоваров.ХарактеристикаНоменклатуры,
						|	ВнутренниеКодыТоваров.ЕдиницаИзмерения
						|ИЗ
						|	РегистрСведений.ВнутренниеКодыТоваров КАК ВнутренниеКодыТоваров
						|ГДЕ
						|	ВнутренниеКодыТоваров.Код = &КодТовара
						|
						|СГРУППИРОВАТЬ ПО
						|	ВнутренниеКодыТоваров.Номенклатура,
						|	ВнутренниеКодыТоваров.ХарактеристикаНоменклатуры,
						|	ВнутренниеКодыТоваров.ЕдиницаИзмерения"; 				
					КонецЕсли;
					РезультатВыборка = Запрос.Выполнить().Выбрать();
					Если РезультатВыборка.Следующий() Тогда
						Номенклатура = РезультатВыборка.Номенклатура;
						ХарактеристикаНоменклатуры = РезультатВыборка.ХарактеристикаНоменклатуры;
						ЕдиницаИзмерения           = РезультатВыборка.ЕдиницаИзмерения;
						НоменклатураНайдена        = Истина; 
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда	
		ВесовойТовар = неопределено;
		Выполнить("ВесовойТовар = НайтиВесовойШтрихКодТовара(ШК)");
		Если ВесовойТовар <> Неопределено Тогда  
			Если ВесовойТовар.Свойство("ШтрихКод") <> Неопределено Тогда
				Номенклатура 	 = Справочники.Номенклатура.НайтиПоКоду(ВесовойТовар.ШтрихКод);	
				ЕдиницыИзмерения = Номенклатура.БазоваяЕдиница;
			Иначе	
				Номенклатура 	 = ВесовойТовар.Номенклатура;
				ЕдиницыИзмерения = ВесовойТовар.Номенклатура.БазоваяЕдиница;
			КонецЕсли;
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоменклатураНайдена        = Истина;   
		КонецЕсли; 
	ИначеЕсли Найти(мНазваниеКонфигурации, "розница") > 0 Тогда   
		КодPLU = Сред(ШК,СтрДлина(мПрефиксВесовогоТовара)+1,мДлинаКодаВесовогоТовара);
		Попытка
			//+ZHKN. 23.01.2015. №305  Весовой розница 1.0
			Если Лев(ШК, 2) <> мПрефиксВесовогоТовара Тогда
				КодPLU = "Строка";	
			КонецЕсли;
			//-ZHKN. 23.01.2015.
			КодPLU = Число(КодPLU);
			ЗапросНоменклатура = новый Запрос;
			ЗапросНоменклатура.Текст = "ВЫБРАТЬ
			|	КодыТоваровPLU.Номенклатура,
			|	КодыТоваровPLU.ХарактеристикаНоменклатуры,
			|	ВЫБОР
			|		КОГДА КодыТоваровPLU.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.единицыИзмерения.ПустаяСсылка)
			|			ТОГДА КодыТоваровPLU.Номенклатура.ЕдиницаХраненияОстатков
			|		ИНАЧЕ КодыТоваровPLU.ЕдиницаИзмерения
			|	КОНЕЦ КАК ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.КодыТоваровPLU КАК КодыТоваровPLU
			|ГДЕ
			|	КодыТоваровPLU.Код = &КодPLU"; 
			ЗапросНоменклатура.УстановитьПараметр("КодPLU",КодPLU);
			РезультатЗапроса = ЗапросНоменклатура.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				НоменклатураНайдена        = Истина; 
				Номенклатура               = РезультатЗапроса.Номенклатура;
				ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
				ЕдиницыИзмерения = РезультатЗапроса.ЕдиницаИзмерения;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Не НоменклатураНайдена и ЗначениеЗаполнено(ШК) Тогда
		Если  Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ШтрихКоды.Владелец,
			|	ШтрихКоды.Единица как ЕдиницаИзмерения,
			|	ШтрихКоды.ХарактеристикаНоменклатуры
			|ИЗ
			|	Справочник.ШтрихКоды КАК ШтрихКоды
			|ГДЕ
			|	ШтрихКоды.Наименование = &Штрихкод И ШтрихКоды.Владелец = &Владелец");	
		
			Попытка // №511 13.10.2015
				Запрос.УстановитьПараметр("Владелец", XMLЗначение(Тип("СправочникСсылка.Номенклатура"), СтрокаТаблицыДокумента.ProductId));
			Исключение
				Запрос.УстановитьПараметр("Владелец", Справочники.Номенклатура.ПустаяСсылка() );
			КонецПопытки;
		ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ШтрихКоды.Номенклатура Как Владелец,
			|	ШтрихКоды.ЕдиницаИзмерения как ЕдиницаИзмерения,
			|	ШтрихКоды.ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ
			|	ШтрихКоды.Штрихкод = &Штрихкод");
		ИначеЕсли ПоддержкаДругихВерсий() Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ШтрихКоды.Владелец Как Владелец,
			|	ШтрихКоды.ЕдиницаИзмерения как ЕдиницаИзмерения,
			|	null как ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ
			|	ШтрихКоды.Штрихкод = &Штрихкод");
		ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ШтрихКоды.Объект Как Владелец,
			|	ШтрихКоды.ЕдиницаИзмерения как ЕдиницаИзмерения,
			|	ШтрихКоды.ХарактеристикаНоменклатуры как ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрСведений.ШтрихКоды КАК ШтрихКоды
			|ГДЕ
			|	ШтрихКоды.Штрихкод = &Штрихкод");		
		Иначе
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			|	РегШК.Владелец КАК Владелец,
			|	РегШК.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	&РегШКСерияНоменклатуры,
			|	&РегШККачество
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК РегШК
			|ГДЕ
			|	РегШК.Штрихкод = &Штрихкод";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&РегШКСерияНоменклатуры","РегШК.СерияНоменклатуры КАК СерияНоменклатуры" );
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&РегШККачество","РегШК.Качество КАК Качество" );
			Запрос.Текст = ТекстЗапроса;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Штрихкод", ШК);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = РезультатЗапроса.Выбрать();
			
			СерияНоменклатурыНаименование = СтрокаТаблицыДокумента.ПолучитьПоле("serial");
			ХарактеристикаНаименование    = СтрокаТаблицыДокумента.ПолучитьПоле("descr");
			Пока РезультатЗапроса.Следующий()Цикл
				Если ТипЗнч(РезультатЗапроса.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если СтрокаТаблицыДокумента.ИдТовара <> "*" и //"*" - добавлен штрихкод без привязки к номенклатуре
						XMLСтрока(РезультатЗапроса.Владелец) <> Строка(СтрокаТаблицыДокумента.ИдТовара) Тогда
						Продолжить
					КонецЕсли;
					
					Номенклатура               = РезультатЗапроса.Владелец;
					ХарактеристикаНоменклатуры = РезультатЗапроса.ХарактеристикаНоменклатуры;
					
					Если  ЗначениеЗаполнено(ХарактеристикаНоменклатуры) и Нрег(СокрЛП(ХарактеристикаНоменклатуры.Наименование)) <> Нрег(СокрЛП(ХарактеристикаНаименование)) Тогда
						ХарактеристикаНоменклатуры = Неопределено;
					КонецЕсли;	
					
					Если Найти(мНазваниеКонфигурации, "розница") > 0 или ПоддержкаДругихВерсий() Тогда
					ИначеЕсли Найти(мНазваниеКонфигурации,"штрихм") > 0  Тогда
					ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  Тогда
					ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0  Тогда
					иначе
						СерияНоменклатуры          = РезультатЗапроса.СерияНоменклатуры;
						Качество                   = РезультатЗапроса.Качество;
						
						// + ZHKN. 12.02.2014. №80. Новая работа с сериями.
						Если НоваяработаССериями Тогда
							Если Не ЗначениеЗаполнено(СерияНоменклатуры) И ЗначениеЗаполнено(СерияНоменклатурыНаименование) Тогда
								СерияНоменклатуры = ДобавитьСериюНоменклатуры(Номенклатура, СерияНоменклатурыНаименование);
							КонецЕсли;
						Иначе
							Если  ЗначениеЗаполнено(СерияНоменклатуры) и Нрег(СокрЛП(СерияНоменклатуры.Наименование)) <> Нрег(СокрЛП(СерияНоменклатурыНаименование)) Тогда
								СерияНоменклатуры = Неопределено;
							КонецЕсли;	
						КонецЕсли;
						// - ZHKN. 12.02.2014. №80.
						
					КонецЕсли;
					
					ЕдиницаИзмерения = РезультатЗапроса.ЕдиницаИзмерения; 
					
					Если ЗначениеЗаполнено(ЕдиницаИзмерения) и НЕ (ЕдиницаИзмерения.Код = ИдУпаковки ИЛИ ЕдиницаИзмерения.Наименование = ИдУпаковки) Тогда
						//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
						Если ЗначениеЗаполнено(ЕдиницаИзмерения) и НЕ (ЕдиницаИзмерения.Код = ИдУпаковки_2 ИЛИ ЕдиницаИзмерения.Наименование = ИдУпаковки_2) Тогда
							ЕдиницаИзмерения = Неопределено;
						КонецЕсли; 			 						
						//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
					КонецЕсли;   					
					НоменклатураНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;        	
	           	
	Если НоменклатураНайдена Тогда  
		Если не ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
			descr = СтрокаТаблицыДокумента.ПолучитьПоле("descr");
			Если Не ПустаяСтрока(descr) Тогда 
				Хар = ПолучитьХарактеристику(descr, Номенклатура);
				Если Хар <> Неопределено Тогда
					ХарактеристикаНоменклатуры = Хар;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдИзм = ИдУпаковки;
 			Если Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
				ВладелецЕдиницыИзмерения = ?(Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1,Номенклатура.ТипНоменклатуры,Номенклатура);
				ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзм,,,ВладелецЕдиницыИзмерения);
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ЕдИзм,,,ВладелецЕдиницыИзмерения);
				КонецЕсли;
				//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИдУпаковки_2,,,ВладелецЕдиницыИзмерения);
					Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ИдУпаковки_2,,,ВладелецЕдиницыИзмерения);
					КонецЕсли;
				КонецЕсли;
				//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...				
			Иначе
				ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзм,,,Номенклатура);
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ЕдИзм,,,Номенклатура);
				КонецЕсли;
				//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИдУпаковки_2,,,Номенклатура);
					Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ИдУпаковки_2,,,Номенклатура);
					КонецЕсли;	
				КонецЕсли;				
				//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...				
			КонецЕсли;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			СерияНоменклатурыНаименование = СтрокаТаблицыДокумента.ПолучитьПоле("serial");
			Если Не ПустаяСтрока(СерияНоменклатурыНаименование) Тогда 
				Попытка
					СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию(СерияНоменклатурыНаименование,,,Номенклатура);
					исключение
				КонецПопытки;
			КонецЕсли;  			
		КонецЕсли;

		Строка = НайтиСтрокуВТабличнойЧастиТовары(ЯчейкаОткуда,ЯчейкаКуда,Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры,Цена);
 		Строка.ДокументТСД                = ДокументТСД.Имя;
		Строка.НомерСтрокиДокументаТСД    = НомерСтрокиДокументаТСД;
		Строка.Загружать                  = Истина;
		Строка.Код                        = Номенклатура.Код;
		Строка.Штрихкод                   = ШК;
		Строка.ЯчейкаОткуда               = ЯчейкаОткуда;
		Строка.ЯчейкаКуда                 = ЯчейкаКуда;
		Строка.Номенклатура               = Номенклатура;
		Строка.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		Строка.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		Строка.СерияНоменклатуры          = СерияНоменклатуры;		
		Строка.КоличествоФакт             = Строка.КоличествоФакт + Количество;	
		Строка.КоличествоПлан             = КоличПлан;
		Строка.Цена                       = Цена;
		ПроставитьСерийныйНомер(Строка,СерийныйНомер);
		ПересчетСумм(Строка);
	Иначе			
		Номенклатура = НайтиНоменклатуруПоКоду(Код);
		
		Если ЗначениеЗаполнено(Номенклатура) и НЕ Номенклатура.ЭтоГруппа Тогда
			ЕдИзм = СтрокаТаблицыДокумента.ИдУпаковки;
			Если Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
				ВладелецЕдиницыИзмерения = ?(Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 1,Номенклатура.ТипНоменклатуры,Номенклатура);
				ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзм,,,ВладелецЕдиницыИзмерения);
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ЕдИзм,,,ВладелецЕдиницыИзмерения);
				КонецЕсли;
				//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИдУпаковки_2,,,ВладелецЕдиницыИзмерения);
					Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ИдУпаковки_2,,,ВладелецЕдиницыИзмерения);
					КонецЕсли;
				КонецЕсли;
				//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...	
			Иначе
				ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзм,,,Номенклатура);
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ЕдИзм,,,Номенклатура);
				КонецЕсли;
				//+AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
				Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ИдУпаковки_2,,,Номенклатура);
					Если не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда 
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(ИдУпаковки_2,,,Номенклатура);
					КонецЕсли;	
				КонецЕсли;				
				//-AVA. 24.03.2014. Номенклатура выгружена на сервер, много упаковок, упаковки имеют вид: шт, 1, 2...
			КонецЕсли;
			
			ХарактеристикаНоменклатуры = "";
			СерияНоменклатуры          = "";
			
			descr  = СтрокаТаблицыДокумента.ПолучитьПоле("descr");
			serial = СтрокаТаблицыДокумента.ПолучитьПоле("serial");
			Попытка 				
				Если ЕстьСправочникХарактеристикиНоменклатуры и ЗначениеЗаполнено(descr) Тогда
					ХарактеристикаНоменклатуры = ПолучитьХарактеристику(descr, Номенклатура);
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка 				
				Если ЗначениеЗаполнено(serial) Тогда
					СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию(serial,Истина,,Номенклатура);
				КонецЕсли;
				
				// + ZHKN. 12.03.2014. №80. Новая работа с сериями.
				Если НоваяработаССериями Тогда
					Если ЗначениеЗаполнено(serial) И Не ЗначениеЗаполнено(СерияНоменклатуры) Тогда
						СерияНоменклатуры = ДобавитьСериюНоменклатуры(Номенклатура, serial);
					КонецЕсли;
				Иначе	
				КонецЕсли;
				// - ZHKN. 12.03.2014. №80.
			Исключение
			КонецПопытки;

			
			Строка = НайтиСтрокуВТабличнойЧастиТовары(ЯчейкаОткуда,ЯчейкаКуда,Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,
			СерияНоменклатуры,Цена);  			
			Строка.ДокументТСД                = ДокументТСД.Имя;
			Строка.НомерСтрокиДокументаТСД    = НомерСтрокиДокументаТСД;
			Строка.Загружать                  = Истина;
			Строка.Код                        = Номенклатура.Код;
			Строка.Штрихкод                   = ШК;
			Строка.ЯчейкаОткуда               = ЯчейкаОткуда;
			Строка.ЯчейкаКуда                 = ЯчейкаКуда;
			Строка.Номенклатура               = Номенклатура;
			Строка.КоличествоФакт             = Строка.КоличествоФакт + Количество;
			Строка.КоличествоПлан             = КоличПлан;
			Строка.Цена                       = Цена;
            Строка.ЕдиницаИзмерения           = ЕдиницаИзмерения;
			Строка.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
            Строка.СерияНоменклатуры          = СерияНоменклатуры;

			ПроставитьСерийныйНомер(Строка,СерийныйНомер);
			ПересчетСумм(Строка);
		Иначе		
			Текст = "Не найдена номенклатура по штрихкоду: " + ШК + " и коду: " + Код;
			Сообщить(Текст);
			Если ЗначениеЗаполнено(ШК) тогда
				Если НЕ ШтрихКодЕстьВБазе(Ложь,ШК) Тогда
					НоваяСтрока = ТЗНовыеШтрихкоды.Добавить();
					НоваяСтрока.Штрихкод = ШК;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// + ZHKN. 12.02.2014. №80. Новая работа с сериями.
Функция ДобавитьСериюНоменклатуры(мНоменклатура, ИмяНовойСерии)
	
	мСерияСсылка = Неопределено;
	
	Попытка
		
		мСерияСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(ИмяНовойСерии);
		
		Если ЗначениеЗаполнено(мСерияСсылка) Тогда
			Возврат мСерияСсылка;	
		КонецЕсли;
		
		мСерияСсылка = Справочники.СерииНоменклатуры.СоздатьЭлемент();
        мСерияСсылка.Владелец = мНоменклатура;
		мСерияСсылка.Наименование = ИмяНовойСерии;
		мСерияСсылка.СерийныйНомер = ИмяНовойСерии;		
		мСерияСсылка.Записать();
		мСерияСсылка = мСерияСсылка.Ссылка;
	Исключение
		мСерияСсылка = Неопределено;	
	КонецПопытки;
	
	Возврат мСерияСсылка;
	
КонецФункции
// - ZHKN. 12.02.2014. №80.

Функция НайтиСтрокуВТабличнойЧастиТовары(ЯчейкаОткуда,ЯчейкаКуда,Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры,Цена)
	
	Если не ГруппроватьСтрокиТаблицыТовары  тогда
		Возврат Товары.Добавить();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",Номенклатура);
	Если ЗначениеЗаполнено(ЯчейкаОткуда) Тогда
		СтруктураПоиска.Вставить("ЯчейкаОткуда",ЯчейкаОткуда);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЯчейкаКуда) Тогда
		СтруктураПоиска.Вставить("ЯчейкаКуда",ЯчейкаКуда);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",ЕдиницаИзмерения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		СтруктураПоиска.Вставить("СерияНоменклатуры",СерияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(Цена) Тогда
		СтруктураПоиска.Вставить("Цена",Цена);
	КонецЕсли;

	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Товары.Добавить();
	Иначе
		Возврат НайденныеСтроки[0];
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокКолонокДляТаблицыЗначенийИзДокументовТСД(ДокументыТСДНаСервере) Экспорт
	
	//определить все типы документов ТСД.Создать таблицу: колонки - реквизиты шапки документа ТСД и реквизиты строки документа ТСД.+
	ТаблицаСоВсемиПолямиДокументаТСД1 = Новый ТаблицаЗначений;
	
	СписокПолейДокументаФиксированный = Новый СписокЗначений;
	СписокПолейДокументаФиксированный.Добавить("Имя"); 
	//СписокПолейДокументаФиксированный.Добавить("ИмяПользователя");
	//СписокПолейДокументаФиксированный.Добавить("ИмяТипаДокумента");
	//СписокПолейДокументаФиксированный.Добавить("СозданНаТСД");

	
	КС = Новый КвалификаторыСтроки(200);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	Для каждого ЭлементСписка из СписокПолейДокументаФиксированный Цикл
		ИмяКолонки = "ПолеШапкиДокументаТСД_"+ЭлементСписка.Значение;
		ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Добавить(ИмяКолонки,ОписаниеТиповС);
	КонецЦикла;
	               	
	СписокПолейСтрокиФиксированный = Новый СписокЗначений;
	//СписокПолейСтрокиФиксированный.Добавить("ИдТовара");     //не нужно
	//СписокПолейСтрокиФиксированный.Добавить("КоличествоПлан");
	//СписокПолейСтрокиФиксированный.Добавить("КоличествоФакт");
	СписокПолейСтрокиФиксированный.Добавить("СрокГодности");
	СписокПолейСтрокиФиксированный.Добавить("КодЕдиницыХранения");
	СписокПолейСтрокиФиксированный.Добавить("ДатаРегистрации");
	//СписокПолейСтрокиФиксированный.Добавить("ШтрихкодПервогоМеста");
	//СписокПолейСтрокиФиксированный.Добавить("ШтрихкодВторогоМеста");
	СписокПолейСтрокиФиксированный.Добавить("НомерСтроки");

	Для каждого ЭлементСписка из СписокПолейСтрокиФиксированный Цикл
		  ИмяКолонки = "ПолеСтрокиДокументаТСД_"+ЭлементСписка.Значение;
		  ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Добавить(ИмяКолонки,ОписаниеТиповС);
	КонецЦикла;	
	
	ЗагруженныеТипыДокументов = Новый Соответствие;
	ОтступВНазванииПоляДокументаТСД              = СтрДлина("ПолеШапкиДокументаТСД_");
	ОтступВНазванииПоляДокументаТСДДляНовогоПоля = СтрДлина("НовоеПолеШапкиДокументаТСД_");

	ОтступВНазванииПоляСтрокиДокументаТСД              = СтрДлина("ПолеСтрокиДокументаТСД_");
	ОтступВНазванииПоляСтрокиДокументаТСДДляНовогоПоля = СтрДлина("НовоеПолеСтрокиДокументаТСД_");
 
 
	СписокЗарезервированныхПолейДокументаТСД = Новый СписокЗначений;
	СписокЗарезервированныхПолейДокументаТСД.Добавить("КонтрольКолва");	
	СписокЗарезервированныхПолейДокументаТСД.Добавить("ПоЯчейкам");
	
	//Для каждого вида драйвера и типа документа свой список. Приведен сводный список полей +
	СписокЗарезервированныхПолейСтрокиДокументаТСД = Новый СписокЗначений;
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("code");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("barcode");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("serial");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("descr");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("КолвоВДокументе");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("ЗаявленноеКолвоВДокументе");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("sn");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("ОтображаемоеИмя");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("ЦенаСклад");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("ОтображениеВСписке");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("ОтображениеВСпискеВыбора");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Ячейка");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("price");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Заблокировано");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("user");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Переоценено");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Ячейка2");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Ячейка1");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("КолвоВБуфере");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("Ячейка");
	СписокЗарезервированныхПолейСтрокиДокументаТСД.Добавить("КолвоНабрано");
    //Для каждого вида драйвера и типа документа свой список. Приведен сводный список полей -
	
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки = Новый СписокЗначений;
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("serial");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("descr");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("sn");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("ОтображаемоеИмя");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("ЦенаСклад");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("ОтображениеВСписке");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("ОтображениеВСпискеВыбора");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("price");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("Переоценено");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("КолвоВБуфере");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("Ячейка");
	СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.Добавить("КолвоНабрано");

	
	Для Инд = 0 По ДокументыТСДНаСервере.Количество - 1 Цикл		
		ДокументТСД = ДокументыТСДНаСервере.Элемент(Инд);		
		//добавить в таблицу ТаблицаСоВсемиПолямиДокументаТСД поля шапки документа ТСД
		Для ИндПоля = 0 По ДокументТСД.Поля.Количество - 1 Цикл	
			ПолеШапкиДокументаТСД = ДокументТСД.Поля.Элемент(ИндПоля);
 			Если СписокЗарезервированныхПолейДокументаТСД.НайтиПоЗначению(ПолеШапкиДокументаТСД.ИмяПоля) <> Неопределено Тогда 					
				ИмяКолонки = "ПолеШапкиДокументаТСД_"+ПолеШапкиДокументаТСД.ИмяПоля;
			Иначе
				ИмяКолонки = "НовоеПолеШапкиДокументаТСД_"+ПолеШапкиДокументаТСД.ИмяПоля;
			КонецЕсли;  			
			ЗначениеКолонки = ПолеШапкиДокументаТСД.Значение;
			
			Если ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Добавить(ИмяКолонки,ОписаниеТиповС);
			КонецЕсли;
		КонецЦикла; 
 		               		
		//добавить в таблицу ТаблицаСоВсемиПолямиДокументаТСД поля строки документа ТСД, сделано в одну строку
		ТаблицаДокументаТСД = ДокументТСД["СтрокиФакт"];
		Для ИндПоляСтроки = 0 По ТаблицаДокументаТСД.Количество - 1 Цикл	
			СтрокаТаблицыДокумента = ТаблицаДокументаТСД.Элемент(ИндПоляСтроки);
			
			//добавление колонок
			Для ИндПоля = 0 По СтрокаТаблицыДокумента.Поля.Количество - 1 Цикл	
				ПолеСтрокиДокументаТСД = СтрокаТаблицыДокумента.Поля.Элемент(ИндПоля);
				ПолеСтрокиДокументаТСДИмяПоля = ПолеСтрокиДокументаТСД.ИмяПоля;
				Если СписокЗарезервированныхПолейСтрокиДокументаТСДИсключитьИзОбработки.НайтиПоЗначению(ПолеСтрокиДокументаТСДИмяПоля) <> Неопределено Тогда
					Продолжить
				КонецЕсли;
				
				Если СписокЗарезервированныхПолейСтрокиДокументаТСД.НайтиПоЗначению(ПолеСтрокиДокументаТСДИмяПоля) <> Неопределено Тогда 					
					ИмяКолонки = "ПолеСтрокиДокументаТСД_"+ПолеСтрокиДокументаТСДИмяПоля;
				Иначе
					ИмяКолонки = "НовоеПолеСтрокиДокументаТСД_"+ПолеСтрокиДокументаТСДИмяПоля;
				КонецЕсли;
				
				ЗначениеКолонки = ПолеСтрокиДокументаТСД.Значение;
				
				Если ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
					ТаблицаСоВсемиПолямиДокументаТСД1.Колонки.Добавить(ИмяКолонки,ОписаниеТиповС);
				КонецЕсли;
			КонецЦикла; 
			
			//заполнение значений колонок
			НоваяСтрока = ТаблицаСоВсемиПолямиДокументаТСД1.Добавить(); 			
			
			Для каждого КолонкаТаблицы из ТаблицаСоВсемиПолямиДокументаТСД1.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;
				Если Найти(КолонкаТаблицыИмя,"ПолеСтрокиДокументаТСД_") > 0 Тогда					
					Если  Найти(КолонкаТаблицыИмя,"НовоеПолеСтрокиДокументаТСД_") > 0 Тогда
						НоваяСтрока[КолонкаТаблицыИмя] = СтрокаТаблицыДокумента.ПолучитьПоле(Прав(КолонкаТаблицыИмя,СтрДлина(КолонкаТаблицыИмя)-ОтступВНазванииПоляСтрокиДокументаТСДДляНовогоПоля));		
					Иначе
						НоваяСтрока[КолонкаТаблицыИмя] = СтрокаТаблицыДокумента.ПолучитьПоле(Прав(КолонкаТаблицыИмя,СтрДлина(КолонкаТаблицыИмя)-ОтступВНазванииПоляСтрокиДокументаТСД));	
					КонецЕсли;
 				Иначе
					Если  Найти(КолонкаТаблицыИмя,"НовоеПолеШапкиДокументаТСД_") > 0 Тогда
						НоваяСтрока[КолонкаТаблицыИмя] = ДокументТСД.ПолучитьПоле(Прав(КолонкаТаблицыИмя,СтрДлина(КолонкаТаблицыИмя)-ОтступВНазванииПоляДокументаТСДДляНовогоПоля));  
					Иначе
						НоваяСтрока[КолонкаТаблицыИмя] = ДокументТСД.ПолучитьПоле(Прав(КолонкаТаблицыИмя,СтрДлина(КолонкаТаблицыИмя)-ОтступВНазванииПоляДокументаТСД));	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ЭлементСписка из СписокПолейСтрокиФиксированный Цикл
				Если ЭлементСписка.Значение = "НомерСтроки" Тогда
					ЭлементСпискаЗначение =  ИндПоляСтроки
				Иначе
					ЭлементСпискаЗначение = СтрокаТаблицыДокумента[ЭлементСписка.Значение];					
				КонецЕсли;
				НоваяСтрока["ПолеСтрокиДокументаТСД_"+ЭлементСписка.Значение] = ЭлементСпискаЗначение;
			КонецЦикла;
			
			Для каждого ЭлементСписка из СписокПолейДокументаФиксированный Цикл
				НоваяСтрока["ПолеШапкиДокументаТСД_"+ЭлементСписка.Значение] = ДокументТСД[ЭлементСписка.Значение]
			КонецЦикла;	
		КонецЦикла; 
	КонецЦикла;
	
	//определить все типы документов ТСД.Создать таблицу: колонки - реквизиты шапки документа ТСД и реквизиты строки документа ТСД.-

	Возврат ТаблицаСоВсемиПолямиДокументаТСД1;
	
КонецФункции

Процедура ДобавитьДополнительныеКолонкиВЭлементФормыТовары()
	
	КС = Новый КвалификаторыСтроки(200);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	//добавить дополнительные колонки к табличной части Товары.+	
	сч = 0;
	Пока сч < ЭлементыФормы.Товары.Колонки.Количество() Цикл //очистить прежние добавленные колонки
		ИмяКолонки = ЭлементыФормы.Товары.Колонки.Получить(сч).Имя; 
		Если Найти(ИмяКолонки,"ПолеШапкиДокументаТСД_") или Найти(ИмяКолонки,"ПолеСтрокиДокументаТСД_") > 0 Тогда
			ЭлементыФормы.Товары.Колонки.Удалить(сч);
		Иначе
			сч = сч +1;
		КонецЕсли;
	КонецЦикла; 	
	
	Для каждого КолонкаТаблицы из ТаблицаСоВсемиПолямиДокументаТСД.Колонки Цикл
		КолонкаТаблицыИмя  = КолонкаТаблицы.Имя;
		Если КолонкаТаблицыИмя = "ПолеШапкиДокументаТСД_Имя" тогда
			Продолжить
		КонецЕсли;
		НоваяКолонка           = ЭлементыФормы.Товары.Колонки.Добавить(КолонкаТаблицы.Имя,ОписаниеТиповС);
		НоваяКолонка.Видимость = Найти(Нрег(КолонкаТаблицы.Имя),"новоеполе") > 0;
		НоваяКолонка.Данные    = "ДокументТСД";
		НоваяКолонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
		НоваяКолонка.ТолькоПросмотр   = Истина;
		НоваяКолонка.Ширина           = 15;
		НоваяКолонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять;
		
		ТекстШапки =  СтрЗаменить(КолонкаТаблицыИмя,"НовоеПолеШапкиДокументаТСД_","");
		ТекстШапки =  СтрЗаменить(ТекстШапки,"НовоеПолеСтрокиДокументаТСД_","");
		ТекстШапки =  СтрЗаменить(ТекстШапки,"ПолеШапкиДокументаТСД_","");
		ТекстШапки =  СтрЗаменить(ТекстШапки,"ПолеСтрокиДокументаТСД_","");
				
		НоваяКолонка.ТекстШапки = ТекстШапки; 
	КонецЦикла;	
	
	ВосстановитьДополнительныхПолей();
	//добавить дополнительные колонки к табличной части Товары.-  
	
КонецПроцедуры

Процедура ЗагрузитьДанныеНажатие(Элемент,ЗадаватьВопросОПерезаполнении = Неопределено) Экспорт
	
	Перем Номенклатура;
	Перем ХарактеристикаНоменклатуры;
	Перем СерияНоменклатуры;
	Перем Качество;
	Перем ЕдиницаИзмерения;
    Перем Цена; 
	Перем ЕстьВесТовар;
	
	СохранитьНастройкиКолонокТабличныхЧастей();

	ТЗНовыеШтрихкоды.Очистить();
	  
	Спис = Новый СписокЗначений;
	Для Каждого Строка из ДокументыТСД Цикл
		Если Строка.Загружать = Истина Тогда
			Спис.Добавить(Строка.ИдДокумента);	
		КонецЕсли;
	КонецЦикла;
	
	Если Спис.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы ТСД для загрузки!",10,"Изменение данных");
		Возврат
	КонецЕсли;
	
	ЗадаватьВопросОПерезаполнении = ?(ЗадаватьВопросОПерезаполнении = Неопределено, Истина,ЗадаватьВопросОПерезаполнении);
				 
	Если Товары.Количество()>0  Тогда
		Если не ЗадаватьВопросОПерезаполнении или Вопрос("Таблица товаров не пустая. Очистить таблицу перед добавлением новых элементов?", РежимДиалогаВопрос.ДаНет,0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
			ОчиститьТаблицы();
        КонецЕсли;
	КонецЕсли;
	
	Если Спис.Количество() =  ДокументыТСД.Количество() Тогда   //выбраны все документы ТСД   //AVA. 15.04.2014. №123.
		ДокументыТСДНаСервере = ДокументыМСМАРТС;
	Иначе
		ДокументыТСДНаСервере = мОбъект.Драйвер.ПолучитьДокументы(Спис);
		мОбъект.Драйвер.ОсвободитьРесурсы();
	КонецЕсли;

	Если ДокументыТСД = Неопределено ИЛИ ДокументыТСДНаСервере = Неопределено Тогда
		мОбъект.Драйвер.ПолучитьОшибку(мОбъект.ОписаниеОшибки);
		Сообщить("Ошибка при загрузке документов: " + мОбъект.ОписаниеОшибки);
		Возврат
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.Найти("КодыВесовогоТовара") <> Неопределено Тогда
		 ЕстьВесТовар = Истина;
	Иначе
		 ЕстьВесТовар = Ложь;
	 КонецЕсли;
	 
	 Если Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
		 ЕстьВесТовар = Истина;
	 КонецЕсли;
	
	ЗагрузитьНовыеШтрихкоды(мОбъект);

	ОтсканированыЯчейки = Ложь;
	
	ТаблицаСоВсемиПолямиДокументаТСД = ПолучитьСписокКолонокДляТаблицыЗначенийИзДокументовТСД(ДокументыТСДНаСервере);
	
	//+MAV. 04.08.2014. №192. Авто-группировка номенклатуры при стандартной настройке.
	// если стандартные настройки, то автоматически группировать ТЧ
	ФормаНастройкиЗаполненияДокумента = ПолучитьФорму("ФормаФорматЗагрузки");
	ФормаНастройкиЗаполненияДокумента.ТипДокумента = ТипДокумента1С;
	СохраненнаяНастройка = ФормаНастройкиЗаполненияДокумента.ПолучитьСохраненнуюНастройку();
	
	ЕСЛИ ТипДокумента1С <> неопределено И 
		не ПустаяСтрока(ТипДокумента1С) И 
		СохраненнаяНастройка <> Неопределено И 
		СохраненнаяНастройка.Свойство("НастройкаПоДокументам") И
		СохраненнаяНастройка.НастройкаПоДокументам.Свойство(ТипДокумента1С) И 
		СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С] <> неопределено И 
		СохраненнаяНастройка.НастройкаПоДокументам[ТипДокумента1С].ИспользоватьСтандартнуюНастройку 
	ТОГДА
		ГруппроватьСтрокиТаблицыТовары = Истина; 
	ИНАЧЕ
		Если Вопрос("Для просмотра полного количества подобранной номенклатуры, рекомендуется сгруппировать строки номенклатуры по колонкам: Номенклатура, Характеристика номенклатуры, Единица измерения, Серия номенклатуры, Цена.
			|Следует учесть, что при использовании группировки, дополнительные поля документа ТСД будут отображаться из первого выделенного документа ТСД, в котором встречается номенклатура.
			|Это следует учитывать при добавлении своей настройки заполнения документа 1С. 
			|Сгруппировать строки?", РежимДиалогаВопрос.ДаНет,0,,"Изменение данных") = КодВозвратаДиалога.Да Тогда
			ГруппроватьСтрокиТаблицыТовары = Истина;
		Иначе
			ГруппроватьСтрокиТаблицыТовары = Ложь;
		КонецЕсли;
	КОНЕЦЕСЛИ; 	
	//-MAV. 04.08.2014. №192. Авто-группировка номенклатуры при стандартной настройке. 			
	
 	Для Инд = 0 По ДокументыТСДНаСервере.Количество-1 Цикл
		
		ДокументТСД = ДокументыТСДНаСервере.Элемент(Инд);
		
		Если ДокументТСД.LicenseStatus = 1 Тогда
			Предупреждение("Для документа " + ДокументТСД.Имя + " созданного на терминале с ид. " +
			ДокументТСД.DeviceId + " не подтверждена лицензия. Загружается не более 3-х строк документа.");	
		КонецЕсли;
	
		Если ДокументТСД.СтрокиПлан.Количество = 0 или ДокументТСД.СозданНаТСД Тогда
			ТаблицаДокументаТСД = "СтрокиФакт";
		Иначе
			ТаблицаДокументаТСД = "СтрокиПлан";
		КонецЕсли;
		
		Если ТаблицаДокументаТСД = "СтрокиПлан" Тогда
			СтрокиФакт = Новый Соответствие; 
			Для Инд1 = 0 По ДокументТСД["СтрокиФакт"].Количество - 1 Цикл 
				СтрокаТаблицыДокумента = ДокументТСД["СтрокиФакт"].Элемент(Инд1); 
				Если СтрокаТаблицыДокумента = Неопределено или СтрокаТаблицыДокумента.СвязаннаяСтрока = Неопределено Тогда
					Продолжить
				КонецЕсли;    				
				//нужен номер строки в документе ТСД.
				СтрокаФакт1 = новый Соответствие;
				СтрокаФакт1.Вставить("НомерСтроки", Инд1);
				СтрокаФакт1.Вставить("СтрокаТаблицы", СтрокаТаблицыДокумента);
				
				//в массиве хранятся все строки таблицы СтрокиФакт, связанные с выбранной строкой из таблицы СтрокиПлан 				
				Если  СтрокиФакт.Получить(СтрокаТаблицыДокумента.СвязаннаяСтрока) = Неопределено Тогда
					МассивСтрокФакт = новый Массив;
 					МассивСтрокФакт.Добавить(СтрокаФакт1);
					СтрокиФакт.Вставить(СтрокаТаблицыДокумента.СвязаннаяСтрока,МассивСтрокФакт);					
				Иначе
					СтрокиФакт[СтрокаТаблицыДокумента.СвязаннаяСтрока].Добавить(СтрокаФакт1);
				КонецЕсли;				 
			КонецЦикла;			
		КонецЕсли;
		
		
		Для Инд1 = 0 По ДокументТСД[ТаблицаДокументаТСД].Количество - 1 Цикл 
			СтрокаТаблицыДокумента = ДокументТСД[ТаблицаДокументаТСД].Элемент(Инд1);	
			Если ТаблицаДокументаТСД = "СтрокиПлан" Тогда
 				НайденныеСтрокиФакт = СтрокиФакт[СтрокаТаблицыДокумента];
				Если НайденныеСтрокиФакт <> Неопределено Тогда
					Для каждого НайденнаяСтрока из НайденныеСтрокиФакт Цикл
 						ДобавитьСтрокуДокументаВТаблицуТоваров(НайденнаяСтрока["СтрокаТаблицы"],ЕстьВесТовар,мПрефиксВесовогоТовара,ОтсканированыЯчейки,ДокументТСД,НайденнаяСтрока["НомерСтроки"]);
					КонецЦикла;	                                                                                                                                    
				КонецЕсли;
 			Иначе
				ДобавитьСтрокуДокументаВТаблицуТоваров(СтрокаТаблицыДокумента,ЕстьВесТовар,мПрефиксВесовогоТовара,ОтсканированыЯчейки,ДокументТСД,Инд1);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДокументаТСД = "СтрокиПлан" Тогда  //добавить строки, которые были добавлены на ТСД, но не связаны с номенклатурой, т.е. новая номенклатурная позиция добавлена
			Для Инд2 = 0 По ДокументТСД["СтрокиФакт"].Количество - 1 Цикл 
				СтрокаТаблицыДокумента1 = ДокументТСД["СтрокиФакт"].Элемент(Инд2);
				Если СтрокаТаблицыДокумента1.СвязаннаяСтрока = Неопределено Тогда //номенклатуры нет в таблице документа ТСД
					ДобавитьСтрокуДокументаВТаблицуТоваров(СтрокаТаблицыДокумента1,ЕстьВесТовар,мПрефиксВесовогоТовара,ОтсканированыЯчейки,ДокументТСД,Инд2);	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;    		
	КонецЦикла;
	
	ДобавитьДополнительныеКолонкиВЭлементФормыТовары();
	
	ЭлементыФормы.Товары.Колонки.ЯчейкаКуда.Видимость   = ОтсканированыЯчейки;
	ЭлементыФормы.Товары.Колонки.ЯчейкаОткуда.Видимость = ОтсканированыЯчейки;
	
	
	Элементыформы.Товары.Колонки.Код.ТекстПодвала = "Итого строк: " + Товары.Количество();
	Элементыформы.Товары.Колонки.КоличествоПлан.ТекстПодвала  = Товары.Итог("КоличествоПлан");
	Элементыформы.Товары.Колонки.Количество.ТекстПодвала  = Товары.Итог("КоличествоФакт");

	ТоварыПриАктивизацииСтроки(Неопределено);
	
	//активация кнопки для подстановки выгруженного документа.Начало.
	Элементыформы.ВыбратьИсходныйДокумент.Доступность = Ложь;   
	ДокТСДИд = Неопределено;
	Если Спис.Количество() = 1 Тогда
		ДокТСДИд = Спис[0].Значение;
		НайденныйДокумент = НайтиДокументПоИд(ДокТСДИд);
		Если  НайденныйДокумент <> Неопределено Тогда
 			Элементыформы.ВыбратьИсходныйДокумент.Доступность = Истина
		КонецЕсли;
	Иначе
		ДокТСДПоЯчекам = Неопределено;
	КонецЕсли;
	//активация кнопки для подстановки выгруженного документа.Окончание.

	ПроверитьНаличиеНовыхШтрихкодов(Истина);

КонецПроцедуры

Процедура КоманднаяПанельТоварыВыделитьВсе(Кнопка)
	
	Для каждого СтрокаТовары из Товары цикл
		СтрокаТовары.Загружать = Истина;
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельТоварыОчиститьВыделение(Кнопка)
	
	Для каждого СтрокаТовары из Товары цикл
		   СтрокаТовары.Загружать = Ложь;
	КонецЦикла;
  
КонецПроцедуры

Процедура КоманднаяПанельТоварыУдалитьТовары(Кнопка)
	
	ОчиститьТаблицы();
	
КонецПроцедуры

Процедура ОчиститьТаблицы()
	
	Товары.Очистить();	
	СерийныеНомера.Очистить();
	
КонецПроцедуры

Процедура УдалитьВыбранныеДокументы(ТекстВопроса)
	ЕстьОтмДок = Ложь;
	Для каждого Строка из ДокументыТСД Цикл
		Если Строка.Загружать = Истина Тогда
			ЕстьОтмДок = Истина;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьОтмДок = Ложь Тогда
		Возврат;
	КонецЕсли;	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос(ТекстВопроса, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
	
	ДокументыМСМАРТС = Неопределено; //AVA. 15.04.2014. №123.

	СписокИд = Новый СписокЗначений;
	Для каждого Строка из ДокументыТСД Цикл
		Если Строка.Загружать = Истина Тогда
			СписокИд.Добавить(Строка.ИдДокумента);
		КонецЕсли;
	КонецЦикла;
		
	мОбъект.Драйвер.УдалитьДокументы(СписокИд);

	ЗаполнитьСписокДокументов(ТерминалСбораДанных);
	КоманднаяПанельТоварыУдалитьТовары(Неопределено);
	
КонецПроцедуры

Процедура КомандыДокументовУдалитьДокументы(Кнопка)
	
	УдалитьВыбранныеДокументы("Удалить выбранные документы?");
	
КонецПроцедуры

Процедура ТаблицаТоваровПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ВестиСерийныеНомера = "ВестиСерийныеНомера";
	Если Найти(мНазваниеКонфигурации,"штрихм") > 0 Тогда
		ВестиСерийныеНомера = "УчетПоСерийнымНомерам";
	КонецЕсли;
	
	СтруктураПоискаДополнительныхПолей = Новый Структура("ПолеШапкиДокументаТСД_Имя,ПолеСтрокиДокументаТСД_НомерСтроки");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 тогда
		ИначеЕсли  Найти(мНазваниеКонфигурации, "автосалон5") > 0 тогда
			Попытка
				Если ОформлениеСтроки.Ячейки.Номенклатура.Значение <> Неопределено и ОформлениеСтроки.Ячейки.Номенклатура.Значение.ТипНоменклатуры.УникальностьСерийногоНомера тогда 
					ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(мКартинкаСерийныеНомера);
				КонецЕсли;
			Исключение
			Конецпопытки;   				
		Иначе
			Попытка
				Если ОформлениеСтроки.Ячейки.Номенклатура.Значение <> Неопределено и ОформлениеСтроки.Ячейки.Номенклатура.Значение[ВестиСерийныеНомера] тогда 
					ОформлениеСтроки.Ячейки.Номенклатура.УстановитьКартинку(мКартинкаСерийныеНомера);
				КонецЕсли;
			Исключение
			Конецпопытки;
		КонецЕсли;
		
		Если ОформлениеСтроки.Ячейки.Количество.Значение <> Неопределено и ОформлениеСтроки.Ячейки.Количество.Значение <  ОформлениеСтроки.Ячейки.КоличествоПлан.Значение Тогда 
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		иначе
			ОформлениеСтроки.ЦветТекста =  ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		
		//заполнение дополнительных полей.+ 		
		СтрокаВТаблицеТовары = Товары.Найти(ОформлениеСтроки.Ячейки.НомерСтроки.Значение,"НомерСтроки");
		Если СтрокаВТаблицеТовары <> Неопределено тогда
			СтруктураПоискаДополнительныхПолей.Вставить("ПолеШапкиДокументаТСД_Имя",СтрокаВТаблицеТовары.ДокументТСД);
			СтруктураПоискаДополнительныхПолей.Вставить("ПолеСтрокиДокументаТСД_НомерСтроки",Строка(СтрокаВТаблицеТовары.НомерСтрокиДокументаТСД));			
			НайденныеСтроки = ТаблицаСоВсемиПолямиДокументаТСД.НайтиСтроки(СтруктураПоискаДополнительныхПолей);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Для каждого КолонкаТаблицы из ТаблицаСоВсемиПолямиДокументаТСД.Колонки Цикл
					КолонкаТаблицыИмя = КолонкаТаблицы.Имя;
					Если КолонкаТаблицыИмя = "ПолеШапкиДокументаТСД_Имя" тогда
						Продолжить
					КонецЕсли;   					
					ОформлениеСтроки.Ячейки[КолонкаТаблицыИмя].Текст    = НайденнаяСтрока[КолонкаТаблицы.Имя];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//заполнение дополнительных полей.-
	КонецЦикла;	
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыСерийныеНомера()
	
	Если Найти(мНазваниеКонфигурации,"штрихм") > 0 Тогда
		мПоказатьСерийныеНомераШтрихМ = не мПоказатьСерийныеНомераШтрихМ;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СерийныеНомера.Пометка =  мПоказатьСерийныеНомераШтрихМ;
		
		Если мПоказатьСерийныеНомераШтрихМ Тогда
			ЭлементыФормы.СерийныеНомера.Свертка = РежимСверткиЭлементаУправления.Нет;
		Иначе
			ЭлементыФормы.СерийныеНомера.Свертка = РежимСверткиЭлементаУправления.Право;
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ДокументОбъект.Товары.Загрузить(Товары.Выгрузить());
	ДокументОбъект.СерийныеНомера.Загрузить(СерийныеНомера.Выгрузить());
	
	//+AVA. 11.12.2014.	
	ПараметрыПоискаСтроки = Новый Структура();
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ПараметрыПоискаСтроки.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) Тогда
		ПараметрыПоискаСтроки.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
		ПараметрыПоискаСтроки.Вставить("СерияНоменклатуры", СтрокаТабличнойЧасти.СерияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		ПараметрыПоискаСтроки.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязи) Тогда
		ПараметрыПоискаСтроки.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	КонецЕсли;
	
	СтрокиТабличнойЧастиДокумента = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоискаСтроки);
	//-AVA. 11.12.2014.
	
	Если СтрокиТабличнойЧастиДокумента.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СтрокаТабличнойЧастиДокумента = СтрокиТабличнойЧастиДокумента[0];
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧастиДокумента.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧастиДокумента.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧастиДокумента.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧастиДокумента.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧастиДокумента.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ДокументОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧастиДокумента.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧастиДокумента);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	//ФормаВводСерийныхНомеров.Открыть();
	ФормаВводСерийныхНомеров.ОткрытьМодально();
	
	//обновить серийные номера для выбранной номенклатуры.{
	сч = 0;
	Пока сч < СерийныеНомера.Количество() Цикл
		Если  СерийныеНомера[сч].КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
			СерийныеНомера.Удалить(сч);
		Иначе
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;

	Для каждого СерийныйНомер из ДокументОбъект.СерийныеНомера Цикл
		Если (СтрокаТабличнойЧасти.КлючСвязи = 0 и СерийныеНомера.НайтиСтроки(Новый структура("КлючСвязи",СерийныйНомер.КлючСвязи)).Количество() = 0)
			или СерийныйНомер.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи Тогда
			СтрокаСН                       = СерийныеНомера.Добавить();
			СтрокаСН.КлючСвязи             = СерийныйНомер.КлючСвязи;
			СтрокаСН.СерийныйНомер         = СерийныйНомер.СерийныйНомер;
			СтрокаТабличнойЧасти.КлючСвязи = СерийныйНомер.КлючСвязи;
		КонецЕсли;
	КонецЦикла;
	//обновить серийные номера для выбранной номенклатуры.}
	
КонецПроцедуры

Функция ВестиСерийныеНомера(Номенклатура)
	
	//+AVA. 11.12.2014. №267.
	Попытка
		ВестиСерийныеНомера = "ВестиСерийныеНомера";
		Если Найти(мНазваниеКонфигурации,"штрихм") > 0 Тогда
			ВестиСерийныеНомера = "УчетПоСерийнымНомерам";
		КонецЕсли;
		
		Возврат Номенклатура[ВестиСерийныеНомера];
	Исключение
		возврат Ложь;
	КонецПопытки;
	//-AVA. 11.12.2014. №267.
	
КонецФункции

Процедура ПроставитьСерийныйНомер(Строка,СерийныйНомер)
	
	Если Найти(мНазваниеКонфигурации, "розница") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) или не ЗначениеЗаполнено(СерийныйНомер) тогда
		Возврат
	КонецЕсли;
	
	Если Найти(мНазваниеКонфигурации, "автосалон5") > 0 тогда
		Если не Строка.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера   Тогда
			Возврат;
		КонецЕсли;	 		
		Строка.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.НайтиПоРеквизиту("СерийныйНомер",СерийныйНомер,,Строка.Номенклатура);
		Если не ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
			ХарактеристикаНоменклатуры               = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			ХарактеристикаНоменклатуры.Владелец      = Строка.Номенклатура;
			ХарактеристикаНоменклатуры.СерийныйНомер = СокрЛП(СерийныйНомер);
			ХарактеристикаНоменклатуры.Наименование  = СокрЛП(СерийныйНомер);
			Попытка
				ХарактеристикаНоменклатуры.Записать();
				Строка.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры.Ссылка;
			Исключение
				Сообщить("Не получилось записать характеристику номенклатуры """+СокрЛП(ХарактеристикаНоменклатуры.Наименование)+""" для номенклатуры """+
				СокрЛП(ХарактеристикаНоменклатуры.Владелец.Наименование)+"""! Повторите попытку!",СтатусСообщения.Важное);
			КонецПопытки;  			
		КонецЕсли;
		Возврат
	Иначе    		
	КонецЕсли;	
	
 	РеквизитДляЗаписиСерийногоНомера = "Код";
	Если Найти(мНазваниеКонфигурации,"штрихм") > 0 Тогда
 		РеквизитДляЗаписиСерийногоНомера = "Наименование";
	КонецЕсли;   	
	
	Если НЕ ВестиСерийныеНомера(Строка.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	//попытка найти серийный номер.{.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.Ссылка
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера."+РеквизитДляЗаписиСерийногоНомера+" = &СерийныйНомер";
	
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СерийныйНомерЭлементСправочника = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		СерийныйНомерЭлементСправочника = Справочники.СерийныеНомера.ПустаяСсылка();
	КонецЕсли;
 	
	Если СерийныйНомерЭлементСправочника.Пустая() Тогда //создать новый элемент
		СерийныйНомерЭлементСправочника              = Справочники.СерийныеНомера.СоздатьЭлемент();
		СерийныйНомерЭлементСправочника.Владелец     = Строка.Номенклатура;
		СерийныйНомерЭлементСправочника[РеквизитДляЗаписиСерийногоНомера] = СокрЛП(СерийныйНомер);
		Попытка
			 СерийныйНомерЭлементСправочника.Записать();
		Исключение
			ОчиститьТаблицы();
			Сообщить("Не получилось записать серийный номер """+СокрЛП(СерийныйНомерЭлементСправочника[РеквизитДляЗаписиСерийногоНомера])+""" для номенклатуры """+СокрЛП(СерийныйНомерЭлементСправочника.Владелец.Наименование)+"""! Повторите попытку!",СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Строка.КлючСвязи) тогда        
		СерийныеНомера_ = СерийныеНомера.Выгрузить();
		СерийныеНомера_.Свернуть("КлючСвязи");
		Строка.КлючСвязи = СерийныеНомера_.Количество() + 1; 	
	КонецЕсли;
	
	СтрокаСН               = СерийныеНомера.Добавить();
	СтрокаСН.КлючСвязи     = Строка.КлючСвязи;
	СтрокаСН.СерийныйНомер = СерийныйНомерЭлементСправочника.Ссылка;
	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	отказ = истина;
	
КонецПроцедуры

Процедура ПересчетСумм(СтрокаТЧ)
	
	СтрокаТЧ.СуммаПлан = СтрокаТЧ.Цена*СтрокаТЧ.КоличествоПлан;
	СтрокаТЧ.СуммаФакт = СтрокаТЧ.Цена*СтрокаТЧ.КоличествоФакт;

КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчетСумм(Элемент.ТекущаяСтрока); 
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 
		или  Найти(мНазваниеКонфигурации, "штрихм") > 0 
		или  Найти(мНазваниеКонфигурации, "автосалон5") > 0 
		Тогда
	Иначе	
		Выполнить("ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма)");
	КонецЕсли;
			  	
	СохранитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО",ТерминалСбораДанных);
	
	СохранитьНастройкиКолонокТабличныхЧастей();
	  
	
КонецПроцедуры

Процедура СохранитьНастройкиКолонокТабличныхЧастей()
	
	ПорядокКолонокТабличныхЧастей  = Новый Структура;
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Имя");
	ТаблицаТовары.Колонки.Добавить("Ширина");
	ТаблицаТовары.Колонки.Добавить("Видимость");
 	Для каждого колонка из Элементыформы.Товары.Колонки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(),колонка);
	КонецЦикла;
 	ТаблицаДокументыТСД = ТаблицаТовары.Скопировать();
	ТаблицаДокументыТСД.Очистить();
 	
	Для каждого колонка из Элементыформы.ДокументыТСД.Колонки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументыТСД.Добавить(),колонка);
	КонецЦикла;     
	
	ПорядокКолонокТабличныхЧастей.Вставить("ДокументыТСД", ТаблицаДокументыТСД);
	ПорядокКолонокТабличныхЧастей.Вставить("Товары", ТаблицаТовары);	
	СохранитьЗначение(ОбработкаОбъект.Метаданные().Имя + "ПорядокКолонокТабличныхПолей",ПорядокКолонокТабличныхЧастей); //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются

КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаТовары =   ЭлементыФормы.Товары.ТекущаяСтрока;
	КлючСвязи = ?( ТекСтрокаТовары = Неопределено,-1,ТекСтрокаТовары.КлючСвязи);

	ЭлементыФормы.СерийныеНомера.ОтборСтрок.КлючСвязи.Значение = КлючСвязи;
	ЭлементыФормы.СерийныеНомера.ОтборСтрок.КлючСвязи.Использование = Истина; 
	
КонецПроцедуры

Процедура ВидимостьЭлементовФормы()
	
	ЭлементыФормы.КомандыДокументов.Доступность                       = мВидимостьЭлементовФормы;
	ЭлементыФормы.Товары.Доступность                                  = мВидимостьЭлементовФормы;
	ЭлементыФормы.ДокументыТСД.Доступность                            = мВидимостьЭлементовФормы;
	ЭлементыФормы.КоманднаяПанельТовары.Доступность                   = мВидимостьЭлементовФормы;
	ЭлементыФормы.ТипДокумента1С.Доступность                          = мВидимостьЭлементовФормы;
	ЭлементыФормы.Документ1С.Доступность                              = мВидимостьЭлементовФормы;
	ЭлементыФормы.КоманднаяПанельВерхняя.Кнопки.Настройки.Доступность = мВидимостьЭлементовФормы;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Заполнить.Доступность  = мВидимостьЭлементовФормы;
	// 20.11.2013 +
	// ЭлементыФормы.ОбнулятьКоличПередЗаполнением.Доступность           = мВидимостьЭлементовФормы;
	// 20.11.2013 -	
КонецПроцедуры


Процедура ДокументыТСДПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.Ячейки.СтрокФакт.Значение <> Неопределено и ОформлениеСтроки.Ячейки.СтрокФакт.Значение <  ОформлениеСтроки.Ячейки.СтрокЗавл.Значение Тогда 
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		иначе
			ОформлениеСтроки.ЦветТекста =  ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

Функция НайтиДокументПоИд(ДокТСДИд)
	 
	 Если не ЗначениеЗаполнено(ДокТСДИд) Тогда
		 Возврат Неопределено
	 КонецЕсли;
	 
	 НайденныйДокумент1С = Неопределено;
	 
	 Поз                        = Найти(ДокТСДИд, "#");
	 Если поз = 0 Тогда
		 Возврат Неопределено
	 КонецЕсли;
	 
	 ТипВыгруженногоДокумента1С = Лев(ДокТСДИд, Поз-1);
	 ИдДокумента1С              = Прав(ДокТСДИд, СтрДлина(ДокТСДИд)-Поз);
	 
	 Если Метаданные.документы.Найти(ТипВыгруженногоДокумента1С) = Неопределено Тогда
		 Возврат Неопределено;
	 КонецЕсли;
	 
	 Попытка
		 НайденныйДокумент1С        = Документы[ТипВыгруженногоДокумента1С].ПолучитьСсылку(новый УникальныйИдентификатор(ИдДокумента1С));
		 Если Найти(Строка(НайденныйДокумент1С),"не найден") <> 0 Тогда   //документ найден
			 НайденныйДокумент1С = Неопределено;
		 КонецЕсли;
	 Исключение
		 НайденныйДокумент1С = Неопределено;
	 КонецПопытки;
	 
	 Если не ЗначениеЗаполнено(НайденныйДокумент1С) тогда
		 Возврат Неопределено
	 КонецЕсли;
	 
	 Возврат Новый Структура("НайденныйДокумент1С,ТипДокумента1С",НайденныйДокумент1С,ТипВыгруженногоДокумента1С);
	 
 КонецФункции

Процедура ВыбратьИсходныйДокументНажатие(Элемент)
	
	НайденныйДокумент1ССтруктура = НайтиДокументПоИд(ДокТСДИд);
	
	Если НайденныйДокумент1ССтруктура <> Неопределено Тогда
		Документ1С = НайденныйДокумент1ССтруктура.НайденныйДокумент1С;
		ТипВыгруженногоДокумента1С = НайденныйДокумент1ССтруктура.ТипДокумента1С;
		
		Если  ЭлементыФормы.ТипДокумента1С.СписокВыбора.НайтиПоЗначению(ТипВыгруженногоДокумента1С) = Неопределено Тогда
			ЭлементыФормы.ТипДокумента1С.СписокВыбора.Добавить(ТипВыгруженногоДокумента1С, Метаданные.Документы[ТипВыгруженногоДокумента1С].Синоним);
			СохранитьЗначение(мИмяДляХраненияНастроек, ЭлементыФормы.ТипДокумента1С.СписокВыбора);
		КонецЕсли;
		
		ТипДокумента1С      = ТипВыгруженногоДокумента1С;
		ВыбранныйДокумент1С = Документ1С.ПолучитьОбъект();
		//+MAV. 25.07.2014. №196. Настройка видимости поля для загрузки.
		ЭлементыФормы.НадписьНовыйДокумент.Видимость = Ложь;
		//-MAV. 25.07.2014. №196. Настройка видимости поля для загрузки.
	КонецЕсли;

КонецПроцедуры

Процедура Документ1СОчистка(Элемент, СтандартнаяОбработка)
	
	ВыбранныйДокумент1С = Неопределено;
	
	Если ЗначениеЗаполнено(ТипДокумента1С) Тогда
		ТипСтр = "ДокументСсылка."+ТипДокумента1С;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТипСтр);
		Документ1С = Элемент.Значение;
		Элемент.Значение = Элемент.ОграничениеТипа.ПривестиЗначение(Документ1С);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВерхняяСправка(Кнопка)
	
	ФормаСправки = ПолучитьФорму("ФормаСправки");
	ФормаСправки.МакетСправки = "Загрузка данных с ТСД.mht";
	ФормаСправки.Заголовок = "Справка к форме """+ЭтаФорма.Заголовок+""" обработки """+ ОбработкаОбъект.Метаданные().Синоним+"""";
	
	Если НЕ ФормаСправки.Открыта() Тогда
		ФормаСправки.Открыть();
	Иначе
		ФормаСправки.ОбновитьДанные();
	КонецЕсли; 

КонецПроцедуры
// 20.11.2013 +
Процедура Документ1СПриИзменении(Элемент)
	
	Если ТипДокумента1С <> Неопределено И (Документ1С = Неопределено Или Документ1С = Документы[ТипДокумента1С].ПустаяСсылка()) Тогда
		ЭлементыФормы.НадписьНовыйДокумент.Видимость = Истина;	
	Иначе
		ЭлементыФормы.НадписьНовыйДокумент.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры
// 20.11.2013 -

Функция ПолучитьТабВычПолей()
	
	мТабВычПолей = Новый ТаблицаЗначений;
	
	мТабВычПолей.Колонки.Добавить("ЗаголовокПоля"); 
	мТабВычПолей.Колонки.Добавить("Значение"); 
	мТабВычПолей.Колонки.Добавить("НомерПоля"); 
	мТабВычПолей.Колонки.Добавить("НужноВычислять"); 
	мТабВычПолей.Колонки.Добавить("Поле");
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "ОрганизацияНаименованиеСокращенное";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 1;
	мСтрока.ЗаголовокПоля = "Поле1";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.Код";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 2;
	мСтрока.ЗаголовокПоля = "Поле2";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.Артикул";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 3;
	мСтрока.ЗаголовокПоля = "Поле3";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "СистемныеПоля.ТекущаяДата";
	мСтрока.Значение = Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");
	мСтрока.НужноВычислять = ложь;
	мСтрока.НомерПоля = 0;
	мСтрока.ЗаголовокПоля = "";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.НаименованиеПолное";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 4;
	мСтрока.ЗаголовокПоля = "Поле4";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.ХарактеристикаНоменклатуры";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 5;
	мСтрока.ЗаголовокПоля = "Поле5";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.Цена";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 6;
	мСтрока.ЗаголовокПоля = "Поле6";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.ЕдиницаИзмерения";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 7;
	мСтрока.ЗаголовокПоля = "Поле7";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.Штрихкод";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 8;
	мСтрока.ЗаголовокПоля = "Поле8";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.ПредставлениеШтрихкода";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 9;
	мСтрока.ЗаголовокПоля = "Поле9";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.ТипШтрихкода";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 10;
	мСтрока.ЗаголовокПоля = "Поле10";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.Ссылка";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 11;
	мСтрока.ЗаголовокПоля = "Поле11";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Магазин.Ссылка";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 12;
	мСтрока.ЗаголовокПоля = "Поле12";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.ЕдиницаПоКлассификатору";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 13;
	мСтрока.ЗаголовокПоля = "Поле13";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Номенклатура.КодТовараPLU";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 14;
	мСтрока.ЗаголовокПоля = "Поле14";
	
	мСтрока = мТабВычПолей.Добавить();
	мСтрока.Поле = "Остаток";
	мСтрока.Значение = "";
	мСтрока.НужноВычислять = Истина;
	мСтрока.НомерПоля = 15;
	мСтрока.ЗаголовокПоля = "Поле15";
		
	Возврат мТабВычПолей;
КонецФункции

Процедура КомандыДокументовПечатьЦенников(Кнопка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВнешнийИсточник", Товары);

	Попытка                                                                          
		Если Найти(мНазваниеКонфигурации, "розница") > 0 И мВерсияКонфигурации < 02000000 тогда	
			
			Запрос.Текст = "
				|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица
				|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
				|ГДЕ ВнешнийИсточник.Загружать = ИСТИНА;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИСТИНА КАК Печатать,
				|	Док.Номенклатура КАК Номенклатура_Ссылка,
				|	Док.ХарактеристикаНоменклатуры КАК Номенклатура_ХарактеристикаНоменклатуры,
				|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК Номенклатура_ЕдиницаИзмерения,
				|	Док.Цена КАК Номенклатура_Цена,
				|	0 КАК Остаток,
				|	Док.Штрихкод КАК Номенклатура_Штрихкод,
				|	Штрихкоды.ПредставлениеШтрихкода КАК Номенклатура_ПредставлениеШтрихкода,
				|	Штрихкоды.ТипШтрихкода КАК Номенклатура_ТипШтрихкода,
				|	Док.КоличествоФакт КАК КоличествоЭкземпляров
				|ИЗ
				|	ВременнаяТаблица КАК Док,
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
				|	ПО Док.Номенклатура = Штрихкоды.Владелец 
				|		И Штрихкоды.Штрихкод = Док.Штрихкод";

			ОбработкаПечатьЦенников = Обработки.ПечатьЭтикетокИЦенников.Создать();
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			ФормаПечатьЦенников.Товары = Запрос.Выполнить().Выгрузить().Скопировать();
			ПроверитьЦеныДляВыгрузки(ФормаПечатьЦенников.Товары);
			ФормаПечатьЦенников.Открыть();
			
			Если Не ЗначениеЗаполнено(ФормаПечатьЦенников.ОрганизацияДляПечати) Тогда
				// ФормаПечатьЦенников.ОрганизацияДляПечати = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
				Выполнить("ФормаПечатьЦенников.ОрганизацияДляПечати = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"")");
			КонецЕсли;

			
			мТабВычПолей = ПолучитьТабВычПолей(); 
			
			Для каждого мСтрока Из ФормаПечатьЦенников.Товары Цикл
				мТабВычПолей[0].Значение = ФормаПечатьЦенников.ОрганизацияДляПечати.НаименованиеПолное; // "ОрганизацияНаименованиеСокращенное"
				мТабВычПолей[1].Значение = мСтрока.Номенклатура_Ссылка.Код; //"Номенклатура.Код"
				мТабВычПолей[2].Значение = мСтрока.Номенклатура_Ссылка.Артикул; //"Номенклатура.Артикул"
				// мТабВычПолей[3].Значение = ; //"СистемныеПоля.ТекущаяДата"
				мТабВычПолей[4].Значение = мСтрока.Номенклатура_Ссылка.НаименованиеПолное; //"Номенклатура.НаименованиеПолное"
				мТабВычПолей[5].Значение = мСтрока.Номенклатура_ХарактеристикаНоменклатуры; //"Номенклатура.ХарактеристикаНоменклатуры"
				мТабВычПолей[6].Значение = мСтрока.Номенклатура_Цена; //"Номенклатура.Цена"
				мТабВычПолей[7].Значение = мСтрока.Номенклатура_ЕдиницаИзмерения; //"Номенклатура.ЕдиницаИзмерения"
				мТабВычПолей[8].Значение = мСтрока.Номенклатура_Штрихкод; //"Номенклатура.Штрихкод"
				мТабВычПолей[9].Значение = мСтрока.Номенклатура_ПредставлениеШтрихкода; //"Номенклатура.ПредставлениеШтрихкода"
				мТабВычПолей[10].Значение = мСтрока.Номенклатура_ТипШтрихкода; //"Номенклатура.ТипШтрихкода"
				мТабВычПолей[11].Значение = мСтрока.Номенклатура_Ссылка; //"Номенклатура.Ссылка"
				//мТабВычПолей[12].Значение = ; //"Магазин.Ссылка"
				мТабВычПолей[13].Значение = мСтрока.Номенклатура_ЕдиницаИзмерения.ЕдиницаПоКлассификатору; //"Номенклатура.ЕдиницаПоКлассификатору"
				мТабВычПолей[14].Значение = мСтрока.Номенклатура_Ссылка.Код; //"Номенклатура.КодТовараPLU"
				мТабВычПолей[15].Значение = мСтрока.Остаток; //"Остаток"

				мСтрока.табВычПолей = мТабВычПолей.Скопировать();
			КонецЦикла;
			
		ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 тогда	
			Запрос.Текст = "
				|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица
				|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
				|ГДЕ ВнешнийИсточник.Загружать = ИСТИНА;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|   Истина КАК Выбран,
				|	1 КАК Количество,
				|	Док.Номенклатура КАК Номенклатура,
				|	Док.Номенклатура.Артикул КАК Артикул,
				|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	Док.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	Док.Цена КАК Цена,
				|	Док.Штрихкод КАК ШтрихКод,
				|	Док.КоличествоФакт КАК Коэффициент
				|ИЗ
				|	ВременнаяТаблица КАК Док,
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
				|	ПО Док.Номенклатура = Штрихкоды.Объект 
				|		И Штрихкоды.Штрихкод = Док.Штрихкод";

				
			ОбработкаПечатьЦенников = Обработки.ПечатьЭтикетокИЦенников.Создать();
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			
			ТЗВыгрузка = Запрос.Выполнить().Выгрузить();
			ПроверитьЦеныДляВыгрузки(ТЗВыгрузка);
			
			ФормаПечатьЦенников.Открыть();
			
			ФормаПечатьЦенников.Товары.Загрузить(ТЗВыгрузка);
			
			мСтраница = ФормаПечатьЦенников.ЭлементыФормы.ПанельРежимов.Страницы.Найти("Ценники");
			
			Если мСтраница <> Неопределено Тогда
				ФормаПечатьЦенников.ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = мСтраница;
			КонецЕсли;
			
		ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда	
			Запрос.Текст = "
				|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица
				|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
				|ГДЕ ВнешнийИсточник.Загружать = ИСТИНА;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Док.Номенклатура КАК Номенклатура,
				|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	Док.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	Док.Цена КАК Цена,
				|	Док.Штрихкод КАК ШтрихКод,
				|	Штрихкоды.ТипШтрихкода КАК ТипШтрихКода,
				|	Док.КоличествоФакт КАК Коэффициент
				|ИЗ
				|	ВременнаяТаблица КАК Док,
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
				|	ПО Док.Номенклатура = Штрихкоды.Номенклатура 
				|		И Штрихкоды.Штрихкод = Док.Штрихкод";

			ОбработкаПечатьЦенников = Обработки.ПечатьЦенниковЭтикеток.Создать();
			ТЗВыгрузка = Запрос.Выполнить().Выгрузить();
            // ПроверитьЦенники(ТЗВыгрузка);
			ПроверитьЦеныДляВыгрузки(ТЗВыгрузка);
			ОбработкаПечатьЦенников.Товары.Загрузить(ТЗВыгрузка);
			
			//ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			ФормаПечатьЦенников.Открыть();
			
		ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 тогда		
			Запрос.Текст = "
				|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица
				|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
				|ГДЕ ВнешнийИсточник.Загружать = ИСТИНА;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИСТИНА КАК Отметка,
				|	ЛОЖЬ КАК УжеРаспечатан,
				|	Док.Номенклатура.ОсновнойЦенник КАК Тип,
				|	Док.Штрихкод КАК ШтрихКод,
				|	Док.Номенклатура КАК Номенклатура,
				|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	Док.ЕдиницаИзмерения КАК Единица,
				|	Док.Номенклатура.БазоваяЕдиница	КАК РозничнаяЦенаБазовойЕдиницы,
				|	Док.Цена КАК РозничнаяЦена, 
				|	Док.Коэффициент КАК Коэффициент,
				|	Док.КоличествоФакт КАК Количество
				|ИЗ
				|	ВременнаяТаблица КАК Док
				|";
	 
			ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
			
			ТЗВыгрузка = Запрос.Выполнить().Выгрузить();
            ПроверитьЦенники(ТЗВыгрузка);
			ПроверитьЦеныДляВыгрузки(ТЗВыгрузка);
			ОбработкаПечатьЦенников.Товары.Загрузить(ТЗВыгрузка);
			
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			ФормаПечатьЦенников.Открыть();	
			
		Иначе // УТ10.3, УПП, КА
			Запрос.Текст = "
				|ВЫБРАТЬ * ПОМЕСТИТЬ ВременнаяТаблица
				|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
				|ГДЕ ВнешнийИсточник.Загружать = ИСТИНА;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИСТИНА КАК Печать,
				|	Док.Номенклатура КАК Номенклатура,
				|	Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				|	Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
				|	Док.Цена КАК Цена,
				|	Док.КоличествоФакт КАК Количество
				|ИЗ
				|	ВременнаяТаблица КАК Док
				 |";
	 
			ТЗВыгрузка = Запрос.Выполнить().Выгрузить();
			
			ПроверитьЦеныДляВыгрузки(ТЗВыгрузка);
	 
			ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
			ОбработкаПечатьЦенников.Товары.Загрузить(ТЗВыгрузка);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполнитьЦены", Ложь);
			
			ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
			ФормаПечатьЦенников.Параметр = СтруктураПараметров;
			
			ФормаПечатьЦенников.Открыть();
			
			Если Не ЗначениеЗаполнено(ОбработкаПечатьЦенников.Организация) Тогда			
				Выполнить("ОбработкаПечатьЦенников.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"")");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОбработкаПечатьЦенников.ТипЦен) Тогда			
				Выполнить("ОбработкаПечатьЦенников.ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнойТипЦенПродажи"")");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОбработкаПечатьЦенников.Валюта) Тогда				
				Выполнить("ОбработкаПечатьЦенников.Валюта = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяВалютаВзаиморасчетов"")");
			КонецЕсли;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЦенники(ТЗВыгрузка)
	
	Выборка = Справочники.ТипыЦенников.Выбрать();
	ТипЦенника = Неопределено;
	
	Если Выборка.Следующий() Тогда
    	ТипЦенника = Выборка.Ссылка;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого мСтрока Из ТЗВыгрузка Цикл
		Если Не ЗначениеЗаполнено(мСтрока.Тип) Тогда
			мСтрока.Тип = ТипЦенника;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЦеныДляВыгрузки(ТЗВыгрузка)
	
	ВыбратьТипЦен = Ложь;
	
	Если Найти(мНазваниеКонфигурации, "розница") > 0 И мВерсияКонфигурации < 02000000 Тогда	
		
		Для Каждого мСтрока Из ТЗВыгрузка Цикл
			Если мСтрока.Номенклатура_Цена = Неопределено Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
			
			Если мСтрока.Номенклатура_Цена = 0 Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//ВыбратьТипЦен = Истина; // Потом стереть
		
		мВыбранныйТипЦен = Неопределено;
		
		Если ВыбратьТипЦен Тогда 
			мВыбранныйТипЦен = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуВыбора().ОткрытьМодально();
		КонецЕсли;
		
		Если мВыбранныйТипЦен <> Неопределено Тогда
			
			Для Каждого мСтрока Из ТЗВыгрузка Цикл
				
				Если Не мСтрока.Печатать Тогда
					Продолжить;		
				КонецЕсли;
				
				Если мСтрока.Номенклатура_Цена = Неопределено Тогда
					мСтрока.Номенклатура_Цена = 0;		
				КонецЕсли;	
				
				Если мСтрока.Номенклатура_Цена > 0 Тогда
					Продолжить;		
				КонецЕсли;
				
				мСтрока.Номенклатура_Цена = ПолучитьПоследнююЦену(мСтрока.Номенклатура_Ссылка, 
								мВыбранныйТипЦен, мСтрока.Номенклатура_ХарактеристикаНоменклатуры, мСтрока.Номенклатура_ЕдиницаИзмерения);
			КонецЦикла;	
		КонецЕсли;
		
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 тогда	
		
		Для Каждого мСтрока Из ТЗВыгрузка Цикл
			Если мСтрока.Цена = Неопределено Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
			
			Если мСтрока.Цена = 0 Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// ВыбратьТипЦен = Истина; // Потом стереть
		
		мВыбранныйТипЦен = Неопределено;
		
		Если ВыбратьТипЦен Тогда 
			мВыбранныйТипЦен = Справочники.ТипыЦен.ПолучитьФормуВыбора().ОткрытьМодально();
		КонецЕсли;
		
		Если мВыбранныйТипЦен <> Неопределено Тогда
			
			Для Каждого мСтрока Из ТЗВыгрузка Цикл
				
				Если Не мСтрока.Выбран Тогда
					Продолжить;		
				КонецЕсли;
				
				Если мСтрока.Цена = Неопределено Тогда
					мСтрока.Цена = 0;		
				КонецЕсли;	
				
				Если мСтрока.Цена > 0 Тогда
					Продолжить;		
				КонецЕсли;
				
				мСтрока.Цена = ПолучитьПоследнююЦену(мСтрока.Номенклатура, 
								мВыбранныйТипЦен, мСтрока.ХарактеристикаНоменклатуры, мСтрока.ЕдиницаИзмерения);
			КонецЦикла;	
		КонецЕсли;	
		
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 тогда	
		
		Для Каждого мСтрока Из ТЗВыгрузка Цикл
			Если мСтрока.Цена = Неопределено Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
			
			Если мСтрока.Цена = 0 Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// ВыбратьТипЦен = Истина; // Потом стереть
		
		мВыбранныйТипЦен = Неопределено;
		
		Если ВыбратьТипЦен Тогда 
			мВыбранныйТипЦен = Справочники.КатегорииЦен.ПолучитьФормуВыбора().ОткрытьМодально();
		КонецЕсли;
		
		Если мВыбранныйТипЦен <> Неопределено Тогда
			
			Для Каждого мСтрока Из ТЗВыгрузка Цикл
				
				//Если Не мСтрока.Отметка Тогда
				//	Продолжить;		
				//КонецЕсли;
				
				Если мСтрока.Цена = Неопределено Тогда
					мСтрока.Цена = 0;		
				КонецЕсли;	
				
				Если мСтрока.Цена > 0 Тогда
					Продолжить;		
				КонецЕсли;
				
				мСтрока.Цена = ПолучитьПоследнююЦену(мСтрока.Номенклатура, 
								мВыбранныйТипЦен, мСтрока.ХарактеристикаНоменклатуры, мСтрока.ЕдиницаИзмерения);
			КонецЦикла;	
		КонецЕсли;
		
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 тогда	
		
		Для Каждого мСтрока Из ТЗВыгрузка Цикл
			Если мСтрока.РозничнаяЦена = Неопределено Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
			
			Если мСтрока.РозничнаяЦена = 0 Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//ВыбратьТипЦен = Истина; // Потом стереть
		
		мВыбранныйТипЦен = Неопределено;
		
		Если ВыбратьТипЦен Тогда 
			мВыбранныйТипЦен = Справочники.ТипыЦен.ПолучитьФормуВыбора().ОткрытьМодально();
		КонецЕсли;
		
		Если мВыбранныйТипЦен <> Неопределено Тогда
			
			Для Каждого мСтрока Из ТЗВыгрузка Цикл
				
				Если Не мСтрока.Отметка Тогда
					Продолжить;		
				КонецЕсли;
				
				Если мСтрока.РозничнаяЦена = Неопределено Тогда
					мСтрока.РозничнаяЦена = 0;		
				КонецЕсли;	
				
				Если мСтрока.РозничнаяЦена > 0 Тогда
					Продолжить;		
				КонецЕсли;
				
				мСтрока.РозничнаяЦена = ПолучитьПоследнююЦену(мСтрока.Номенклатура, 
								мВыбранныйТипЦен, мСтрока.ХарактеристикаНоменклатуры, мСтрока.Единица);
			КонецЦикла;	
		КонецЕсли;
		
	Иначе // УТ10.3, УПП, КА
		
		Для Каждого мСтрока Из ТЗВыгрузка Цикл
			Если мСтрока.Цена = Неопределено Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
			
			Если мСтрока.Цена = 0 Тогда
				ВыбратьТипЦен = Истина;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//ВыбратьТипЦен = Истина; // Потом стереть
		
		мВыбранныйТипЦен = Неопределено;
		
		Если ВыбратьТипЦен Тогда 
			мВыбранныйТипЦен = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуВыбора().ОткрытьМодально();
		КонецЕсли;
		
		Если мВыбранныйТипЦен <> Неопределено Тогда
			
			Для Каждого мСтрока Из ТЗВыгрузка Цикл
				
				Если Не мСтрока.Печать Тогда
					Продолжить;		
				КонецЕсли;
				
				Если мСтрока.Цена = Неопределено Тогда
					мСтрока.Цена = 0;		
				КонецЕсли;	
				
				Если мСтрока.Цена > 0 Тогда
					Продолжить;		
				КонецЕсли;
				
				мСтрока.Цена = ПолучитьПоследнююЦену(мСтрока.Номенклатура, 
								мВыбранныйТипЦен, мСтрока.ХарактеристикаНоменклатуры, мСтрока.ЕдиницаИзмерения);
			КонецЦикла;	
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПоследнююЦену(мНоменклатура, мВидЦены, мХарактеристика, мУпаковка) 
	
	Если Найти(мНазваниеКонфигурации, "розница") > 0 И мВерсияКонфигурации < 02000000 Тогда	
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
					   |	ЦеныНоменклатуры.Цена КАК Цена,
					   |	ЦеныНоменклатуры.ЕдиницаИзмерения
					   |ИЗ
					   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И
					   |			ТипЦен = &ВидЦены И ХарактеристикаНоменклатуры = &Характеристика И 
					   |			ЕдиницаИзмерения = &Упаковка) КАК ЦеныНоменклатуры";

		Если мХарактеристика = Неопределено Тогда
			мХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();  
		КонецЕсли;
							   
		мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
		мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
		мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
		мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 И мХарактеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка[0];
	
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 тогда	
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
					   |	ЦеныНоменклатуры.Цена КАК Цена,
					   |	ЦеныНоменклатуры.ЕдиницаИзмерения
					   |ИЗ
					   |	РегистрСведений.Цены.СрезПоследних(, Номенклатура = &Номенклатура И
					   |			ТипЦен = &ВидЦены И ХарактеристикаНоменклатуры = &Характеристика И 
					   |			ЕдиницаИзмерения = &Упаковка) КАК ЦеныНоменклатуры";

		Если мХарактеристика = Неопределено Тогда
			мХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();  
		КонецЕсли;				   
						   
		мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
		мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
		мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
		мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 И мХарактеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка[0];
		
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 тогда	
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
					   |	ЦеныНоменклатуры.Цена КАК Цена
					   |ИЗ
					   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И
					   |			КатегорияЦен = &ВидЦены И ХарактеристикаНоменклатуры = &Характеристика) КАК ЦеныНоменклатуры";

		Если мХарактеристика = Неопределено Тогда
			мХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();  
		КонецЕсли;
							   
		мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
		мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
		мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 И мХарактеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
				
		Если Выборка.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка[0];
		
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 тогда		
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
					   |	ЦеныНоменклатуры.Цена КАК Цена,
					   |	ЦеныНоменклатуры.ЕдиницаИзмерения
					   |ИЗ
					   |	РегистрСведений.ЦеныКомпании.СрезПоследних(, Номенклатура = &Номенклатура И
					   |			ТипЦен = &ВидЦены И ХарактеристикаНоменклатуры = &Характеристика И 
					   |			ЕдиницаИзмерения = &Упаковка) КАК ЦеныНоменклатуры";

		Если мХарактеристика = Неопределено Тогда
			мХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();  
		КонецЕсли;				   
						   
		мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
		мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
		мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
		мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 И мХарактеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка[0];
		
	Иначе // УТ10.3, УПП, КА
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = "ВЫБРАТЬ
					   |	ЦеныНоменклатуры.Цена КАК Цена,
					   |	ЦеныНоменклатуры.ЕдиницаИзмерения
					   |ИЗ
					   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура И
					   |			ТипЦен = &ВидЦены И ХарактеристикаНоменклатуры = &Характеристика И 
					   |			ЕдиницаИзмерения = &Упаковка) КАК ЦеныНоменклатуры";

		Если мХарактеристика = Неопределено Тогда
			мХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();  
		КонецЕсли;				   
						   
		мЗапрос.УстановитьПараметр("Номенклатура", 	мНоменклатура);
		мЗапрос.УстановитьПараметр("ВидЦены", 		мВидЦены);
		мЗапрос.УстановитьПараметр("Характеристика",мХарактеристика);
		мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 И мХарактеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			мЗапрос.УстановитьПараметр("Упаковка", 		мУпаковка);
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			мЗапрос.УстановитьПараметр("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			мЗапрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			Выборка = мЗапрос.Выполнить().Выбрать();
		КонецЕсли;
		
		Если Выборка.Количество() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка.Следующий();
		
		Возврат Выборка[0];
	
	КонецЕсли;

КонецФункции

Процедура ДокументыТСДПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = ЭлементыФормы.ДокументыТСД.ТекущиеДанные;
	
	Если Найти(нрег(ЭлементыФормы.ДокументыТСД.ТекущаяКолонка.Имя),"документ") > 0 Тогда
		Отказ = Истина;
		Документ1ССтруктура = НайтиДокументПоИд(ТекСтрока.ИдДокумента);
		Если  Документ1ССтруктура = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ответ = Вопрос("Открыть документ 1С """+Документ1ССтруктура.НайденныйДокумент1С+""", на основании которого был создан документ ТСД """+ТекСтрока.Документ+"""?", РежимДиалогаВопрос.ДаНет,20,,"Изменение данных");
		Если Ответ = КодВозвратаДиалога.Таймаут или Ответ = КодВозвратаДиалога.Нет Тогда
			возврат;
		КонецЕсли; 
		
		ФормаДокумента = Документ1ССтруктура.НайденныйДокумент1С.ПолучитьФорму();
		
		Если Не ФормаДокумента.Открыта() Тогда
			ФормаДокумента.ОткрытьМодально();
		Иначе
			ФормаДокумента.Активизировать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция  НайтиНоменклатуруПоКоду(КодТовара)
	
	Попытка
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(новый УникальныйИдентификатор(КодТовара)); 
		Если Найти(Строка(Номенклатура),"не найден") > 0 Тогда 
			Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодТовара);
		КонецЕсли;
	Исключение
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодТовара);
	КонецПопытки;
	
	Возврат Номенклатура;
	
КонецФункции				

Процедура ТерминалСбораДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	//+AVA. 22.05.2014. №159.
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ОбработкаОбъект.мВерсияКонфигурации >= 5020109  Тогда
		Попытка
			НастройкиТСД = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(ТерминалСбораДанных));
		Исключение
			НастройкиТСД = ТерминалСбораДанных
		КонецПопытки; 
		
		ФормаТСД = НастройкиТСД.ПолучитьФорму();
		ФормаТСД.ОткрытьМодально(); 	
		//Если ФормаТСД.НастройкиКлеверенсИзменены тогда
			ТерминалСбораДанныхПриИзменении();
		//КонецЕсли;
	КонецЕсли;
	//-AVA. 22.05.2014. №159.
	
КонецПроцедуры


 
 
мИмяДляХраненияНастроек = "CleverenceЗагрузкаДокументов"+мНазваниеКонфигурации;

мСписокТерминалов           = Неопределено;
мEAN8                       = Неопределено;
мEAN13                      = Неопределено;
мCODE39                     = Неопределено;
мНетОшибки                  = Неопределено;
мОшибкаНеизвестно           = Неопределено;
мОшибкаНеизвестныйШтрихкод  = Неопределено;

мИспользоватьСерии = Ложь;

ЕстьСправочникХарактеристикиНоменклатуры = Метаданные.Справочники.Найти("ХарактеристикиНоменклатуры")<>Неопределено;

Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
	Выполнить("мПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()");
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
	мОшибкаНеизвестныйШтрихкод  = "Неизвестный штрихкод";
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТорговоеОборудование.Ссылка как Идентификатор
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
	|ГДЕ
	|	ТорговоеОборудование.КодВида = ""ТСД""
	|	и ТорговоеОборудование.ПодключатьПриЗапуске 
	|	И (НЕ ТорговоеОборудование.ПометкаУдаления)");
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
ИначеЕсли Найти(мНазваниеКонфигурации,"штрихм") > 0 Тогда
	мEAN8                       = 8;
	мEAN13                      = 13;
	мCODE39                     = 39;
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
	мОшибкаНеизвестныйШтрихкод  = "Неизвестный штрихкод";
	Если ОбработкаОбъект.мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  		
		ЭлементыФормы.ТерминалСбораДанных.КнопкаОткрытия = Истина;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиТорговогоОборудования.НастройкаТорговогоОборудования КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиТорговогоОборудования КАК НастройкиТорговогоОборудования
		|ГДЕ
		|	НастройкиТорговогоОборудования.НастройкаПоУмолчанию
		|	И НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ТипОборудования.Драйвер.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|	И НЕ НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ПометкаУдаления");  		
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТорговоеОборудование.Ссылка как Идентификатор
		|ИЗ
		|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
		|ГДЕ
		|	ТорговоеОборудование.Родитель = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ТерминалыСбораДанных)
		|	И (НЕ ТорговоеОборудование.ПометкаУдаления)
		|	И ТорговоеОборудование.Драйвер В
		|			(ВЫБРАТЬ
		|				ДрайвераТорговогоОборудования.Ссылка
		|			ИЗ
		|				Справочник.ДрайвераТорговогоОборудования КАК ДрайвераТорговогоОборудования
		|			ГДЕ
		|				ДрайвераТорговогоОборудования.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|				И (НЕ ДрайвераТорговогоОборудования.ПометкаУдаления))");
	КонецЕсли;
	//-AVA. 22.05.2014. №159.
	
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
	мСписокТерминалов = новый СписокЗначений;
	мСписокТерминалов.Добавить("Клеверенс (список поддерживаемых ТСД в справке)");
	мEAN8                       = 8;
	мEAN13                      = 13;
	мCODE39                     = 39;
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
	мОшибкаНеизвестныйШтрихкод  = "Неизвестный штрихкод";
Иначе
	мИспользоватьСерии = Истина;
	Выполнить("мСписокТерминалов = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных)");
	Выполнить("мEAN8                       = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8");
	Выполнить("мEAN13                      = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13");
	Выполнить("мCODE39                     = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39");
	Выполнить("мНетОшибки                  = Перечисления.ТООшибкиОбщие.ПустаяСсылка()");
	Выполнить("мОшибкаНеизвестно           = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
	Выполнить("мОшибкаНеизвестныйШтрихкод  = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод");
КонецЕсли;

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь)); 
Попытка
	мКартинкаСерийныеНомера = БиблиотекаКартинок.СерийныеНомера;
Исключение
	мКартинкаСерийныеНомера = Новый Картинка(ОбработкаОбъект.ПолучитьМакет("КартинкаСерийныеНомера"));
КонецПопытки;
Если Найти(мНазваниеКонфигурации, "розница") > 0 или ПоддержкаДругихВерсий() тогда
	
ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 тогда
	
ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
	
Иначе
	КнопкаСерийныеНомера =  ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Добавить("СерийныеНомера", ТипКнопкиКоманднойПанели.Действие,"Серийные номера" ,  Новый Действие("КоманднаяПанельТоварыСерийныеНомера"));
	КнопкаСерийныеНомера.Картинка    = мКартинкаСерийныеНомера;
	КнопкаСерийныеНомера.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КнопкаСерийныеНомера.Подсказка   = "Серийные номера";
КонецЕсли;
мПоказатьСерийныеНомераШтрихМ = Ложь;
ЭлементыФормы.СерийныеНомера.Свертка = РежимСверткиЭлементаУправления.Право;

мИмяДляХраненияНастроекПрефикс = "CleverenceВыгрузкаНоменклатуры"+мНазваниеКонфигурации;
мИмяДляХраненияНастроек        = мИмяДляХраненияНастроекПрефикс;

Заголовок = "Клеверенс Софт: Загрузка данных с ТСД";
мВидимостьЭлементовФормы = Ложь;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек{
мТипПодключенногоДрайвера = "";
Если мСписокТерминалов.Количество() > 0 Тогда
	ТерминалСбораДанных = мСписокТерминалов[0];
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТерминалСбораДанных =  Строка(ТерминалСбораДанных.УникальныйИдентификатор());
	КонецЕсли;
	
	ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
	Если ПоследняяРаботаСТО <> Неопределено Тогда
		для каждого СтрокаТерминал из мСписокТерминалов Цикл
			Если Найти(мНазваниеКонфигурации,"штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
				ТерминалСбораДанных_ =  Строка(СтрокаТерминал.УникальныйИдентификатор());
			Иначе
				ТерминалСбораДанных_ =  ТерминалСбораДанных
			КонецЕсли;
			Если ТерминалСбораДанных_ =  ПоследняяРаботаСТО Тогда
				ТерминалСбораДанных =   ПоследняяРаботаСТО;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект, Ложь);
	мОбъект = Объект;
	Если Объект <> Неопределено Тогда
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
	КонецЕсли;
	Если Обработка <> Неопределено Тогда
		Если Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда 
			мСписокТерминалов.Очистить();
			ОбработкаОписание = Обработка.ПолучитьОписание();
			Для каждого СтрокаМассива из ОбработкаОписание.СписокМоделей  Цикл
				мСписокТерминалов.Добавить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек{

ТЗНовыеШтрихкоды = Новый ТаблицаЗначений;
ТЗНовыеШтрихкоды.Колонки.Добавить("КодТовара");
ТЗНовыеШтрихкоды.Колонки.Добавить("НаименованиеТовара");
ТЗНовыеШтрихкоды.Колонки.Добавить("НаименованиеУпаковки");
ТЗНовыеШтрихкоды.Колонки.Добавить("Штрихкод");
ТЗНовыеШтрихкоды.Колонки.Добавить("Характеристика");
ТЗНовыеШтрихкоды.Колонки.Добавить("СерияНоменклатуры");
 
НоваяработаССериями = Истина;