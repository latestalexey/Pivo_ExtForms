///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;
Перем мСписокТерминалов;
Перем мПустаяХарактеристика;
Перем мПустаяСерия;

Перем мНетОшибки;
Перем мОшибкаНеизвестно;
Перем мОшибкаНеизвестныйШтрихкод;

Перем мФорма;
Перем мДанныеСервера;
Перем мКартинкаСерийныеНомера; 
Перем мНазваниеКонфигурации Экспорт;
Перем мВерсияПлатформы Экспорт; 
Перем мИмяДляХраненияНастроек Экспорт;    
Перем мИмяДляХраненияНастроекПрефикс Экспорт;
Перем мТипПодключенногоДрайвера Экспорт;
Перем мВидимостьЭлементовФормы Экспорт;
Перем ПоддержкаМодификацийРозницы Экспорт;
Перем ВыводитьОтладочныеСообщения;

Перем ПовторнаяВыгрузка;
Перем КоличествоПоследнейВыгрузки;

Перем НоваяработаССериями;
 
///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент, ПодключИдентификатор=Неопределено)

	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;

	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");

	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Компьютер = &Компьютер "+?(Найти(мНазваниеКонфигурации,"управлениеторговлей")>0 и ОбработкаОбъект.мВерсияКонфигурации >= 10030608 ," И РегТО.Подключено ","")+"
		| и РегТО.Вид=ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ТерминалСбораДанных)");
		 ИмяКомпьютераТО = "";
		 Выполнить("ИмяКомпьютераТО = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО()");
		Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютераТО+"/"+ИмяПользователя());
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			ИмяВременногФайла = ПолучитьИмяВременногоФайла(".epf");
			МакетОбработки = СтрокаТО.Модель.ОбработкаОбслуживания.Обработка.Получить();
			МакетОбработки.Записать(ИмяВременногФайла);	
			ПутьКФайлуВнешнейОбработки = ИмяВременногФайла;
			ОписаниеОбработки = ПолучитьОписаниеОбработки(ИмяВременногФайла);
			ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
            Если ЗначениеЗаполнено(ОбработкаКлеверенс) Тогда
				Идентификатор = СтрокаТО.Идентификатор;
				Наименование  = СтрокаТО.Наименование;
				Обработка     = Неопределено;
				Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
				Новый Структура(),
				ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
				Модель        = СтрокаТО.Модель.Модель;
				мМодельПодключаемогоТО = Модель;
				
				Результат = "";
				выполнить("Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка)");
				
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Объект    = Неопределено;
				Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Результат = Обработка.Подключить(Объект);
				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;

				Оборудование                             = ТО.Добавить();
				Оборудование.Вид                         = Вид;
				Оборудование.Ссылки                      = 1;
				Оборудование.Идентификатор               = Идентификатор;
				Оборудование.Наименование                = Наименование;
				Оборудование.Обработка                   = Обработка;
				Оборудование.Объект                      = Объект;
				Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);

				СообщенияКлиента = Клиенты[Клиент];
				Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
				Сообщения.Колонки.Добавить("Идентификатор");
				Сообщения.Колонки.Добавить("Вид");
				Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
				Сообщения.ЗаполнитьЗначения(Вид,           "Вид");

				Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
					Клиенты[Клиент] = Сообщения;
				Иначе
					Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
						СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
					КонецЦикла;
				КонецЕсли;
            КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);

				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = "";
					Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ПоследняяОшибка;

КонецФункции // ПодключитьОборудование()

// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)

	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

Функция ПолучитьПринадлежностьОбработкиКДрайверу(Знач ОписаниеОбработки)
	
	КодДрайвера = Неопределено;
	ОписаниеОбработки = нрег(ОписаниеОбработки);
	
	Если Найти(ОписаниеОбработки,"cleverence")>0 или Найти(ОписаниеОбработки,"клеверенс")>0 Тогда
		Если Найти(ОписаниеОбработки,"wi-fi")>0 и (Найти(ОписаниеОбработки,"проф")>0 или Найти(ОписаниеОбработки,"prof")>0) Тогда
			КодДрайвера = 1;     //Wi-Fi ПРОФ
		ИначеЕсли Найти(ОписаниеОбработки,"wi-fi")>0 и Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0  Тогда
			КодДрайвера = 2;     //Wi-Fi
		ИначеЕсли Найти(ОписаниеОбработки,"проф")=0 и Найти(ОписаниеОбработки,"prof")=0 и Найти(ОписаниеОбработки,"wi-fi")= 0 Тогда
			КодДрайвера = 3;     //батч
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодДрайвера;
	
КонецФункции

Функция ПолучитьОписаниеОбработки(ИмяФайлаОбработки)
	
	Результат = "";
	
	Попытка
		ОбрОбслуживания   = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
		Форма             = ОбрОбслуживания.ПолучитьФорму();
		Результат         = Форма.ПолучитьОписание().Наименование;
	Исключение
		Возврат Результат;
	КонецПопытки;
	
 	Возврат Результат;
	
КонецФункции

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)
	
	Перем ОбработкаОбслуживания;
   
	Результат = мНетОшибки;
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)).ПолучитьОбъект();
		
		Если ТО.ТипПрофиля = 1 Тогда
			Профиль = "Все станции\Все пользователи";
		Иначе
			ТаблицаПрофилей = "";
			Выполнить("ТаблицаПрофилей		= тоПолучитьТаблицуПрофилей(ТО)");
			ФормаВыбораПрофиля	= ТО.ПолучитьФорму("ВыборПрофиля");
			ФормаВыбораПрофиля.ТаблицаПрофилей	= ТаблицаПрофилей;
			ФормаВыбораПрофиля.ТипПрофиля		= ТО.ТипПрофиля;
			
			Профиль = ФормаВыбораПрофиля.ОткрытьМодально();
			Если ФормаВыбораПрофиля.Модифицированность Тогда
				ПараметрыСтр = ЗначениеВСтрокуВнутр(ТаблицаПрофилей);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(Профиль) Тогда
				Возврат мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТО	= ТО.ПолучитьСтруктуруПараметров(Профиль);
		
		Если ПараметрыТО.Количество() = 0 Тогда
			ПараметрыТО.Вставить("_ИнициализацияНастроек", Истина);
		КонецЕсли;
		РезультатВыполнения ="";
		Выполнить("РезультатВыполнения	= тоИнициализацияОбработкиОбслуживания(ТО, ПараметрыТО, ОбработкаОбслуживания)");
		  //подключить из драйвера, проверить
		Если РезультатВыполнения.Ошибка Тогда
			Предупреждение(РезультатВыполнения.Описание+Символы.ВК+Символы.ПС+РезультатВыполнения.Подробно);
			//Возврат мОшибкаНеизвестно;
		КонецЕсли;
		Объект = Новый Структура;
		Драйвер = "";
		Выполнить("Драйвер = глТорговоеОборудование.CLTC1C");
		Объект.Вставить("Параметры",ПараметрыТО);
		Объект.Вставить("Драйвер",Драйвер);
		Объект.Вставить("ИДУстройства","");
		Объект.Вставить("Модель",ТО.Наименование);
		Объект.Вставить("ОписаниеОшибки","");
		
		Попытка
			Если ОбработкаОбслуживания.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Обработка = ОбработкаОбслуживания;
			Результат = мНетОшибки;
		исключение
			Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		Если ОбработкаОбъект.мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  
			Попытка
				ТО = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Исключение
				ТО = Идентификатор
			КонецПопытки;
			
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = ""; 
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,Справочники.ТорговоеОборудование.ТСДКлеверенсСофт)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					//СохраненныеНастройки = ТО.КлеверенсНастройки.Получить();
					СохраненныеНастройки   = ВосстановитьЗначение(xmlСтрока(ТО));
					Объект = Новый Структура;
					Объект.Вставить("Параметры",СохраненныеНастройки);
					Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
					Объект.Вставить("Модель",СтрокаТСД.Оборудование);
					Объект.Вставить("ИДУстройства","");
					Объект.Вставить("ОписаниеОшибки","");
					
					Попытка
						ДвоичныеДанныеОбработки = ТО.КлеверенсНастройкаТСД.Получить();
						ФайлВременнойОбработки = ПолучитьИмяВременногоФайла("epf");
						ДвоичныеДанныеОбработки.Записать(ФайлВременнойОбработки);
						Обработка = ВнешниеОбработки.Создать(ФайлВременнойОбработки);						
						Результат = мНетОшибки;
						Обработка.мПараметры = Объект.Параметры;
					Исключение
						Сообщить("Не обнаружена обработка настроек драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
 					КонецПопытки;   					
					
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
 
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
 					исключение
						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли;  
		Иначе
			ТО = Справочники.ТорговоеОборудование.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
			Если НЕ то.Пустая() Тогда
				СтрокаТСД = "";
				Выполнить("СтрокаТСД = ПолучитьСтрокуДрайвераТоргОборудования(глДеревоТоргОборудования,ТО)");
				Если ЗначениеЗаполнено(СтрокаТСД) Тогда
					СохраненныеНастройки = ""; 
					Выполнить("СохраненныеНастройки = Справочники.ВнешниеРесурсы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
					Если СохраненныеНастройки.Пустая() Тогда
						Сообщить("В справочнике ""Внешние ресурсы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
						|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
						Результат = мОшибкаНеизвестно;
					Иначе
						СохраненныеНастройки = СохраненныеНастройки.Значение.Получить();
						ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
						Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
							Объект = Новый Структура;
							Объект.Вставить("Параметры",СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]);
							Объект.Вставить("Драйвер",СтрокаТСД.Драйвер);
							Объект.Вставить("Модель",СтрокаТСД.Оборудование);
							Объект.Вставить("ИДУстройства","");
							Объект.Вставить("ОписаниеОшибки","");
						КонецЕсли;
						Попытка
							Обработка = ВнешниеОбработки.Создать(Объект.Параметры.ПутьКОбработке);
							Результат = мНетОшибки;
							Обработка.мПараметры = Объект.Параметры;
						Исключение
							Сообщить("Не обнаружена обработка настроек драйвера. 
							|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
							Результат = мОшибкаНеизвестно;
 						КонецПопытки;
					КонецЕсли;
					Попытка
						Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
							НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						Результат = мНетОшибки;
						//переподключить с параметрами из драйвера{ 
						ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
						ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");						
						
						Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
							Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
							|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
							Результат = мОшибкаНеизвестно;
						КонецЕсли;
						// 
						//переподключить с параметрами из драйвера}
					исключение
						Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
						Результат = мОшибкаНеизвестно;
					КонецПопытки;
				иначе
					Предупреждение("Торговое оборудование """+ТО.Наименование+""" не предназначено для работы с данной обработкой",20,"Изменение данных");
					Результат = мОшибкаНеизвестно;
				КонецЕсли;
			Иначе
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
		Конецесли;
	ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
		СохраненныеНастройки = "";    
		Выполнить("СохраненныеНастройки = Справочники.ВнешниеПечатныеФормы.НайтиПоНаименованию(""КлеверенсСофтНастройкиТСД"")");
		Если СохраненныеНастройки.Пустая() Тогда
			Сообщить("В справочнике ""Внешние печатные формы"" не обнаружен элемент с наименованием ""КлеверенсСофтНастройкиТСД"", в котором хранятся настройки драйвера. 
			|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
			Результат = мОшибкаНеизвестно;
		Иначе
			СохраненныеНастройки = СохраненныеНастройки.Хранилище.Получить();
			ПоследнимБылПодключен = "";  //ПоследнимБылПодключен - какая обработка настроек с драйвером была сохранена последней
			
			Параметры = Новый Структура;
			Если  СохраненныеНастройки.Свойство("ПоследнимБылПодключен",ПоследнимБылПодключен) Тогда
				Параметры = СохраненныеНастройки["ПараметрыНастроек_"+ПоследнимБылПодключен]; 
			КонецЕсли;
			
			Попытка
				//сохранить из хранилища обработку и создать ее.
				Обработка = ВнешниеОбработки.Создать(Параметры.ПутьКОбработке);
				Результат = мНетОшибки;
				Обработка.мПараметры = Параметры;
			Исключение
				Сообщить("Не обнаружена обработка настроек драйвера. 
				|Для создания необходимых настроек необходимо использовать обработку настройки драйвера, входящую в поставку.");
				Результат = мОшибкаНеизвестно;
			КонецПопытки;
		КонецЕсли;
		Попытка
			Объект = Новый Структура;
			Объект.Вставить("Параметры",Параметры);
			Объект.Вставить("Драйвер","");
			Объект.Вставить("Модель",ТерминалСбораДанных);
			Объект.Вставить("ИДУстройства","");
			Объект.Вставить("ОписаниеОшибки","");
			
			Если Обработка.Подключить(Объект) <> мНетОшибки Тогда
				НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			Результат = мНетОшибки;
			//переподключить с параметрами из драйвера{ 
			ТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера();
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера,"-","_");
			ТипПодключенногоДрайвера = СтрЗаменить(ТипПодключенногоДрайвера," ","_");
						
			Если Не ПустаяСтрока(ТипПодключенногоДрайвера) И ПоследнимБылПодключен <> ТипПодключенногоДрайвера Тогда //ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
				Предупреждение("Подключенная обработка обслуживания в 1С не соответствует драйверу ТСД, установленному в операционной системе!
				|Необходимо открыть и повторно сохранить в 1С обработку обслуживания драйвера, установленного в операционной системе!",,"Изменение данных");
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
			//переподключить с параметрами из драйвера}
		исключение
			Предупреждение("Торговое оборудование не предназначено для работы с данной обработкой:"+ОписаниеОшибки(),20,"Изменение данных");
			Результат = мОшибкаНеизвестно;
		КонецПопытки;	
	Иначе
		ТО = ПолучитьТО();
		Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
		Если Оборудование = Неопределено Тогда
			//Результат = мОшибкаНеизвестно;
			ПодключитьОборудование(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных, ЭтаФорма, Идентификатор);
			ТО = ПолучитьТО();
			Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
			Если Оборудование = Неопределено Тогда
				Результат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;	
		
		Если Оборудование <> Неопределено Тогда
			Обработка = Оборудование.Обработка;
			Объект    = Оборудование.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		мТипПодключенногоДрайвера = Объект.Драйвер.ПолучитьТипДрайвера(); 
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
		// Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД [драйвер "+мТипПодключенногоДрайвера+"]" 
		сЗаголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД [" + Объект.Драйвер.GetDriverType() + ", версия ";
		сЗаголовок = сЗаголовок + Объект.Драйвер.ПолучитьНомерВерсии() + "]";
		ЭтаФорма.Заголовок = сЗаголовок;
	Исключение
		мБатчДрайвер              = Ложь;
		мТипПодключенногоДрайвера = "";
		мИмяДляХраненияНастроек   = мИмяДляХраненияНастроекПрефикс;
		Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД";
		Результат = мОшибкаНеизвестно;
	КонецПопытки;
	
	Если (не (Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0  ИЛИ Найти(мНазваниеКонфигурации, "штрихм") > 0))и  Обработка <> Неопределено Тогда
		ОписаниеОбработки   = ПолучитьОписаниеОбработки(Обработка.ИспользуемоеИмяФайла);
		ОбработкаКлеверенс  = ПолучитьПринадлежностьОбработкиКДрайверу(ОписаниеОбработки);
		ПодключенныйДрайвер = ПолучитьПринадлежностьОбработкиКДрайверу("Клеверенс " + мТипПодключенногоДрайвера);
		
		Если Не ПустаяСтрока(мТипПодключенногоДрайвера) И ЗначениеЗаполнено(ОбработкаКлеверенс) и ОбработкаКлеверенс <> ПодключенныйДрайвер Тогда //+ZHKN. 30.09.2015. №500 предупреждение, если тип драйвера не поддерживается
			Результат = "Обработка обслуживания не соответствует подключенному драйверу";
			Объект    = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	мВидимостьЭлементовФормы = Результат = мНетОшибки;
	ВидимостьЭлементовФормы();	

	Возврат Результат;
	
КонецФункции // ПолучитьОбъектДрайвера()

Процедура ВидимостьЭлементовФормы()
	
	ЭлементыФормы.КоманднаяПанельОтборПостроитель.Доступность = мВидимостьЭлементовФормы; 
	ЭлементыФормы.ОтборПостроитель.Доступность                = мВидимостьЭлементовФормы;
	ЭлементыФормы.КомандыТоваров.Доступность                  = мВидимостьЭлементовФормы; 
	ЭлементыФормы.ПолеТовары.Доступность                      = мВидимостьЭлементовФормы;
	ЭлементыФормы.ДействияФормы.Доступность                   = мВидимостьЭлементовФормы;
	ЭлементыФормы.ОсновныеДействияФормы.Доступность           = мВидимостьЭлементовФормы;
	
 	//ЭлементыФормы.УстановитьПоискПоНаименованиюИАртикулу.Видимость = Найти(мТипПодключенногоДрайвера,"Batch")>0;//AVA. 03.03.2014. Закомментировал.	
	ЭлементыФормы.УстановитьПоискПоНаименованиюИАртикулу.Видимость = Истина; //AVA. 03.03.2014. .
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Заполнить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка, ТаблицаДляВыгрузки = Неопределено, ДатаНачалаФормированияСпискаНоменклатуры = Неопределено)

	Перем Товар;
	Перем Число;
	Перем ШК;
	Перем Префикс;
	Перем ДлинаКода;
	Перем Вес;
	Перем Индекс;
	Перем МаксЗнач;
	Перем Цена;
	Перем Дата;
	
	ДатаНачалаФормированияСпискаНоменклатуры = ТекущаяДата();
	
	Если СписокТоваров.Количество() > 0 и ТаблицаДляВыгрузки = Неопределено Тогда
		ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Проверка заполнения табличной части");
		Если ответ = КодВозвратаДиалога.Нет Тогда
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	Конфигурация_автосалон5                       = Найти(мНазваниеКонфигурации, "автосалон5") > 0;
	Конфигурация_далионуправлениемагазином        = Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0;
	Конфигурация_управлениеторговлейдляказахстана = Найти(мНазваниеКонфигурации, "управлениеторговлейдляказахстана") > 0;
	Конфигурация_штрихм                           = Найти(мНазваниеКонфигурации, "штрихм") > 0;
	

	ПостроительОтчета.Параметры.Вставить("ТипЦен",?(ПереключательОптовыеЦены,ТипЦен,СкладАТТ));
	Если Конфигурация_автосалон5 и  не ПереключательОптовыеЦены и ЗначениеЗаполнено(СкладАТТ) Тогда
 		ПостроительОтчета.Параметры.Вставить("ТипЦен",СкладАТТ.Подразделение);
	КонецЕсли;	
	
	Если Конфигурация_далионуправлениемагазином Тогда
		ВнутреннийКодРавенКодуНоменклатуры = Ложь;
		Попытка
			Выполнить("ВнутреннийКодРавенКодуНоменклатуры = Константы.ВнутреннийКодНоменклатурыСовпадаетСКодомНоменклатуры.Получить()");
		Исключение
			ВнутреннийКодРавенКодуНоменклатуры = Ложь;
		КонецПопытки;
		ПостроительОтчета.Параметры.Вставить("ВнутреннийКодРавенКодуНоменклатуры",ВнутреннийКодРавенКодуНоменклатуры); 
	КонецЕсли;
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	Если Объект = Неопределено Тогда
		Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	

	ИспШаблоныВесовогоТовара = Неопределено;
	Если не Объект.Параметры.Свойство("ИспШаблоныВесовогоТовара", ИспШаблоныВесовогоТовара) Тогда
		ИспШаблоныВесовогоТовара = Ложь;
	КонецЕсли;	
	
	Если Конфигурация_далионуправлениемагазином или Конфигурация_штрихм Тогда
		ПостроительОтчета.Параметры.Вставить("ИспШаблоныВесовогоТовара",ИспШаблоныВесовогоТовара);
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	
	Если ТаблицаДляВыгрузки = Неопределено Тогда
		СписокТоваров = ПостроительОтчета.Результат.Выгрузить();
	Иначе
		ТаблицаДляВыгрузки = ПостроительОтчета.Результат.Выбрать();
		Возврат;
	КонецЕсли; 	

	времПрефиксВесовогоТовара = Неопределено;
	Объект.Параметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
	ПрефиксВесовогоТовара = ?(не ЗначениеЗаполнено(времПрефиксВесовогоТовара), ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
	
	времДлинаКодаВесовогоТовара = Неопределено;
	Объект.Параметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
	ДлинаКодаВесовогоТовара = ?(не ЗначениеЗаполнено(времДлинаКодаВесовогоТовара), ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
	
	МаксЗнач      = 12 - СтрДлина(ПрефиксВесовогоТовара)  - ДлинаКодаВесовогоТовара;
	Вес           = "";
	Для Индекс = 1 По МаксЗнач Цикл		Вес = Вес + "0";КонецЦикла;
	ДлинаКода     = Формат(ДлинаКодаВесовогоТовара, "ЧГ=0");
	Дата          = ТекущаяДата();
	
	// +ZHKN. 09.07.2014. №152 Мобильная печать 
	Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
		ЭлементыФормы.ПолеТовары.Колонки[мПараметр.Значение].Видимость = Ложь;
	КонецЦикла;
		
	Если ФлажокМобильнаяПечать Тогда
		ДобавитьКолонкиДляМобильнойПечати(СписокТоваров);
	КонецЕсли;
	// -ZHKN. 09.07.2014.
	
	Для Каждого Товар Из СписокТоваров Цикл
		Если Конфигурация_далионуправлениемагазином или Конфигурация_штрихм тогда
			Если ИспШаблоныВесовогоТовара и Товар.Весовой и ЗначениеЗаполнено(ПрефиксВесовогоТовара) Тогда
				ТипШКEAN13 = Ложь;
				Товар.Штрихкод = СтрЗаменить(Товар.Штрихкод, Символы.НПП, ""); //ZHKN. 21.04.2015. №379, №381 Ошибки Далион УМ
				Штрихкод = ?(ЗначениеЗаполнено(Товар.Штрихкод),Товар.Штрихкод,Товар.Код);
				Если Конфигурация_далионуправлениемагазином Тогда
					Выполнить("ТипШКEAN13 = ПроверитьШтрихКод(Товар.Штрихкод, ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13)");
				Иначе
					ТипШКEAN13 = СтрДлина(Товар.Штрихкод) = 13;
				КонецЕсли;   				
				Если не ТипШКEAN13 и СтрДлина(Товар.Штрихкод) <=ДлинаКодаВесовогоТовара Тогда
					ШК = ПрефиксВесовогоТовара + Формат(Число(Штрихкод), "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0") + Вес;
					Если СтрДлина(ШК) = 12 Тогда
						Попытка
							Товар.Штрихкод = ШК + КонтрольныйСимволEAN_(ШК, 13);
						Исключение
							Сообщить("Штрихкод: " + ШК + ". " + ОписаниеОшибки());	
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Товар.Штрихкод = Товар.Код Тогда
					Товар.Штрихкод = "";
				КонецЕсли;    				
			КонецЕсли;			
		иначе
			Если  ИспШаблоныВесовогоТовара и Товар.Весовой Тогда
				ШК = ПрефиксВесовогоТовара + Формат(Число(Товар.Штрихкод), "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0") + Вес;
				Попытка
					ТоварШтрихкод = "";
					Выполнить("ТоварШтрихкод = ШК + РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШК, 13)");
					Товар.Штрихкод = ТоварШтрихкод; 
				Исключение
					Сообщить("Штрихкод: " + ШК + ". " + ОписаниеОшибки());	
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		// +ZHKN. 09.07.2014. №152 Мобильная печать 
		Если ФлажокМобильнаяПечать Тогда
			
			мТипЦен = Неопределено;
			
			Если ПереключательОптовыеЦены И ЗначениеЗаполнено(ТипЦен) Тогда
					мТипЦен = ТипЦен;
			КонецЕсли;
				
			Если Не ПереключательОптовыеЦены И ЗначениеЗаполнено(СкладАТТ) Тогда	
				Если Конфигурация_автосалон5 Тогда 	
					мТипЦен = СкладАТТ.Подразделение.ТипЦен;	
				Иначе
					мТипЦен = СкладАТТ.ТипЦен;	
				КонецЕсли;
			КонецЕсли;
			
			мЗначения = ПолучитьПараметрыМобильнойПечатиДляТовара(Товар, мТипЦен);
			
			Для Каждого мЗначение Из мЗначения Цикл
				
				Если СписокТоваров.Колонки.Найти(мЗначение.Ключ) <> Неопределено Тогда
					Выполнить("Товар."+мЗначение.Ключ+" = мЗначения.Получить(мЗначение.Ключ)");
				КонецЕсли;

			КонецЦикла;	
		КонецЕсли;		
		// -ZHKN. 09.07.2014.
	КонецЦикла;    
	
	ПовторнаяВыгрузка = Ложь;
	
	ЭлементыФормы.НадписьКоличествоСтрок.Заголовок = "Строк: " + СписокТоваров.Количество();
	
	Если ВыводитьОтладочныеСообщения тогда
		Сообщить("Формирование списка номенклатуры, сек: " + Строка(ТекущаяДата() - ДатаНачалаФормированияСпискаНоменклатуры)+", количество строк: "+Строка(СписокТоваров.Количество()));
	КонецЕсли;

КонецПроцедуры // ДействияФормыЗаполнить()

// +ZHKN. 09.07.2014. №152 Мобильная печать
Функция ПолучитьПараметрыМобильнойПечатиДляТовара(мСтрокаТовара, мТипЦен)
	
	мЗначения = Новый Соответствие;
	// мЗапрос = Новый Запрос;
	
	//Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
	//	мЗначения.Вставить(мПараметр.Значение, "");	
	//КонецЦикла;
	
	// сТекущаяДата = Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");
	мНоменклатура = мСтрокаТовара.НоменклатураСсылка;
	
	Если Найти(мНазваниеКонфигурации,"розница")>0 и ОбработкаОбъект.мВерсияКонфигурации < 2000000 Тогда
		// AdditionInfo
		// Дата оформления ценника
		// Номер декларации (Из серий)
		сТекст = "Дата оформления ценника " + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");     
		мЗначения.Вставить("AdditionInfo", сТекст);
		
		// data (Дата)	
		мЗначения.Вставить("data", ТекущаяДата());
		
		// ExpiredDate (Годен до) - Из серий
		Если ЗначениеЗаполнено(мСтрокаТовара.СерияНоменклатуры) Тогда
			// Поиск по серии
			мСерия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(мСтрокаТовара.СерияНоменклатуры,,,мНоменклатура);
			Если ЗначениеЗаполнено(мСерия) Тогда
				мЗначения.Вставить("ExpiredDate", мСерия.СрокГодности);	
			КонецЕсли;
		КонецЕсли;
		
		//-- oldPrice (Старая цена)
		oldPrice = ПолучитьСтаруюЦену(мНоменклатура, мСтрокаТовара.ХарактеристикаНоменклатурыСсылка, мСтрокаТовара.ЕдиницаИзмеренияСсылка, мТипЦен);
		Если ЗначениеЗаполнено(oldPrice) > 0 Тогда
			мЗначения.Вставить("oldPrice", oldPrice);	
		КонецЕсли;
		
		// sellerName (Имя продавца)
		// sellerAddress (Адрес продавца)
		мОсновнаяОрганизация = Неопределено;
		Выполнить("мОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"");"); 
		Если ЗначениеЗаполнено(мОсновнаяОрганизация) Тогда
			мЗначения.Вставить("sellerName", мОсновнаяОрганизация.Наименование);
			мЗначения.Вставить("sellerAddress", ПолучитьАдресОрганизации(мОсновнаяОрганизация));
		КонецЕсли;
		
		// producerCountry (Страна производства)
		Если ЗначениеЗаполнено(мНоменклатура.СтранаПроисхождения) Тогда 
			мЗначения.Вставить("producerCountry", Строка(мНоменклатура.СтранаПроисхождения));
		КонецЕсли;	
		
		// producerName (Имя производителя)
		// producerAddress (Адрес производителя)
		cProducer = ПолучитьСвойствоТовара(мНоменклатура, "Производитель");
		Если ЗначениеЗаполнено(cProducer) Тогда
			мЗначения.Вставить("producerName", Строка(cProducer));
		КонецЕсли;
		
		// supplierName (Имя поставщика)
		// supplierAddress	(Адрес поставщика)
		mSupplier = ПолучитьСвойствоТовара(мНоменклатура, "Основной поставщик");
		Если ЗначениеЗаполнено(mSupplier) Тогда
			мЗначения.Вставить("supplierName", Строка(mSupplier));
			мЗначения.Вставить("supplierAddress", ПолучитьАдресОрганизации(mSupplier));
		КонецЕсли;	
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином")	Тогда
		// AdditionInfo
		// Дата оформления ценника
		// Номер декларации (Из серий)
		сТекст = "Дата оформления ценника " + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");     
		Если ЗначениеЗаполнено(мНоменклатура.НомерГТД) Тогда
			сТекст = сТекст + ", № декларации " +Строка(мНоменклатура.НомерГТД.Код);
		КонецЕсли;
		мЗначения.Вставить("AdditionInfo", сТекст);
		
		// data (Дата)	
		мЗначения.Вставить("data", ТекущаяДата());
		
		// ExpiredDate (Годен до) - Из серий
		// Зависит от партий товаров
		
		//-- oldPrice (Старая цена)
		oldPrice = ПолучитьСтаруюЦену(мНоменклатура, мСтрокаТовара.ХарактеристикаНоменклатурыСсылка, мСтрокаТовара.ЕдиницаИзмеренияСсылка, мТипЦен);
		Если ЗначениеЗаполнено(oldPrice) > 0 Тогда
			мЗначения.Вставить("oldPrice", oldPrice);	
		КонецЕсли;
		
		// sellerName (Имя продавца)
		// sellerAddress (Адрес продавца)  
		мОсновнаяОрганизация = Неопределено;
		Выполнить("мОсновнаяОрганизация = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, ""ОсновнаяФирма"");"); 
			
		Если ЗначениеЗаполнено(мОсновнаяОрганизация) Тогда
			мЗначения.Вставить("sellerName", мОсновнаяОрганизация.Наименование);
			мЗначения.Вставить("sellerAddress", ПолучитьАдресОрганизации(мОсновнаяОрганизация));
		КонецЕсли;
		
		// producerCountry (Страна производства)
		Если ЗначениеЗаполнено(мНоменклатура.СтранаПроисхождения) Тогда 
			мЗначения.Вставить("producerCountry", Строка(мНоменклатура.СтранаПроисхождения));
		КонецЕсли;	
		
		// producerName (Имя производителя)
		// producerAddress (Адрес производителя)      
		Если ЗначениеЗаполнено(мНоменклатура.Производитель) Тогда 
			мЗначения.Вставить("producerName", Строка(мНоменклатура.Производитель));
		КонецЕсли;
		
		//-- RegistrationDate (Дата регистрации)
		// мЗначения.Вставить("RegistrationDate", ТекущаяДата()); - Не используется
		
		// supplierName (Имя поставщика)
		// supplierAddress	(Адрес поставщика)
		Если ЗначениеЗаполнено(мНоменклатура.ОсновнойПоставщик) Тогда 
			мЗначения.Вставить("supplierName", Строка(мНоменклатура.ОсновнойПоставщик));
			мЗначения.Вставить("supplierAddress", ПолучитьАдресОрганизации(мНоменклатура.ОсновнойПоставщик));
		КонецЕсли;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") Тогда
		// AdditionInfo
		// Дата оформления ценника
		// Номер декларации (Из серий)
		сТекст = "Дата оформления ценника " + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");     
		//Если ЗначениеЗаполнено(мНоменклатура.НомерГТД) Тогда
		//	сТекст = сТекст + ", № декларации " +Строка(мНоменклатура.НомерГТД.Код);
		//КонецЕсли;
		мЗначения.Вставить("AdditionInfo", сТекст);
		
		// data (Дата)	
		мЗначения.Вставить("data", ТекущаяДата());
		
		// ExpiredDate (Годен до) - Из серий
		// Зависит от партий товаров
		//Если ЗначениеЗаполнено(мСтрокаТовара.СерияНоменклатуры) Тогда
		//	// Поиск по серии
		//	мСерия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(мСтрокаТовара.СерияНоменклатуры,,,мНоменклатура);
		//	Если ЗначениеЗаполнено(мСерия) Тогда
		//		мЗначения.Вставить("ExpiredDate", мСерия.СрокГодности);	
		//	КонецЕсли;
		//КонецЕсли;
		
		//-- oldPrice (Старая цена)
		oldPrice = ПолучитьСтаруюЦену(мНоменклатура, мСтрокаТовара.ХарактеристикаНоменклатурыСсылка, мСтрокаТовара.ЕдиницаИзмеренияСсылка, мТипЦен);
		Если ЗначениеЗаполнено(oldPrice) > 0 Тогда
			мЗначения.Вставить("oldPrice", oldPrice);	
		КонецЕсли;
		
		// sellerName (Имя продавца)
		// sellerAddress (Адрес продавца)   ПараметрыСеанса.глТекущийПользователь
		мОсновнаяОрганизация = ПолучитьОрганизациюПоУмолчанию();  
		//НаборЗаписей = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекущийПользователь);
		////НаборЗаписей.Отбор.Настройка.Установить("Основная фирма");
		//НаборЗаписей.Прочитать();
		//
		//мОтбор = новый Структура;
		//мОтбор.Вставить("Пользователь", ПараметрыСеанса.глТекущийПользователь);
		//мОтбор.Вставить("Настройка", "Основная фирма");
		////мОтбор.Вставить("ПометкаУдаления", Ложь);
		//мНастройки = РегистрыСведений.НастройкиПользователей.Получить(, мОтбор);
		////мНастройки = ПолучитьНастройкиПользователя(ПараметрыСеанса.глТекущийПользователь);
		//Выполнить("мОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"");"); 
		Если ЗначениеЗаполнено(мОсновнаяОрганизация) Тогда
			мЗначения.Вставить("sellerName", мОсновнаяОрганизация.Наименование);
			мЗначения.Вставить("sellerAddress", ПолучитьАдресОрганизации(мОсновнаяОрганизация));
		КонецЕсли;
		
		// producerCountry (Страна производства)
		Если ЗначениеЗаполнено(мНоменклатура.СтранаПроисхождения) Тогда 
			мЗначения.Вставить("producerCountry", Строка(мНоменклатура.СтранаПроисхождения));
		КонецЕсли;	
		
		// producerName (Имя производителя)
		// producerAddress (Адрес производителя)
		// cProducer = ПолучитьСвойствоТовара(мНоменклатура, "Производитель");
		Если ЗначениеЗаполнено(мНоменклатура.Производитель) Тогда
			мЗначения.Вставить("producerName", Строка(мНоменклатура.Производитель));
		КонецЕсли;
		
		//-- RegistrationDate (Дата регистрации)
		// мЗначения.Вставить("RegistrationDate", ТекущаяДата()); - Не используется
		
		// supplierName (Имя поставщика)
		// supplierAddress	(Адрес поставщика)
		//Если ЗначениеЗаполнено(мНоменклатура.ОсновнойПоставщик) Тогда 
		//	мЗначения.Вставить("supplierName", Строка(мНоменклатура.ОсновнойПоставщик));
		//	мЗначения.Вставить("supplierAddress", ПолучитьАдресОрганизации(мНоменклатура.ОсновнойПоставщик));
		//КонецЕсли;			
    
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") Тогда							
		// AdditionInfo
		// Дата оформления ценника
		// Номер декларации (Из серий)
		сТекст = "Дата оформления ценника " + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");     
		Если ЗначениеЗаполнено(мНоменклатура.ГТД) Тогда
			сТекст = сТекст + ", № декларации " + мНоменклатура.ГТД.Наименование + ", " + Строка(мНоменклатура.ГТД.Страна);
		КонецЕсли;
		мЗначения.Вставить("AdditionInfo", сТекст);
		
		// data (Дата)	
		мЗначения.Вставить("data", ТекущаяДата());
		
		// ExpiredDate (Годен до) - Из серий
		//Если ЗначениеЗаполнено(мСтрокаТовара.СерияНоменклатуры) Тогда
		//	// Поиск по серии
		//	мСерия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(мСтрокаТовара.СерияНоменклатуры,,,мНоменклатура);
		//	Если ЗначениеЗаполнено(мСерия) Тогда
		//		мЗначения.Вставить("ExpiredDate", мСерия.СрокГодности);	
		//	КонецЕсли;
		//КонецЕсли;
		
		//-- oldPrice (Старая цена)
		oldPrice = ПолучитьСтаруюЦену(мНоменклатура, мСтрокаТовара.ХарактеристикаНоменклатурыСсылка, мСтрокаТовара.ЕдиницаИзмеренияСсылка, мТипЦен);
		Если ЗначениеЗаполнено(oldPrice) > 0 Тогда
			мЗначения.Вставить("oldPrice", oldPrice);	
		КонецЕсли;
		
		// sellerName (Имя продавца)
		// sellerAddress (Адрес продавца)   
		мОсновнаяОрганизация = Неопределено;
		Выполнить("мОсновнаяОрганизация = ПараметрыСеанса.Организация");
		//Выполнить("мОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"");"); 
		Если ЗначениеЗаполнено(мОсновнаяОрганизация) Тогда
			мЗначения.Вставить("sellerName", мОсновнаяОрганизация.Наименование);
			мЗначения.Вставить("sellerAddress", ПолучитьАдресОрганизации(мОсновнаяОрганизация));
		КонецЕсли;
		
		// producerCountry (Страна производства)
		Если ЗначениеЗаполнено(мНоменклатура.Производитель) Тогда 
			мЗначения.Вставить("producerCountry", Строка(мНоменклатура.Производитель.СтранаПроисхождения));
		КонецЕсли;	
		
		// producerName (Имя производителя)
		// producerAddress (Адрес производителя)
		// cProducer = ПолучитьСвойствоТовара(мНоменклатура, "Производитель");
		// Если ЗначениеЗаполнено(cProducer) Тогда
		Если ЗначениеЗаполнено(мНоменклатура.Производитель) Тогда 
			мЗначения.Вставить("producerName", Строка(мНоменклатура.Производитель));
		КонецЕсли;
		
		//-- RegistrationDate (Дата регистрации)
		// мЗначения.Вставить("RegistrationDate", ТекущаяДата()); - Не используется
		
		// supplierName (Имя поставщика)
		// supplierAddress	(Адрес поставщика)
		//Если ЗначениеЗаполнено(мНоменклатура.ОсновнойПоставщик) Тогда 
		//	мЗначения.Вставить("supplierName", Строка(мНоменклатура.ОсновнойПоставщик));
		//	мЗначения.Вставить("supplierAddress", ПолучитьАдресОрганизации(мНоменклатура.ОсновнойПоставщик));
		//КонецЕсли;	
	Иначе // Если УТ 10.3, УПП, КА
		// AdditionInfo
		// Дата оформления ценника
		// Номер декларации (Из серий)
		сТекст = "Дата оформления ценника " + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг""");     
		Если ЗначениеЗаполнено(мНоменклатура.НомерГТД) Тогда
			сТекст = сТекст + ", № декларации " +Строка(мНоменклатура.НомерГТД.Код);
		КонецЕсли;
		мЗначения.Вставить("AdditionInfo", сТекст);
		
		// data (Дата)	
		мЗначения.Вставить("data", ТекущаяДата());
		
		// ExpiredDate (Годен до) - Из серий
		Если ЗначениеЗаполнено(мСтрокаТовара.СерияНоменклатуры) Тогда
			// Поиск по серии
			мСерия = Справочники.СерииНоменклатуры.НайтиПоНаименованию(мСтрокаТовара.СерияНоменклатуры,,,мНоменклатура);
			Если ЗначениеЗаполнено(мСерия) Тогда
				мЗначения.Вставить("ExpiredDate", мСерия.СрокГодности);	
			КонецЕсли;
		КонецЕсли;
		
		//-- oldPrice (Старая цена)
		oldPrice = ПолучитьСтаруюЦену(мНоменклатура, мСтрокаТовара.ХарактеристикаНоменклатурыСсылка, мСтрокаТовара.ЕдиницаИзмеренияСсылка, мТипЦен);
		Если ЗначениеЗаполнено(oldPrice) > 0 Тогда
			мЗначения.Вставить("oldPrice", oldPrice);	
		КонецЕсли;
		
		// sellerName (Имя продавца)
		// sellerAddress (Адрес продавца)
		мОсновнаяОрганизация = Неопределено;
		Выполнить("мОсновнаяОрганизация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяОрганизация"");"); 
		Если ЗначениеЗаполнено(мОсновнаяОрганизация) Тогда
			мЗначения.Вставить("sellerName", мОсновнаяОрганизация.Наименование);
			мЗначения.Вставить("sellerAddress", ПолучитьАдресОрганизации(мОсновнаяОрганизация));
		КонецЕсли;
		
		// producerCountry (Страна производства)
		Если ЗначениеЗаполнено(мНоменклатура.СтранаПроисхождения) Тогда 
			мЗначения.Вставить("producerCountry", Строка(мНоменклатура.СтранаПроисхождения));
		КонецЕсли;	
		
		// producerName (Имя производителя)
		// producerAddress (Адрес производителя)
		cProducer = ПолучитьСвойствоТовара(мНоменклатура, "Производитель");
		Если ЗначениеЗаполнено(cProducer) Тогда
			мЗначения.Вставить("producerName", Строка(cProducer));
		КонецЕсли;
		
		//-- RegistrationDate (Дата регистрации)
		// мЗначения.Вставить("RegistrationDate", ТекущаяДата()); - Не используется
		
		// supplierName (Имя поставщика)
		// supplierAddress	(Адрес поставщика)
		Если ЗначениеЗаполнено(мНоменклатура.ОсновнойПоставщик) Тогда 
			мЗначения.Вставить("supplierName", Строка(мНоменклатура.ОсновнойПоставщик));
			мЗначения.Вставить("supplierAddress", ПолучитьАдресОрганизации(мНоменклатура.ОсновнойПоставщик));
		КонецЕсли;
		
		// marking (Артикул товара)
		//мЗначения.Вставить("marking", Строка(мНоменклатура.Артикул));
	КонецЕсли; // Если УТ 10.3, УПП, КА
	
	Возврат мЗначения;	
	
КонецФункции

Функция ПолучитьСвойствоТовара(мНоменклатура, сСвойство)
	
	мЗапрос = Новый Запрос;
	
	мЗапрос.Текст = "
		| ВЫБРАТЬ
		| 	ЗначенияСвойствОбъектов.Значение
		| ИЗ
		| 	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		| ГДЕ
		| 	ЗначенияСвойствОбъектов.Объект = &Номенклатура
		| 	И ЗначенияСвойствОбъектов.Свойство.Наименование = &Производитель";
		// | 	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Производитель""";
		
	мЗапрос.УстановитьПараметр("Номенклатура", мНоменклатура);
	мЗапрос.УстановитьПараметр("Производитель", сСвойство);
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		Возврат Выборка[0];
		//мЗначения.Вставить("producerName", Строка(Выборка[0]));	
		// мЗначения.Вставить("producerAddress", Строка(Выборка[0])); - Не используется	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию()
	
	мОрганизация = Неопределено;	
	
	Если Найти(мНазваниеКонфигурации, "штрихм") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ      
				|	ЗначениеНастроек.Значение
				|ИЗ
				|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
				|		ПО ЗначениеНастроек.Настройка = Настройки.Ссылка
				|			И (ЗначениеНастроек.Пользователь = &Пользователь)
				|ГДЕ
				|	Настройки.Наименование = ""Основная фирма"" 
				|	И Настройки.ПометкаУдаления = ЛОЖЬ 
				|	И Настройки.ЭтоГруппа = ЛОЖЬ";
				
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.глТекущийПользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			мОрганизация = Выборка[0];	
		КонецЕсли;
	КонецЕсли;
	
	Возврат мОрганизация;
			
КонецФункции	

Функция ПолучитьСтаруюЦену(мНоменклатура, мХарактеристика, мЕдиница, мТипЦен)
	
	Если Не ЗначениеЗаполнено(мТипЦен) Тогда
		Возврат неопределено;	
	КонецЕсли;
	
	мЗапрос = Новый Запрос;
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") Тогда
		мЗапрос.Текст = "
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|ГДЕ
			|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
			|	И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = &Характеристика
			|	И ЦеныНоменклатуры.КатегорияЦен = &ТипЦен   
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";	
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") Тогда
		мЗапрос.Текст = "
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Цена
			|ИЗ
			|	РегистрСведений.ЦеныКомпании КАК ЦеныНоменклатуры
			|ГДЕ
			|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
			|	И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = &Характеристика
			|	И ЦеныНоменклатуры.ТипЦен = &ТипЦен
			|	И ЦеныНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";
    Иначе
		мЗапрос.Текст = "
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|ГДЕ
			|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
			|	И ЦеныНоменклатуры.ХарактеристикаНоменклатуры = &Характеристика
			|	И ЦеныНоменклатуры.ТипЦен = &ТипЦен
			|	И ЦеныНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ";		
	КонецЕсли;
	
	мЗапрос.УстановитьПараметр("Номенклатура", мНоменклатура);	
	мЗапрос.УстановитьПараметр("Характеристика", мХарактеристика);
	мЗапрос.УстановитьПараметр("ЕдиницаИзмерения", мЕдиница);
	мЗапрос.УстановитьПараметр("ТипЦен", мТипЦен);
	//мЗапрос.УстановитьПараметр("Склад", мСклад);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Следующий() Тогда
		Возврат Выборка[0];
	КонецЕсли;
	

	Возврат неопределено;
		
КонецФункции	

Функция ПолучитьАдресОрганизации(мОрганизация, сВидАдреса = "Фактический адрес")

	сАдрес = "";
	
	мЗапрос = Новый Запрос;
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") Тогда
		Если ТипЗнч(мОрганизация) = Тип("СправочникСсылка.Фирмы") Тогда 
			Выполнить("сАдрес = ПолучитьЗначениеПериодическогоРеквизита(мОрганизация, ""ЮридическийАдрес"", ТекущаяДата());");
		Иначе
			сАдрес = мОрганизация.ЮридическийАдрес;
		КонецЕсли;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") Тогда
		сАдрес = мОрганизация.ЮридическийАдрес;		
	Иначе
		мЗапрос.Текст = "
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Контрагент
			|	И КонтактнаяИнформация.Вид.Наименование = ""Фактический адрес"" ";
			
		мЗапрос.УстановитьПараметр("Контрагент", мОрганизация);
		Выборка = мЗапрос.Выполнить().Выбрать();
			
		Если Выборка.Следующий() Тогда
			сАдрес = Строка(Выборка[0]);
		КонецЕсли;
	КонецЕсли;
		
	Возврат сАдрес;
	
КонецФункции
// -ZHKN. 09.07.2014.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КомандыТоваров"

// Процедура - обработчик события "ПриНажатии" кнопки "ВыделитьВсе"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ВыделитьВсе"
//
Процедура КомандыТоваровВыделитьВсе(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Истина, "Выгружать");

КонецПроцедуры // КомандыТоваровВыделитьВсе()

// Процедура - обработчик события "ПриНажатии" кнопки "ОчиститьВыделение"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОчиститьВыделение"
//
Процедура КомандыТоваровОчиститьВыделение(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Ложь, "Выгружать");

КонецПроцедуры // КомандыТоваровОчиститьВыделение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ОсновныеДействияФормы"

//В платформе 8.3 пустая строка иногда представляется в виде "<>". 
Функция  ЗначениеИмеетПравильныйФормат(Значение)
	
	Если мВерсияПлатформы > 82 и Значение = "<>" Тогда
		Возврат ложь
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура - обработчик события "ПриНажатии" кнопки "Выгрузить"
// командной панели "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Выгрузить"
//
Процедура ОсновныеДействияФормыВыгрузить_ДоОптимизации(Кнопка)  //AVA. 09.02.2015. оптимизация выгрузки.
	
	Результат = Неопределено;
	
	ДатаНачалаОперации = ТекущаяДата();
	СписокТоваровДляВыгрузки   = СписокТоваров.НайтиСтроки(Новый Структура("Выгружать",Истина));
    КоличествоСтрокДляВыгрузки = Строка(СписокТоваровДляВыгрузки.Количество());
	
	Если СписокТоваров.Количество() = 0 Тогда
		Предупреждение("Нет данных для выгрузки.");
		Возврат;
	КонецЕсли;
	
	Если ПовторнаяВыгрузка Тогда
		
		Обработка = Неопределено;
		Объект    = Неопределено;
		
		Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
		
		Если Объект = Неопределено Тогда
			Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		//+AVA. 02.10.2015. №503. 
		РежимРаботыБатч = Найти(мТипПодключенногоДрайвера,"Batch") > 0 ИЛИ Объект.Параметры.ОбменЧерезПапку;  	  
		 //-AVA. 02.10.2015. №503. 
			  
		// Не Батч
		//Если Найти(мТипПодключенногоДрайвера,"Batch") = 0
		Если НЕ РежимРаботыБатч	Тогда   //AVA. 02.10.2015. №503
			
			сТекст = "";
			
			// Если Объект.Параметры.ТипСвязи = "RDPСвязь" Тогда
			Если Объект.Параметры.ОбменЧерезПапку Тогда
				// для режима "папки обмена"
				сТекст = "Вы уже выгружили эти товары в папку обмена!" + Символы.ПС;
			Иначе
				// для режима сервера
				сТекст = "Вы уже выгрузили эти товары на сервер!" + Символы.ПС;	
			КонецЕсли;
			
			сТекст = сТекст + "Повторная выгрузка не требуется.";
			Предупреждение(сТекст);
			Возврат;
		КонецЕсли;
		
		// Батч режим "папка обмена"
		Если Объект.Параметры.ОбменЧерезПапку Тогда
				сТекст = "Вы уже выгружили эти товары в папку обмена!" + Символы.ПС;
				сТекст = сТекст + "Повторная выгрузка не требуется.";
				Предупреждение(сТекст);
				Возврат;
		КонецЕсли;
		
		Если Не Объект.Драйвер.ВыгрузитьСуществующийСправочник() Тогда
			Предупреждение("ВНИМАНИЕ! Произошла ошибка.
			|Возможно товар не выгружен, либо выгружен частично
			|Ошибка: " + Объект.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Выгрузка номенклатуры, операция завершена, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоПоследнейВыгрузки);
		КонецЕсли;  
		
		Предупреждение("Выгрузка успешно завершена.
		|Выгружено строк: " + Формат(КоличествоПоследнейВыгрузки, "ЧГ=0") + ".");
			
		Возврат;
		
	КонецЕсли; // Если ПовторнаяВыгрузка

	Ошибка     = "";
	КолвоСтрок = 0;

	ТаблицаДляТСД = Новый ТаблицаЗначений;
	ТаблицаДляТСД.Колонки.Добавить("Код");
	ТаблицаДляТСД.Колонки.Добавить("Штрихкод");
	ТаблицаДляТСД.Колонки.Добавить("ШтрихкодТовара");
	ТаблицаДляТСД.Колонки.Добавить("Наименование");
	ТаблицаДляТСД.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДляТСД.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДляТСД.Колонки.Добавить("СерияНоменклатуры");
 	ТаблицаДляТСД.Колонки.Добавить("Цена");
	ТаблицаДляТСД.Колонки.Добавить("Количество");
	ТаблицаДляТСД.Колонки.Добавить("Артикул");
	ТаблицаДляТСД.Колонки.Добавить("КоличествоВУпаковке");
	ТаблицаДляТСД.Колонки.Добавить("ФлагБазовойЕдиницы"); //AVA. 28.02.2014. №45. Нужно дополнительно заполнять и передавать какое-нибудь свойство к базовой единице измерения.
	
	// +ZHKN. 09.07.2014. №152 Мобильная печать
	Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
		Если СписокТоваров.Колонки.Найти(мПараметр.Значение) <> Неопределено Тогда
			ТаблицаДляТСД.Колонки.Добавить(мПараметр.Значение);
		КонецЕсли;	
	КонецЦикла;
	// -ZHKN. 09.07.2014.
	
	Если не (Найти(мНазваниеКонфигурации, "розница") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0) тогда
		ТаблицаДляТСД.Колонки.Добавить("product_withsn");  // дополнительная колонка для серийного номера, 1- серийный номер есть, 0 - нет, префикс "product_" добавлен для добавления поля в продукт, а не в упаковку
	КонецЕсли;
	
	// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
	// ТаблицаДляТСД.Колонки.Добавить("product_withserial");  // дополнительная колонка для серийного номера, 1- серийный номер есть, 0 - нет, префикс "product_" добавлен для добавления поля в продукт, а не в упаковку
    // - ZHKN. 13.02.2014.
	
	ВестиСерийныеНомера = не (Найти(мНазваниеКонфигурации, "розница") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0);
	
	// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
	ВестиСерииНоменклатуры 	= не (Найти(мНазваниеКонфигурации, "розница") > 0 или 
								Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 или
								Найти(мНазваниеКонфигурации, "автосалон5") > 0 или
								Найти(мНазваниеКонфигурации, "штрихм") > 0);
								
	Если ВестиСерииНоменклатуры Тогда
		ТаблицаДляТСД.Колонки.Добавить("product_withserial");  // дополнительная колонка для серий номенклатуры, 1- есть серия, 0 - нет, префикс "product_" добавлен для добавления поля в продукт, а не в упаковку
	КонецЕсли;								
	// - ZHKN. 13.02.2014.
	
	ТоварыСБазовойЕдиницей = Новый Соответствие;
	ТоварыСБазовойЕдиницей.Вставить("Номенклатура");
	
	//+ZHKN. 09.02.2015. №321 Оптимизировать код
	мКолонки = Новый Соответствие;
	Для Каждого мКолонка Из ТаблицаДляТСД.Колонки Цикл
		мКолонки.Вставить(мКолонка.Имя, мКолонка.Имя);	
	КонецЦикла;	
	//-ZHKN. 09.02.2015.
	
 	Для Каждого СтрокаТовара Из СписокТоваровДляВыгрузки Цикл
		Если СтрокаТовара.Выгружать Тогда
			СтрокаТаблицы = ТаблицаДляТСД.Добавить();      
			
			ШтрихкодТовара = СокрЛП(Формат(СтрокаТовара.Код,"ЧГ=0")); 			
			Если ЗначениеИмеетПравильныйФормат(ШтрихкодТовара) Тогда 				
				СтрокаТаблицы.ШтрихкодТовара = ШтрихкодТовара;
			КонецЕсли;
			
			СтрокаТаблицы.Код = XMLСтрока(СтрокаТовара.НоменклатураСсылка);
			
			Штрихкод = СокрЛП(Формат(СтрокаТовара.Штрихкод,"ЧГ=0"));
			Если ЗначениеИмеетПравильныйФормат(Штрихкод) Тогда 			
				СтрокаТаблицы.Штрихкод = Штрихкод;
			КонецЕсли;
			
			СтрокаТаблицы.Наименование        = ПроверкаНаЗарезервированныеСимволы(СокрЛП(СтрокаТовара.Номенклатура));
			СтрокаТаблицы.ЕдиницаИзмерения    = СокрЛП(СтрокаТовара.ЕдиницаИзмеренияСсылка);
            СтрокаТаблицы.КоличествоВУпаковке = СтрокаТовара.Коэффициент;

			ХарактеристикаНоменклатуры = СокрЛП(СтрокаТовара.ХарактеристикаНоменклатурыСсылка);
			Если ЗначениеИмеетПравильныйФормат(ХарактеристикаНоменклатуры) Тогда 	
				СтрокаТаблицы.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
			КонецЕсли;
			
			СерияНоменклатуры = СокрЛП(СтрокаТовара.СерияНоменклатуры);
			Если ЗначениеИмеетПравильныйФормат(СерияНоменклатуры) Тогда 
				СтрокаТаблицы.СерияНоменклатуры = СерияНоменклатуры;
			КонецЕсли;
			
			СтрокаТаблицы.Цена = ?(не ЗначениеЗаполнено(СтрокаТовара.Цена),0,СтрокаТовара.Цена);
			СтрокаТаблицы.Количество = ?(не ЗначениеЗаполнено(СтрокаТовара.Количество),0,СтрокаТовара.Количество); 			
			
			СтрокаТаблицыАртикул = СокрЛП(СтрокаТовара.Артикул);
			Если ЗначениеИмеетПравильныйФормат(СтрокаТаблицыАртикул) Тогда
				СтрокаТаблицы.Артикул = СтрокаТаблицыАртикул;
			КонецЕсли;

			Если ВестиСерийныеНомера тогда
				СтрокаТаблицы.product_withsn = СтрокаТовара.ВестиСерийныеНомера;
			КонецЕсли;
			
			// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
			Если ВестиСерииНоменклатуры Тогда
				СтрокаТаблицы.product_withserial = СтрокаТовара.ЕстьСерии;
			КонецЕсли;
			// - ZHKN. 13.02.2014.
			
			СтрокаТаблицы.ФлагБазовойЕдиницы = СтрокаТовара.ФлагБазовойЕдиницы; //+AVA. 28.02.2014. №45
		//	//+AVA. 07.03.2014. №78. Нужно добавить строку с базовой единицей измерения.
		//Если ТоварыСБазовойЕдиницей["Номенклатура"] <> СтрокаТовара.НоменклатураСсылка  и СтрокаТаблицы.ФлагБазовойЕдиницы  Тогда 
		//		Если (ЗначениеЗаполнено(СтрокаТовара.СерияНоменклатуры)ИЛИ ЗначениеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры)) Тогда
		//			СтрокаСБазовойЕдиницейИзмерения = ТаблицаДляТСД.Добавить(); 
		//			ЗаполнитьЗначенияСвойств(СтрокаСБазовойЕдиницейИзмерения,СтрокаТаблицы);
		//			СтрокаСБазовойЕдиницейИзмерения.СерияНоменклатуры          = "";
		//			СтрокаСБазовойЕдиницейИзмерения.ХарактеристикаНоменклатуры = "";
		//			СтрокаСБазовойЕдиницейИзмерения.Штрихкод                   = ""; 
		//			Если ЗначениеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры) Тогда  //цена не привязывается к серии
		//				СтрокаСБазовойЕдиницейИзмерения.Цена                       =  0; 
		//			КонецЕсли;
		//			СтрокаСБазовойЕдиницейИзмерения.Количество                 =  0;  
		//			ТаблицаДляТСД.Сдвинуть(СтрокаСБазовойЕдиницейИзмерения, -1);
		//		КонецЕсли;
		//		ТоварыСБазовойЕдиницей.Вставить("Номенклатура", СтрокаТовара.НоменклатураСсылка); 
		//КонецЕсли; 			
		//	//-AVA. 07.03.2014. №78. Нужно добавить строку с базовой единицей измерения.
		
			// +ZHKN. 09.07.2014. №152 Мобильная печать
			Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
				//+ZHKN. 09.02.2015. №321 Оптимизировать код
				Если мКолонки.Получить(мПараметр.Значение) <> Неопределено Тогда
				//-ZHKN. 09.02.2015.
					Выполнить("СтрокаТаблицы."+мПараметр.Значение+" = СтрокаТовара."+мПараметр.Значение);
				КонецЕсли;
			КонецЦикла;
			// -ZHKN. 09.07.2014.
		КонецЕсли;
	КонецЦикла;
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	Если Объект = Неопределено Тогда
		Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если Найти(мТипПодключенногоДрайвера,"Batch")>0 Тогда    		
		Объект.Драйвер.УстановитьПоискПоНаименованиюИАртикулу(УстановитьПоискПоНаименованиюИАртикулу);
	КонецЕсли;	
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0
		или Найти(мНазваниеКонфигурации, "штрихм") > 0 
		или Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
 		Результат =  Обработка.ВыгрузитьТаблицу(Объект, ТаблицаДляТСД);
		ДатаОкончанияЗаполнения = ТекущаяДата();
		Если Результат <> мНетОшибки Тогда
			Ошибка = Объект.ОписаниеОшибки;
			Предупреждение("ВНИМАНИЕ! Произошла ошибка.
			|Возможно товар не выгружен, либо выгружен частично
			|Ошибка: " + Ошибка);
		Иначе
			Если ВыводитьОтладочныеСообщения тогда
				Сообщить("Выгрузка номенклатуры, операция завершена, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоСтрокДляВыгрузки);
			КонецЕсли;  
			Предупреждение("Выгрузка успешно завершена.
			|Выгружено строк: " + Формат(СписокТоваровДляВыгрузки.Количество(), "ЧГ=0") + ".");
			
			ПовторнаяВыгрузка = Истина;
			КоличествоПоследнейВыгрузки = СписокТоваровДляВыгрузки.Количество();
		КонецЕсли;
	Иначе
		Если Обработка.ВыгрузитьТаблицу(Объект, ТаблицаДляТСД) <> мНетОшибки Тогда			
			Ошибка = "";
			Если Найти(мНазваниеКонфигурации,"розница") >0 Тогда
				Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТСДТО(Результат)");
			Иначе
				Выполнить("Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат)");
			КонецЕсли;
			Предупреждение("ВНИМАНИЕ! Произошла ошибка.
			|Возможно товар не выгружен, либо выгружен частично
			|Ошибка: " + ?(ЗначениеЗаполнено(Ошибка),Ошибка,Объект.ОписаниеОшибки));			
		Иначе
			Если ВыводитьОтладочныеСообщения тогда
				Сообщить("Выгрузка номенклатуры, операция завершена, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоСтрокДляВыгрузки);
			КонецЕсли;  
			Предупреждение("Выгрузка успешно завершена.
			|Выгружено строк: " + Формат(СписокТоваровДляВыгрузки.Количество(), "ЧГ=0") + ".");	
			
			ПовторнаяВыгрузка = Истина;
			КоличествоПоследнейВыгрузки = СписокТоваровДляВыгрузки.Количество();
		КонецЕсли;
	КонецЕсли;  	
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "Выгрузить"
// командной панели "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Выгрузить"
//
Процедура ОсновныеДействияФормыВыгрузить(Кнопка, МассивВыгрузки)
	
	Результат = Неопределено;
	
	ВыгрузитьПропустивЗаполнениеСписка = МассивВыгрузки <> Неопределено;
	
	ДатаНачалаОперации = ТекущаяДата();
	
	Если не ВыгрузитьПропустивЗаполнениеСписка Тогда
		МассивВыгрузки = СписокТоваров.НайтиСтроки(Новый Структура("Выгружать",Истина));	
	КонецЕсли;
	
    КоличествоСтрокДляВыгрузки = Строка(МассивВыгрузки.Количество());
	
	Если МассивВыгрузки.Количество() = 0 Тогда
		Предупреждение("Нет данных для выгрузки.");
		Возврат;
	КонецЕсли;
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	Если Объект = Неопределено Тогда
		Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;  	
	
	Если ПовторнаяВыгрузка Тогда
		
		Обработка = Неопределено;
		Объект    = Неопределено;
		
		Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
		
		Если Объект = Неопределено Тогда
			Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		// Не Батч
		Если Найти(мТипПодключенногоДрайвера,"Batch") = 0 Тогда
			
			сТекст = "";
			
			// Если Объект.Параметры.ТипСвязи = "RDPСвязь" Тогда
			Если Объект.Параметры.ОбменЧерезПапку Тогда
				// для режима "папки обмена"
				сТекст = "Вы уже выгружили эти товары в папку обмена!" + Символы.ПС;
			Иначе
				// для режима сервера
				сТекст = "Вы уже выгрузили эти товары на сервер!" + Символы.ПС;	
			КонецЕсли;
			
			сТекст = сТекст + "Повторная выгрузка не требуется.";
			Предупреждение(сТекст);
			Возврат;
		КонецЕсли;
		
		// Батч режим "папка обмена"
		Если Объект.Параметры.ОбменЧерезПапку Тогда
				сТекст = "Вы уже выгружили эти товары в папку обмена!" + Символы.ПС;
				сТекст = сТекст + "Повторная выгрузка не требуется.";
				Предупреждение(сТекст);
				Возврат;
		КонецЕсли;
		
		Если Не Объект.Драйвер.ВыгрузитьСуществующийСправочник() Тогда
			Предупреждение("ВНИМАНИЕ! Произошла ошибка.
			|Возможно товар не выгружен, либо выгружен частично
			|Ошибка: " + Объект.ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		
		Если ВыводитьОтладочныеСообщения Тогда
			Сообщить("Выгрузка номенклатуры, операция завершена, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоПоследнейВыгрузки);
		КонецЕсли;  
		
		Предупреждение("Выгрузка успешно завершена.
		|Выгружено строк: " + Формат(КоличествоПоследнейВыгрузки, "ЧГ=0") + ".");
			
		Возврат;
		
	КонецЕсли; // Если ПовторнаяВыгрузка

	Ошибка     = "";
	КолвоСтрок = 0;
	
	Если ФлажокМобильнаяПечать Тогда
		мДанные = Новый Массив(25);
	Иначе
		мДанные = Новый Массив(15);
	КонецЕсли;
	мДанные.Установить(  0, "Product.Id" );
	мДанные.Установить(  1, "Product.Marking" );
	мДанные.Установить(  2, "Product.Barcode" ); // Код товара
	мДанные.Установить(  3, "Packing.Barcode" );
	мДанные.Установить(  4, "Product.Name" );
	мДанные.Установить(  5, "Product.BasePackingId" );
	мДанные.Установить(  6, "Packing.Id" );
	мДанные.Установить(  7, "Packing.Name" );
	мДанные.Установить(  8, "Packing.UnitsQuantity" );
	мДанные.Установить(  9, "Packing.descr" );
	мДанные.Установить( 10, "Packing.serial" );	
	мДанные.Установить( 11, "Packing.price" );
	мДанные.Установить( 12, "Packing.qty" );
	мДанные.Установить( 13, "Product.withserial" );
	мДанные.Установить( 14, "Product.withsn" );  	
	Если ФлажокМобильнаяПечать Тогда
		мДанные.Установить( 15, "Product.AdditionInfo" ); 	//Доп. информация
		мДанные.Установить( 16, "Product.data" );         	//Дата
		мДанные.Установить( 17, "Packing.ExpiredDate" );  	//Срок годности
		мДанные.Установить( 18, "Product.oldPrice" );     	//Старая цена
		мДанные.Установить( 19, "Product.sellerName" );   	//Имя продавца
		мДанные.Установить( 20, "Packing.sellerAddress" );  //Адрес продавца
		мДанные.Установить( 21, "Packing.producerCountry" );//Страна производства
		мДанные.Установить( 22, "Packing.producerName" );   //Имя производителя
		мДанные.Установить( 23, "Packing.supplierName" );   //Имя поставщика
		мДанные.Установить( 24, "Packing.supplierAddress" );//Адрес поставщика
	КонецЕсли;
	
	ИдТовара				= Неопределено;
	Код 					= Неопределено;
	Штрихкод 				= Неопределено;
	Наименование 			= Неопределено;
	ЕдиницаИзмерения 		= Неопределено;
	Характеристика 			= Неопределено;
	Серия 					= Неопределено;
	КачествоНаименование 	= Неопределено;
	Цена 					= Неопределено;	
	Количество 				= Неопределено;
	Артикул 				= Неопределено;
	Коэфф 					= Неопределено;
	ФлагБазовойЕдиницы 		= Неопределено;
	СтатусУказанияСерий 	= Неопределено;
	ЕстьСерии 				= Неопределено;
  
	
	ВестиСерийныеНомера = не (Найти(мНазваниеКонфигурации, "розница") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0);
	
	// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
	ВестиСерииНоменклатуры 	= не (Найти(мНазваниеКонфигурации, "розница") > 0 или 
								Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 или
								Найти(мНазваниеКонфигурации, "автосалон5") > 0 или
								Найти(мНазваниеКонфигурации, "штрихм") > 0);
 							
	// - ZHKN. 13.02.2014.
	
	Если Не Объект.Драйвер.НачатьВыгрузкуТоваров(мДанные) Тогда
 		Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Предупреждение("Ошибка при инициализации выгрузки: " + Объект.ОписаниеОшибки );
		Сообщить( "Ошибка при инициализации выгрузки: " + Объект.ОписаниеОшибки, СтатусСообщения.Важное );
		Объект.Драйвер.ОсвободитьРесурсы();
		Возврат;
	КонецЕсли;
	
	ВыгрСчетчик = 0;
	Прервано = Ложь;
	
	Если ВыгрузитьПропустивЗаполнениеСписка Тогда
		Конфигурация_автосалон5                       = Найти(мНазваниеКонфигурации, "автосалон5") > 0;
		Конфигурация_далионуправлениемагазином        = Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0;
		Конфигурация_управлениеторговлейдляказахстана = Найти(мНазваниеКонфигурации, "управлениеторговлейдляказахстана") > 0;
		Конфигурация_штрихм                           = Найти(мНазваниеКонфигурации, "штрихм") > 0;
		
		ИспШаблоныВесовогоТовара = Неопределено;
		Если не Объект.Параметры.Свойство("ИспШаблоныВесовогоТовара", ИспШаблоныВесовогоТовара) Тогда
			ИспШаблоныВесовогоТовара = Ложь;
		КонецЕсли;	
		
		времПрефиксВесовогоТовара = Неопределено;
		Объект.Параметры.Свойство("ПрефиксВесовогоТовара", времПрефиксВесовогоТовара);
		ПрефиксВесовогоТовара = ?(не ЗначениеЗаполнено(времПрефиксВесовогоТовара), ПолучитьПрефиксВесовогоТовара(), времПрефиксВесовогоТовара);
		
		времДлинаКодаВесовогоТовара = Неопределено;
		Объект.Параметры.Свойство("ДлинаКодаВесовогоТовара", времДлинаКодаВесовогоТовара);
		ДлинаКодаВесовогоТовара = ?(не ЗначениеЗаполнено(времДлинаКодаВесовогоТовара), ПолучитьДлинуКодаВесовогоТовара(), времДлинаКодаВесовогоТовара);
		
		времЧислоЗнаковПослеЗапВВесе = Неопределено;
		Объект.Параметры.Свойство("ЧислоЗнаковПослеЗапВВесе", времЧислоЗнаковПослеЗапВВесе);
		ЧислоЗнаковПослеЗапВВесе = ?(времЧислоЗнаковПослеЗапВВесе = Неопределено, 2, времЧислоЗнаковПослеЗапВВесе);
		
		МаксЗнач      = 12 - СтрДлина(ПрефиксВесовогоТовара) - ДлинаКодаВесовогоТовара;
		Вес           = "";
		
		ПередЗапЗн = МаксЗнач - ЧислоЗнаковПослеЗапВВесе;
		
		Для Индекс = 1 По МаксЗнач Цикл		Вес = Вес + "0";КонецЦикла;
		ДлинаКода = Формат(ДлинаКодаВесовогоТовара, "ЧГ=0"); 		
	КонецЕсли;
		
 	Пока МассивВыгрузки.Следующий() Цикл
		
		СтрокаТовара = МассивВыгрузки;
		
		Штрихкод = СокрЛП(СтрокаТовара.Штрихкод);
		
		Если ВыгрузитьПропустивЗаполнениеСписка Тогда
			Если Конфигурация_далионуправлениемагазином или Конфигурация_штрихм тогда
				Если ИспШаблоныВесовогоТовара и СтрокаТовара.Весовой и ЗначениеЗаполнено(ПрефиксВесовогоТовара) Тогда
					ТипШКEAN13 = Ложь;
					Штрихкод = СтрЗаменить(СтрокаТовара.Штрихкод, Символы.НПП, ""); //+ZHKN. 21.04.2015. №379, №381 Ошибки Далион УМ
					Штрихкод = ?(ЗначениеЗаполнено(Штрихкод),Штрихкод,СтрокаТовара.Код);
					Если Конфигурация_далионуправлениемагазином Тогда
						Выполнить("ТипШКEAN13 = ПроверитьШтрихКод(СтрокаТовара.Штрихкод, ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13)");
					Иначе
						ТипШКEAN13 = СтрДлина(Штрихкод) = 13;
					КонецЕсли;   				
					Если не ТипШКEAN13 и СтрДлина(Штрихкод) <=ДлинаКодаВесовогоТовара Тогда
						ПередЗапЗн = МаксЗнач - ЧислоЗнаковПослеЗапВВесе;
						Штрихкод = ПрефиксВесовогоТовара + Формат(Число(Штрихкод), "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0");
						Штрихкод = Штрихкод + "{Quantity:" + ПередЗапЗн + "." + ЧислоЗнаковПослеЗапВВесе + "}{x:1}";
					КонецЕсли;
				Иначе
					Если СтрокаТовара.Штрихкод = СтрокаТовара.Код Тогда
						Штрихкод = "";
					КонецЕсли;    				
				КонецЕсли;			
			иначе
				Если ИспШаблоныВесовогоТовара и СтрокаТовара.Весовой Тогда
					Штрихкод = ПрефиксВесовогоТовара + Формат(Число(СтрокаТовара.Штрихкод), "ЧЦ=" + ДлинаКодаВесовогоТовара + "; ЧВН=; ЧГ=0") + "{Quantity:" + ПередЗапЗн + "." + ЧислоЗнаковПослеЗапВВесе + "}{x:1}";
  	 			КонецЕсли;
			КонецЕсли;
			
			Если ВыгрузитьПропустивЗаполнениеСписка и ФлажокМобильнаяПечать Тогда			
				ДопИнфо         		= "";
				ДатаТов         		= "";
				СрокГодности    		= "";
				СтараяЦена      		= "";
				ИмяПродавца     		= "";
				АдресПродавца   		= "";
				СтранаПроизводства 		= "";
				ИмяПроизводителя 		= "";
				ИмяПоставщика  			= "";
				АдресПоставщика 		= "";
				
				мТипЦен = Неопределено;
				
				Если ПереключательОптовыеЦены И ЗначениеЗаполнено(ТипЦен) Тогда
					мТипЦен = ТипЦен;
				КонецЕсли;
				
				Если Не ПереключательОптовыеЦены И ЗначениеЗаполнено(СкладАТТ) Тогда	
					Если Конфигурация_автосалон5 Тогда 	
						мТипЦен = СкладАТТ.Подразделение.ТипЦен;	
					Иначе
						мТипЦен = СкладАТТ.ТипЦен;	
					КонецЕсли;
				КонецЕсли;
				
				мЗначения = ПолучитьПараметрыМобильнойПечатиДляТовара(СтрокаТовара, мТипЦен);
				
				ДопИнфо         		= Строка(мЗначения["AdditionInfo"]);
				ДатаТов         		= мЗначения["data"];
				СрокГодности    		= мЗначения["ExpiredDate"];
				СтараяЦена      		= мЗначения["oldPrice"];
				ИмяПродавца     		= Строка(мЗначения["sellerName"]);
				АдресПродавца   		= Строка(мЗначения["sellerAddress"]);
				СтранаПроизводства 		= Строка(мЗначения["producerCountry"]);
				ИмяПроизводителя 		= Строка(мЗначения["producerName"]);
				ИмяПоставщика  			= Строка(мЗначения["supplierName"]);
				АдресПоставщика 		= Строка(мЗначения["supplierAddress"]);
			КонецЕсли;
		КонецЕсли;
		
		Код = СокрЛП(Формат(СтрокаТовара.Код,"ЧГ=0")); 			
		Если не ЗначениеИмеетПравильныйФормат(Код) Тогда 				
			Код = "";
		КонецЕсли;
 
		ИдТовара = XMLСтрока(СтрокаТовара.НоменклатураСсылка);		
		 
		Наименование        = ПроверкаНаЗарезервированныеСимволы(СокрЛП(СтрокаТовара.Номенклатура));
		ЕдиницаИзмерения    = СокрЛП(СтрокаТовара.ЕдиницаИзмерения);
		КоличествоВУпаковке = СтрокаТовара.Коэффициент;
		
		Характеристика = СокрЛП(СтрокаТовара.ХарактеристикаНоменклатурыСсылка);
		Если не ЗначениеИмеетПравильныйФормат(Характеристика) Тогда 	
			Характеристика = "";
		КонецЕсли;
		
		СерияНоменклатуры = СокрЛП(СтрокаТовара.СерияНоменклатуры);
		Если не ЗначениеИмеетПравильныйФормат(СерияНоменклатуры) Тогда 
			СерияНоменклатуры = "";
		КонецЕсли;
		
		Цена = ?(не ЗначениеЗаполнено(СтрокаТовара.Цена),0,СтрокаТовара.Цена);
		Количество = ?(не ЗначениеЗаполнено(СтрокаТовара.Количество),0,СтрокаТовара.Количество); 			
		
		Артикул = СокрЛП(СтрокаТовара.Артикул);
		Если не ЗначениеИмеетПравильныйФормат(Артикул) Тогда
			Артикул = "";
		КонецЕсли;
		
		Если ВестиСерийныеНомера тогда
			product_withsn = СтрокаТовара.ВестиСерийныеНомера;
		КонецЕсли;
		
		// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
		Если ВестиСерииНоменклатуры Тогда
			product_withserial = СтрокаТовара.ЕстьСерии;
		КонецЕсли;
		// - ZHKN. 13.02.2014.
		
		ФлагБазовойЕдиницы 		= ?(СтрокаТовара["ФлагБазовойЕдиницы"], Строка(СтрокаТовара.ЕдиницаИзмерения), "");
		
		мДанные.Установить(  0, ИдТовара );            //"Product.Id" 
		мДанные.Установить(  1, Артикул );             //"Product.Marking"
		мДанные.Установить(  2, Код );                 //"Product.Barcode"
		мДанные.Установить(  3, Штрихкод );            //"Packing.Barcode" 
		мДанные.Установить(  4, Наименование );        //"Product.Name"
		мДанные.Установить(  5, ФлагБазовойЕдиницы );  //"Product.BasePackingId" 
		мДанные.Установить(  6, ЕдиницаИзмерения );    //"Packing.Id"
		мДанные.Установить(  7, ЕдиницаИзмерения );    //"Packing.Name" 
		мДанные.Установить(  8, Коэфф );               //"Packing.UnitsQuantity" 
		мДанные.Установить(  9, Характеристика );      //"Packing.descr"
		мДанные.Установить( 10, Серия );	           //"Packing.serial" 
		мДанные.Установить( 11, Цена );                //"Packing.price" 
		мДанные.Установить( 12, Количество );          //"Packing.qty" 
		мДанные.Установить( 13, ЕстьСерии );           //"Product.withserial"
		мДанные.Установить( 14, СтатусУказанияСерий ); //"Product.withsn"
		
		Если ФлажокМобильнаяПечать Тогда
			мДанные.Установить(  15, ДопИнфо );            //"Product.AdditionInfo"
			мДанные.Установить(  16, ДатаТов );            //"Product.data" 
			мДанные.Установить(  17, СрокГодности );       //"Packing.ExpiredDate" 
			мДанные.Установить(  18, СтараяЦена );         //"Product.oldPrice"
			мДанные.Установить(  19, ИмяПродавца );        //"Product.sellerName"
			мДанные.Установить(  20, АдресПродавца );      //"Packing.sellerAddress"
			мДанные.Установить(  21, СтранаПроизводства ); //"Packing.producerCountry"
			мДанные.Установить(  22, ИмяПроизводителя );   //"Packing.producerName"
			мДанные.Установить(  23, ИмяПоставщика );      //"Packing.supplierName"
			мДанные.Установить(  24, АдресПоставщика );	   //"Packing.supplierAddress"  
		КонецЕсли;
		
		// Выгрузка	
		Если Не Объект.Драйвер.ДобавитьВВыгрузкуТоваров(мДанные) Тогда 			
			Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки); 			
			Сообщить("Ошибка при выгрузке данных: " + ". " + Объект.ОписаниеОшибки, СтатусСообщения.Важное );			
			Прервано = Истина;
			Прервать;
		КонецЕсли; 
  		
		ВыгрСчетчик = ВыгрСчетчик + 1;  
	КонецЦикла;
	
	Если ВыводитьОтладочныеСообщения тогда
		Сообщить("Выгрузка номенклатуры, до вызова метода ""ЗавершитьВыгрузкуТоваров"" , сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+ВыгрСчетчик);
	КонецЕсли;   

	Если Не Объект.Драйвер.ЗавершитьВыгрузкуТоваров() Тогда
		НомерОшибки = Объект.Драйвер.ПолучитьОшибку(Объект.ОписаниеОшибки);
		Сообщить("Ошибка при завершении выгрузки: " + Объект.ОписаниеОшибки);
		Прервано = Истина;
	КонецЕсли;	
	
	Если ВыводитьОтладочныеСообщения тогда
		Сообщить("Выгрузка номенклатуры, до вызова процедуры ОсвободитьРесурсы, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоСтрокДляВыгрузки);
	КонецЕсли;  
	
	Объект.Драйвер.ОсвободитьРесурсы();   	
 	
	ДатаОкончанияЗаполненияЗавершитьВыгрузку = ТекущаяДата();
	
	Если не Прервано Тогда
		Завершено = Истина;
		ПовторнаяВыгрузка = Истина;
		КоличествоПоследнейВыгрузки = МассивВыгрузки.количество();
		
		Если не ВыводитьОтладочныеСообщения Тогда
			Если Завершено И НЕ Прервано Тогда
				Предупреждение("Выгрузка завершена. Выгружено " + ВыгрСчетчик + " позиций."); // ZHKN. 21.07.2014. №191 Модальные Окна
			Иначе  
				Предупреждение("Выгрузка не выполнена!"); // ZHKN. 21.07.2014. №191 Модальные Окна
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьОтладочныеСообщения тогда
			Сообщить("Выгрузка номенклатуры, операция завершена, сек:" + Строка(ТекущаяДата() - ДатаНачалаОперации)+", количество строк: "+КоличествоСтрокДляВыгрузки);
		КонецЕсли;  
	КонецЕсли;
	
	Объект.Драйвер.УстановитьПоискПоНаименованиюИАртикулу(УстановитьПоискПоНаименованиюИАртикулу);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
// Параметры
//  Отказ                – <Булево> 
//                       – признак отказа от открытия формы; если в теле 
//                         процедуры-обработчика установить данному параметру 
//                         значение Истина, открытие формы выполнено не будет.
//
//  СтандартнаяОбработка – <Булево> 
//                       –  в данный параметр передается признак выполнения 
//                          стандартной (системной) обработки события; если в 
//                          теле процедуры-обработчика установить данному 
//                          параметру значение Ложь, стандартная обработка 
//                          события производиться не будет. Отказ от 
//                          стандартной обработки не отменяет открытие формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Отказ = (мСписокТерминалов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()
	
	ВыводитьОтладочныеСообщения = ТекущаяДата() <= Дата("20150220");

	ЭлементыФормы.ПолеТовары.Колонки.СерияНоменклатуры.Видимость = мИспользоватьСерии;
	Если Метаданные.справочники.Найти("Качество") = Неопределено Тогда
		ЭлементыФормы.ПолеТовары.Колонки.Качество.Видимость = Ложь;
	КонецЕсли;
	
	Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ЭлементыФормы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КатегорииЦен"); 
		ТипЦен = ЭлементыФормы.ТипЦен.ОграничениеТипа.ПривестиЗначение(ТипЦен);
		ЭлементыФормы.СкладАТТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады"); 
		СкладАТТ = ЭлементыФормы.СкладАТТ.ОграничениеТипа.ПривестиЗначение(СкладАТТ);

		СписокТерминалов = новый СписокЗначений;
		Для Каждого Устройство Из мСписокТерминалов Цикл
			СписокТерминалов.Добавить(Строка(Устройство.УникальныйИдентификатор()), Устройство.Наименование);
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		ЭлементыФормы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"); 
		ТипЦен = ЭлементыФормы.ТипЦен.ОграничениеТипа.ПривестиЗначение(ТипЦен);
		ЭлементыФормы.СкладАТТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады"); 
		СкладАТТ = ЭлементыФормы.СкладАТТ.ОграничениеТипа.ПривестиЗначение(СкладАТТ);
		СписокТерминалов = новый СписокЗначений;
		Для Каждого Устройство Из мСписокТерминалов Цикл
			СписокТерминалов.Добавить(Строка(Устройство.УникальныйИдентификатор()), Устройство.Наименование);
		КонецЦикла;
	ИначеЕсли Найти(мНазваниеКонфигурации, "автосалон5") > 0 Тогда
		СписокТерминалов = мСписокТерминалов;
		ЭлементыФормы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыЦен"); 
		ТипЦен = ЭлементыФормы.ТипЦен.ОграничениеТипа.ПривестиЗначение(ТипЦен);
		
		ЭлементыФормы.СкладАТТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СкладыКомпании"); 
		СкладАТТ = ЭлементыФормы.СкладАТТ.ОграничениеТипа.ПривестиЗначение(СкладАТТ);
	Иначе
		Выполнить("ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма)");
		СписокТерминалов = "";
		Выполнить("СписокТерминалов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокТерминалов)");
		ЭлементыФормы.ТипЦен.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
		ТипЦен = ЭлементыФормы.ТипЦен.ОграничениеТипа.ПривестиЗначение(ТипЦен);
		Если Найти(мНазваниеКонфигурации, "розница") > 0 Тогда
			ЭлементыФормы.СкладАТТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Магазины"); 
		Иначе
			ЭлементыФормы.СкладАТТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");	
		КонецЕсли;
		СкладАТТ = ЭлементыФормы.СкладАТТ.ОграничениеТипа.ПривестиЗначение(СкладАТТ);
	КонецЕсли;
	
	ЭлементыФормы.ТерминалСбораДанных.СписокВыбора = СписокТерминалов;
	
	ТерминалСбораДанных                              = СписокТерминалов[0].Значение;
	ЭлементыФормы.ТерминалСбораДанных.ТолькоПросмотр = (СписокТерминалов.Количество() = 1);
	
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ЗначениеЗаполнено(НачальноеЗначениеВыбора) и  НачальноеЗначениеВыбора.Свойство("НастройкиТСД") Тогда  //AVA. 22.05.2014. №159.
		Если ТерминалСбораДанных <> xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД) Тогда
			ТерминалСбораДанных = xmlСтрока(НачальноеЗначениеВыбора.НастройкиТСД);
			ТерминалСбораДанныхПриИзменении(Неопределено);
 		КонецЕсли;
	Иначе
		ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
		Если ПоследняяРаботаСТО <> Неопределено и  СписокТерминалов.НайтиПоЗначению(ПоследняяРаботаСТО)<> Неопределено Тогда
			ТерминалСбораДанных =  ПоследняяРаботаСТО;
			мСохрФормат = ВосстановитьЗначение(мИмяДляХраненияНастроек);
			ТерминалСбораДанныхПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Если Не мИспользоватьСерии Тогда
			Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["Серия"];
			Колонка.Видимость         = Ложь;
			Колонка.ИзменятьВидимость = Ложь;
		КонецЕсли;
		
		Если Не мИспользоватьХарактеристики Тогда
			Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["ХарактеристикаНоменклатуры"];
			Колонка.Видимость         = Ложь;
			Колонка.ИзменятьВидимость = Ложь;
		КонецЕсли;
	Исключение
	КонецПопытки;

	ЗаполнитьНачальныеНастройки();
	
	ВидимостьЭлементовФормы();
	
	//восстановить порядок колонок при последнем сохранении.начало.   //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	ПорядокКолонокТабличныхЧастей = ВосстановитьЗначение(ОбработкаОбъект.Метаданные().Имя + "ПорядокКолонокТабличныхПолей");
	Если ПорядокКолонокТабличныхЧастей <> Неопределено Тогда
		Попытка
			КолонкиТПТовары  = ПорядокКолонокТабличныхЧастей.Товары;
			Для каждого Колонка из КолонкиТПТовары Цикл
				КолонкаТаблицы   =  ЭлементыФормы.ПолеТовары.Колонки.Найти(Колонка.Имя);
				ЗаполнитьЗначенияСвойств(КолонкаТаблицы,Колонка);
				ЭлементыФормы.ПолеТовары.Колонки.Сдвинуть(КолонкаТаблицы,КолонкиТПТовары.индекс(Колонка) -ЭлементыФормы.ПолеТовары.Колонки.Индекс(КолонкаТаблицы));				
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//восстановить порядок колонок при последнем сохранении.Окончание.
	
	// + ZHKN. 13.02.2014. №80. Новая работа с сериями.
	Колонка = ЭлементыФормы.ПолеТовары.Колонки["ЕстьСерии"];
	
	Если НоваяработаССериями Тогда
		Попытка
			Если мИспользоватьСерии Тогда
				//Колонка.Видимость = Истина; //AVA. 03.03.2014. закомментировал.
			Иначе
				Колонка.Видимость = Ложь;	
			КонецЕсли;
		Исключение
		КонецПопытки;
	Иначе
		Колонка.Видимость = Ложь;	
	КонецЕсли;

	Колонка.ИзменятьВидимость = Ложь;
	// - ZHKN. 13.02.2014. №80.

	//+AVA. 22.05.2014. №159.
 	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда // настройки для ШтрихМ
		Если НачальноеЗначениеВыбора.Свойство("Документ") Тогда
			Документ = НачальноеЗначениеВыбора.Документ;
			Отбор = ПостроительОтчета.Отбор;
			Отбор.Сбросить();
			СкладАТТ = Документ.Склад;
			ТипЦен = Документ.ТипЦен;
			
			Если Документ.Товары.Количество() = 1 Тогда
				Для Каждого СтрокаТоваров из Документ.Товары Цикл
					Товар = СтрокаТоваров.Номенклатура;
				КонецЦикла;	
				Если Отбор.Найти("Номенклатура") = Неопределено Тогда
					Отбор.Добавить("Номенклатура");
				КонецЕсли;
				Отбор["Номенклатура"].Использование = Истина;
				Отбор["Номенклатура"].ВидСравнения  = ВидСравнения.Равно;
				Отбор["Номенклатура"].Значение      = Товар;
			Иначе	
				СписокНоменклатурыДляВыгрузки = Новый СписокЗначений;
				Для Каждого СтрокаТоваров из Документ.Товары Цикл
					Товар = СтрокаТоваров.Номенклатура;
					СписокНоменклатурыДляВыгрузки.Добавить(Товар);
				КонецЦикла;	
				Если Отбор.Найти("Номенклатура") = Неопределено Тогда
					Отбор.Добавить("Номенклатура");
				КонецЕсли;
				Отбор["Номенклатура"].Использование = Истина;
				Отбор["Номенклатура"].ВидСравнения  = ВидСравнения.ВСписке;
				Отбор["Номенклатура"].Значение      = СписокНоменклатурыДляВыгрузки;
			КонецЕсли;
			ДействияФормыЗаполнить(ЭлементыФормы.ДействияФормы.Кнопки.Заполнить);
		ИначеЕсли НачальноеЗначениеВыбора.Свойство("Справочник") Тогда
			
			ЭлементДляВыгрузки = НачальноеЗначениеВыбора.Справочник;
			Отбор = ПостроительОтчета.Отбор;
			Отбор.Сбросить();
			СкладАТТ = Справочники.Склады.ПустаяСсылка();
			ТипЦен = Справочники.ТипыЦен.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(ЭлементДляВыгрузки) и Вопрос("Использовать в качестве отбора выделенную номенклатуру/группу номенклатуры?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Да  Тогда 			
				Если ЭлементДляВыгрузки.ЭтоГруппа Тогда
					Если Отбор.Найти("Номенклатура") = Неопределено Тогда
						Отбор.Добавить("Номенклатура");
					КонецЕсли;
					Отбор["Номенклатура"].Использование = Истина;
					Отбор["Номенклатура"].ВидСравнения  = ВидСравнения.ВИерархии;
					Отбор["Номенклатура"].Значение      = ЭлементДляВыгрузки;
				Иначе
					Если Отбор.Найти("Номенклатура") = Неопределено Тогда
						Отбор.Добавить("Номенклатура");
					КонецЕсли;
					Отбор["Номенклатура"].Использование = Истина;
					Отбор["Номенклатура"].ВидСравнения  = ВидСравнения.Равно;
					Отбор["Номенклатура"].Значение      = ЭлементДляВыгрузки;
				КонецЕсли;
			Иначе
				Если НачальноеЗначениеВыбора.Свойство("ОтборНоменклатуры") Тогда
					Для каждого СтрокаОтбора из  НачальноеЗначениеВыбора.ОтборНоменклатуры.Отбор Цикл
						Если СтрокаОтбора.Использование Тогда
							ИмяОтбора = "Номенклатура"+СтрокаОтбора.Имя;
							Если Отбор.Найти(ИмяОтбора) = Неопределено Тогда
								Отбор.Добавить("Номенклатура."+СтрокаОтбора.Имя);
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(Отбор[ИмяОтбора],СтрокаОтбора);
						КонецЕсли;
					КонецЦикла;
				Конецесли;
			Конецесли;
			
			ДействияФормыЗаполнить(ЭлементыФормы.ДействияФормы.Кнопки.Заполнить);
			
		КонецЕсли;	
	КонецЕсли;
	//-AVA. 22.05.2014. №159.	

	ЭлементыФормы.ПолеТовары.Колонки.producerAddress.Видимость = Ложь;
	ЭлементыФормы.ПолеТовары.Колонки.RegistrationDate.Видимость = Ложь;
	
	Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
		ЭлементыФормы.ПолеТовары.Колонки[мПараметр.Значение].Видимость = Ложь;
	КонецЦикла;
	
	//+AVA. 30.09.2014. №132.	
	ПолеШтрихкод = ПостроительОтчета.ДоступныеПоля.Найти("Штрихкод");
	Если ПолеШтрихкод <> Неопределено Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ПолеШтрихкод.ТипЗначения = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(100));
	КонецЕсли; 
	//-AVA. 30.09.2014. №132.
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	СтруктураСохраняемыхНастроек = Новый Структура();
	СтруктураСохраняемыхНастроек.Вставить("ПереключательОптовыеЦены", ПереключательОптовыеЦены);
	СтруктураСохраняемыхНастроек.Вставить("ТипЦен", ТипЦен);
	СтруктураСохраняемыхНастроек.Вставить("СкладАТТ", СкладАТТ);
	СтруктураСохраняемыхНастроек.Вставить("УстановитьПоискПоНаименованиюИАртикулу", УстановитьПоискПоНаименованиюИАртикулу);
	СтруктураСохраняемыхНастроек.Вставить("ПостроительОтчетаНастройки", ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
	СтруктураСохраняемыхНастроек.Вставить("МобильнаяПечать", ФлажокМобильнаяПечать); // ZHKN. 09.07.2014. №152 Мобильная печать	
	СохранитьЗначение(мИмяДляХраненияНастроек + ИмяПользователя(), СтруктураСохраняемыхНастроек);
	
	Если  Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 
		или  Найти(мНазваниеКонфигурации, "штрихм") > 0 
		или  Найти(мНазваниеКонфигурации, "автосалон5") > 0 
		Тогда
	Иначе	
		Выполнить("ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма)");
	КонецЕсли;

	СохранитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО",ТерминалСбораДанных);

	ПорядокКолонокТабличныхЧастей  = Новый Структура;
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Имя");
	ТаблицаТовары.Колонки.Добавить("Ширина");
	ТаблицаТовары.Колонки.Добавить("Видимость");
	Для каждого колонка из Элементыформы.ПолеТовары.Колонки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(),колонка);
	КонецЦикла;
	ПорядокКолонокТабличныхЧастей.Вставить("Товары", ТаблицаТовары); 
	СохранитьЗначение(ОбработкаОбъект.Метаданные().Имя+"ПорядокКолонокТабличныхПолей",ПорядокКолонокТабличныхЧастей); //ут 10.3 и т.д. обработка используется циклически, настройки не сохраняются
	

КонецПроцедуры // ПриЗакрытии()

// Процедура обработчик события элемента формы "ПереключательОптовыеЦены"
//
Процедура ПереключательОптовыеЦеныПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПереключательОптовыеЦеныПриИзменении()

// Процедура обработчик события элемента формы "ПереключательЦеныАТТ"
//
Процедура ПереключательЦеныАТТПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПереключательЦеныАТТПриИзменении()

// Процедура обработчик события "СкладАТТНачалоВыбора" элемента формы "СкладАТТ"
//
Процедура СкладАТТНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Попытка	
		Если Найти(мНазваниеКонфигурации, "розница") > 0 ИЛИ ПоддержкаМодификацийРозницы Тогда
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = Справочники.Магазины.ПолучитьФормуВыбора(, Элемент);
			Если ЗначениеЗаполнено(Элемент.Значение) тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
			КонецЕсли;  
			ФормаВыбора.Открыть();
		ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, Элемент);
			Если ЗначениеЗаполнено(Элемент.Значение) тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
			КонецЕсли;
			ФормаВыбора.Открыть();
		ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, Элемент);
			Если ЗначениеЗаполнено(Элемент.Значение) тогда
				ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;
			КонецЕсли;
			ФормаВыбора.Открыть();	
		ИначеЕсли Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = Справочники.СкладыКомпании.ПолучитьФормуВыбора(, Элемент);
			Если ЗначениеЗаполнено(Элемент.Значение) тогда
				ФормаВыбора.ЭлементыФормы.Список.ТекущаяСтрока = Элемент.Значение;
			КонецЕсли;
			ФормаВыбора.Отбор.Розничный.Установить(Истина);
			ФормаВыбора.Открыть();	
		Иначе
			Если ЗначениеЗаполнено(Элемент.Значение) тогда
				Выполнить("РаботаСДиалогами.НачалоВыбораСклада(Элемент, Перечисления.ВидыСкладов.Розничный, СтандартнаяОбработка)");
			КонецЕсли;
		КонецЕсли;
	Исключение
		Элемент.Значение = Неопределено;
	КонецПопытки;

КонецПроцедуры // СкладАТТНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность для элементов формы
//
// Параметры
//  Нет
//
Процедура УстановитьДоступность()

	ЭлементыФормы.ТипЦен.Доступность   = ПереключательОптовыеЦены;
	ЭлементыФормы.СкладАТТ.Доступность = НЕ ПереключательОптовыеЦены;

КонецПроцедуры // УстановитьДоступность()

// Процедура получает основной запрос
//
// Параметры нет
Процедура ЗаполнитьНачальныеНастройки()
	
	Если Найти(мНазваниеКонфигурации, "розница") > 0 или ПоддержкаМодификацийРозницы Тогда   		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РегТоварыНаСкладах.Номенклатура КАК Номенклатура,
		               |	РегТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	РегТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
		               |ПОМЕСТИТЬ ВТОстатки
		               |ИЗ
		               |	РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Склад).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК РегТоварыНаСкладах
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РегТоварыВРознице.Номенклатура,
		               |	РегТоварыВРознице.ХарактеристикаНоменклатуры,
		               |	РегТоварыВРознице.КоличествоОстаток
		               |ИЗ
		               |	РегистрНакопления.ТоварыКПоступлениюРеализации.Остатки(, {(Склад).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК РегТоварыВРознице
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕдиницыИзмерения.Владелец,
		               |	ЕдиницыИзмерения.Ссылка
		               |ПОМЕСТИТЬ ВТЕдиницыИзмерения
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |ГДЕ
		               |	ЕдиницыИзмерения.Владелец ССЫЛКА Справочник.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ПОМЕСТИТЬ ВТЦены
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЦеныНоменклатурыМагазиновСрезПоследних.Магазин,
		               |	ЦеныНоменклатурыМагазиновСрезПоследних.Номенклатура,
		               |	ЦеныНоменклатурыМагазиновСрезПоследних.ХарактеристикаНоменклатуры,
		               |	ЦеныНоменклатурыМагазиновСрезПоследних.ЕдиницаИзмерения,
		               |	ЦеныНоменклатурыМагазиновСрезПоследних.Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатурыМагазинов.СрезПоследних(, Магазин = &ТипЦен) КАК ЦеныНоменклатурыМагазиновСрезПоследних
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КодыВесовогоТовара.Номенклатура КАК Номенклатура,
		               |	КодыВесовогоТовара.Код,
		               |	КодыВесовогоТовара.ХарактеристикаНоменклатуры,
		               |	КодыВесовогоТовара.Номенклатура.ЕдиницаХраненияОстатков
		               |ПОМЕСТИТЬ ВТРегистрСведенийКодыТоваровPLU
		               |ИЗ
		               |	РегистрСведений.КодыТоваровPLU КАК КодыВесовогоТовара
		               |ГДЕ
		               |	КодыВесовогоТовара.Код <> 0
		               |	И КодыВесовогоТовара.Номенклатура.Весовой = ИСТИНА
		               |{ГДЕ
		               |	КодыВесовогоТовара.Номенклатура.* КАК Номенклатура}
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЛОЖЬ КАК Весовой,
		               |	Штрихкоды.Штрихкод КАК Штрихкод,
		               |	Штрихкоды.Владелец,
		               |	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |ПОМЕСТИТЬ ВТРегистрСведенийШтрихкоды
		               |ИЗ
		               |	РегистрСведений.Штрихкоды КАК Штрихкоды
		               |ГДЕ
		               |	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		               |{ГДЕ
		               |	Штрихкоды.Владелец.* КАК Номенклатура}
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КодыТоваров.Номенклатура.Код КАК Код,
		               |	&КодыТоваровНоменклатураАртикул КАК Артикул,
		               |	КодыТоваров.Весовой КАК Весовой,
		               |	ИСТИНА КАК Выгружать,
		               |	КодыТоваров.Штрихкод КАК Штрихкод,
		               |	КодыТоваров.Номенклатура КАК НоменклатураСсылка,
		               |	КодыТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
		               |	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСсылка,
		               |	КодыТоваров.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		               |	ПРЕДСТАВЛЕНИЕ(КодыТоваров.Номенклатура) КАК Номенклатура,
		               |	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	ВЫРАЗИТЬ(ЕСТЬNULL(РегОстатки.КоличествоОстаток, 0) / ВЫБОР
		               |			КОГДА КодыТоваров.ЕдиницаИзмерения.Коэффициент = 0
		               |				ТОГДА 1
		               |			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		               |		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		               |	NULL КАК СерияНоменклатуры,
		               |	ЛОЖЬ КАК ЕстьСерии,
		               |	NULL КАК Качество,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		               |			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		               |		ИНАЧЕ Цены.Цена
		               |	КОНЕЦ * КодыТоваров.ЕдиницаИзмерения.Коэффициент КАК Цена
		               |ПОМЕСТИТЬ ВТИтоговаяТаблица
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЛОЖЬ КАК Весовой,
		               |		Штрихкоды.Штрихкод КАК Штрихкод,
		               |		Штрихкоды.Владелец КАК Номенклатура,
		               |		Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |		Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		0 КАК КодВесовогоТовара
		               |	ИЗ
		               |		ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |	{ГДЕ
		               |		Штрихкоды.Штрихкод,
		               |		(0) КАК КодВесовогоТовара}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ИСТИНА,
		               |		КодыВесовогоТовара.Код,
		               |		КодыВесовогоТовара.Номенклатура,
		               |		КодыВесовогоТовара.ХарактеристикаНоменклатуры,
		               |		КодыВесовогоТовара.Номенклатура.ЕдиницаХраненияОстатков,
		               |		КодыВесовогоТовара.Код
		               |	ИЗ
		               |		ВТРегистрСведенийКодыТоваровPLU КАК КодыВесовогоТовара
		               |	{ГДЕ
		               |		КодыВесовогоТовара.Код КАК Штрихкод,
		               |		КодыВесовогоТовара.Код КАК КодВесовогоТовара}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЛОЖЬ,
		               |		Штрихкоды.Штрихкод,
		               |		ЕдиницыИзмерения.Владелец,
		               |		NULL,
		               |		ЕдиницыИзмерения.Ссылка,
		               |		0
		               |	ИЗ
		               |		ВТЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |			ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |			ПО (Штрихкоды.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
		               |	ГДЕ
		               |		Штрихкоды.Штрихкод ЕСТЬ NULL 
		               |		И (НЕ ЕдиницыИзмерения.Владелец В
		               |					(ВЫБРАТЬ
		               |						КодыВесовогоТовара.Номенклатура КАК Номенклатура
		               |					ИЗ
		               |						ВТРегистрСведенийКодыТоваровPLU КАК КодыВесовогоТовара))
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(ЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		Штрихкоды.Штрихкод КАК Штрихкод,
		               |		(0) КАК КодВесовогоТовара}) КАК КодыТоваров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			РегОстатки.Номенклатура КАК Номенклатура,
		               |			РегОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |			СУММА(РегОстатки.КоличествоОстаток) КАК КоличествоОстаток
		               |		ИЗ
		               |			ВТОстатки КАК РегОстатки
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РегОстатки.Номенклатура,
		               |			РегОстатки.ХарактеристикаНоменклатуры) КАК РегОстатки
		               |		ПО (РегОстатки.Номенклатура = КодыТоваров.Номенклатура)
		               |			И (РегОстатки.ХарактеристикаНоменклатуры = КодыТоваров.ХарактеристикаНоменклатуры)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК Цены
		               |		ПО КодыТоваров.Номенклатура = Цены.Номенклатура
		               |			И КодыТоваров.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
		               |		ПО КодыТоваров.Номенклатура = ВТЦены.Номенклатура
		               |			И (ВТЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		               |{ГДЕ
		               |	РегОстатки.КоличествоОстаток,
		               |	Цены.Цена,
		               |	КодыТоваров.ХарактеристикаНоменклатуры.*,
		               |	КодыТоваров.ЕдиницаИзмерения.*}
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТИтоговаяТаблица.Код,
		               |	ВТИтоговаяТаблица.Артикул,
		               |	ВТИтоговаяТаблица.Весовой,
		               |	ВТИтоговаяТаблица.Выгружать,
		               |	ВТИтоговаяТаблица.Штрихкод,
		               |	ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |	ВТИтоговаяТаблица.Коэффициент,
		               |	ВТИтоговаяТаблица.Номенклатура,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		               |	ВТИтоговаяТаблица.Количество,
		               |	ВТИтоговаяТаблица.СерияНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕстьСерии,
		               |	ВТИтоговаяТаблица.Качество,
		               |	ВТИтоговаяТаблица.Цена,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.ЕдиницаХраненияОстатков
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ФлагБазовойЕдиницы
		               |ИЗ
		               |	ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |			СУММА(1) КАК КоличествоСтрок,
		               |			СУММА(ВЫБОР
		               |					КОГДА ВТИтоговаяТаблица.Штрихкод = """"
		               |						ТОГДА 0
		               |					ИНАЧЕ 1
		               |				КОНЕЦ) КАК КоличествоШтрихкодов
		               |		ИЗ
		               |			ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ВТИтоговаяТаблица.НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка) КАК ТаблицаКоличествоСтрок
		               |		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ТаблицаКоличествоСтрок.НоменклатураСсылка
		               |			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка
		               |			И ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоСтрок, 0) > 1
		               |					И ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоШтрихкодов, 0) > 0
		               |					И ВТИтоговаяТаблица.Штрихкод = """"
		               |				ТОГДА ЛОЖЬ
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТаблицаКоличествоСтрок.НоменклатураСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.НоменклатураСсылка,
		               |	ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка,
		               |	ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка";		
		ЕстьРеквизитАртикулУНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул") <> Неопределено;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КодыТоваровНоменклатураАртикул",?(ЕстьРеквизитАртикулУНоменклатуры," КодыТоваров.Номенклатура.Артикул  "," "));
	ИначеЕсли Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Номенклатура.ЭтоГруппа,
		               |	Номенклатура.Код,
		               |	Номенклатура.БазоваяЕдиницаИзмерения,
		               |	Номенклатура.Ссылка,
		               |	Номенклатура.ШтрихКодВключаетКоличество
		               |ПОМЕСТИТЬ ВТНоменклатура
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	НЕ Номенклатура.ЭтоГруппа И
					   |	НЕ Номенклатура.Архивная
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХарактеристикиНоменклатуры.Владелец,
		               |	ХарактеристикиНоменклатуры.Ссылка
		               |ПОМЕСТИТЬ ВТХарактеристикиНоменклатуры
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |ГДЕ
		               |	ХарактеристикиНоменклатуры.Владелец В
		               |			(ВЫБРАТЬ
		               |				ВТНоменклатура.Ссылка
		               |			ИЗ
		               |				ВТНоменклатура КАК ВТНоменклатура)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕдиницыИзмерения.Код,
		               |	ЕдиницыИзмерения.Владелец,
		               |	ЕдиницыИзмерения.Ссылка
		               |ПОМЕСТИТЬ ВТЕдиницыИзмерения
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |ГДЕ
		               |	ЕдиницыИзмерения.Владелец В
		               |			(ВЫБРАТЬ
		               |				ВТНоменклатура.Ссылка
		               |			ИЗ
		               |				ВТНоменклатура КАК ВТНоменклатура)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ПОМЕСТИТЬ ВТЦены
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, КатегорияЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		               |ГДЕ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура В
		               |			(ВЫБРАТЬ
		               |				ВТНоменклатура.Ссылка
		               |			ИЗ
		               |				ВТНоменклатура КАК ВТНоменклатура)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Штрихкоды.Штрихкод КАК Штрихкод,
		               |	Штрихкоды.Номенклатура КАК Номенклатура,
		               |	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	Штрихкоды.НеИспользуется КАК НеИспользуется
		               |ПОМЕСТИТЬ ВТРегистрСведенийШтрихкоды
		               |ИЗ
		               |	РегистрСведений.Штрихкоды КАК Штрихкоды
		               |ГДЕ
		               |	НЕ Штрихкоды.НеИспользуется
		               |	И Штрихкоды.Номенклатура В
		               |			(ВЫБРАТЬ
		               |				ВТНоменклатура.Ссылка
		               |			ИЗ
		               |				ВТНоменклатура КАК ВТНоменклатура)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	КодыТоваров.Номенклатура.Код КАК Код,
		               |	КодыТоваров.Номенклатура.Артикул КАК Артикул,
		               |	ВЫБОР
		               |		КОГДА КодыТоваров.Номенклатура.ВыгружатьВВесы
		               |				ИЛИ КодыТоваров.ВесовойТовар
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Весовой,
		               |	ИСТИНА КАК Выгружать,
		               |	КодыТоваров.Штрихкод,
		               |	КодыТоваров.Номенклатура.Ссылка,
		               |	ЕСТЬNULL(КодыТоваров.ХарактеристикаНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.пустаяСсылка)) КАК ХарактеристикаНоменклатурыСсылка,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения, ИСТИНА) = ИСТИНА
		               |			ТОГДА КодыТоваров.Номенклатура.БазоваяЕдиницаИзмерения
		               |		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Ссылка
		               |	КОНЕЦ КАК ЕдиницаИзмеренияСсылка,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения, ИСТИНА) = ИСТИНА
		               |			ТОГДА ТабОстатки.Номенклатура.БазоваяЕдиницаИзмерения.Коэффициент
		               |		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		               |	КОНЕЦ КАК Коэффициент,
		               |	ПРЕДСТАВЛЕНИЕ(КодыТоваров.Номенклатура) КАК Номенклатура,
		               |	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		               |	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		               |			КОГДА ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения, ИСТИНА) = ИСТИНА
		               |				ТОГДА КодыТоваров.Номенклатура.БазоваяЕдиницаИзмерения
		               |			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Ссылка
		               |		КОНЕЦ) КАК ЕдиницаИзмерения,
		               |	ВЫРАЗИТЬ(ЕСТЬNULL(ТабОстатки.КоличествоОстаток, 0) / ВЫБОР
		               |			КОГДА ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения, ИСТИНА) = ИСТИНА
		               |				ТОГДА ТабОстатки.Номенклатура.БазоваяЕдиницаИзмерения.Коэффициент
		               |			ИНАЧЕ ВЫБОР
		               |					КОГДА КодыТоваров.ЕдиницаИзмерения.Коэффициент = 0
		               |						ТОГДА 1
		               |					ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		               |				КОНЕЦ
		               |		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		               |	NULL КАК СерияНоменклатуры,
		               |	ЛОЖЬ КАК ЕстьСерии,
		               |	NULL КАК Качество,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		               |			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		               |		ИНАЧЕ Цены.Цена
		               |	КОНЕЦ * ВЫБОР
		               |		КОГДА ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения, ИСТИНА) = ИСТИНА
		               |			ТОГДА ТабОстатки.Номенклатура.БазоваяЕдиницаИзмерения.Коэффициент
		               |		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		               |	КОНЕЦ КАК Цена
		               |ПОМЕСТИТЬ ВТИтоговаяТаблица
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		подзапросКодыНоменклатуры.Штрихкод КАК Штрихкод,
		               |		подзапросКодыНоменклатуры.Номенклатура КАК Номенклатура,
		               |		подзапросКодыНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |		подзапросКодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		подзапросКодыНоменклатуры.ВесовойТовар КАК ВесовойТовар
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			Штрихкоды.Штрихкод КАК Штрихкод,
		               |			Штрихкоды.Номенклатура КАК Номенклатура,
		               |			Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |			Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |			ЛОЖЬ КАК ВесовойТовар
		               |		ИЗ
		               |			ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |		{ГДЕ
		               |			Штрихкоды.Номенклатура.*,
		               |			(0) КАК ВнутреннийКодТовара}
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			ЗапросВнутренниеКодыТоваров.Код,
		               |			ЗапросВнутренниеКодыТоваров.Номенклатура,
		               |			ЗапросВнутренниеКодыТоваров.ХарактеристикаНоменклатуры,
		               |			ЗапросВнутренниеКодыТоваров.НоменклатураБазоваяЕдиницаИзмерения,
		               |			ЗапросВнутренниеКодыТоваров.ВесовойТовар
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				КодыВесовогоТовара.Код КАК Код,
		               |				КодыВесовогоТовара.Номенклатура КАК Номенклатура,
		               |				КодыВесовогоТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |				КодыВесовогоТовара.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения,
		               |				ИСТИНА КАК ВесовойТовар
		               |			ИЗ
		               |				РегистрСведений.ВнутренниеКодыТоваров КАК КодыВесовогоТовара
		               |			ГДЕ
		               |				ВЫБОР
		               |						КОГДА &ИспШаблоныВесовогоТовара = ЛОЖЬ
		               |							ТОГДА КодыВесовогоТовара.Номенклатура = ЛОЖЬ
		               |						ИНАЧЕ ИСТИНА
		               |					КОНЕЦ
		               |			{ГДЕ
		               |				КодыВесовогоТовара.Номенклатура.*}
		               |			
		               |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				Номенклатура.Код,
		               |				Номенклатура.Ссылка,
		               |				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		               |				Номенклатура.БазоваяЕдиницаИзмерения,
		               |				Номенклатура.ШтрихКодВключаетКоличество
		               |			ИЗ
		               |				ВТНоменклатура КАК Номенклатура
		               |			ГДЕ
		               |				ВЫБОР
		               |						КОГДА &ВнутреннийКодРавенКодуНоменклатуры = ИСТИНА И Номенклатура.Ссылка.ШтрихКодВключаетКоличество 
		               |							ТОГДА ИСТИНА
		               |						ИНАЧЕ Номенклатура.Ссылка = ЛОЖЬ
		               |					КОНЕЦ) КАК ЗапросВнутренниеКодыТоваров
		               |		{ГДЕ
		               |			ЗапросВнутренниеКодыТоваров.Код}
		               |		
		               |		ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |		ВЫБРАТЬ
		               |			ВложенныйЗапрос.Код,
		               |			ВложенныйЗапрос.Ссылка,
		               |			ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		               |			ВложенныйЗапрос.СсылкаБазоваяЕдиницаИзмерения,
		               |			ЛОЖЬ
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				СправочникНоменклатура.Код КАК Код,
		               |				СправочникНоменклатура.Ссылка КАК Ссылка,
		               |				ЗНАЧЕНИЕ(Справочник.Характеристикиноменклатуры.пустаяСсылка) КАК ХарактеристикаНоменклатуры,
		               |				СправочникНоменклатура.Ссылка.БазоваяЕдиницаИзмерения КАК СсылкаБазоваяЕдиницаИзмерения
		               |			ИЗ
		               |				ВТНоменклатура КАК СправочникНоменклатура
		               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |						Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |					ИЗ
		               |						ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |					ГДЕ
		               |						НЕ Штрихкоды.НеИспользуется) КАК ВложенныйЗапрос
		               |					ПО СправочникНоменклатура.БазоваяЕдиницаИзмерения = ВложенныйЗапрос.ЕдиницаИзмерения
		               |			ГДЕ
		               |				ВложенныйЗапрос.ЕдиницаИзмерения ЕСТЬ NULL 
		               |			{ГДЕ
		               |				СправочникНоменклатура.Ссылка КАК Номенклатура}
		               |			
		               |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				ЕдиницыИзмерения.Владелец.Код,
		               |				ЕдиницыИзмерения.Владелец.Ссылка,
		               |				ЗНАЧЕНИЕ(Справочник.Характеристикиноменклатуры.пустаяСсылка),
		               |				ЕдиницыИзмерения.Ссылка
		               |			ИЗ
		               |				ВТЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |						Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |					ИЗ
		               |						ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |					ГДЕ
		               |						НЕ Штрихкоды.НеИспользуется) КАК ВложенныйЗапрос1
		               |					ПО ЕдиницыИзмерения.Ссылка = ВложенныйЗапрос1.ЕдиницаИзмерения
		               |			ГДЕ
		               |				ВложенныйЗапрос1.ЕдиницаИзмерения ЕСТЬ NULL ) КАК ВложенныйЗапрос) КАК подзапросКодыНоменклатуры
		               |	{ГДЕ
		               |		подзапросКодыНоменклатуры.Номенклатура.*,
		               |		подзапросКодыНоменклатуры.Штрихкод}
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		подзапросКодыНоменклатуры.Штрихкод,
		               |		подзапросКодыНоменклатуры.Номенклатура,
		               |		подзапросКодыНоменклатуры.ЕдиницаИзмерения,
		               |		подзапросКодыНоменклатуры.ХарактеристикаНоменклатуры,
		               |		подзапросКодыНоменклатуры.ВесовойТовар) КАК КодыТоваров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			подзапросТовары.Номенклатура КАК Номенклатура,
		               |			подзапросТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |			СУММА(подзапросТовары.КоличествоОстаток) КАК КоличествоОстаток
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
		               |				ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |				ОстаткиНоменклатурыОстатки.КоличествоОстаток КАК КоличествоОстаток
		               |			ИЗ
		               |				РегистрНакопления.ОстаткиНоменклатуры.Остатки(, {(Склад).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК ОстаткиНоменклатурыОстатки
		               |			
		               |			ОБЪЕДИНИТЬ ВСЕ
		               |			
		               |			ВЫБРАТЬ
		               |				Номенклатура.Ссылка,
		               |				ХарактеристикиНоменклатуры.Ссылка,
		               |				0
		               |			ИЗ
		               |				ВТНоменклатура КАК Номенклатура
		               |					ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |					ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		               |			{ГДЕ
		               |				Номенклатура.Ссылка КАК Номенклатура}) КАК подзапросТовары
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			подзапросТовары.Номенклатура,
		               |			подзапросТовары.ХарактеристикаНоменклатуры) КАК ТабОстатки
		               |		ПО (ТабОстатки.Номенклатура = КодыТоваров.Номенклатура)
		               |			И (ТабОстатки.ХарактеристикаНоменклатуры = КодыТоваров.ХарактеристикаНоменклатуры)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК Цены
		               |		ПО КодыТоваров.Номенклатура = Цены.Номенклатура
		               |			И КодыТоваров.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
		               |		ПО КодыТоваров.Номенклатура = ВТЦены.Номенклатура
		               |			И (ВТЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		               |ГДЕ
		               |	КодыТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		               |	И НЕ КодыТоваров.Номенклатура.ЭтоГруппа
		               |{ГДЕ
		               |	Цены.Цена,
		               |	ТабОстатки.КоличествоОстаток,
		               |	КодыТоваров.ХарактеристикаНоменклатуры.*,
		               |	КодыТоваров.ЕдиницаИзмерения.*}
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТИтоговаяТаблица.Код,
		               |	ВТИтоговаяТаблица.Артикул,
		               |	ВТИтоговаяТаблица.Весовой,
		               |	ВТИтоговаяТаблица.Выгружать,
		               |	ВТИтоговаяТаблица.Штрихкод,
		               |	ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |	ВТИтоговаяТаблица.Коэффициент,
		               |	ВТИтоговаяТаблица.Номенклатура,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		               |	ВТИтоговаяТаблица.Количество,
		               |	ВТИтоговаяТаблица.СерияНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕстьСерии,
		               |	ВТИтоговаяТаблица.Качество,
		               |	ВТИтоговаяТаблица.Цена,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.БазоваяЕдиницаИзмерения
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ФлагБазовойЕдиницы,
		               |	ВЫРАЗИТЬ(ВТИтоговаяТаблица.Штрихкод КАК ЧИСЛО(15, 2)) КАК ВнутреннийКодТовара
		               |{ВЫБРАТЬ
		               |	Код,
		               |	Артикул,
		               |	Весовой,
		               |	Выгружать,
		               |	Штрихкод,
		               |	НоменклатураСсылка.*,
		               |	ХарактеристикаНоменклатурыСсылка.*,
		               |	ЕдиницаИзмеренияСсылка.*,
		               |	Коэффициент,
		               |	Номенклатура,
		               |	ХарактеристикаНоменклатуры,
		               |	ЕдиницаИзмерения,
		               |	Количество,
		               |	СерияНоменклатуры,
		               |	ЕстьСерии,
		               |	Качество,
		               |	Цена}
		               |ИЗ
		               |	ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |			СУММА(1) КАК КоличествоСтрок,
		               |			СУММА(ВЫБОР
		               |					КОГДА ВТИтоговаяТаблица.Штрихкод = """"
		               |						ТОГДА 0
		               |					ИНАЧЕ 1
		               |				КОНЕЦ) КАК КоличествоШтрихкодов
		               |		ИЗ
		               |			ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ВТИтоговаяТаблица.НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка) КАК ТаблицаКоличествоСтрок
		               |		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ТаблицаКоличествоСтрок.НоменклатураСсылка
		               |			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка
		               |			И ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоСтрок, 0) > 1
		               |					И ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоШтрихкодов, 0) > 0
		               |					И ВТИтоговаяТаблица.Штрихкод = """"
		               |				ТОГДА ЛОЖЬ
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |{ГДЕ
		               |	ВТИтоговаяТаблица.Цена,
		               |	ВТИтоговаяТаблица.Количество КАК КоличествоОстаток,
		               |	(ВЫРАЗИТЬ(ВТИтоговаяТаблица.Штрихкод КАК ЧИСЛО(15, 2))) КАК ВнутреннийКодТовара}
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВТИтоговаяТаблица.НоменклатураСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка.Наименование,
		               |	ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка";    		
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Владелец
		|ПОМЕСТИТЬ ВТЕдиницыИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Владелец
		|ПОМЕСТИТЬ ВТХарактеристикиНоменклатуры
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныКомпанииСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныКомпанииСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныКомпанииСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ЦеныКомпанииСрезПоследних.Цена) КАК Цена,
		|	МАКСИМУМ(ЦеныКомпанииСрезПоследних.Период) КАК Период
		|ПОМЕСТИТЬ ВТЦены
		|ИЗ
		|	РегистрСведений.ЦеныКомпании.СрезПоследних(
		|			,
		|			ТипЦен = &ТипЦен
		|				ИЛИ Склад = &ТипЦен {(Склад).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК ЦеныКомпанииСрезПоследних
		
		|СГРУППИРОВАТЬ ПО
		|	ЦеныКомпанииСрезПоследних.ХарактеристикаНоменклатуры,
		|	ЦеныКомпанииСрезПоследних.ЕдиницаИзмерения,
		|	ЦеныКомпанииСрезПоследних.Номенклатура
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
		|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	СУММА(ОстаткиНоменклатурыОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТостатки
		|ИЗ
		|	РегистрНакопления.ОстаткиНоменклатуры.Остатки(, {(Склад).* КАК Склад, (Фирма).* КАК Фирма, (Номенклатура).* КАК Номенклатура}) КАК ОстаткиНоменклатурыОстатки
		
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиНоменклатурыОстатки.Номенклатура,
		|	ОстаткиНоменклатурыОстатки.ХарактеристикаНоменклатуры
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтрихКоды.Владелец КАК Владелец,
		|	ШтрихКоды.Единица КАК Единица,
		|	ШтрихКоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ШтрихКоды.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТСправочникШтрихКоды
		|ИЗ
		|	Справочник.ШтрихКоды КАК ШтрихКоды
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Выгружать,
		|	НоменклатураХарактЕдиИзм.Номенклатура.Код КАК Код,
		|	НоменклатураХарактЕдиИзм.Номенклатура.Артикул КАК Артикул,
		|	НоменклатураХарактЕдиИзм.Номенклатура.Ссылка КАК НоменклатураСсылка,
		|	ПРЕДСТАВЛЕНИЕ(НоменклатураХарактЕдиИзм.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаНоменклатурыСсылка,
		|	ПРЕДСТАВЛЕНИЕ(НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	ШтрихКоды.Наименование КАК ШтрихКод,
		|	ВЫБОР
		|		КОГДА НоменклатураХарактЕдиИзм.ЕдиницаИзмерения ЕСТЬ NULL 
		|				ИЛИ НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Коэффициент = 0
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Остатки.КоличествоОстаток, 0) / ВЫБОР
		|					КОГДА НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Коэффициент = 0
		|						ТОГДА 1
		|					ИНАЧЕ НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Коэффициент
		|				КОНЕЦ КАК ЧИСЛО(15, 3))
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		|		ИНАЧЕ Цены.Цена
		|	КОНЕЦ * НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Коэффициент КАК цена,
		|	НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Ссылка КАК ЕдиницаИзмеренияСсылка,
		|	НоменклатураХарактЕдиИзм.ЕдиницаИзмерения,
		|	НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		|	НЕОПРЕДЕЛЕНО КАК СерияНоменклатуры,
		|	ЛОЖЬ КАК ЕстьСерии,
		|	НЕОПРЕДЕЛЕНО КАК Качество,
		|	ВЫБОР
		|		КОГДА НоменклатураХарактЕдиИзм.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА НоменклатураХарактЕдиИзм.Номенклатура.УчетПоСерийнымНомерам = ИСТИНА
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВестиСерийныеНомера
		|ПОМЕСТИТЬ ВТИтоговаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		НоменклатураСХарактеристиками.Номенклатура КАК Номенклатура,
		|		НоменклатураСХарактеристиками.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ВЫБОР КОГДА ЕдиницыИзмерения.Ссылка ЕСТЬ NULL ИЛИ ЕдиницыИзмерения.Ссылка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА НоменклатураСХарактеристиками.Номенклатура.БазоваяЕдиница.Ссылка
		|			ИНАЧЕ ЕдиницыИзмерения.Ссылка
		|		КОНЕЦ КАК ЕдиницаИзмерения
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СправочникНоменклатура.Ссылка КАК Номенклатура,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры
		|		ИЗ
		|			ВТНоменклатура КАК СправочникНоменклатура
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ХарактеристикиНоменклатуры.Владелец,
		|			ХарактеристикиНоменклатуры.Ссылка
		|		ИЗ
		|			ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры) КАК НоменклатураСХарактеристиками
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЕдиницыИзмерения КАК ЕдиницыИзмерения
		|			ПО НоменклатураСХарактеристиками.Номенклатура = ЕдиницыИзмерения.Владелец
		|	ГДЕ
		|		(НЕ НоменклатураСХарактеристиками.Номенклатура.ЭтоГруппа)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НоменклатураСХарактеристиками.ХарактеристикаНоменклатуры,
		|		ЕдиницыИзмерения.Ссылка,
		|		НоменклатураСХарактеристиками.Номенклатура) КАК НоменклатураХарактЕдиИзм
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТостатки КАК Остатки
		|		ПО НоменклатураХарактЕдиИзм.Номенклатура = Остатки.Номенклатура
		|			И НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК Цены
		|		ПО НоменклатураХарактЕдиИзм.Номенклатура = Цены.Номенклатура
		|			И НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ШтрихКоды.Владелец КАК Номенклатура,
		|			ШтрихКоды.Единица КАК Единица,
		|			ШтрихКоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ШтрихКоды.Наименование КАК Наименование
		|		ИЗ
		|			ВТСправочникШтрихКоды КАК ШтрихКоды) КАК ШтрихКоды
		|		ПО НоменклатураХарактЕдиИзм.Номенклатура = ШтрихКоды.Номенклатура
		|			И НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры = ШтрихКоды.ХарактеристикаНоменклатуры
		|			И НоменклатураХарактЕдиИзм.ЕдиницаИзмерения = ШтрихКоды.Единица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
		|		ПО НоменклатураХарактЕдиИзм.Номенклатура = ВТЦены.Номенклатура
		|			И (ВТЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|{ГДЕ
		|	НоменклатураХарактЕдиИзм.Номенклатура.*,
		|	Цены.Цена,
		|	Остатки.КоличествоОстаток,
		|	НоменклатураХарактЕдиИзм.ХарактеристикаНоменклатуры.*,
		|	НоменклатураХарактЕдиИзм.ЕдиницаИзмерения.*}
		
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураСсылка,
		|	ХарактеристикаНоменклатурыСсылка,
		|	ЕдиницаИзмеренияСсылка
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТИтоговаяТаблица.Выгружать,
		|	ВТИтоговаяТаблица.Код,
		|	ВТИтоговаяТаблица.Артикул,
		|	ВТИтоговаяТаблица.НоменклатураСсылка,
		|	ВТИтоговаяТаблица.Номенклатура,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		|	ВТИтоговаяТаблица.ШтрихКод,
		|	ВТИтоговаяТаблица.Количество,
		|	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		|	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		|	ВТИтоговаяТаблица.Коэффициент,
		|	ВТИтоговаяТаблица.СерияНоменклатуры,
		|	ВТИтоговаяТаблица.ЕстьСерии,
		|	ВТИтоговаяТаблица.Качество,
		|	ВТИтоговаяТаблица.ВестиСерийныеНомера,
		|	ВТИтоговаяТаблица.цена,
		|	ВТИтоговаяТаблица.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.ЯвляетсяВесовой КАК Весовой,
		|	ВЫБОР
		|		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.БазоваяЕдиница
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФлагБазовойЕдиницы
		|ИЗ
		|	ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		|			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		|			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		|			СУММА(1) КАК КоличествоСтрок,
		|			СУММА(ВЫБОР
		|					КОГДА ВТИтоговаяТаблица.ШтрихКод = """"
		|						ТОГДА 0
		|					ИНАЧЕ 1
		|				КОНЕЦ) КАК КоличествоШтрихкодов
		|		ИЗ
		|			ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТИтоговаяТаблица.НоменклатураСсылка,
		|			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		|			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка) КАК ТаблицаКоличествоСтрок
		|		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ТаблицаКоличествоСтрок.НоменклатураСсылка
		|			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка
		|			И ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоСтрок, 0) > 1
		|					И ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоШтрихкодов, 0) > 0
		|					И ВТИтоговаяТаблица.ШтрихКод = """"
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		
		|УПОРЯДОЧИТЬ ПО
		|	ВТИтоговаяТаблица.НоменклатураСсылка.Наименование,
		|	ТаблицаКоличествоСтрок.НоменклатураСсылка,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка.Наименование,
		|	ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка,
		|	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка.Наименование,
		|	ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка";
	ИначеЕсли Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Владелец
		|ПОМЕСТИТЬ ВТЕдиницыИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец ССЫЛКА Справочник.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Штрихкоды.ШтрихКод,
		|	Штрихкоды.Объект,
		|	Штрихкоды.ХарактеристикаНоменклатуры,
		|	Штрихкоды.ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТШтрихкод
		|ИЗ
		|	РегистрСведений.ШтрихКоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Объект ССЫЛКА Справочник.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ХарактеристикиНоменклатуры.Владелец
		|ПОМЕСТИТЬ ВТХарактеристикиНоменклатуры
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЦеныСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТЦены
		|ИЗ
		|	РегистрСведений.Цены.СрезПоследних(
		|			,
		|			ТипЦен = &ТипЦен
		|				ИЛИ ПодразделениеКомпании = &ТипЦен) КАК ЦеныСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыТоваров.Номенклатура.Код КАК Код,
		|	КодыТоваров.Номенклатура.Артикул КАК Артикул,
		|	КодыТоваров.Весовой КАК Весовой,
		|	МАКСИМУМ(ИСТИНА) КАК Выгружать,
		|	КодыТоваров.Штрихкод КАК Штрихкод,
		|	КодыТоваров.Номенклатура КАК НоменклатураСсылка,
		|	КодыТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
		|	ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияСсылка,
		|	ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.Номенклатура) КАК Номенклатура,
		|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.СерияНоменклатуры) КАК СерияНоменклатуры,
		|	МАКСИМУМ(ЛОЖЬ) КАК ЕстьСерии,
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения
		|			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения
		|		КОНЕЦ) КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(РегОстатки.КоличествоОстаток, 0) / ВЫБОР
		|			КОГДА КодыТоваров.ЕдиницаИзмерения.Коэффициент = 0
		|				ТОГДА 1
		|			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		|		ИНАЧЕ Цены.Цена
		|	КОНЕЦ * ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА КодыТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА КодыТоваров.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера = ИСТИНА
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВестиСерийныеНомера,
		|	Качество.Ссылка КАК Качество
		|ПОМЕСТИТЬ ВТИтоговаяТаблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодзапросКодыТоваров.Весовой КАК Весовой,
		|		ПодзапросКодыТоваров.Штрихкод КАК Штрихкод,
		|		ПодзапросКодыТоваров.Номенклатура КАК Номенклатура,
		|		ПодзапросКодыТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ПодзапросКодыТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
		|		ПодзапросКодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЛОЖЬ КАК Весовой,
		|			Штрихкоды.ШтрихКод КАК Штрихкод,
		|			Штрихкоды.Объект КАК Номенклатура,
		|			Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			НЕОПРЕДЕЛЕНО КАК СерияНоменклатуры,
		|			Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|		ИЗ
		|			ВТШтрихкод КАК Штрихкоды
		|		{ГДЕ
		|			(ВЫРАЗИТЬ(Штрихкоды.Объект КАК Справочник.Номенклатура)).* КАК Номенклатура}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЛОЖЬ,
		|			"""""""",
		|			ВложенныйЗапрос.Владелец,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО,
		|			ВложенныйЗапрос.Ссылка
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ЕдиницыИзмерения.Ссылка КАК Ссылка,
		|				ЕдиницыИзмерения.Владелец КАК Владелец
		|			ИЗ
		|				ВТЕдиницыИзмерения КАК ЕдиницыИзмерения
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкод КАК Штрихкоды
		|					ПО ЕдиницыИзмерения.Владелец = Штрихкоды.Объект
		|						И ЕдиницыИзмерения.Ссылка = Штрихкоды.ЕдиницаИзмерения
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|					ПО ЕдиницыИзмерения.Владелец = ХарактеристикиНоменклатуры.Владелец
		|			ГДЕ
		|				Штрихкоды.Объект ЕСТЬ NULL 
		|				И ХарактеристикиНоменклатуры.Владелец ЕСТЬ NULL ) КАК ВложенныйЗапрос
		|		{ГДЕ
		|			ВложенныйЗапрос.Владелец.* КАК Номенклатура}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЛОЖЬ,
		|			"""""""",
		|			ЕдиницыИзмерения.Владелец,
		|			ЕдиницыИзмерения.ХарактеристикаНоменклатуры,
		|			НЕОПРЕДЕЛЕНО,
		|			ЕдиницыИзмерения.Ссылка
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Единицы.Владелец КАК Владелец,
		|				Единицы.Ссылка КАК Ссылка,
		|				ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
		|			ИЗ
		|				ВТЕдиницыИзмерения КАК Единицы
		|					ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|					ПО (ХарактеристикиНоменклатуры.Владелец = Единицы.Владелец)
		|			ГДЕ
		|				(НЕ ХарактеристикиНоменклатуры.Ссылка В
		|							(ВЫБРАТЬ
		|								Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|							ИЗ
		|								ВТШтрихкод КАК Штрихкоды
		|							ГДЕ
		|								Штрихкоды.Объект = Единицы.Владелец))) КАК ЕдиницыИзмерения
		|		{ГДЕ
		|			(ВЫРАЗИТЬ(ЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЛОЖЬ,
		|			"""""""",
		|			Номенклатура.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|			НЕОПРЕДЕЛЕНО,
		|			Номенклатура.ОсновнаяЕдиницаИзмерения
		|		ИЗ
		|			Справочник.Номенклатура КАК Номенклатура
		|		ГДЕ
		|			(НЕ Номенклатура.ЭтоГруппа)
		|		{ГДЕ
		|			Номенклатура.Ссылка.* КАК Номенклатура}
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЛОЖЬ,
		|			"""""""",
		|			ХарактеристикиНоменклатуры.Владелец,
		|			ХарактеристикиНоменклатуры.Ссылка,
		|			НЕОПРЕДЕЛЕНО,
		|			ХарактеристикиНоменклатуры.Владелец.ОсновнаяЕдиницаИзмерения
		|		ИЗ
		|			ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ГДЕ
		|			ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура
		|		{ГДЕ
		|			ХарактеристикиНоменклатуры.Владелец.* КАК Номенклатура}) КАК ПодзапросКодыТоваров
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПодзапросКодыТоваров.Весовой,
		|		ПодзапросКодыТоваров.Штрихкод,
		|		ПодзапросКодыТоваров.Номенклатура,
		|		ПодзапросКодыТоваров.ХарактеристикаНоменклатуры,
		|		ПодзапросКодыТоваров.СерияНоменклатуры,
		|		ПодзапросКодыТоваров.ЕдиницаИзмерения) КАК КодыТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РегОстатки.Номенклатура КАК Номенклатура,
		|			РегОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			РегОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|			СУММА(РегОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|		ИЗ
		|			(ВЫБРАТЬ
		|				РегТоварыНаСкладах.Номенклатура КАК Номенклатура,
		|				РегТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				НЕОПРЕДЕЛЕНО КАК СерияНоменклатуры,
		|				НЕОПРЕДЕЛЕНО КАК Качество,
		|				РегТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
		|			ИЗ
		|				РегистрНакопления.ОстаткиТоваровКомпании.Остатки(, {(СкладКомпании).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК РегТоварыНаСкладах) КАК РегОстатки
		|		{ГДЕ
		|			(ВЫРАЗИТЬ(РегОстатки.Номенклатура КАК Справочник.Номенклатура)).* КАК Номенклатура}
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РегОстатки.Номенклатура,
		|			РегОстатки.ХарактеристикаНоменклатуры,
		|			РегОстатки.СерияНоменклатуры) КАК РегОстатки
		|		ПО (РегОстатки.Номенклатура = КодыТоваров.Номенклатура)
		|			И (РегОстатки.ХарактеристикаНоменклатуры = ЕСТЬNULL(КодыТоваров.ХарактеристикаНоменклатуры, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК Цены
		|		ПО КодыТоваров.Номенклатура = Цены.Номенклатура
		|			И КодыТоваров.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
		|		ПО КодыТоваров.Номенклатура = ВТЦены.Номенклатура
		|			И (ВТЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)),
		|	Справочник.Качество КАК Качество
		|{ГДЕ
		|	Качество.Ссылка.* КАК Качество,
		|	Цены.Цена,
		|	РегОстатки.КоличествоОстаток,
		|	КодыТоваров.ЕдиницаИзмерения.*,
		|	КодыТоваров.ХарактеристикаНоменклатуры.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	Качество.Ссылка,
		|	КодыТоваров.Штрихкод,
		|	КодыТоваров.ХарактеристикаНоменклатуры,
		|	КодыТоваров.Номенклатура,
		|	КодыТоваров.Весовой,
		|	ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения
		|	КОНЕЦ,
		|	КодыТоваров.Номенклатура.Код,
		|	КодыТоваров.Номенклатура.Артикул,
		|	ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(РегОстатки.КоличествоОстаток, 0) / ВЫБОР
		|			КОГДА КодыТоваров.ЕдиницаИзмерения.Коэффициент = 0
		|				ТОГДА 1
		|			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|		КОНЕЦ КАК ЧИСЛО(15, 3)),
		|	ВЫБОР
		|		КОГДА КодыТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫБОР
		|					КОГДА КодыТоваров.Номенклатура.ТипНоменклатуры.УникальностьСерийногоНомера = ИСТИНА
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		|		ИНАЧЕ Цены.Цена
		|	КОНЕЦ * ВЫБОР
		|		КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент
		|		ИНАЧЕ КодыТоваров.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.СерияНоменклатуры),
		|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
		|			КОГДА КодыТоваров.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА КодыТоваров.Номенклатура.ОсновнаяЕдиницаИзмерения
		|			ИНАЧЕ КодыТоваров.ЕдиницаИзмерения
		|		КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговаяТаблица.Код,
		|	ВТИтоговаяТаблица.Артикул,
		|	ВТИтоговаяТаблица.Весовой,
		|	ВТИтоговаяТаблица.Выгружать,
		|	ВТИтоговаяТаблица.Штрихкод,
		|	ВТИтоговаяТаблица.НоменклатураСсылка,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		|	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		|	ВТИтоговаяТаблица.Коэффициент,
		|	ВТИтоговаяТаблица.Номенклатура,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		|	ВТИтоговаяТаблица.СерияНоменклатуры,
		|	ВТИтоговаяТаблица.ЕстьСерии,
		|	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		|	ВТИтоговаяТаблица.Количество,
		|	ВТИтоговаяТаблица.Цена,
		|	ВТИтоговаяТаблица.ВестиСерийныеНомера,
		|	ВТИтоговаяТаблица.Качество,
		|	ВЫБОР
		|		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.ОсновнаяЕдиницаИзмерения
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФлагБазовойЕдиницы
		|ИЗ
		|	ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		|			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		|			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		|			ВТИтоговаяТаблица.Качество КАК Качество,
		|			СУММА(1) КАК КоличествоСтрок,
		|			СУММА(ВЫБОР
		|					КОГДА ВТИтоговаяТаблица.Штрихкод = """"""""
		|						ТОГДА 0
		|					ИНАЧЕ 1
		|				КОНЕЦ) КАК КоличествоШтрихкодов
		|		ИЗ
		|			ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТИтоговаяТаблица.Качество,
		|			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		|			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		|			ВТИтоговаяТаблица.НоменклатураСсылка) КАК ТаблицаКоличествоСтрок
		|		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ТаблицаКоличествоСтрок.НоменклатураСсылка
		|			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка
		|			И ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка
		|			И ВТИтоговаяТаблица.Качество = ТаблицаКоличествоСтрок.Качество
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоСтрок, 0) > 1
		|					И ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоШтрихкодов, 0) > 0
		|					И ВТИтоговаяТаблица.Штрихкод = """"""""
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТИтоговаяТаблица.НоменклатураСсылка.Наименование,
		|	ВТИтоговаяТаблица.НоменклатураСсылка,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка.Наименование,
		|	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		|	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка.Наименование,
		|	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		|	ВТИтоговаяТаблица.Качество.Наименование,
		|	ВТИтоговаяТаблица.Качество";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СерииНоменклатуры.Ссылка КАК Ссылка,
		               |	СерииНоменклатуры.Владелец КАК Владелец
		               |ПОМЕСТИТЬ ВТСерииНоменклатуры
		               |ИЗ
		               |	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		               |ГДЕ
		               |	СерииНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура
		               |{ГДЕ
		               |	(ВЫРАЗИТЬ(СерииНоменклатуры.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура}
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЕдиницыИзмерения.Ссылка КАК Ссылка,
		               |	ЕдиницыИзмерения.Владелец КАК Владелец
		               |ПОМЕСТИТЬ ВТЕдиницыИзмерения
		               |ИЗ
		               |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХарактеристикиНоменклатуры.Ссылка,
		               |	ХарактеристикиНоменклатуры.ПометкаУдаления,
		               |	ХарактеристикиНоменклатуры.Предопределенный,
		               |	ХарактеристикиНоменклатуры.Владелец,
		               |	ХарактеристикиНоменклатуры.Наименование
		               |ПОМЕСТИТЬ ВТХарактеристикиНоменклатуры
		               |ИЗ
		               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		               |ПОМЕСТИТЬ ВТЦены
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЦеныАТТСрезПоследних.Склад,
		               |	ЦеныАТТСрезПоследних.Номенклатура,
		               |	ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры,
		               |	ЦеныАТТСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков,
		               |	ЦеныАТТСрезПоследних.Цена
		               |ИЗ
		               |	РегистрСведений.ЦеныАТТ.СрезПоследних(, Склад = &ТипЦен) КАК ЦеныАТТСрезПоследних
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Штрихкоды.Штрихкод КАК Штрихкод,
		               |	Штрихкоды.Владелец КАК Владелец,
		               |	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	Штрихкоды.СерияНоменклатуры КАК СерияНоменклатуры,
		               |	Штрихкоды.Качество КАК Качество,
		               |	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		               |ПОМЕСТИТЬ ВТРегистрСведенийШтрихкоды
		               |ИЗ
		               |	РегистрСведений.Штрихкоды КАК Штрихкоды
		               |ГДЕ
		               |	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
		               |{ГДЕ
		               |	(ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура}
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Владелец,
		               |	ХарактеристикаНоменклатуры,
		               |	СерияНоменклатуры,
		               |	Качество,
		               |	ЕдиницаИзмерения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КодыВесовогоТовара.Код,
		               |	КодыВесовогоТовара.Номенклатура КАК Номенклатура,
		               |	КодыВесовогоТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	КодыВесовогоТовара.Качество КАК Качество,
		               |	КодыВесовогоТовара.СерияНоменклатуры КАК СерияНоменклатуры
		               |ПОМЕСТИТЬ ВТРегистрСведенийКодыВесовогоТовара
		               |ИЗ
		               |	РегистрСведений.КодыВесовогоТовара КАК КодыВесовогоТовара
		               |{ГДЕ
		               |	(ВЫРАЗИТЬ(КодыВесовогоТовара.Номенклатура КАК Справочник.Номенклатура)).* КАК Номенклатура}
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	ХарактеристикаНоменклатуры,
		               |	Качество,
		               |	СерияНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИтоговыеОстатки.Номенклатура,
		               |	ИтоговыеОстатки.ХарактеристикаНоменклатуры,
		               |	ИтоговыеОстатки.СерияНоменклатуры,
		               |	ИтоговыеОстатки.Качество,
		               |	СУММА(ИтоговыеОстатки.КоличествоОстаток) КАК КоличествоОстаток
		               |ПОМЕСТИТЬ ВТОСтатки
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		РегТоварыНаСкладах.Номенклатура КАК Номенклатура,
		               |		РегТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |		РегТоварыНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
		               |		РегТоварыНаСкладах.Качество КАК Качество,
		               |		СУММА(РегТоварыНаСкладах.КоличествоОстаток) КАК КоличествоОстаток
		               |	ИЗ
		               |		РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Склад).* КАК Склад, (Номенклатура).* КАК Номенклатура}) КАК РегТоварыНаСкладах
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(РегТоварыНаСкладах.Номенклатура КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		РегТоварыНаСкладах.Склад.*}
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		РегТоварыНаСкладах.Качество,
		               |		РегТоварыНаСкладах.СерияНоменклатуры,
		               |		РегТоварыНаСкладах.ХарактеристикаНоменклатуры,
		               |		РегТоварыНаСкладах.Номенклатура,
		               |		РегТоварыНаСкладах.Склад
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ТоварыВРозницеОстатки.Номенклатура,
		               |		ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		               |		ТоварыВРозницеОстатки.СерияНоменклатуры,
		               |		ТоварыВРозницеОстатки.Качество,
		               |		СУММА(ТоварыВРозницеОстатки.КоличествоОстаток)
		               |	ИЗ
		               |		РегистрНакопления.ТоварыВРознице.Остатки КАК ТоварыВРозницеОстатки
		               |	{ГДЕ
		               |		ТоварыВРозницеОстатки.Склад.*}
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ТоварыВРозницеОстатки.Качество,
		               |		ТоварыВРозницеОстатки.СерияНоменклатуры,
		               |		ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		               |		ТоварыВРозницеОстатки.Номенклатура,
		               |		ТоварыВРозницеОстатки.Склад
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ТоварыКПеремещениюВНТТОстатки.Номенклатура,
		               |		ТоварыКПеремещениюВНТТОстатки.ХарактеристикаНоменклатуры,
		               |		ТоварыКПеремещениюВНТТОстатки.СерияНоменклатуры,
		               |		ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		               |		СУММА(ТоварыКПеремещениюВНТТОстатки.КоличествоОстаток)
		               |	ИЗ
		               |		РегистрНакопления.ТоварыКПеремещениюВНТТ.Остатки КАК ТоварыКПеремещениюВНТТОстатки
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		ТоварыКПеремещениюВНТТОстатки.СерияНоменклатуры,
		               |		ТоварыКПеремещениюВНТТОстатки.ХарактеристикаНоменклатуры,
		               |		ТоварыКПеремещениюВНТТОстатки.Номенклатура,
		               |		ТоварыКПеремещениюВНТТОстатки.Склад) КАК ИтоговыеОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ИтоговыеОстатки.СерияНоменклатуры,
		               |	ИтоговыеОстатки.ХарактеристикаНоменклатуры,
		               |	ИтоговыеОстатки.Номенклатура,
		               |	ИтоговыеОстатки.Качество
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КодыТоваров.Номенклатура.Код КАК Код,
		               |	КодыТоваров.Номенклатура.Артикул КАК Артикул,
		               |	КодыТоваров.Весовой КАК Весовой,
		               |	ИСТИНА КАК Выгружать,
		               |	ЕСТЬNULL(КодыТоваров.Штрихкод, """") КАК Штрихкод,
		               |	КодыТоваров.Номенклатура КАК НоменклатураСсылка,
		               |	КодыТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
		               |	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСсылка,
		               |	КодыТоваров.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
		               |	ПОДСТРОКА(КодыТоваров.Номенклатура.Наименование, 1, 300) КАК Номенклатура,
		               |	ПОДСТРОКА(КодыТоваров.ХарактеристикаНоменклатуры.Наименование, 1, 300) КАК ХарактеристикаНоменклатуры,
		               |	ПОДСТРОКА(КодыТоваров.СерияНоменклатуры.Наименование, 1, 300) КАК СерияНоменклатуры,
		               |	ВЫБОР
		               |		КОГДА ВТСерииНоменклатуры.Ссылка ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ЕстьСерии,
		               |	ПОДСТРОКА(КодыТоваров.Качество.Наименование, 1, 300) КАК Качество,
		               |	ПОДСТРОКА(КодыТоваров.ЕдиницаИзмерения.Наименование, 1, 300) КАК ЕдиницаИзмерения,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		               |			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		               |		ИНАЧЕ Цены.Цена
		               |	КОНЕЦ * КодыТоваров.ЕдиницаИзмерения.Коэффициент КАК Цена,
		               |	ВЫБОР
		               |		КОГДА КодыТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		               |			ТОГДА ВЫБОР
		               |					КОГДА КодыТоваров.Номенклатура.ВестиСерийныеНомера = ИСТИНА
		               |						ТОГДА 1
		               |					ИНАЧЕ 0
		               |				КОНЕЦ
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ВестиСерийныеНомера,
		               |	КодыТоваров.Качество КАК КачествоСсылка,
		               |	КодыТоваров.СерияНоменклатуры КАК СерияНоменклатурыСсылка
		               |ПОМЕСТИТЬ ВТИтоговаяТаблица
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЛОЖЬ КАК Весовой,
		               |		Штрихкоды.Штрихкод КАК Штрихкод,
		               |		Штрихкоды.Владелец КАК Номенклатура,
		               |		Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |		Штрихкоды.СерияНоменклатуры КАК СерияНоменклатуры,
		               |		Штрихкоды.Качество КАК Качество,
		               |		Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |		0 КАК КодВесовогоТовара
		               |	ИЗ
		               |		ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		Штрихкоды.Штрихкод,
		               |		(0) КАК КодВесовогоТовара}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЛОЖЬ,
		               |		"""",
		               |		Номенклатура.Ссылка,
		               |		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		               |		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		               |		ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		               |		Номенклатура.ЕдиницаХраненияОстатков,
		               |		0
		               |	ИЗ
		               |		Справочник.Номенклатура КАК Номенклатура
		               |	ГДЕ
		               |		(НЕ Номенклатура.ЭтоГруппа)
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(Номенклатура.Ссылка КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		("""") КАК Штрихкод,
		               |		(0) КАК КодВесовогоТовара}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ИСТИНА,
		               |		КодыВесовогоТовара.Код,
		               |		КодыВесовогоТовара.Номенклатура,
		               |		КодыВесовогоТовара.ХарактеристикаНоменклатуры,
		               |		КодыВесовогоТовара.СерияНоменклатуры,
		               |		КодыВесовогоТовара.Качество,
		               |		КодыВесовогоТовара.Номенклатура.ЕдиницаХраненияОстатков,
		               |		КодыВесовогоТовара.Код
		               |	ИЗ
		               |		ВТРегистрСведенийКодыВесовогоТовара КАК КодыВесовогоТовара
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(КодыВесовогоТовара.Номенклатура КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		КодыВесовогоТовара.Код КАК КодВесовогоТовара,
		               |		КодыВесовогоТовара.Код КАК Штрихкод}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЛОЖЬ,
		               |		"" "",
		               |		ВложенныйЗапрос.Владелец,
		               |		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		               |		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		               |		ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		               |		ВложенныйЗапрос.Ссылка,
		               |		0
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ЕдиницыИзмерения.Ссылка КАК Ссылка,
		               |			ЕдиницыИзмерения.Владелец КАК Владелец
		               |		ИЗ
		               |			ВТЕдиницыИзмерения КАК ЕдиницыИзмерения
		               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |				ПО ЕдиницыИзмерения.Владелец = Штрихкоды.Владелец
		               |					И ЕдиницыИзмерения.Ссылка = Штрихкоды.ЕдиницаИзмерения
		               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрСведенийКодыВесовогоТовара КАК КодыВесовогоТовара
		               |				ПО ЕдиницыИзмерения.Владелец = КодыВесовогоТовара.Номенклатура
		               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |				ПО ЕдиницыИзмерения.Владелец = ХарактеристикиНоменклатуры.Владелец
		               |		ГДЕ
		               |			КодыВесовогоТовара.Номенклатура ЕСТЬ NULL 
		               |			И Штрихкоды.Владелец ЕСТЬ NULL 
		               |			И ЕдиницыИзмерения.Владелец ССЫЛКА Справочник.Номенклатура) КАК ВложенныйЗапрос
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(ВложенныйЗапрос.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		("" "") КАК Штрихкод,
		               |		(0) КАК КодВесовогоТовара}
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЛОЖЬ,
		               |		"" "",
		               |		ЕдиницыИзмерения.Владелец,
		               |		ЕдиницыИзмерения.ХарактеристикаНоменклатуры,
		               |		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		               |		ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		               |		ЕдиницыИзмерения.Ссылка,
		               |		0
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			Единицы.Владелец КАК Владелец,
		               |			Единицы.Ссылка КАК Ссылка,
		               |			ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
		               |		ИЗ
		               |			ВТЕдиницыИзмерения КАК Единицы
		               |				ЛЕВОЕ СОЕДИНЕНИЕ ВТХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		               |				ПО (ХарактеристикиНоменклатуры.Владелец = Единицы.Владелец)
		               |		ГДЕ
		               |			(НЕ ХарактеристикиНоменклатуры.Ссылка В
		               |						(ВЫБРАТЬ
		               |							Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |						ИЗ
		               |							ВТРегистрСведенийШтрихкоды КАК Штрихкоды
		               |						ГДЕ
		               |							Штрихкоды.Владелец = Единицы.Владелец))
		               |			И (НЕ ХарактеристикиНоменклатуры.Ссылка В
		               |						(ВЫБРАТЬ
		               |							КодыВесовогоТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		               |						ИЗ
		               |							ВТРегистрСведенийКодыВесовогоТовара КАК КодыВесовогоТовара
		               |						ГДЕ
		               |							КодыВесовогоТовара.Номенклатура = Единицы.Владелец))) КАК ЕдиницыИзмерения
		               |	{ГДЕ
		               |		(ВЫРАЗИТЬ(ЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура)).* КАК Номенклатура,
		               |		("" "") КАК Штрихкод,
		               |		(0) КАК КодВесовогоТовара}) КАК КодыТоваров
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК Цены
		               |		ПО КодыТоваров.Номенклатура = Цены.Номенклатура
		               |			И КодыТоваров.ХарактеристикаНоменклатуры = Цены.ХарактеристикаНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦены КАК ВТЦены
		               |		ПО КодыТоваров.Номенклатура = ВТЦены.Номенклатура
		               |			И (ВТЦены.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСерииНоменклатуры КАК ВТСерииНоменклатуры
		               |		ПО КодыТоваров.Номенклатура = ВТСерииНоменклатуры.Владелец
		               |{ГДЕ
		               |	Цены.Цена,
		               |	КодыТоваров.ЕдиницаИзмерения.*,
		               |	КодыТоваров.Качество.*,
		               |	КодыТоваров.ХарактеристикаНоменклатуры.*,
		               |	КодыТоваров.СерияНоменклатуры.*}
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	КодыТоваров.Весовой,
		               |	КодыТоваров.Номенклатура,
		               |	КодыТоваров.ЕдиницаИзмерения,
		               |	КодыТоваров.Номенклатура.Код,
		               |	КодыТоваров.Номенклатура.Артикул,
		               |	КодыТоваров.ЕдиницаИзмерения.Коэффициент,
		               |	КодыТоваров.Качество,
		               |	КодыТоваров.ХарактеристикаНоменклатуры,
		               |	ВЫБОР
		               |		КОГДА ВТСерииНоменклатуры.Ссылка ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ,
		               |	КодыТоваров.СерияНоменклатуры,
		               |	ЕСТЬNULL(КодыТоваров.Штрихкод, """"),
		               |	ПОДСТРОКА(КодыТоваров.Номенклатура.Наименование, 1, 300),
		               |	ПОДСТРОКА(КодыТоваров.ХарактеристикаНоменклатуры.Наименование, 1, 300),
		               |	ПОДСТРОКА(КодыТоваров.СерияНоменклатуры.Наименование, 1, 300),
		               |	ПОДСТРОКА(КодыТоваров.Качество.Наименование, 1, 300),
		               |	ПОДСТРОКА(КодыТоваров.ЕдиницаИзмерения.Наименование, 1, 300),
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(Цены.Цена, 0) = 0
		               |			ТОГДА ЕСТЬNULL(ВТЦены.Цена, 0)
		               |		ИНАЧЕ Цены.Цена
		               |	КОНЕЦ * КодыТоваров.ЕдиницаИзмерения.Коэффициент,
		               |	ВЫБОР
		               |		КОГДА КодыТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура
		               |			ТОГДА ВЫБОР
		               |					КОГДА КодыТоваров.Номенклатура.ВестиСерийныеНомера = ИСТИНА
		               |						ТОГДА 1
		               |					ИНАЧЕ 0
		               |				КОНЕЦ
		               |		ИНАЧЕ 0
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТИтоговаяТаблица.Код,
		               |	ВТИтоговаяТаблица.Артикул,
		               |	ВТИтоговаяТаблица.Весовой,
		               |	ВТИтоговаяТаблица.Выгружать,
		               |	ВТИтоговаяТаблица.Штрихкод,
		               |	ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |	ВТИтоговаяТаблица.Коэффициент,
		               |	ЕСТЬNULL(ВТОСтатки.КоличествоОстаток, 0) / ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.Коэффициент = 0
		               |			ТОГДА 1
		               |		ИНАЧЕ ВТИтоговаяТаблица.Коэффициент
		               |	КОНЕЦ КАК Количество,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.СерияНоменклатурыСсылка ЕСТЬ NULL 
		               |				ИЛИ ВТИтоговаяТаблица.СерияНоменклатурыСсылка = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК Порядок,
		               |	ВТИтоговаяТаблица.Номенклатура,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		               |	ВТИтоговаяТаблица.СерияНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕстьСерии,
		               |	ВТИтоговаяТаблица.Качество,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		               |	ВТИтоговаяТаблица.Цена,
		               |	ВТИтоговаяТаблица.ВестиСерийныеНомера,
		               |	ВТИтоговаяТаблица.КачествоСсылка,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.ЕдиницаХраненияОстатков
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ФлагБазовойЕдиницы
		               |ИЗ
		               |	ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОСтатки КАК ВТОСтатки
		               |		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ВТОСтатки.Номенклатура
		               |			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ВТОСтатки.ХарактеристикаНоменклатуры
		               |			И ВТИтоговаяТаблица.СерияНоменклатурыСсылка = ВТОСтатки.СерияНоменклатуры
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ВТИтоговаяТаблица.НоменклатураСсылка КАК НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка КАК ХарактеристикаНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка КАК ЕдиницаИзмеренияСсылка,
		               |			ВТИтоговаяТаблица.СерияНоменклатурыСсылка КАК СерияНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.КачествоСсылка КАК КачествоСсылка,
		               |			СУММА(1) КАК КоличествоСтрок,
		               |			СУММА(ВЫБОР
		               |					КОГДА ВТИтоговаяТаблица.Штрихкод = """"
		               |							ИЛИ ВТИтоговаяТаблица.СерияНоменклатуры = """"
		               |							ИЛИ ВТИтоговаяТаблица.ХарактеристикаНоменклатуры = """"
		               |						ТОГДА 0
		               |					ИНАЧЕ 1
		               |				КОНЕЦ) КАК КоличествоШтрихкодов
		               |		ИЗ
		               |			ВТИтоговаяТаблица КАК ВТИтоговаяТаблица
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.НоменклатураСсылка,
		               |			ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		               |			ВТИтоговаяТаблица.СерияНоменклатурыСсылка,
		               |			ВТИтоговаяТаблица.КачествоСсылка) КАК ТаблицаКоличествоСтрок
		               |		ПО ВТИтоговаяТаблица.НоменклатураСсылка = ТаблицаКоличествоСтрок.НоменклатураСсылка
		               |			И ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка = ТаблицаКоличествоСтрок.ХарактеристикаНоменклатурыСсылка
		               |			И ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ТаблицаКоличествоСтрок.ЕдиницаИзмеренияСсылка
		               |			И ВТИтоговаяТаблица.СерияНоменклатурыСсылка = ТаблицаКоличествоСтрок.СерияНоменклатурыСсылка
		               |			И ВТИтоговаяТаблица.КачествоСсылка = ТаблицаКоличествоСтрок.КачествоСсылка
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоСтрок, 0) > 1
		               |					И ЕСТЬNULL(ТаблицаКоличествоСтрок.КоличествоШтрихкодов, 0) > 0
		               |					И ВТИтоговаяТаблица.Штрихкод = """"
		               |				ТОГДА ЛОЖЬ
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТИтоговаяТаблица.Код,
		               |	ВТИтоговаяТаблица.Артикул,
		               |	ВТИтоговаяТаблица.Весовой,
		               |	ВТИтоговаяТаблица.Выгружать,
		               |	ВТИтоговаяТаблица.НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка,
		               |	ВТИтоговаяТаблица.Номенклатура,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатуры,
		               |	ВТИтоговаяТаблица.СерияНоменклатуры,
		               |	ВТИтоговаяТаблица.ЕстьСерии,
		               |	ВТИтоговаяТаблица.Качество,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмерения,
		               |	ВТИтоговаяТаблица.КачествоСсылка,
		               |	ВТИтоговаяТаблица.Штрихкод,
		               |	ВТИтоговаяТаблица.Коэффициент,
		               |	ВТИтоговаяТаблица.Цена,
		               |	ВТИтоговаяТаблица.ВестиСерийныеНомера,
		               |	ЕСТЬNULL(ВТОСтатки.КоличествоОстаток, 0) / ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.Коэффициент = 0
		               |			ТОГДА 1
		               |		ИНАЧЕ ВТИтоговаяТаблица.Коэффициент
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.СерияНоменклатурыСсылка ЕСТЬ NULL 
		               |				ИЛИ ВТИтоговаяТаблица.СерияНоменклатурыСсылка = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка = ВТИтоговаяТаблица.НоменклатураСсылка.ЕдиницаХраненияОстатков
		               |			ТОГДА 1
		               |		ИНАЧЕ 0
		               |	КОНЕЦ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВТИтоговаяТаблица.НоменклатураСсылка.Наименование,
		               |	НоменклатураСсылка,
		               |	ВТИтоговаяТаблица.ХарактеристикаНоменклатурыСсылка.Наименование,
		               |	ХарактеристикаНоменклатурыСсылка,
		               |	ВТИтоговаяТаблица.ЕдиницаИзмеренияСсылка.Наименование,
		               |	ЕдиницаИзмеренияСсылка,
		               |	Порядок";
	КонецЕсли;
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	СоответствиеИменОтбора = Новый Структура();
	
	СоответствиеИменОтбора.Вставить("Номенклатура", "Номенклатура");
	СоответствиеИменОтбора.Вставить("Склад"       , "Склад");
	
	НастройкиФормы = ВосстановитьЗначение(мИмяДляХраненияНастроек + ИмяПользователя());
	Если НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Структура") Тогда
		ПолеОтбора = Неопределено;
		ПереключательОптовыеЦены = Истина;
		Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
			Если СоответствиеИменОтбора.Свойство(ДоступноеПоле.Имя, ПолеОтбора) Тогда
				ДоступноеПоле.Отбор = Истина;
				ДоступноеПоле.Представление = ПолеОтбора;
				ПостроительОтчета.Отбор.Добавить(ДоступноеПоле.Имя)
			КонецЕсли;
		КонецЦикла;
		УстановитьПоискПоНаименованиюИАртикулу = Истина;
	Иначе
		ПереключательОптовыеЦены               = НастройкиФормы.ПереключательОптовыеЦены;
		ТипЦен                                 = НастройкиФормы.ТипЦен;
		СкладАТТ                               = НастройкиФормы.СкладАТТ;
		НастройкиФормы.Свойство("УстановитьПоискПоНаименованиюИАртикулу",УстановитьПоискПоНаименованиюИАртикулу);
		ПостроительОтчета.УстановитьНастройки(НастройкиФормы.ПостроительОтчетаНастройки);
		
		// +ZHKN. 09.07.2014. №152 Мобильная печать
		Если НастройкиФормы.Свойство("МобильнаяПечать") Тогда
			ФлажокМобильнаяПечать = НастройкиФормы.МобильнаяПечать;	
		Иначе
			ФлажокМобильнаяПечать = Ложь;	
		КонецЕсли;
		
		ФлажокМобильнаяПечатьПриИзменении(ЭлементыФормы.ФлажокМобильнаяПечать);
		// -ZHKN. 09.07.2014.
	КонецЕсли;
	УстановитьДоступность();
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()
	
Функция ПолучитьПрефиксВесовогоТовара() 
	
	ПрефиксВесовогоТовара = "";
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ПрефиксВесовогоТовара = Справочники.ФорматыШтрихКодов.ВключаетКоличество.ПрефиксШК;
	ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
		ВесовыеШтрихКодыВыборка = Справочники.ВесовыеШтрихКоды.Выбрать(,,,"Код Возр");
		Пока ВесовыеШтрихКодыВыборка.Следующий() Цикл
			Если НЕ ВесовыеШтрихКодыВыборка.ПометкаУдаления Тогда
				ПрефиксВесовогоТовара =   Лев(ВесовыеШтрихКодыВыборка.Код,2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если не ЗначениеЗаполнено(ПрефиксВесовогоТовара) Тогда
			 ПрефиксВесовогоТовара = "20";
		КонецЕсли;
	Иначе
		Инфо = Новый СистемнаяИнформация; 
		ВерсияПриложения = Инфо.ВерсияПриложения;
		ЗнакиВерсии = РазбитьСтроку(ВерсияПриложения, ".");
		Если ЗнакиВерсии.Количество() >= 4 Тогда
			Если (ЗнакиВерсии[0] = "10") И (ЗнакиВерсии[1] = "3") И (Число(ЗнакиВерсии[2]) <= 5) Тогда
				ПрефиксВесовогоТовара = "2" + Константы.ПрефиксШтучногоТовара.Получить();
			Иначе
				ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
			КонецЕсли;
		Иначе
			ПрефиксВесовогоТовара = "2" + Константы.ПрефиксВесовогоТовара.Получить();
		КонецЕсли;	
	КонецЕсли;	
	Возврат ПрефиксВесовогоТовара;
	
КонецФункции

Функция ПолучитьДлинуКодаВесовогоТовара() 
	Перем ДлинаКодаВесовогоТовара;	
	
	Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ДлинаКодаВесовогоТовара = Метаданные.РегистрыСведений.ВнутренниеКодыТоваров.Ресурсы.Код.Тип.КвалификаторыЧисла.Разрядность;
	Иначе
		Если Метаданные.Константы.Найти("ДлинаКодаВесовогоТовара") <> Неопределено Тогда
			ДлинаКодаВесовогоТовара = Константы.ДлинаКодаВесовогоТовара.Получить();
		Иначе
			Если Метаданные.Константы.Найти("ВерхняяГраницаPLUВесовыхТоваров") <> Неопределено Тогда
				ДлинаКодаВесовогоТовара = СтрДлина(Формат(Константы.ВерхняяГраницаPLUВесовыхТоваров.Получить(),"ЧГ=0"));
			Иначе
				ДлинаКодаВесовогоТовара = 5;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мНазваниеКонфигурации <> "розница" и ДлинаКодаВесовогоТовара <= 0 Тогда
		ДлинаКодаВесовогоТовара = 0;
	КонецЕсли;
	
	Возврат ДлинаКодаВесовогоТовара;
КонецФункции

Функция РазбитьСтроку(Стр, Разделитель) 
	Список = Новый Массив;
	Пока СтрДлина(Стр) > 0 Цикл
		Инд = Найти(Стр, Разделитель);
		Если Инд > 0 Тогда
			Поле = СокрЛП(Лев(Стр, Инд-1));
			Список.Добавить(Поле);
			Стр = Прав(Стр, СтрДлина(Стр)-Инд);
		Иначе
			Прервать;
		КонецЕсли;		
	КонецЦикла;

	Возврат Список;
КонецФункции

Процедура ТерминалСбораДанныхПриИзменении(Элемент = Неопределено)
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	Если Объект = Неопределено Тогда
		Сообщить("Не удалось получить объект драйвера ТСД: "+Результат, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если Найти(мНазваниеКонфигурации, "розница") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 тогда
		возврат
	КонецЕсли;
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.ВестиСерийныеНомера Тогда
			ОформлениеСтроки.Ячейки.НоменклатураСсылка.УстановитьКартинку(мКартинкаСерийныеНомера);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция ПроверкаНаЗарезервированныеСимволы(Знач Наименование) Экспорт
	
	Наименование = СтрЗаменить(Наименование,"{","""");	
	Наименование = СтрЗаменить(Наименование,"}","""");
	Наименование = СтрЗаменить(Наименование,"<","""");
	Наименование = СтрЗаменить(Наименование,">","""");
	Наименование = СокрЛП(Наименование);
	
	возврат Наименование;
	
КонецФункции

Процедура ДействияФормыСправка(Кнопка)
	
	ФормаСправки = ОбработкаОбъект.ПолучитьФорму("ФормаСправки");
	ФормаСправки.МакетСправки = "Выгрузка номенклатуры.mht";
	ФормаСправки.Заголовок = "Справка к форме """+ЭтаФорма.Заголовок+""" обработки """+ ОбработкаОбъект.Метаданные().Синоним+"""";
	
	Если НЕ ФормаСправки.Открыта() Тогда
		ФормаСправки.Открыть();
	Иначе
		ФормаСправки.ОбновитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

Функция КонтрольныйСимволEAN_(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) и (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // КонтрольныйСимволEAN() 

Процедура ПолеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПовторнаяВыгрузка = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельОтборПостроительОтборПоУмолчанию(Кнопка)
	 
	Если ПостроительОтчета.Отбор.Количество() > 0 И Вопрос("Очистить текущие настройки отбора?", РежимДиалогаВопрос.ДаНет, 0) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 

	Пока  ПостроительОтчета.Отбор.Количество() > 0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла;
	
	ТекстВопроса = "Заполнить отбор по умолчанию?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
  	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;  
	
	СоответствиеИменОтбора = Новый Структура();
	
	СоответствиеИменОтбора.Вставить("Номенклатура", "Номенклатура");
	СоответствиеИменОтбора.Вставить("Склад"       , "Склад");
	
	ПолеОтбора = Неопределено;
	ПереключательОптовыеЦены = Истина;
	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеИменОтбора.Свойство(ДоступноеПоле.Имя, ПолеОтбора) Тогда
			ДоступноеПоле.Отбор = Истина;
			ДоступноеПоле.Представление = ПолеОтбора;
			ПостроительОтчета.Отбор.Добавить(ДоступноеПоле.Имя)
		КонецЕсли;
	КонецЦикла;
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура ТерминалСбораДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	//+AVA. 22.05.2014. №159.
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 и ОбработкаОбъект.мВерсияКонфигурации >= 5020109  Тогда
		Попытка
			НастройкиТСД = Справочники.НастройкиТорговогоОборудования.ПолучитьСсылку(Новый УникальныйИдентификатор(ТерминалСбораДанных));
		Исключение
			НастройкиТСД = ТерминалСбораДанных
		КонецПопытки; 
		
		ФормаТСД = НастройкиТСД.ПолучитьФорму();
		ФормаТСД.ОткрытьМодально(); 	
		//Если ФормаТСД.НастройкиКлеверенсИзменены тогда
			ТерминалСбораДанныхПриИзменении();
		//КонецЕсли;
	КонецЕсли;
	//-AVA. 22.05.2014. №159.
	
КонецПроцедуры

// +ZHKN. 09.07.2014. №152 Мобильная печать 
Процедура ФлажокМобильнаяПечатьПриИзменении(Элемент)
	Если ФлажокМобильнаяПечать Тогда
		ЭлементыФормы.КнопкаПодробнее.Видимость = Истина;
	Иначе 
		ЭлементыФормы.КнопкаПодробнее.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры
 
Процедура КнопкаПодробнееНажатие(Элемент)	                 
	мФорма = ОбработкаОбъект.ПолучитьФорму("ФормаНастройкиЭтикеток", ЭтаФорма);//.Открыть();
	мФорма.ОбработкаОбъект = ОбработкаОбъект;
	мФорма.Открыть();	
КонецПроцедуры

Процедура ДобавитьКолонкиДляМобильнойПечати(мТаблица)
	
	//Для Каждого мПараметр Из ОбработкаОбъект.мПараметрыМобильнойПечати Цикл
	//	ЭлементыФормы.ПолеТовары.Колонки[мПараметр.Значение].Видимость = Ложь;
	//КонецЦикла;
		
	Для Каждого мЭлемент ИЗ ОбработкаОбъект.мНастройкиМобильнойПечати Цикл
		
		Если мЭлемент.Значение = "ВидЭтикетки" тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементыФормы.ПолеТовары.Колонки.Найти(мЭлемент.Значение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Если мЭлемент.Значение <> "marking" Тогда
		ЭлементыФормы.ПолеТовары.Колонки[мЭлемент.Значение].Видимость = Истина;
		//КонецЕсли;
		
        мТаблица.Колонки.Добавить(мЭлемент.Значение);
	КонецЦикла;
	
КонецПроцедуры
 // -ZHKN. 09.07.2014.
 
Процедура ОсновныеДействияФормыВыгрузитьПропустивЗаполнениеСписка(Кнопка)
	
	ПовторнаяВыгрузка = Ложь;
	
	МассивВыгрузки = новый Массив;  	
 	ДействияФормыЗаполнить(Неопределено, МассивВыгрузки);
	ОсновныеДействияФормыВыгрузить(Неопределено, МассивВыгрузки);	
	
КонецПроцедуры

Процедура ПолеТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "Выгружать" Тогда
		ПовторнаяВыгрузка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

мНазваниеКонфигурации   = Нрег(Метаданные.Имя);

ПоддержкаМодификацийРозницы = ОбработкаОбъект.ПоддержкаМодификацийРозницы(мНазваниеКонфигурации);

мИспользоватьХарактеристики = Ложь;
мИспользоватьСерии          = Ложь;
мИспользоватьХарактеристики = Ложь;
Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
	Выполнить("мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить()");
ИначеЕсли Найти(мНазваниеКонфигурации, "розница") > 0 Тогда	
	мИспользоватьХарактеристики = Истина;	
ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
	мИспользоватьХарактеристики = Истина;
Иначе
	Попытка
		Выполнить("мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить()");
	Исключение
		мИспользоватьХарактеристики = Ложь;
	КонецПопытки;
	Попытка
		мИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	исключение
		мИспользоватьСерии = Ложь;
	КонецПопытки;
КонецЕсли;

мСписокТерминалов           = Неопределено;
мПустаяХарактеристика       = Неопределено;
мПустаяСерия                = Неопределено;
мНетОшибки                  = Неопределено;
мОшибкаНеизвестно           = Неопределено;
мОшибкаНеизвестныйШтрихкод  = Неопределено;

Если Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
	Выполнить("мПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()");
	мНетОшибки                  = "Нет ошибки";
	мОшибкаНеизвестно           = "Ошибка не известна";
	мОшибкаНеизвестныйШтрихкод  = "Неизвестный штрихкод";

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТорговоеОборудование.Ссылка как Идентификатор
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
	|ГДЕ
	|	ТорговоеОборудование.КодВида = ""ТСД""
	|	и ТорговоеОборудование.ПодключатьПриЗапуске 
	|	И (НЕ ТорговоеОборудование.ПометкаУдаления)");
	
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
ИначеЕсли Найти(мНазваниеКонфигурации, "штрихм") > 0 Тогда
	мНетОшибки = "Нет ошибки";
	//+AVA. 22.05.2014. №159.
	Если ОбработкаОбъект.мВерсияКонфигурации >= 5020109 Тогда //изменились объекты хранения настроек  		
		ЭлементыФормы.ТерминалСбораДанных.КнопкаОткрытия = Истина;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиТорговогоОборудования.НастройкаТорговогоОборудования КАК Идентификатор
		|ИЗ
		|	РегистрСведений.НастройкиТорговогоОборудования КАК НастройкиТорговогоОборудования
		|ГДЕ
		|	НастройкиТорговогоОборудования.НастройкаПоУмолчанию
		|	И НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ТипОборудования.Драйвер.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|	И НЕ НастройкиТорговогоОборудования.НастройкаТорговогоОборудования.ПометкаУдаления");  		
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТорговоеОборудование.Ссылка как Идентификатор
		|ИЗ
		|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
		|ГДЕ
		|	ТорговоеОборудование.Родитель = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ТерминалыСбораДанных)
		|	И (НЕ ТорговоеОборудование.ПометкаУдаления)
		|	И ТорговоеОборудование.Драйвер В
		|			(ВЫБРАТЬ
		|				ДрайвераТорговогоОборудования.Ссылка
		|			ИЗ
		|				Справочник.ДрайвераТорговогоОборудования КАК ДрайвераТорговогоОборудования
		|			ГДЕ
		|				ДрайвераТорговогоОборудования.ИмяCOMОбъекта = ""AddIn.Cl.TerminalConnector""
		|				И (НЕ ДрайвераТорговогоОборудования.ПометкаУдаления))");
	КонецЕсли;
	//-AVA. 22.05.2014. №159.
	
	мСписокТерминалов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
ИначеЕсли ПоддержкаМодификацийРозницы Тогда	
	Выполнить("мСписокТерминалов = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных)");
	Выполнить("мНетОшибки = Перечисления.ТООшибкиОбщие.ПустаяСсылка()");
	Выполнить("мОшибкаНеизвестно = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
	Выполнить("мОшибкаНеизвестныйШтрихкод  = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод");
ИначеЕсли  Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда
	мСписокТерминалов = новый СписокЗначений;
	мСписокТерминалов.Добавить("Клеверенс (список поддерживаемых ТСД в справке)");
	мНетОшибки         = "Нет ошибки";
	мОшибкаНеизвестно  = "Ошибка не известна";  
Иначе
	Выполнить("мСписокТерминалов = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных)");
	Выполнить("мПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()");
	Если Метаданные.Справочники.Найти("СерииНоменклатуры") <> неопределено тогда
		Выполнить("мПустаяСерия  = Справочники.СерииНоменклатуры.ПустаяСсылка()");
	КонецЕсли;
	Выполнить("мНетОшибки = Перечисления.ТООшибкиОбщие.ПустаяСсылка()");
	Выполнить("мОшибкаНеизвестно = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
	Выполнить("мОшибкаНеизвестныйШтрихкод  = Перечисления.ТООшибкиСШК.ОшибкаНеизвестныйШтрихкод");
КонецЕсли;

Попытка
	мКартинкаСерийныеНомера = БиблиотекаКартинок.СерийныеНомера;
Исключение
	мКартинкаСерийныеНомера = Новый Картинка(ОбработкаОбъект.ПолучитьМакет("КартинкаСерийныеНомера"));
КонецПопытки;

мИмяДляХраненияНастроекПрефикс = "CleverenceВыгрузкаНоменклатуры"+мНазваниеКонфигурации;
мИмяДляХраненияНастроек        = мИмяДляХраненияНастроекПрефикс;

Заголовок = "Клеверенс Софт: Выгрузка номенклатуры на ТСД";
мВидимостьЭлементовФормы = Ложь;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек{
мТипПодключенногоДрайвера = "";
Если мСписокТерминалов.Количество() > 0 Тогда
	ТерминалСбораДанных                              = мСписокТерминалов[0];
	Если Найти(мНазваниеКонфигурации, "штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
		ТерминалСбораДанных =  Строка(ТерминалСбораДанных.УникальныйИдентификатор());
	КонецЕсли;
	
	ПоследняяРаботаСТО = ВосстановитьЗначение(мИмяДляХраненияНастроекПрефикс+"_ПоследняяРаботаСТО");
	
	Если ПоследняяРаботаСТО <> Неопределено Тогда
		для каждого СтрокаТерминал из мСписокТерминалов Цикл
			Если Найти(мНазваниеКонфигурации, "штрихм") > 0 или Найти(мНазваниеКонфигурации, "далионуправлениемагазином") > 0 Тогда
				ТерминалСбораДанных_ =  Строка(СтрокаТерминал.УникальныйИдентификатор());
			Иначе
				ТерминалСбораДанных_ =  ТерминалСбораДанных
			КонецЕсли;
			Если ТерминалСбораДанных_ =  ПоследняяРаботаСТО Тогда
				ТерминалСбораДанных =   ПоследняяРаботаСТО;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Обработка = Неопределено;
	Объект    = Неопределено;
	ПолучитьОбъектДрайвера(ТерминалСбораДанных, Обработка, Объект);
	мОбъект = Объект;
	Если Объект <> Неопределено Тогда
		мИмяДляХраненияНастроек = мИмяДляХраненияНастроекПрефикс +  мТипПодключенногоДрайвера;
	КонецЕсли;
	Если Обработка <> Неопределено Тогда
		Если Найти(мНазваниеКонфигурации,"автосалон5") > 0 Тогда 
			мСписокТерминалов.Очистить();
			ОбработкаОписание = Обработка.ПолучитьОписание();
			Для каждого СтрокаМассива из ОбработкаОписание.СписокМоделей  Цикл
				мСписокТерминалов.Добавить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;
//попытка получения типа драйвера, который будет использоваться для сохранения настроек} 

СисИнфо = Новый СистемнаяИнформация;
мВерсияПлатформы = Число(СтрЗаменить(Лев(СисИнфо.ВерсияПриложения,3),".",""));

ПовторнаяВыгрузка = Ложь;
НоваяработаССериями = Истина;