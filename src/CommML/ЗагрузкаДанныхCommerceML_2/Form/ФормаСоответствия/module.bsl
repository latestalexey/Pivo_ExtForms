
// Хранит цвет для назначения цвета ячеек строк табличных частей
Перем мЦветНеОпределено;

//Хранить группы для записи новых элементов при потоковом создании элементов справочников 
Перем мГруппаДляНовойНоменклатуры;
Перем мГруппаДляНовыхКонтрагентов;
//Хранит вид справочника для которого вызываетсяформа выбор групп
Перем мСправочникДляВыбораГруппы;

// пустые ссылки на справочники
Перем мПустаяНоменклатура;
Перем мПустаяВалюта;
Перем мПустаяЕдиница;
Перем мПустаяКонтрагент;
Перем мПустаяТипЦен;
Перем мПустаяОрганизация;
Перем мПустойВидыНоменклатуры;
Перем мПустойБанк;
Перем мПустойБанковскийсчет; 
Перем мПустойКачество;

Перем мСтруктураИнформацииОСоответствии;

Перем мПустаяКартинка;

Перем мПередОткрытиемБылиНеСопоставленные;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Функция рассчитывает число строк в табличной части с определеннsv значением в указанном поле
//
// Параметры:
//  Таблица  - табличная часть для которой делается расчет
//  Поле     - наименование поля табличной часть для отбора
//  Значение - значение поля для формирования отбора
//
// Возвращаемое значение:
//  Число - количество отобранных строк в табличной части
//
Функция ПосчитатьКоличествоПолей(Таблица, Поле, Значение, ОбщееКоличество)

	ОбщееКоличество = Таблица.Количество();
	
	Отбор = Новый Структура(Поле, Значение);
	НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
	Если НайденныеСтроки = Неопределено тогда
		Возврат 0;
	Иначе
		Возврат НайденныеСтроки.Количество();
	КонецЕсли;

КонецФункции

// Процедура вызывает создание нового элемента справочника с открытием формы
// Вызывает процедуру создания нового элемента справочника по данным формы
// вызывается для обработки событий "ПриОткрытии" для создания новых элементов
//
// Параметры
//  Значение             - значение для записи созданного элемента справочника
//  ТипСправочника       - строка тип справочника
//
Процедура ВызватьСозданиеСправочника(Значение, ИмяЭлемента)

	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	//Андрей
	Если ИмяЭлемента = "ШтрихКоды" Тогда
		ДанныеСоответствия = мСтруктураИнформацииОСоответствии[ИмяЭлемента];
		СтрокаДанных = ДанныеСоответствия.ТабличноеПоле.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.Владелец) Тогда
			Сообщить("Сначала заполните номенклатуру!",СтатусСообщения.Важное);
			Возврат
		КонецЕсли;
		Если не ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения) Тогда
			ЕдИзм=СтрокаДанных.Владелец.ЕдиницаХраненияОстатков.Скопировать();
			ЕдИзм.Наименование=СтрокаДанных.ЕдиницаИзмеренияФайл;
			ЕдИзм.Записать();
			СтрокаДанных.ЕдиницаИзмерения=ЕдИзм.Ссылка;
		КонецЕсли;
		//Контрольная проверка
		Если ЗначениеЗаполнено(СтрокаДанных.Владелец) И ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения) Тогда
			ЗаписьОШтрихкоде=РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			//------------------------------------------------------------------
			ЗаписьОШтрихкоде.Владелец				= СтрокаДанных.Владелец;
			ЗаписьОШтрихкоде.ЕдиницаИзмерения		= СтрокаДанных.ЕдиницаИзмерения;
			ЗаписьОШтрихкоде.Качество				= Справочники.Качество.Новый;
			ЗаписьОШтрихкоде.ПредставлениеШтрихкода	= СтрокаДанных.ШтрихКодФайл;
			ЗаписьОШтрихкоде.ТипШтрихкода			= ?(СтрДлина(СокрЛП(СтрокаДанных.ШтрихКодФайл))=8,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);
			ЗаписьОШтрихкоде.Штрихкод				= СтрокаДанных.ШтрихКодФайл;
			ЗаписьОШтрихкоде.Записать();
			//------------------------------------------------------------------
			СтрокаДанных.Штрихкод=СтрокаДанных.ШтрихКодФайл;
		КонецЕсли;
	Иначе
		Если ИмяЭлемента = "ХарактеристикиНоменклатуры" Тогда 
			
			ТипСправочника = "ХарактеристикиНоменклатуры";
			СтрокаДанных = ЭлементыФормы.СоответствияТоваров.ТекущиеДанные;
			
			Если НЕ мИспользоватьХарактеристикиУНоменклатуры
				ИЛИ	СтрокаДанных.Номенклатура.Пустая() Тогда
				
				Возврат;
				
			КонецЕсли;
			
			МассивСтрок = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаДанных.Ид);
			Если МассивСтрок.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;			
			
		Иначе
			
			ДанныеСоответствия = мСтруктураИнформацииОСоответствии[ИмяЭлемента];
			
			ТипСправочника = ДанныеСоответствия.ИмяСправочникаИБ;
			СтрокаДанных = ДанныеСоответствия.ТабличноеПоле.ТекущиеДанные;
			
		КонецЕсли;
		
		СоздатьЭлементСправочникаИтеративно(ЭтаФорма, Значение, СтрокаДанных, ТипСправочника);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает цвет строки табличной части, 
// в зависимости от тго заполнено ли переданное значение
// Вызывается ТОЛЬКО из обработков события ПриВыводеСтроки
//
// Параметры:
//  ОформлениеСтроки - свойство ОформлениеСтроки обратываемого табличного поля
//  Значение         - значение по типу которого определяется цвет ячейки
//
Процедура УстановитьЦветСтроки(ОформлениеСтроки, Значение)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ОформлениеСтроки.ЦветФона = мЦветНеОпределено;
		ОформлениеСтроки.Ячейки.НомерСтроки.Картинка = БиблиотекаКартинок.Важно;
		ОформлениеСтроки.Ячейки.НомерСтроки.ОтображатьКартинку = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает доступность кнопки "СоздатьВсе" подменю "СоздатьНовый"
// командной панели формы в зависимости от наличия незаполненных строк в таблице
// Вызвается из обработчика события "ОбновлениеОтображения"
//
// Параметры:
//  ИмяСтраницы        - имя для которой вызывается процедура
//  ЧислоНезаполненных - число незаполненных строк в табличном поле страницы
//
Процедура УстановитьДоступностьКнопкиСоздатьВсе(ИмяСтраницы, ЧислоНезаполненных, Панель)

	Панель.Кнопки.СоздатьВсе.Доступность = ЧислоНезаполненных <> 0;	

КонецПроцедуры

// Процедура устанавливает доступность кнопки "СоздатьПоТекущейСтроке" подменю "СоздатьНовый"
// командной панели формы в зависимости от наличия незаполненных строк в таблице
// Вызвается из обработчика события "ОбновлениеОтображения"
//
// Параметры:
//  Таблица  - табличное поле
//  Реквизит - имя реквизита табличной части по которому определяется доступность кнопки
//
Процедура УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке(ИмяСтраницы, Таблица, Реквизит, Панель)

	Если Таблица.ТекущаяСтрока = Неопределено Тогда
		Панель.Кнопки.СоздатьПоТекущейСтроке.Доступность = ЛОЖЬ;
	Иначе
		Панель.Кнопки.СоздатьПоТекущейСтроке.Доступность = НЕ ЗначениеЗаполнено(Таблица.ТекущаяСтрока[Реквизит]);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Функция ВернутьИмяСтраницыНеСопоставленныхЭлементов(ЕстьНеСопоставленныеЭлементы = Ложь) Экспорт
	
	Перем ЧислоВсех;
	
	Для Каждого СтрокаСоответствия Из мСтруктураИнформацииОСоответствии Цикл
		
		ДанныеСтроки = СтрокаСоответствия.Значение;
		
		ЧислоНезаполненных = ПосчитатьКоличествоПолей(ДанныеСтроки.Соответствие, ДанныеСтроки.ИмяПоляПоиска, ДанныеСтроки.ПустаяСсылка, ЧислоВсех);
		
		Если ЧислоНезаполненных > 0 Тогда
			ЕстьНеСопоставленныеЭлементы = Истина;
			Возврат СтрокаСоответствия.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьНеСопоставленныеЭлементы = Ложь;
	Возврат "Номенклатура";
	
КонецФункции

Процедура ОбновитьВидимостьСтраницСопоставления()
	
	Для Каждого ЭлементСтруктуры Из мСтруктураИнформацииОСоответствии Цикл
		
		ЭлементыФормы.ОсновнаяПанель.Страницы[ЭлементСтруктуры.Ключ].Видимость = ЭлементСтруктуры.Значение.Соответствие.Количество() > 0;	
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ИмяПервойНесопоставленнойЗакладки = ВернутьИмяСтраницыНеСопоставленныхЭлементов(мПередОткрытиемБылиНеСопоставленные);
	
	Если НЕ ЗначениеЗаполнено(НачальнаяСтраница) Тогда
		
		// ищем первую страницу на которой есть не сопоставленные данные
		НачальнаяСтраница = ИмяПервойНесопоставленнойЗакладки;	
				
	КонецЕсли;
		
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[НачальнаяСтраница];
	ДанныеСоответствия = мСтруктураИнформацииОСоответствии[НачальнаяСтраница];
	
	ТаблицаДляПоиска = ДанныеСоответствия.Соответствие;
	ТаблицаДляВыбора = ДанныеСоответствия.ТабличноеПоле;
	
	Если НачальнаяСтрока <> Неопределено тогда
		НайденныеСтроки = ТаблицаДляПоиска.НайтиСтроки(НачальнаяСтрока);
	Иначе
		НайденныеСтроки = Новый Массив();
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТаблицаДляВыбора.ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	
	ОбновитьВидимостьСтраницСопоставления();
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
// обновляют заголовки страниц панели ОсновнаяПанели
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		ОбновитьИнформацияОСопоставленныхОбъектахСтраницы(СтраницаПанели);		
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИнформацияОСопоставленныхОбъектахСтраницы(СтраницаПанели)
	
	Перем ЧислоВсех;
	
	ДанныеСоответствия = мСтруктураИнформацииОСоответствии[СтраницаПанели.Имя];
	
	Если мИспользоватьХарактеристикиУНоменклатуры
		И СтраницаПанели.Имя = "Номенклатура" Тогда
		
		ОбщееКоличество = ДанныеСоответствия.Соответствие.Количество();
		ЧислоНезаполненных = 0;
		
		Для Каждого СтрокаТаблицы Из ДанныеСоответствия.Соответствие Цикл
			
			Если СтрокаТаблицы.Номенклатура.Пустая() Тогда
				
				ЧислоНезаполненных = ЧислоНезаполненных + 1;
				
			ИначеЕсли СтрокаТаблицы.ХарактеристикаНоменклатуры.Пустая() Тогда
				
				МассивСтрок = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаТаблицы.Ид);
				Если МассивСтрок.Количество() > 0 Тогда
					ЧислоНезаполненных = ЧислоНезаполненных + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	
		ЧислоНезаполненных = ПосчитатьКоличествоПолей(ДанныеСоответствия.Соответствие, ДанныеСоответствия.ИмяПоляПоиска, ДанныеСоответствия.ПустаяСсылка, ЧислоВсех);
		
	КонецЕсли;
	
	Если ДанныеСоответствия.ЕстьКнопкаВсе Тогда
		УстановитьДоступностьКнопкиСоздатьВсе(СтраницаПанели.Имя, ЧислоНезаполненных, ДанныеСоответствия.КоманднаяПанель);
	КонецЕсли;
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке(СтраницаПанели.Имя, ДанныеСоответствия.ТабличноеПоле, ДанныеСоответствия.ИмяПоляПоиска, ДанныеСоответствия.КоманднаяПанель);
	
	Если ЧислоНезаполненных = 0 Тогда
		СтраницаПанели.Заголовок =  ДанныеСоответствия.ИмяДляПользователя;		
	Иначе
		СтраницаПанели.Заголовок =  ДанныеСоответствия.ИмяДляПользователя + " (" + ЧислоНезаполненных + ")";		
	КонецЕсли;
		
	СтраницаПанели.КартинкаЗаголовка = ?(ЧислоНезаполненных > 0, БиблиотекаКартинок.Важно, мПустаяКартинка);		
				
КонецПроцедуры

Функция ЗаполнитьСтруктуруИнформацииОСоответствииОбъектов()
	
	СтруктураСоответствия = Новый Структура();
	
	СтруктураСоответствия.Вставить("Валюты", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Валюты", "НовыйВалюта", СоответствияВалют, мПустаяВалюта, ЭлементыФормы.КоманднаяПанельВалюты, ЭлементыФормы.СоответствияВалют, Ложь, "Валюты"));		
	
	СтруктураСоответствия.Вставить("Организации", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Организации", "НовыйОрганизация", СоответствияОрганизаций, мПустаяОрганизация, ЭлементыФормы.КоманднаяПанельОрганизации, ЭлементыФормы.СоответствияОрганизаций, Ложь, "Организации"));
		
	СтруктураСоответствия.Вставить("Контрагенты", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Контрагенты", "НовыйКонтрагент", СоответствияКонтрагентов, мПустаяКонтрагент, ЭлементыФормы.КоманднаяПанельКонтрагенты, ЭлементыФормы.СоответствияКонтрагентов, Истина, "Контрагенты"));
		
	СтруктураСоответствия.Вставить("Банки", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Банки", "НовыйБанк", СоответствияБанков, мПустойБанк, ЭлементыФормы.КоманднаяПанельБанки, ЭлементыФормы.СоответствияБанков, Ложь, "Банки"));		
		
	СтруктураСоответствия.Вставить("БанковскиеСчета", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Банковские счета", "НовыйНомерсчета", СоответствияБанковскихСчетов, мПустойБанковскийсчет, ЭлементыФормы.КоманднаяПанельБанковскиеСчета, ЭлементыФормы.СоответствияБанковскихСчетов, Ложь, "БанковскиеСчета"));		
		
	СтруктураСоответствия.Вставить("ЕдиницыИзмерения", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Единицы измерения", "НовыйЕдиницаИзмерения", СоответствияЕдиницИзмерения, мПустаяЕдиница, ЭлементыФормы.КоманднаяПанельЕдиницыИзмерения, ЭлементыФормы.СоответствияЕдиницИзмерения, Истина, "КлассификаторЕдиницИзмерения"));
		
	СтруктураСоответствия.Вставить("ВидыНоменклатуры", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Виды номенклатуры", "НовыйВидНоменклатуры", СоответствиеВидовНоменклатуры, мПустойВидыНоменклатуры, ЭлементыФормы.КоманднаяПанельВидыНоменулатуры, ЭлементыФормы.СоответствиеВидовНоменклатуры, Истина, "ВидыНоменклатуры"));
		
	СтруктураСоответствия.Вставить("Номенклатура", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Номенклатура", "Номенклатура", СоответствияТоваров, мПустаяНоменклатура, ЭлементыФормы.КоманднаяПанельНоменклатура, ЭлементыФормы.СоответствияТоваров, Истина, "Номенклатура"));
		
	СтруктураСоответствия.Вставить("Качество", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Качество", "НовыйКачество", СоответствияКачества, мПустойКачество, ЭлементыФормы.КоманднаяПанельКачество, ЭлементыФормы.СоответствияКачества, Истина, "Качество"));
		
	СтруктураСоответствия.Вставить("ТипыЦенКонтрагентов", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Типы цен", "НовыйТипЦены", СоответствияТиповЦен, мПустаяТипЦен, ЭлементыФормы.КоманднаяПанельТипЦен, ЭлементыФормы.СоответствияТиповЦен, Истина, "ТипыЦенНоменклатурыКонтрагентов"));		
		
	//Андрей	
	СтруктураСоответствия.Вставить("ШтрихКоды", Новый Структура("ИмяДляПользователя, ИмяПоляПоиска, Соответствие, ПустаяСсылка, КоманднаяПанель, ТабличноеПоле, ЕстьКнопкаВсе, ИмяСправочникаИБ", 
		"Штрихкод", "ШтрихКод", СоответствиеШтрихкодов, "", ЭлементыФормы.КоманднаяПанельШтрихкоды, ЭлементыФормы.СоответствияШтрихкодов, Истина, "Штрихкоды"));		
				
	Возврат СтруктураСоответствия;
	
КонецФункции

// Процедура - обработчик события "ПриСменеСтраницы" панели "ОсновнаяПанель".
// обновляет доступность кнопок подменб "СоздатьНовый"
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьИнформацияОСопоставленныхОбъектахСтраницы(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница);
	
	СформироватьТекстПодсказкиПоТекущейЗакладке();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
// присваивает значения группы по умолчанию для потокового сохранения объектов
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если мСправочникДляВыбораГруппы = "Номенклатура" Тогда
		мГруппаДляНовойНоменклатуры = ЗначениеВыбора;
	ИначеЕсли мСправочникДляВыбораГруппы = "Контрагенты" Тогда
		мГруппаДляНовыхКонтрагентов = ЗначениеВыбора;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура УстановитьПометкуУВсехКнопокФильтрации(Пометка)
	
	Для Каждого СтрокаСоответствия Из мСтруктураИнформацииОСоответствии Цикл
		
		ДанныеСтроки = СтрокаСоответствия.Значение;
		
		ДанныеСтроки.КоманднаяПанель.Кнопки.ПоказатьТолькоНеопределенные.Пометка = Пометка;
				
	КонецЦикла;	
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПоказатьТолькоНеопределенные" 
// командной панели "КоманднаяПанель" для смены режима отборов табличных полей панели
// ОсновнаяПанель, устанавливает-сбрасывает отборы по пустому значению
// объекта-соответствия
//
Процедура КоманднаяПанельПоказатьТолькоНеопределенные(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УстановитьПометкуУВсехКнопокФильтрации(Кнопка.Пометка);

	Если Кнопка.Пометка Тогда

		Для Каждого СтрокаСоответствия Из мСтруктураИнформацииОСоответствии Цикл
			
			ДанныеСтроки = СтрокаСоответствия.Значение;
			
			ДанныеСтроки.ТабличноеПоле.ОтборСтрок[ДанныеСтроки.ИмяПоляПоиска].Установить(ДанныеСтроки.ПустаяСсылка);
			ДанныеСтроки.ТабличноеПоле.НастройкаОтбораСтрок[ДанныеСтроки.ИмяПоляПоиска].Доступность = ЛОЖЬ;			
			
		КонецЦикла;	

	Иначе

		Для Каждого СтрокаСоответствия Из мСтруктураИнформацииОСоответствии Цикл
			
			ДанныеСтроки = СтрокаСоответствия.Значение;
			
			ДанныеСтроки.ТабличноеПоле.ОтборСтрок[ДанныеСтроки.ИмяПоляПоиска].Использование         = ЛОЖЬ;
			ДанныеСтроки.ТабличноеПоле.НастройкаОтбораСтрок[ДанныеСтроки.ИмяПоляПоиска].Доступность = Истина;			
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии пункта меню "СоздатьПоТекущейСтроке" 
// пожменю "СоздатьНовый" командной панели "КоманднаяПанель" для вызова процедур создания
// нового элемента справочника
//
Процедура КоманднаяПанельСоздатьПоТекущейСтроке(Кнопка)

	ИмяСтраницы = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	ДанныеСоответствия = мСтруктураИнформацииОСоответствии[ИмяСтраницы];
	
	ТекСтрока = ДанныеСоответствия.ТабличноеПоле.ТекущаяСтрока;
	Если ТекСтрока = Неопределено 
		ИЛИ ЗначениеЗаполнено(ТекСтрока[ДанныеСоответствия.ИмяПоляПоиска]) Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	ВызватьСозданиеСправочника(ТекСтрока[ДанныеСоответствия.ИмяПоляПоиска], ИмяСтраницы);
	
КонецПроцедуры

Процедура ОпределитьИнНоменклатурыИХарактеристики(Ид, ИдНоменклатуры, ИдХарактеристики)
	
	ПозицияРешетки = Найти(Ид, "#");
	Если ПозицияРешетки = 0 Тогда
		
		ИдНоменклатуры = ПозицияРешетки;
		ИдХарактеристики = "";
		
	Иначе
		
		ИдНоменклатуры = Сред(Ид, 1, ПозицияРешетки - 1);
		ИдХарактеристики = Сред(Ид, ПозицияРешетки + 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОсновнойДоговорКонтрагента(ОбъектКонтрагента)

	Если ЗначениеЗаполнено(ОбъектКонтрагента.ОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НайденныйДоговорОбъект.Наименование = "Основной договор";

	НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
	Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
	КонецЕсли;

	НайденныйДоговорОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	Организации.Ссылка
					   |ИЗ
					   |	Справочник.Организации КАК Организации";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
		Иначе
			Сообщить("Не удалось записать основной договор контрагента (не найдена организация).");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	НайденныйДоговорОбъект.Владелец           = ОбъектКонтрагента.Ссылка;
	НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;

	Если ОбъектКонтрагента.Покупатель Тогда
		НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	ИначеЕсли ОбъектКонтрагента.Поставщик Тогда
		НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	Иначе
		НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;

	Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Иначе
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		КонецЕсли;
		НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");

	КонецЕсли;


	Если (НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	 ИЛИ  НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
	   И НайденныйДоговорОбъект.ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		НайденныйДоговорОбъект.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;

	Если ОбъектКонтрагента.НеЯвляетсяРезидентом И НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НайденныйДоговорОбъект.РеализацияНаЭкспорт = Истина;
	КонецЕсли;

	Если НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
	 ИЛИ НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		НайденныйДоговорОбъект.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	КонецЕсли;

	Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		НайденныйДоговорОбъект.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;

	Попытка
		НайденныйДоговорОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
		Возврат;
	КонецПопытки;

	ОбъектКонтрагента.ОсновнойДоговорКонтрагента = НайденныйДоговорОбъект.Ссылка;
	ОбъектКонтрагента.Записать();
	
КонецПроцедуры

// Процедура вызывается при нажатии пункта меню "СоздатьВсе" 
// пожменю "СоздатьНовый" командной панели "КоманднаяПанель" для вызова процедур создания
// новых элементов для всех неопределенных строк
//
Процедура КоманднаяПанельСоздатьВсе(Кнопка)

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Номенклатура" Тогда
		Ответ = Вопрос("Создать новые элементы номенклатуры для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		мСправочникДляВыбораГруппы = "Номенклатура";
		
		Если мСоотвествияКаталогов.Количество() > 0 Тогда
		
			ОтветПользователя = Вопрос("Повторить иерархию элементов номенклатуры из источника?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Создание номенклатурных позиций");
			ИерархияИсточника = (ОтветПользователя = КодВозвратаДиалога.Да);
			
		Иначе
			
			ИерархияИсточника = Ложь;
			
		КонецЕсли;
		
		Если Не ИерархияИсточника Тогда
			ФормаВыбора                = Справочники.Номенклатура.ПолучитьФормуВыбораГруппы( , ЭтаФорма);
			ФормаВыбора.Заголовок      = "Выбор группы для записи новых элементов номенклатуры";
			ФормаВыбора.ОткрытьМодально();
		КонецЕсли;
		
		СоответствиеСозданныхНоменклатур = Новый Соответствие();

		Для Каждого СтрокаТаблицы Из СоответствияТоваров Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
				И ЗначениеЗаполнено(СтрокаТаблицы.ХарактеристикаНоменклатуры) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			//возможно в Ид присутствует еще и идентификатор характеристики
			// если это так то сначала поищем номенклатуру по уже созданном номенклатурам
			ИдНоменклатуры = "";
			ИдХарактеристики = "";
			СсылкаНаНоменклатуру = ?(ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура), СтрокаТаблицы.Номенклатура, Неопределено);
			СсылкаНаХарактеристику = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						
			ОпределитьИнНоменклатурыИХарактеристики(СтрокаТаблицы.Ид, ИдНоменклатуры, ИдХарактеристики);
			НоменклатураСуществовала = Ложь;
			
			Если ЗначениеЗаполнено(СсылкаНаНоменклатуру) Тогда
				
				СоответствиеСозданныхНоменклатур.Вставить(ИдНоменклатуры, СсылкаНаНоменклатуру);
				НоменклатураСуществовала = Истина;
												
			Иначе
			
				Если мИспользоватьХарактеристикиУНоменклатуры
					И НЕ ПустаяСтрока(ИдХарактеристики) Тогда
					
					// попробуем найти номенклатуру уже среди созданных	
					СсылкаНаНоменклатуру = СоответствиеСозданныхНоменклатур.Получить(ИдНоменклатуры);				
					СтрокаТаблицы.Номенклатура = СсылкаНаНоменклатуру;
									
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаНоменклатуру) Тогда
			
				СпрНоменклатура          = СоздатьНоменклатуру(СтрокаТаблицы, ИерархияИсточника);
				Если Не ИерархияИсточника Тогда
					СпрНоменклатура.Родитель = мГруппаДляНовойНоменклатуры;
				КонецЕсли;
				
				Попытка                                                         
					СпрНоменклатура.Записать();
					СсылкаНаНоменклатуру = СпрНоменклатура.Ссылка;
					СтрокаТаблицы.Номенклатура = СсылкаНаНоменклатуру;
					
					СоответствиеСозданныхНоменклатур.Вставить(ИдНоменклатуры, СсылкаНаНоменклатуру);
					
					Сообщить("Создан элемент номенклатуры "+СпрНоменклатура);
				Исключение
					Сообщить("Ошибка при записи элемента номенклатуры "+СпрНоменклатура, СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
				
				СсылкаНаЕдиницуИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);
				
				//Регистрируем единицу измерения
				СсылкаНаЕдиницуИзмерения = ПолучитьЕдиницуИзмеренияНоменклатуры(СтрокаТаблицы);;
				Попытка
					СпрНоменклатура.ЕдиницаХраненияОстатков = СсылкаНаЕдиницуИзмерения;
					СпрНоменклатура.ЕдиницаДляОтчетов       = СсылкаНаЕдиницуИзмерения;
					СпрНоменклатура.Записать();
				Исключение
					Сообщить("Ошибка при записи единицы измерения элемента номенклатуры"+СпрНоменклатура, СтатусСообщения.Важное);
				КонецПопытки;
				
			Конецесли;
			
			// создание характеристики если необходимо
			Если мИспользоватьХарактеристикиУНоменклатуры Тогда
				
				МассивСтрок = ПолучитьМассивСтрокХарактеристикНоменкалтуры(СтрокаТаблицы.Ид);
				Если МассивСтрок.Количество() <> 0 Тогда
					
					Спр = СоздатьХарактеристикиНоменклатуры(СтрокаТаблицы);
					Спр.Записать();
					
					СсылкаНаХарактеристику = Спр.ссылка;
					
					СтрокаТаблицы.ХарактеристикаНоменклатуры = СсылкаНаХарактеристику;
					
				Иначе
					
					Если НоменклатураСуществовала Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если НоменклатураСуществовала Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
						

			//Регистрируем штрихкод
			Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихКод) Тогда
				ТекЗапись                  = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				ТекЗапись.Штрихкод         = СтрокаТаблицы.ШтрихКод;
				ТекЗапись.Владелец         = СсылкаНаНоменклатуру;
				ТекЗапись.ЕдиницаИзмерения = СсылкаНаНоменклатуру.ЕдиницаХраненияОстатков;
				ТекЗапись.ХарактеристикаНоменклатуры = СсылкаНаХарактеристику;
				ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
				ТекЗапись.Качество         = Справочники.Качество.Новый;
				ТекЗапись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		// сопоставления номенклатур
		ЗаменитьТоварыПоСоответствиям();
	 	
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Контрагенты" Тогда
		Ответ = Вопрос("Создать новых контрагентов для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		мСправочникДляВыбораГруппы = "Контрагенты";
		ФормаВыбора                = Справочники.Контрагенты.ПолучитьФормуВыбораГруппы( , ЭтаФорма);
		ФормаВыбора.Заголовок      = "Выбор группы для записи новых элементов";
		ФормаВыбора.ОткрытьМодально();

		Для Каждого СтрокаТаблицы Из СоответствияКонтрагентов Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйКонтрагент) Тогда
				Продолжить;
			КонецЕсли;
			
			СпрКонтрагент          = СоздатьКонтрагента(СтрокаТаблицы);
			СпрКонтрагент.Родитель = мГруппаДляНовыхКонтрагентов;
			Попытка
				СпрКонтрагент.Записать();
				СтрокаТаблицы.НовыйКонтрагент = СпрКонтрагент.Ссылка;
				Сообщить("Создан контрагент "+СпрКонтрагент);
			Исключение
				Сообщить("Ошибка при записи контрагента "+СпрКонтрагент, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		ПроверитьОсновнойДоговорКонтрагента(СпрКонтрагент);
		
		ЗаменитьКонтрагентовПоСоответствиям();
 			
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ЕдиницыИзмерения" Тогда
		Ответ = Вопрос("Создать единицы измерения для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СоответствияЕдиницИзмерения Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйЕдиницаИзмерения) Тогда
				Продолжить;
			КонецЕсли;
						
			Спр = СоздатьЕдиницуИзмерения(СтрокаТаблицы);
			Попытка
				Спр.Записать();
				СтрокаТаблицы.НовыйЕдиницаИзмерения = Спр.Ссылка;
				Сообщить("Создана единица измерения " + Спр);
			Исключение
				Сообщить("Ошибка при записи единицы измерения " + Спр, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаменитьЕдиницыПоСоответствиям();
 			
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ВидыНоменклатуры" Тогда
		Ответ = Вопрос("Создать виды номенклатуры для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СоответствиеВидовНоменклатуры Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйВидНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
						
			Спр = СоздатьВидНоменклатуры(СтрокаТаблицы);
			Попытка
				Спр.Записать();
				СтрокаТаблицы.НовыйВидНоменклатуры = Спр.Ссылка;
				Сообщить("Создан вид номенклатуры " + Спр);
			Исключение
				Сообщить("Ошибка при записи вида номенклатуры " + Спр, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаменитьВидыНоменклатурыПоСоответствиям();
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Качество" Тогда
		Ответ = Вопрос("Создать качество для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СоответствияКачества Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйКачество) Тогда
				Продолжить;
			КонецЕсли;
						
			Спр = СоздатьКачество(СтрокаТаблицы);
			Попытка
				Спр.Записать();
				СтрокаТаблицы.НовыйКачество = Спр.Ссылка;
				Сообщить("Создано качество " + Спр);
			Исключение
				Сообщить("Ошибка при записи качества " + Спр, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаменитьКачествоПоСоответствиям();
 	
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ТипыЦенКонтрагентов" Тогда
		Ответ = Вопрос("Создать новые типы цен для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СоответствияТиповЦен Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НовыйТипЦены) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)Тогда
				Продолжить;
			КонецЕсли;
			
			СпрТипыЦен = СоздатьТипЦен(СтрокаТаблицы);
			
			Если СпрТипыЦен = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				СпрТипыЦен.Записать();
				СтрокаТаблицы.НовыйТипЦены = СпрТипыЦен.Ссылка;
				Сообщить("Создан тип цен контрагента " + СпрТипыЦен);
			Исключение
				Сообщить("Ошибка при записи типа цен контрагента  "+СпрТипыЦен, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаменитьТипыЦенПоСоответствиям();
	//Андрей
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Штрихкоды" Тогда
		Ответ = Вопрос("Создать новые штрихкода для всех неопределенных строк?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Создание элементов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из СоответствиеШтрихкодов Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихКод) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.Владелец)Тогда
				Продолжить;
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ЕдИзм=СтрокаТаблицы.Владелец.ЕдиницаХраненияОстатков.Скопировать();
				ЕдИзм.Наименование=СтрокаТаблицы.ЕдиницаИзмеренияФайл;
				ЕдИзм.Записать();
				СтрокаТаблицы.ЕдиницаИзмерения=ЕдИзм.Ссылка;
			КонецЕсли;
			//Контрольная проверка
			Если ЗначениеЗаполнено(СтрокаТаблицы.Владелец) И ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ЗаписьОШтрихкоде=РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				//------------------------------------------------------------------
				ЗаписьОШтрихкоде.Владелец				= СтрокаТаблицы.Владелец;
				ЗаписьОШтрихкоде.ЕдиницаИзмерения		= СтрокаТаблицы.ЕдиницаИзмерения;
				ЗаписьОШтрихкоде.Качество				= Справочники.Качество.Новый;
				ЗаписьОШтрихкоде.ПредставлениеШтрихкода	= СтрокаТаблицы.ШтрихКодФайл;
				ЗаписьОШтрихкоде.ТипШтрихкода			= ?(СтрДлина(СокрЛП(СтрокаТаблицы.ШтрихКодФайл))=8,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13,ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);
				ЗаписьОШтрихкоде.Штрихкод				= СтрокаТаблицы.ШтрихКодФайл;
				
				Попытка
					ЗаписьОШтрихкоде.Записать();
					СтрокаТаблицы.Штрихкод=СтрокаТаблицы.ШтрихКодФайл;
					Сообщить("Создан штрихкод номенклатуры " + СтрокаТаблицы.Владелец.Наименование+" "+СтрокаТаблицы.ШтрихКодФайл);
				Исключение
					Сообщить("Ошибка при записи штрихкода "+СтрокаТаблицы.ШтрихКодФайл, СтатусСообщения.Важное);
				КонецПопытки;
				//------------------------------------------------------------------
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаменитьТипыЦенПоСоответствиям();
		
 	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОК" командной панели "ОсновныеДействияФормы"
//для сохрания изменеий и закрытия формы
//
Процедура КнопкаОКНажатие(Кнопка)

	ВыполнитьЗаменуВсехСоответствий();

	Закрыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответствияТоваров

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответствияТоваров". устанавливает цвет строки
//
Процедура СоответствияТоваровПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Номенклатура", ЭлементыФормы.СоответствияТоваров, "Номенклатура", ЭлементыФормы.КоманднаяПанельНоменклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответствияТоваров". устанавливает цвет строки
//
Процедура СоответствияТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	// надо проверить номенклатуру и характеристику...
	Если мИспользоватьХарактеристикиУНоменклатуры Тогда
		
		Если ДанныеСтроки.Номенклатура.Пустая() Тогда
				
			УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.Номенклатура);
			
		ИначеЕсли ДанныеСтроки.ХарактеристикаНоменклатуры.Пустая() Тогда
			
			МассивСтрок = ПолучитьМассивСтрокХарактеристикНоменкалтуры(ДанныеСтроки.Ид);
			Если МассивСтрок.Количество() > 0 Тогда
				УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.ХарактеристикаНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;		
			
	Иначе
    	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.Номенклатура);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "Номенклатура"
// в строке табличной части "СоответствияТоваров".
//
Процедура СоответствияТоваровНоменклатураОчистка(Элемент, СтандартнаяОбработка)

	ЭлементыФормы.СоответствияТоваров.ТекущиеДанные.ХарактеристикаНоменклатуры = "";

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "Номенклатура"
// в строке табличной части "СоответствияТоваров", создает новый элемент 
// справочника Номенклатура, если поле пустое
//
Процедура СоответствияТоваровНоменклатураОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Номенклатура");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответстияВалют

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответстияВалют". устанавливает цвет строки
//
Процедура СоответствияВалютПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Валюты", ЭлементыФормы.СоответствияВалют, "НовыйВалюта", ЭлементыФормы.КоманднаяПанельВалюты);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответстияВалют". устанавливает цвет строки
//
Процедура СоответстияВалютПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйВалюта);

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "НовыйВалюта"
// в строке табличной части "СоответстияВалют", создает новый элемент 
// справочника Валюты, если поле пустое
//
Процедура СоответстияВалютНовыйВалютаОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Валюты");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответствияЕдиницИзмерения

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответствияЕдиницИзмерения". устанавливает цвет строки
//
Процедура СоответствияЕдиницИзмеренияПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("НовыйЕдиницаИзмерения", ЭлементыФормы.СоответствияЕдиницИзмерения, "НовыйЕдиницаИзмерения", ЭлементыФормы.КоманднаяПанельЕдиницыИзмерения);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответствияЕдиницИзмерения". устанавливает цвет строки
//
Процедура СоответствияЕдиницИзмеренияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйЕдиницаИзмерения);

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "НовыйЕдиницаИзмерения"
// в строке табличной части "СоответствияЕдиницИзмерения", создает новый элемент 
// справочника КлассификаторЕдиницИзмерения, если поле пустое
//
Процедура СоответствияЕдиницИзмеренияНовыйЕдиницаИзмеренияОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "ЕдиницыИзмерения");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответствияКонтрагентов

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответствияКонтрагентов". устанавливает цвет строки
//
Процедура СоответствияКонтрагентовПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Контрагенты", ЭлементыФормы.СоответствияКонтрагентов, "НовыйКонтрагент", ЭлементыФормы.КоманднаяПанельКонтрагенты);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответствияКонтрагентов". устанавливает цвет строки
//
Процедура СоответствияКонтрагентовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйКонтрагент);

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "НовыйКонтрагент"
// в строке табличной части "СоответствияКонтрагентов", создает новый элемент 
// справочника Контрагенты, если поле пустое
//
Процедура СоответствияКонтрагентовНовыйКонтрагентОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Контрагенты");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответствияТиповЦен

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответствияТиповЦен". устанавливает цвет строки
//
Процедура СоответствияТиповЦенПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("ТипыЦенКонтрагентов", ЭлементыФормы.СоответствияТиповЦен, "НовыйТипЦены", ЭлементыФормы.КоманднаяПанельТипЦен);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответствияТиповЦен". устанавливает цвет строки
//
Процедура СоответствияТиповЦенПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйТипЦены);

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "НовыйТипЦены"
// в строке табличной части "СоответствияТиповЦен", создает новый элемент 
// справочника ТипыЦенНоменклатурыКонтрагентов, если поле пустое
//
Процедура СоответствияТиповЦенНовыйТипЦеныОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "ТипыЦенКонтрагентов");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СоответстсвияОрганизаций

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
// "СоответстсвияОрганизаций". устанавливает цвет строки
//
Процедура СоответствияОрганизацийПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Организации", ЭлементыФормы.СоответствияОрганизаций, "НовыйОрганизация", ЭлементыФормы.КоманднаяПанельОрганизации);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СоответстсвияОрганизаций". устанавливает цвет строки
//
Процедура СоответствияОрганизацийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйОрганизация);

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "НовыйОрганизация"
// в строке табличной части "СоответстсвияОрганизаций", создает новый элемент 
// справочника Организации, если поле пустое
//
Процедура СоответствияОрганизацийНовыйОрганизацияОткрытие(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Организации");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;

КонецПроцедуры


Процедура СоответствиеВидовНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("ВидыНоменклатуры", ЭлементыФормы.СоответствиеВидовНоменклатуры, "НовыйВидНоменклатуры", ЭлементыФормы.КоманднаяПанельВидыНоменулатуры);
	
КонецПроцедуры

Процедура СоответствиеВидовНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйВидНоменклатуры);	
	
КонецПроцедуры

Процедура СоответствиеВидовНоменклатурыНовыйВидНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
		
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "ВидыНоменклатуры");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;	
	
КонецПроцедуры


Процедура СоответствияБанковПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Банки", ЭлементыФормы.СоответствияБанков, "НовыйБанк", ЭлементыФормы.КоманднаяПанельБанки);
	
КонецПроцедуры

Процедура СоответствияБанковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйБанк);	
	
КонецПроцедуры

Процедура СоответствияБанковНовыйБанкОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Банки");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоответствияБанковскихСчетовПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("БанковскиеСчета", ЭлементыФормы.СоответствияБанковскихСчетов, "НовыйНомерСчета", ЭлементыФормы.КоманднаяПанельБанковскиеСчета);
	
КонецПроцедуры

Процедура СоответствияБанковскихСчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйНомерСчета);	
	
КонецПроцедуры

Процедура СоответствияБанковскихСчетовНовыйНомерСчетаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "БанковскиеСчета");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименитьСоответствия(Кнопка)
	
	ВыполнитьЗаменуВсехСоответствий();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ПриЗакрытииЕстьНесопоставленные = Ложь;
	ВернутьИмяСтраницыНеСопоставленныхЭлементов(ПриЗакрытииЕстьНесопоставленные);
	
	Параметры = Новый Структура("ПередОткрытиемБылиНеСопоставленные,ПриЗакрытииЕстьНесопоставленные", мПередОткрытиемБылиНеСопоставленные, ПриЗакрытииЕстьНесопоставленные);
	Оповестить("Сопоставление", Параметры);
	
	СохранитьЗначение("CommerceML.ЗагрузкаДанных.СопоставлениеОбъектов.Помощь", ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Помощь.Пометка);
	
КонецПроцедуры

Процедура СоответствияТоваровХарактеристикаНоменклатурыОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "ХарактеристикиНоменклатуры");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоответствияКачестваПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("НовыйКачество", ЭлементыФормы.СоответствияКачества, "НовыйКачество", ЭлементыФормы.КоманднаяПанельКачество);
	
КонецПроцедуры

Процедура СоответствияКачестваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.НовыйКачество);	
	
КонецПроцедуры

Процедура СоответствияКачестваНовыйКачествоОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ВызватьСозданиеСправочника(Элемент.Значение, "Качество");
		СтандартнаяОбработка = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка; 
	ВыполнитьДействияПриНажатииНаПомощь();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПоказПомощи = ВосстановитьЗначение("CommerceML.ЗагрузкаДанных.СопоставлениеОбъектов.Помощь");
	
	Если ПоказПомощи = Неопределено Тогда
		ПоказПомощи = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Помощь.Пометка = ПоказПомощи;
	
	ВыполнитьДействияПриНажатииНаПомощь();
	
КонецПроцедуры

Процедура ВыполнитьДействияПриНажатииНаПомощь()
	
	Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Помощь.Пометка Тогда
		
		ЭлементыФормы.ПанельИнформации.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ТекущийВерх = ЭлементыФормы.ОсновнаяПанель.Верх;
		ЭлементыФормы.ОсновнаяПанель.Высота = ЭтаФорма.Высота - 99;
		ЭлементыФормы.ОсновнаяПанель.Верх = 67;
		ЭлементыФормы.ПанельИнформации.Верх = 6;
		ЭлементыФормы.ПанельИнформации.Высота = 60;			
				
		ЭлементыФормы.ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельИнформации, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельИнформации.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ОсновнаяПанель, ГраницаЭлементаУправления.Верх);
		
		СформироватьТекстПодсказкиПоТекущейЗакладке();
		
	Иначе
		
		ЭлементыФормы.ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ОсновнаяПанель.Верх = 6;
		ЭлементыФормы.ОсновнаяПанель.Высота = ЭтаФорма.Высота - 39;
				
		ЭлементыФормы.ПанельИнформации.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельИнформации.Высота = 0;

	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТекстПодсказкиПоТекущейЗакладке()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Организации" Тогда
	
		ИмяКолонки = "Организация";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Банки" Тогда
	
		ИмяКолонки = "Банк";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "БанковскиеСчета" Тогда
	
		ИмяКолонки = "Счет";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Валюты" Тогда
	
		ИмяКолонки = "Валюта";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Контрагенты" Тогда
	
		ИмяКолонки = "Контрагент";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ЕдиницыИзмерения" Тогда
	
		ИмяКолонки = "Единица измерения";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ВидыНоменклатуры" Тогда
	
		ИмяКолонки = "Вид номенклатуры";
		
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ТипыЦенКонтрагентов" Тогда
	
		ИмяКолонки = "Тип цены";
		
	Иначе
		
		ИмяКолонки = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя ;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьПояснениеДляПользователя.Заголовок = "- программа отмечает те элементы из файла обмена, которым не удалось автоматически найти соответствия в информационой базе. Для каждого случая нужно либо ""Создать по данным из файла"" либо выбрать уже существующий объект в колонке "
		+ """" + ИмяКолонки + """" + ".";	
	
КонецПроцедуры

Процедура СоответствияШтрихкодовПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКнопкиСоздатьПоТекущейСтроке("Штрихкоды", ЭлементыФормы.СоответствияШтрихкодов, "Штрихкод", ЭлементыФормы.КоманднаяПанельШтрихкоды);
КонецПроцедуры

Процедура СоответствияШтрихкодовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.ШтрихКод);
	УстановитьЦветСтроки(ОформлениеСтроки, ДанныеСтроки.Владелец);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

//Назначаем цвета для строк с определенными и неопределенными объектами
мЦветНеОпределено = WebЦвета.ЗамшаСветлый;

мПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
мПустаяВалюта       = Справочники.Валюты.ПустаяСсылка();
мПустаяЕдиница      = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
мПустаяКонтрагент   = Справочники.Контрагенты.ПустаяСсылка();
мПустаяТипЦен       = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
мПустаяОрганизация  = Справочники.Организации.ПустаяСсылка();
мПустойВидыНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
мПустойБанк = Справочники.Банки.ПустаяСсылка();
мПустойБанковскийсчет = Справочники.БанковскиеСчета.ПустаяСсылка();
мПустойКачество = Справочники.Качество.ПустаяСсылка();

мСтруктураИнформацииОСоответствии = ЗаполнитьСтруктуруИнформацииОСоответствииОбъектов();

мПустаяКартинка = Новый Картинка;
