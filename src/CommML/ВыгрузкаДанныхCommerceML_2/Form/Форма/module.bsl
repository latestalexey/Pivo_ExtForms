
Перем СтароеЗначениеВыбораТИпаВыгрузки;

// Структура содержащая данные о связи элементов управления быстрых отборов с данными
Перем СтруктураСвязиЭлементовСДанными;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет дерево "ДеревоДокументов"
//
Процедура ЗаполнитьДеревоДокументов()
	
	Если ДеревоДокументов.Строки.Количество() > 0 Тогда
		
		// вопрос пользователю об очисте кутещих данных
		ОтветПользователя = Вопрос("Очистить текущий список выбранных документов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Очистка списка выбранных документов");
		
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
			
			ДеревоДокументов.Строки.Очистить();	
			
		КонецЕсли;
		
	КонецЕсли;

	ПостроительОтчетаДокументы.Отбор.Организация.Использование = ЗначениеЗаполнено(Организация) ;
	ПостроительОтчетаДокументы.Отбор.Организация.Значение      = Организация;
		
	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование = ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.Контрагент.Значение);
	
	//ограничение С приводим к началу дня, ПО - к концу дня
	Если ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС = НачалоДня(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо = КонецДня(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС)
		 И НЕ ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо) Тогда
		 
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ЛОЖЬ;

	ИначеЕсли НЕ ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Значение     = ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо;
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;

	ИначеЕсли НЕ ЗначениеЗаполнено(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо) Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.Значение     = ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС;
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	КонецЕсли;

	ПостроительОтчетаДокументы.Выполнить();
	
	Выборка = ПостроительОтчетаДокументы.Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
		
		СтрокаКонтрагент = ДобавитьКонтрагентаВДеревоДокументов(Выборка.Контрагент);
		
		Если СтрокаКонтрагент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Пока Выборка.Следующий() Цикл
			
			ДобавитьДокументВДеревоДокументов(СтрокаКонтрагент, Выборка.ДокументыСсылка);					
			
		КонецЦикла;
		
	КонецЦикла;

	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование   = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	
	РаскрытьДеревоВыгружаемыхДокументов();

КонецПроцедуры

Процедура ВыполнитьУстановкуАдресовПочтыДляДокументов(ДеревоДокументов) Экспорт
	
	Если Не ОтправлятьПоЭлПочте Тогда
		Возврат;
	Конецесли;
	
	Для Каждого СтрокаДерева Из ДеревоДокументов.Строки Цикл
		
		Если ПустаяСтрока(СтрокаДерева.ЭлАдрес) Тогда
			
			СтрокаДерева.ЭлАдрес = ПолучитьЭлАдресУСтрокиКонтрагента(СтрокаДерева.Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭлАдресУСтрокиКонтрагента(Контрагент)
	
	ОтборРегистра = ПолучитьОтборДляАдресаОтправкиПисем(Контрагент);
	Ресурсы = РегистрыСведений.КонтактнаяИнформация.Получить(ОтборРегистра);
	Если НЕ ЗначениеЗаполнено(Ресурсы.Представление) Тогда
		Сообщить("У контрагента: " + Строка(Контрагент) + " не найден электронный адрес для оправки документов. Документы контрагента не могут быть отправлены по электронной почте.");
		Возврат "";
	КонецЕсли;
	Возврат Ресурсы.Представление;	
	
КонецФункции

Функция ДобавитьКонтрагентаВДеревоДокументов(Контрагент)
	
	СтрокаКонтрагент = ДеревоДокументов.Строки.Найти(Контрагент, "Строка");
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		Возврат СтрокаКонтрагент;
	КонецЕсли;
		
	// Если отправляет по почте фильтруем только имеющих адреса
	Если ОтправлятьПоЭлПочте Тогда
		
		ЭлАдрес = ПолучитьЭлАдресУСтрокиКонтрагента(Контрагент);
		Если ПустаяСтрока(ЭлАдрес) Тогда
			Возврат Неопределено;
		КонецЕсли;		
				
	Иначе
		
		ЭлАдрес = "";
		
	КонецЕсли;

	СтрокаКонтрагент              = ДеревоДокументов.Строки.Добавить();
	СтрокаКонтрагент.Строка       = Контрагент;
	СтрокаКонтрагент.ЭлАдрес      = ЭлАдрес;
	СтрокаКонтрагент.Обрабатывать = 1;
	
	Возврат СтрокаКонтрагент;
	
КонецФункции

Функция ДобавитьДокументВДеревоДокументов(СтрокаКонтрагент, СсылкаНаДокумент)
	
	СтрокаДокумент = СтрокаКонтрагент.Строки.Найти(СсылкаНаДокумент, "Строка");
			
	Если СтрокаДокумент = Неопределено Тогда
	
		СтрокаДокумент              = СтрокаКонтрагент.Строки.Добавить();
		СтрокаДокумент.Строка       = СсылкаНаДокумент;
		СтрокаДокумент.Обрабатывать = 1;
		
	КонецЕсли;
	
	Возврат СтрокаДокумент;
	
КонецФункции

Процедура ЗаполнитьКлассификатор()

	Классификатор.Очистить();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Наименование";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НазначениеСвойства", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Классификатор.Добавить();
		СтрокаТабличнойЧасти.Использовать = ЛОЖЬ;
		СтрокаТабличнойЧасти.Свойство     = Выборка.Ссылка;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбновитьПостроительОтчетаДляДокументов(ТипДокумента)
	
	НастроитьПостроительДляДокументов(ПостроительОтчетаДокументы, ТипДокумента);
	ПостроительОтчетаДокументы.Отбор.Добавить("Контрагент");
	ПостроительОтчетаДокументы.Отбор.Контрагент.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Дата", "ДокументДата", "ДокументДата");
	ПостроительОтчетаДокументы.Отбор.ДокументДата.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.ДокументДата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	ПостроительОтчетаДокументы.Отбор.Добавить("Документ.Организация", "Организация", "Организация");
	ПостроительОтчетаДокументы.Отбор.Организация.Использование = ИСТИНА;
	ПостроительОтчетаДокументы.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
// Устанавливает настройки построителей отчета
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Начало ЭлектронныеДокументы
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменCommerceML") Тогда
		
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСCommerceML");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	// Конец ЭлектронныеДокументы

	//Настриваем построители отчета
	НастроитьПостроительДляКаталога(ПостроительОтчетаКаталог);
	ПостроительОтчетаКаталог.Отбор.Добавить("Номенклатура");

	НастроитьПостроительДляПрайса(ПостроительОтчетаПрайс);
	ПостроительОтчетаПрайс.Отбор.Добавить("Номенклатура");
	ПостроительОтчетаПрайс.Отбор.Добавить("ТипЦен", , "Тип цен");
	ПостроительОтчетаПрайс.ДоступныеПоля.ТипЦен.Представление = "Тип цен";

	ОбновитьПостроительОтчетаДляДокументов("ЗаказПоставщику");	

	НастроитьПостроительДляПрайсаCML_1(ПостроительОтчетаПрайсCML_1);
	ПостроительОтчетаПрайсCML_1.Отбор.Добавить("Номенклатура");
	ПостроительОтчетаПрайсCML_1.Отбор.Добавить("ТипЦен", , "Тип цен");
	ПостроительОтчетаПрайсCML_1.ДоступныеПоля.ТипЦен.Представление = "Тип цен";

	//Устанавливаем организацию по умолчанию
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
    
	ДеревоДокументов.Колонки.Добавить("Строка");
	ДеревоДокументов.Колонки.Добавить("Обрабатывать");
	ДеревоДокументов.Колонки.Добавить("ЭлАдрес");

	ЗаполнитьКлассификатор();
	
	Для Каждого СтрокаСпискаТипов Из ЭлементыФормы.ТипВыгрузки.СписокВыбора Цикл
		
		Если ОпределитьВыгружаютсяДокументы(СтрокаСпискаТипов.Значение) Тогда
		
			СтрокаСпискаТипов.Картинка = БиблиотекаКартинок.ЗначокДокумент16;
			
		ИначеЕсли СтрокаСпискаТипов.Значение = "Каталог" Тогда
			
			СтрокаСпискаТипов.Картинка = БиблиотекаКартинок.ЗначокНоменклатура16;
			
		Иначе
			
			СтрокаСпискаТипов.Картинка = БиблиотекаКартинок.ЗначокСправочник16;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// Устанавливает связь полей быстрого отбора и пометки в подменю "ИзменитьСпособВыгрузки"
//
Процедура ПриОткрытии()

	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчетаДокументы.Отбор, СтруктураСвязиЭлементовСДанными, "ОбработкаОбъект.ПостроительОтчетаДокументы.Отбор");
	ЭлементыФормы.ПолеНастройкиСДокументДата.Значение  = НачалоДня(РабочаяДата);
	ЭлементыФормы.ПолеНастройкиПоДокументДата.Значение = КонецДня(РабочаяДата);
	
	ТипВыгрузкиПриИзменении(ЭлементыФормы.ТипВыгрузки);	

КонецПроцедуры

// Процедура - обработчик события "ПередСохранениемЗначений" формы,
// сохраняет настройки построителей.
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройкиПостроителяКаталог    = Новый ХранилищеЗначения(ПостроительОтчетаКаталог.ПолучитьНастройки());
	СохраненныеНастройкиПостроителяПрайс      = Новый ХранилищеЗначения(ПостроительОтчетаПрайс.ПолучитьНастройки());
	СохраненныеНастройкиПостроителяДокументы  = Новый ХранилищеЗначения(ПостроительОтчетаДокументы.ПолучитьНастройки());
	СохраненныеНастройкиПостроителяПрайсCML_1 = Новый ХранилищеЗначения(ПостроительОтчетаПрайсCML_1.ПолучитьНастройки());

КонецПроцедуры

// Процедура - обработчик события "ПослеВосстановленияЗначений" формы,
// устанавливает настройки посторителей из сохраненных значений
//
Процедура ПослеВосстановленияЗначений()

	ПостроительОтчетаКаталог.УстановитьНастройки(СохраненныеНастройкиПостроителяКаталог.Получить());
	ПостроительОтчетаПрайс.УстановитьНастройки(СохраненныеНастройкиПостроителяПрайс.Получить());
	ПостроительОтчетаДокументы.УстановитьНастройки(СохраненныеНастройкиПостроителяДокументы.Получить());
	ПостроительОтчетаПрайсCML_1.УстановитьНастройки(СохраненныеНастройкиПостроителяПрайсCML_1.Получить());

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;

	ОбработатьИзменениеТипаВыгрузкиДанных();
	
	ДействиПослеИзмененияТИпаВыгрузки();
    	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события "НачалоВыбора" элемента "ИмяФайлаВыгрузки".
//
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаВыбранногоФайла = ВыборФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Если НЕ ЗначениеЗаполнено(СтрокаВыбранногоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = СтрокаВыбранногоФайла;

КонецПроцедуры

// Процедура - обработчик события "Открытие" элемента "ИмяФайлаВыгрузки".
//
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;

КонецПроцедуры

Процедура УстановитьВидимостьПараметровДляВыгрузки(Видимость)
	
	Если Видимость Тогда
	
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.СтраницаДанные;
		
	Иначе
		
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ПустаяСтраница;
		
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельНижняя.Кнопки.ВыгрузитьДанные.Доступность = Видимость;
		
КонецПроцедуры

Процедура УстановитьФайлДляВыгрузкиПоУмолчанию(ИмяФайлаПоУмолчанию)
	
	Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
		
		КаталогДляВыгрузки = КаталогВременныхФайлов();
		КаталогДляВыгрузки = Лев(КаталогДляВыгрузки, СтрДлина(КаталогДляВыгрузки) - 1);
		
	Иначе
		
		// каталог для выгрузки получаем из полного пути в файлу
		КаталогДляВыгрузки = "";
		ИмяФайла = "";
		РаботаСФайлами.ПолучитьКаталогИИмяФайла(ИмяФайлаВыгрузки, КаталогДляВыгрузки, ИмяФайла);
		
		Если ПустаяСтрока(КаталогДляВыгрузки) Тогда
			
			КаталогДляВыгрузки = КаталогВременныхФайлов();
			КаталогДляВыгрузки = Лев(КаталогДляВыгрузки, СтрДлина(КаталогДляВыгрузки) - 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФайлаВыгрузки = КаталогДляВыгрузки + "\" + ИмяФайлаПоУмолчанию + " от " + Строка(Формат(ТекущаяДата(), "ДФ=dd_MM_yyyy")) + ".xml";
	
КонецПроцедуры

Процедура ОбработатьИзменениеТипаВыгрузкиДанных()
	
	Если НЕ ЗначениеЗаполнено(ТипВыгрузки) Тогда
		
		УстановитьВидимостьПараметровДляВыгрузки(Ложь);
		
	Иначе
		
		УстановитьВидимостьПараметровДляВыгрузки(Истина);
		
		Если ТипВыгрузки = "Каталог" Тогда
			
			Если СтароеЗначениеВыбораТипаВыгрузки <> ТипВыгрузки
				ИЛИ ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
				
				УстановитьФайлДляВыгрузкиПоУмолчанию("КаталогТоваров");	
				
			КонецЕсли;
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СтраницаВыгрузкиТоваров;
			ЭлементыФормы.КартинкаВыгрузки.Картинка = БиблиотекаКартинок.ЗначокЭлементНоменклатуры32;
			
		ИначеЕсли ТипВыгрузки = "Прайс" Тогда
			
			Если СтароеЗначениеВыбораТипаВыгрузки <> ТипВыгрузки
				ИЛИ ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
				
				УстановитьФайлДляВыгрузкиПоУмолчанию("ПрайсЛист");	
				
			КонецЕсли;
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СтраницаВыгрузкиПрайса;
			ЭлементыФормы.КартинкаВыгрузки.Картинка = БиблиотекаКартинок.ЗначокСправочник32;
			
		ИначеЕсли ТипВыгрузки = "ПрайсCML_1" Тогда
			
			Если СтароеЗначениеВыбораТипаВыгрузки <> ТипВыгрузки
				ИЛИ ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
				
				УстановитьФайлДляВыгрузкиПоУмолчанию("ПрайсЛист");	
				
			КонецЕсли;
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ВыгрузкаПрайсаCML_1;
			ЭлементыФормы.КартинкаВыгрузки.Картинка = БиблиотекаКартинок.ЗначокСправочник32;
			
		ИначеЕсли ОпределитьВыгружаютсяДокументы(ТипВыгрузки) Тогда
			
			Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
				ИмяКаталогаВыгрузки = КаталогВременныхФайлов();
			КонецЕсли;
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СтраницаВыгрузкиДокументов;
			
			Если СтароеЗначениеВыбораТипаВыгрузки <> ТипВыгрузки Тогда
				
				ОбновитьПостроительОтчетаДляДокументов(ТипВыгрузки);
				// тип выгружаемого документа изменился - нужно построитель подкорректировать
				ДеревоДокументов.Строки.Очистить();
				
			КонецЕсли;
			
			ЭлементыФормы.РамкаДокументыДляВыгрузки.Заголовок = "Документы для выгрузки: " + ЭлементыФормы.ТипВыгрузки.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.ТипВыгрузки.Значение).Представление;
			ЭлементыФормы.КартинкаВыгрузки.Картинка = БиблиотекаКартинок.ЗначокДокумент32;
			
		КонецЕсли;	
		
		ДействиПослеИзмененияТипаВыгрузки();
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаНастройкаПериода".
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС, ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо);
	Если НП.Редактировать() Тогда
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеС  = НП.ПолучитьДатуНачала();
		ПостроительОтчетаДокументы.Отбор.ДокументДата.ЗначениеПо = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаНастройкаПериодаПрайсCML_1".
//
Процедура КнопкаНастройкаПериодаПрайсCML_1(Элемент)

	НП = Новый НастройкаПериода;
	НП.УстановитьПериод(ДействительноС, ДействительноПо);
	Если НП.Редактировать() Тогда
		ДействительноС  = НП.ПолучитьДатуНачала();
		ДействительноПо = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Выбор" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ВыбраннаяСтрока.Строка.ПолучитьФорму().Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)

	Элемент.ТекущиеДанные.Строка.ПолучитьФорму().Открыть();
	Отказ = ИСТИНА;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Строка.ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки.Строка.УстановитьФлажок(ДанныеСтроки.Обрабатывать);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля ДеревоДокументов.
//
Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущаяСтрока.Обрабатывать = 1 ИЛИ Элемент.ТекущаяСтрока.Обрабатывать = 2 Тогда
		Элемент.ТекущаяСтрока.Обрабатывать = 0;
	Иначе
		Элемент.ТекущаяСтрока.Обрабатывать = 1;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Обрабатывать = 2 Тогда
		Элемент.ТекущаяСтрока.Обрабатывать = 0;
	КонецЕсли;
	Если Элемент.ТекущаяСтрока.Родитель = Неопределено Тогда
		//обрабатываем выбор контрагента
		Для Каждого СтрокаДерева Из Элемент.ТекущаяСтрока.Строки Цикл
			СтрокаДерева.Обрабатывать = Элемент.ТекущаяСтрока.Обрабатывать;
		КонецЦикла;
	Иначе
		//обрабатываем выбор документа
		Отбор = Новый Структура("Обрабатывать", 0);
		НайденныеСтроки = Элемент.ТекущаяСтрока.Родитель.Строки.НайтиСтроки(Отбор);
		Если НЕ НайденныеСтроки.Количество() Тогда
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 1;
		ИначеЕсли НайденныеСтроки.Количество() = Элемент.ТекущаяСтрока.Родитель.Строки.Количество() Тогда
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 0;
		Иначе
			Элемент.ТекущаяСтрока.Родитель.Обрабатывать = 2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля Классификатор.
//
Процедура КлассификаторПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущаяКолонка.Имя = "Свойство" Тогда
		Элемент.ТекущиеДанные.Свойство.ПолучитьФорму().Открыть();
		Отказ = ИСТИНА;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ПоказатьФормуВыгруженныхФайлов(ИмяКаталогаВыгрузки, УспешноЗавершена)
	
	Если СоответствиеКонтрагентовИФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтображенияРезультатов = ПолучитьФорму("ФормаФайловВыгрузки", ЭтаФорма);
	ФормаОтображенияРезультатов.ВыгрузкаПрошлаУспешно = УспешноЗавершена;
	ФормаОтображенияРезультатов.КаталогВыгрузкиДанных = ИмяКаталогаВыгрузки;
	ФормаОтображенияРезультатов.Открыть();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Выполнить"
// командной панели "ОсновныеДействияФормы" для выгрузки данных
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	
	ЭтоВыгрузкаДокументов = ОпределитьВыгружаютсяДокументы(ТипВыгрузки);
	Если ЭтоВыгрузкаДокументов Тогда
		
		КоличествоДокументовДляВыгрузки = ОпределитьКоличествоДокументовПодлежащихВыгрузке();
		
		Если КоличествоДокументовДляВыгрузки = 0 Тогда
			
			Предупреждение("Не выбран ни один документ для выгрузки!");
			Возврат;
			
		КонецЕсли;		
		
	КонецЕсли;	

	СоответствиеКонтрагентовИФайлов.Очистить();
	
	Если ОтправлятьПоЭлПочте Тогда
		Ответ = Вопрос("Отправить данные по электронной почте?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК, "Выгрузка данных");
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ОтправитьПоПочте();
		КонецЕсли;

	ИначеЕсли ЭтоВыгрузкаДокументов Тогда
		
		УспешноЗавершена = ВыгрузитьНаборДокументовВКаталог(ТипВыгрузки, ИмяКаталогаВыгрузки, КоличествоДокументовДляВыгрузки);
		ПоказатьФормуВыгруженныхФайлов(ИмяКаталогаВыгрузки, УспешноЗавершена);
		
	Иначе
		
		УспешноЗавершена = ВыгрузитьВФайл(ТипВыгрузки, ИмяФайлаВыгрузки);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДействиПослеИзмененияТипаВыгрузки()
	
	ДоступностьВыбораФайлаДляВыгрузки = (ОтправлятьПоЭлПочте = Ложь);
	ЭлементыФормы.ПанельФайлКаталог.Доступность = ДоступностьВыбораФайлаДляВыгрузки;
	
	Если ДоступностьВыбораФайлаДляВыгрузки Тогда
		
		Если ОпределитьВыгружаютсяДокументы(ТипВыгрузки) Тогда
			ЭлементыФормы.ПанельФайлКаталог.ТекущаяСтраница = ЭлементыФормы.ПанельФайлКаталог.Страницы.Каталог;
		Иначе
			ЭлементыФормы.ПанельФайлКаталог.ТекущаяСтраница = ЭлементыФормы.ПанельФайлКаталог.Страницы.Файл;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьУстановкуАдресовПочтыДляДокументов(ДеревоДокументов);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить"
// командной панели "КоманднаяПанельДокументы" для заполнения
// дерева документов
//
Процедура КоманднаяПанельДокументыЗаполнить(Кнопка)

	ЗаполнитьДеревоДокументов()

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнятьФлажки"
// командной панели "КоманднаяПанельДокументы" снятия флажков
// в табличном поле "ДеревоДокументов"
//
Процедура КоманднаяПанельДокументыСнятьФлажки(Кнопка)

	Отбор = Новый Структура("Обрабатывать", 1);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 0;
	КонецЦикла;
	Отбор = Новый Структура("Обрабатывать", 2);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 0;
	КонецЦикла;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "УстановитьФлажки"
// командной панели "КоманднаяПанельДокументы" установки флажков
// в табличном поле "ДеревоДокументов"
//
Процедура КоманднаяПанельДокументыУстановитьФлажки(Кнопка)

	Отбор = Новый Структура("Обрабатывать", 0);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 1;
	КонецЦикла;
	Отбор = Новый Структура("Обрабатывать", 2);
	НайденныеСтроки = ДеревоДокументов.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Обрабатывать = 1;
	КонецЦикла;

КонецПроцедуры

Процедура ТипВыгрузкиДанныхПриИзменении(Элемент)
	
	ДействиПослеИзмененияТИпаВыгрузки();
	
КонецПроцедуры

Процедура ТипВыгрузкиПриИзменении(Элемент)
	
	ОбработатьИзменениеТипаВыгрузкиДанных();
	
	СтароеЗначениеВыбораТипаВыгрузки = Элемент.значение;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыОчистить(Кнопка)
	
	ДеревоДокументов.Строки.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыПодбор(Кнопка)
	
	// подбор документов для выгрузки
	ФормаПодбора = Документы[ТипВыгрузки].ПолучитьФормуВыбора(, ЭлементыФормы.ДеревоДокументов);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.МножественныйВыбор = Истина;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ФормаПодбора.отбор.Организация.Установить(Организация);	
		
	КонецЕсли;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

Процедура ВыполнитьДобавлениеОдногоЭлемента(ВыбранныйЭлемент)
	
	СтрокаКонтрагент = ДобавитьКонтрагентаВДеревоДокументов(ВыбранныйЭлемент.Контрагент);
		
	Если СтрокаКонтрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	ДобавитьДокументВДеревоДокументов(СтрокаКонтрагент, ВыбранныйЭлемент);	
	
КонецПроцедуры

Процедура РаскрытьДеревоВыгружаемыхДокументов()
	
	// нужно раскрыть дерево
	Для Каждого СтрокаСпискаНайденных Из ДеревоДокументов.Строки Цикл
		ЭлементыФормы.ДеревоДокументов.Развернуть(СтрокаСпискаНайденных, Ложь);
	КонецЦикла;
	
Конецпроцедуры

Процедура ДеревоДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
			
			ВыполнитьДобавлениеОдногоЭлемента(ВыбранныйЭлемент);
			
		КонецЦикла;
		
	Иначе
		 ВыполнитьДобавлениеОдногоЭлемента(ВыбранноеЗначение);
	 КонецЕсли;
	 
	// нужно раскрыть дерево
	РаскрытьДеревоВыгружаемыхДокументов(); 
		
КонецПроцедуры

Процедура ДеревоДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаВыбранногоФайла = ВыборФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Если НЕ ЗначениеЗаполнено(СтрокаВыбранногоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = СтрокаВыбранногоФайла;	
	
КонецПроцедуры

СтароеЗначениеВыбораТИпаВыгрузки = Неопределено;

