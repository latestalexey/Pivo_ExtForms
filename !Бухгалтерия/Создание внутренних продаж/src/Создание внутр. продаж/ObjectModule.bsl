Перем мИспользоватьОтветХранение Экспорт;

#Область Сборка_данных

// Основная функция подготавливает таблицу для формировать документов
//
// Параметры:
//  Док  - ДокументСсылка.РеализацияТоваровУслуг - документ, для которого формируем внутренние продажи
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Итоговая таблица для формирования документов. Содержит данные о номенклатуре и последовательности продаж
//
Функция ВнутренниеПродажи(Док) Экспорт
Перем СтруктураРаботы; //содержит основные данные документа для компактной передачи в следующие процедуры
Перем СтрРезультат;

	СтруктураРаботы=СтруктураШапки(Док);
	//Таблица для заполнения документов
	ТаблицаДляДокументов=ИнициализацияТаблицыДляЗаполненияДокументов();
	
	Если ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос = Новый ПостроительЗапроса;
		Запрос.Текст = 
#Область Запрос_соединение_таблицы_документа_и_остатков_на_складах
		"ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.Субконто1 КАК Номенклатура,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ОстаткиОрганизации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремени,
		|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)),
		|			,
		|			Организация = &Организация
		|				И Субконто1 В (&СпНоменклатуры)) КАК ТоварыОрганизацийОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
		|	РеализацияТоваровУслугТовары.Ссылка.Организация,
		|	РегВидНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидНоменклатуры КАК РегВидНоменклатуры
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = РегВидНоменклатуры.Номенклатура
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Док
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Ссылка.Организация,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РегВидНоменклатуры.ВидНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ВидНоменклатуры
		|ПОМЕСТИТЬ ВТ_НоменклатураСОстатками
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0) < 0
		|				ТОГДА ТаблицаНоменклатуры.Количество
		|			КОГДА ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0) < ТаблицаНоменклатуры.Количество
		|				ТОГДА ТаблицаНоменклатуры.Количество - ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Количество,
		|		ТаблицаНоменклатуры.Организация КАК Организация,
		|		ТаблицаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры
		|	ИЗ
		|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОрганизации КАК ОстаткиОрганизации
		|			ПО ТаблицаНоменклатуры.Номенклатура = ОстаткиОрганизации.Номенклатура) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Количество <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСОстатками.Номенклатура,
		|	ВТ_НоменклатураСОстатками.Количество,
		|	ВТ_НоменклатураСОстатками.Организация
		|ИЗ
		|	ВТ_НоменклатураСОстатками КАК ВТ_НоменклатураСОстатками
		|ГДЕ
		|	ВТ_НоменклатураСОстатками.ВидНоменклатуры = &ВидНоменклатурыПИВО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСОстатками.Номенклатура,
		|	ВТ_НоменклатураСОстатками.Количество,
		|	ВТ_НоменклатураСОстатками.Организация
		|ИЗ
		|	ВТ_НоменклатураСОстатками КАК ВТ_НоменклатураСОстатками
		|ГДЕ
		|	ВТ_НоменклатураСОстатками.ВидНоменклатуры <> &ВидНоменклатурыПИВО";
#КонецОбласти
				
		Запрос=Запрос.ПолучитьЗапрос();
		Запрос.УстановитьПараметр("Док",							Док.Ссылка);
		Запрос.УстановитьПараметр("Организация",					Док.Организация);
		Запрос.УстановитьПараметр("СпНоменклатуры",					Док.Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("МоментВремени",					Док.МоментВремени());
		Запрос.УстановитьПараметр("ВидНоменклатурыПИВО",			Справочники.ВидыНоменклатуры.НайтиПоНаименованию("ПИВО",Истина));
		Запрос.УстановитьПараметр("ВидНоменклатурыНЕПИВО",			Справочники.ВидыНоменклатуры.НайтиПоНаименованию("НЕ ПИВО",Истина));
		Запрос.УстановитьПараметр("ВидНоменклатурыОБОРУДОВАНИЕ",	Справочники.ВидыНоменклатуры.НайтиПоНаименованию("ОБОРУДОВАНИЕ",Истина));
		Запрос.УстановитьПараметр("ТипЦенЗакупочная",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
		
		
		РезультатЗапроса=Запрос.ВыполнитьПакет();
		
		//1. Выбираем ПИВО из документа
		РабТаб=РезультатЗапроса[3].Выгрузить();
		ТипПродажи=Справочники.ИТИКонстанты.СхемаПИВО.Указатель;
		ПровестиТоварПоТипуПродажи(РабТаб,ТипПродажи,СтруктураРаботы,ТаблицаДляДокументов,Перечисления.ВидыНазначенияОрганизации.Фирма);
		
		//2. Выбираем НЕ ПИВО
		РабТаб=РезультатЗапроса[4].Выгрузить();
		ТипПродажи=Справочники.ИТИКонстанты.СхемаНЕПИВО.Указатель;
		ПровестиТоварПоТипуПродажи(РабТаб,ТипПродажи,СтруктураРаботы,ТаблицаДляДокументов,Перечисления.ВидыНазначенияОрганизации.БонерКагир);
		
	КонецЕсли;
	Возврат ТаблицаДляДокументов;
КонецФункции

Процедура ПровестиТоварПоТипуПродажи(ЗНАЧ ТаблицаТоваров,ЗНАЧ ТипПродажи,ЗНАЧ СтрРаботы, ТаблицаДокументов,СхемаДляДозакупаОстатков)
	ЗапросОстатковТаб			=	Новый ПостроительЗапроса;
#Область Запрос_остатков
	ЗапросОстатковТаб.Текст		=	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	                       		 	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	                       		 	|	СобственныеКонтрагенты.Организация КАК Организация
	                       		 	|ПОМЕСТИТЬ ВТ_ОрганизацииСДоговорами
	                       		 	|ИЗ
	                       		 	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                       		 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	                       		 	|		ПО ДоговорыКонтрагентов.Владелец = СобственныеКонтрагенты.Контрагент
	                       		 	|ГДЕ
	                       		 	|	ДоговорыКонтрагентов.Организация = &Организация 
	                       		 	|
	                       		 	|ИНДЕКСИРОВАТЬ ПО
	                       		 	|	Организация
	                       		 	|;
	                       		 	|
	                       		 	|////////////////////////////////////////////////////////////////////////////////
	                       		 	|ВЫБРАТЬ
	                       		 	|	ВложенныйЗапрос.ТипОрганизации КАК ТипОрганизации,
	                       		 	|	ВложенныйЗапрос.Организация КАК Организация,
	                       		 	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	                       		 	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	                       		 	|ПОМЕСТИТЬ ВТ_РеальныеОстатки
	                       		 	|ИЗ
	                       		 	|	(ВЫБРАТЬ
	                       		 	|		ТаблицаОстатков.Организация.ТипОрганизации КАК ТипОрганизации,
	                       		 	|		ТаблицаОстатков.Организация КАК Организация,
	                       		 	|		ТаблицаОстатков.Субконто1 КАК Номенклатура,
	                       		 	|		ТаблицаОстатков.КоличествоОстаток КАК Остаток
	                       		 	|	ИЗ
	                       		 	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	                       		 	|				&МоментОстатков,
	                       		 	|				Счет В ИЕРАРХИИ (&СчетТовары),
	                       		 	|				,
	                       		 	|				Субконто1 В (&СпНоменклатуры)
	                       		 	|					И Организация.ТипОрганизации В (&ТипыОрганизаций)
	                       		 	|					И Организация В
	                       		 	|						(ВЫБРАТЬ
	                       		 	|							ВТ_ОрганизацииСДоговорами.Организация
	                       		 	|						ИЗ
	                       		 	|							ВТ_ОрганизацииСДоговорами КАК ВТ_ОрганизацииСДоговорами)) КАК ТаблицаОстатков
	                       		 	|	
	                       		 	|	ОБЪЕДИНИТЬ ВСЕ
	                       		 	|	
	                       		 	|	ВЫБРАТЬ
	                       		 	|		ОборотыВнутрПродаж.Организация.ТипОрганизации,
	                       		 	|		ОборотыВнутрПродаж.Организация,
	                       		 	|		ОборотыВнутрПродаж.Субконто1,
	                       		 	|		ОборотыВнутрПродаж.КоличествоОборот
	                       		 	|	ИЗ
	                       		 	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	                       		 	|				&МоментОстатков,
	                       		 	|				&КонецДня,
	                       		 	|				Регистратор,
	                       		 	|				Счет В ИЕРАРХИИ (&СчетТовары),
	                       		 	|				,
	                       		 	|				Субконто1 В (&СпНоменклатуры)
	                       		 	|					И Организация.ТипОрганизации В (&ТипыОрганизаций)
	                       		 	|					И Организация В
	                       		 	|						(ВЫБРАТЬ
	                       		 	|							ВТ_ОрганизацииСДоговорами.Организация
	                       		 	|						ИЗ
	                       		 	|							ВТ_ОрганизацииСДоговорами КАК ВТ_ОрганизацииСДоговорами),
	                       		 	|				,
	                       		 	|				) КАК ОборотыВнутрПродаж
	                       		 	|	ГДЕ
	                       		 	|		ОборотыВнутрПродаж.Регистратор.ВнутреннийДокумент) КАК ВложенныйЗапрос
	                       		 	|
	                       		 	|СГРУППИРОВАТЬ ПО
	                       		 	|	ВложенныйЗапрос.ТипОрганизации,
	                       		 	|	ВложенныйЗапрос.Организация,
	                       		 	|	ВложенныйЗапрос.Номенклатура
	                       		 	|
	                       		 	|ИМЕЮЩИЕ
	                       		 	|	СУММА(ВложенныйЗапрос.Остаток) > 0
	                       		 	|
	                       		 	|ИНДЕКСИРОВАТЬ ПО
	                       		 	|	Организация,
	                       		 	|	Номенклатура
	                       		 	|;
	                       		 	|
	                       		 	|////////////////////////////////////////////////////////////////////////////////
	                       		 	|ВЫБРАТЬ
	                       		 	|	ВЫБОР
	                       		 	|		КОГДА &ИспользоватьОтветХранение = ИСТИНА
	                       		 	|			ТОГДА СобственныеКонтрагенты.Организация
	                       		 	|		ИНАЧЕ СерииНоменклатурыОстатки.Организация
	                       		 	|	КОНЕЦ КАК Организация,
	                       		 	|	СерииНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	                       		 	|	СерииНоменклатурыОстатки.СерияНоменклатуры,
	                       		 	|	СерииНоменклатурыОстатки.КоличествоОстаток
	                       		 	|ПОМЕСТИТЬ ВТ_ОстатокСерий
	                       		 	|ИЗ
	                       		 	|	РегистрНакопления.СерииНоменклатуры.Остатки(
	                       		 	|			&МоментОстатков,
	                       		 	|			Номенклатура В (&СпНоменклатуры)
	                       		 	|				И ВЫБОР
	                       		 	|					КОГДА &ИспользоватьОтветХранение = ИСТИНА
	                       		 	|						ТОГДА Организация В (&ОрганизацииОтветХранения)
	                       		 	|					ИНАЧЕ Организация В
	                       		 	|							(ВЫБРАТЬ
	                       		 	|								ВТ_ОрганизацииСДоговорами.Организация
	                       		 	|							ИЗ
	                       		 	|								ВТ_ОрганизацииСДоговорами КАК ВТ_ОрганизацииСДоговорами
	                       		 	|							ГДЕ
	                       		 	|								ВТ_ОрганизацииСДоговорами.Организация.ТипОрганизации В (&ТипыОрганизаций))
	                       		 	|				КОНЕЦ {(Организация).*, (ВладелецТовара)}) КАК СерииНоменклатурыОстатки
	                       		 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	                       		 	|		ПО СерииНоменклатурыОстатки.ВладелецТовара = СобственныеКонтрагенты.Контрагент
	                       		 	|
	                       		 	|ИНДЕКСИРОВАТЬ ПО
	                       		 	|	Организация,
	                       		 	|	Номенклатура
	                       		 	|;
	                       		 	|
	                       		 	|////////////////////////////////////////////////////////////////////////////////
	                       		 	|ВЫБРАТЬ
	                       		 	|	ВложенныйЗапрос.ТипОрганизации,
	                       		 	|	ВложенныйЗапрос.Организация,
	                       		 	|	ВложенныйЗапрос.Номенклатура,
	                       		 	|	ВложенныйЗапрос.СерияНоменклатуры,
	                       		 	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	                       		 	|ИЗ
	                       		 	|	(ВЫБРАТЬ
	                       		 	|		ВТ_ОстатокСерий.Организация.ТипОрганизации КАК ТипОрганизации,
	                       		 	|		ВТ_ОстатокСерий.Организация КАК Организация,
	                       		 	|		ВТ_ОстатокСерий.Номенклатура КАК Номенклатура,
	                       		 	|		ВТ_ОстатокСерий.СерияНоменклатуры КАК СерияНоменклатуры,
	                       		 	|		ВТ_ОстатокСерий.КоличествоОстаток КАК Остаток
	                       		 	|	ИЗ
	                       		 	|		ВТ_ОстатокСерий КАК ВТ_ОстатокСерий
	                       		 	|	ГДЕ
	                       		 	|		ВТ_ОстатокСерий.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	                       		 	|	
	                       		 	|	ОБЪЕДИНИТЬ ВСЕ
	                       		 	|	
	                       		 	|	ВЫБРАТЬ
	                       		 	|		РеальныеОстаткиБезСерий.ТипОрганизации,
	                       		 	|		РеальныеОстаткиБезСерий.Организация,
	                       		 	|		РеальныеОстаткиБезСерий.Номенклатура,
	                       		 	|		РеальныеОстаткиБезСерий.СерияНоменклатуры,
	                       		 	|		РеальныеОстаткиБезСерий.Остаток
	                       		 	|	ИЗ
	                       		 	|		(ВЫБРАТЬ
	                       		 	|			ВТ_РеальныеОстатки.ТипОрганизации КАК ТипОрганизации,
	                       		 	|			ВТ_РеальныеОстатки.Организация КАК Организация,
	                       		 	|			ВТ_РеальныеОстатки.Номенклатура КАК Номенклатура,
	                       		 	|			ВТ_РеальныеОстатки.Остаток КАК Остаток,
	                       		 	|			ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры
	                       		 	|		ИЗ
	                       		 	|			ВТ_РеальныеОстатки КАК ВТ_РеальныеОстатки
	                       		 	|		
	                       		 	|		ОБЪЕДИНИТЬ ВСЕ
	                       		 	|		
	                       		 	|		ВЫБРАТЬ
	                       		 	|			ВТ_ОстатокСерий.Организация.ТипОрганизации,
	                       		 	|			ВТ_ОстатокСерий.Организация,
	                       		 	|			ВТ_ОстатокСерий.Номенклатура,
	                       		 	|			-ВТ_ОстатокСерий.КоличествоОстаток,
	                       		 	|			ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	                       		 	|		ИЗ
	                       		 	|			ВТ_ОстатокСерий КАК ВТ_ОстатокСерий
	                       		 	|		ГДЕ
	                       		 	|			ВТ_ОстатокСерий.СерияНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК РеальныеОстаткиБезСерий
	                       		 	|	
	                       		 	|	ОБЪЕДИНИТЬ ВСЕ
	                       		 	|	
	                       		 	|	ВЫБРАТЬ
	                       		 	|		ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияОрганизации.Эвертон),
	                       		 	|		&Эвертон,
	                       		 	|		Номенклатура.Ссылка,
	                       		 	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	                       		 	|		9999
	                       		 	|	ИЗ
	                       		 	|		Справочник.Номенклатура КАК Номенклатура
	                       		 	|	ГДЕ
	                       		 	|		Номенклатура.Ссылка В(&СпНоменклатуры)
	                       		 	|		И Номенклатура.Производитель = &ЭвертонКонтрагент) КАК ВложенныйЗапрос
	                       		 	|
	                       		 	|СГРУППИРОВАТЬ ПО
	                       		 	|	ВложенныйЗапрос.ТипОрганизации,
	                       		 	|	ВложенныйЗапрос.Организация,
	                       		 	|	ВложенныйЗапрос.Номенклатура,
	                       		 	|	ВложенныйЗапрос.СерияНоменклатуры
	                       		 	|
	                       		 	|ИМЕЮЩИЕ
	                       		 	|	СУММА(ВложенныйЗапрос.Остаток) > 0";
									
	
	ЗапросОстатковТаб.Параметры.Вставить("МоментОстатков",			Новый Граница(СтрРаботы.Момент,ВидГраницы.Исключая) );
	ЗапросОстатковТаб.Параметры.Вставить("КонецДня",				Новый Граница(КонецДня(СтрРаботы.Момент.Дата),ВидГраницы.Включая));
	ЗапросОстатковТаб.Параметры.Вставить("СпНоменклатуры",			ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура"));
	//KAV
	ЗапросОстатковТаб.Параметры.Вставить("Организация",				СтрРаботы.Организация);
	Список=Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыНазначенияОрганизации.Закуп);
	Список.Добавить(Перечисления.ВидыНазначенияОрганизации.Лорус);
	Список.Добавить(Перечисления.ВидыНазначенияОрганизации.Элайн);
	ЗапросОстатковТаб.Параметры.Вставить("ТипыОрганизаций",Список);
	
	ЗапросОстатковТаб.Параметры.Вставить("Эвертон",					Справочники.ИТИКонстанты.ЭвертонОрганизация.Указатель);
	ЗапросОстатковТаб.Параметры.Вставить("ЭвертонКонтрагент",		Справочники.ИТИКонстанты.ЭвертонКонтрагент.Указатель);
#КонецОбласти
	Если мИспользоватьОтветХранение Тогда
		ЗапросОстатковТаб.Параметры.Вставить("ИспользоватьОтветХранение",Истина);
		ЗапросОстатковТаб.Параметры.Вставить("СчетТовары",ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		Список=Новый СписокЗначений;
		Для Каждого Эл Из ИТИМодуль.ПолучитьОрганизацииКонтрагентовОтветХранения() Цикл
			Список.Добавить(Эл.Организация);
		КонецЦикла;
		ЗапросОстатковТаб.Параметры.Вставить("ОрганизацииОтветХранения",Список);
		ЗапросОстатковТаб.Параметры.Вставить("ТипыОрганизаций",НОвый СписокЗначений);
	Иначе
		ЗапросОстатковТаб.Параметры.Вставить("ИспользоватьОтветХранение",Ложь);
		ЗапросОстатковТаб.Параметры.Вставить("СчетТовары",ПланыСчетов.Хозрасчетный.Товары);
		ЗапросОстатковТаб.Параметры.Вставить("ОрганизацииОтветХранения",Новый СписокЗначений);
	КонецЕсли;
	
	ЗапросОстатковТаб.Выполнить();
	ТаблицаОстатков=ЗапросОстатковТаб.Результат.Выгрузить();
	ЗапросСхемы					=	Новый Запрос;
	ЗапросСхемы.Текст			=	"ВЫБРАТЬ
	                 			 	|	СхемыПродажСостав.Договор1,
	                 			 	|	СхемыПродажСостав.Коэффициент1,
	                 			 	|	СхемыПродажСостав.Договор2,
	                 			 	|	СхемыПродажСостав.Коэффициент2,
	                 			 	|	СхемыПродажСостав.ЗависимОт,
	                 			 	|	СхемыПродажСостав.Задержка,
	                 			 	|	СхемыПродажСостав.Аренда,
	                 			 	|	СхемыПродажСостав.ИгнорироватьСтроку
	                 			 	|ИЗ
	                 			 	|	Справочник.СхемыПродаж.Состав КАК СхемыПродажСостав
	                 			 	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СхемыПродаж КАК СхемыПродаж
	                 			 	|		ПО СхемыПродажСостав.Ссылка = СхемыПродаж.Ссылка
	                 			 	|ГДЕ
	                 			 	|	СхемыПродаж.Ссылка = &Ссылка
	                 			 	|	И СхемыПродажСостав.НомерШага = &НомерШага
	                 			 	|	И (&ОрганизацияПокупка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                 			 	|			ИЛИ СхемыПродажСостав.Договор2.Организация = &ОрганизацияПокупка
	                 			 	|			ИЛИ СхемыПродажСостав.Аренда)
	                 			 	|	И (&ОрганизацияПродажа = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                 			 	|			ИЛИ СхемыПродажСостав.Договор1.Организация = &ОрганизацияПродажа
	                 			 	|			ИЛИ СхемыПродажСостав.Аренда)";
									
	ВременнаяТаблица=Новый ТаблицаЗначений;
	ВременнаяТаблица.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВременнаяТаблица.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВременнаяТаблица.Колонки.Добавить("СерияНоменклатуры",	Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ВременнаяТаблица.Колонки.Добавить("Количество",			Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	ВременнаяТаблица.Колонки.Добавить("Стоимость",			Новый ОписаниеТипов(Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный)));
	ВременнаяТаблица.Колонки.Добавить("Шаг",				Новый ОписаниеТипов(Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого СтрокаДляОбработки Из ТаблицаТоваров Цикл
		КолвоТемп=СтрокаДляОбработки.Количество;
		ФлагОшибки=Ложь;
		КопияТаблицаДокументов	=ТаблицаДокументов.Скопировать();
		Для Каждого СтрокаТЧ Из ТипПродажи.Схемы Цикл
			ВременнаяТаблица.Очистить();
			ПровестиТоварПоСхеме(ТипПродажи,СтрокаТЧ.Схема,ЗапросСхемы,СтрокаДляОбработки.Номенклатура,СтрРаботы,ТаблицаОстатков,ВременнаяТаблица,КопияТаблицаДокументов,СтрокаДляОбработки.Организация,КолвоТемп,ФлагОшибки);
		КонецЦикла;
		//А теперь закупим остаток
		Если КолвоТемп<>0 Тогда
			//??
			ВременнаяТаблица.Очистить();
			//??
			ДопОстатки=ТаблицаОстатков.Добавить();
			ДопОстатки.ТипОрганизации	= ?(ТипПродажи=Справочники.ИТИКонстанты.СхемаПИВО,Перечисления.ВидыНазначенияОрганизации.Фирма,Перечисления.ВидыНазначенияОрганизации.БонерКагир);
			ДопОстатки.Организация		= Справочники.ИТИКонстанты.ОргФИРМА.Указатель;
			ДопОстатки.Номенклатура		= СтрокаДляОбработки.Номенклатура;
			ДопОстатки.СерияНоменклатуры= Справочники.СерииНоменклатуры.ПустаяСсылка();
			ДопОстатки.Остаток			= КолвоТемп;
			
			Для Каждого СтрокаТЧ Из ТипПродажи.СхемыДозакупа Цикл
				ПровестиТоварПоСхеме(ТипПродажи,СтрокаТЧ.Схема,ЗапросСхемы,СтрокаДляОбработки.Номенклатура,СтрРаботы,ТаблицаОстатков,ВременнаяТаблица,КопияТаблицаДокументов,СтрокаДляОбработки.Организация,КолвоТемп,ФлагОшибки);
			КонецЦикла;
		КонецЕсли;
		Если Не ФлагОшибки Тогда
			ТаблицаДокументов	= КопияТаблицаДокументов.Скопировать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПровестиТоварПоСхеме(Знач ТипПродажи, Знач Схема, Знач ЗапросСхемы, Номенклатура, СтрРаботы, ТаблицаОстатков, ВременнаяТаблица, КопияТаблицаДокументов, ОрганизацияПокупка, КоличествоДляПродажи, Отказ)
	ОтборСтрок=Новый Структура("Номенклатура,ТипОрганизации");
	ОтборСтрок.Номенклатура=Номенклатура;
	ФлагЦенаИзСхемы=ЗначениеЗаполнено(Схема.КонтрольПоТипуЦен);
	Если КоличествоДляПродажи=0 Тогда
		Возврат;
	ИначеЕсли ФлагЦенаИзСхемы И НЕ УстановленаЦенаПоТипуЦен(Номенклатура,Схема.КонтрольПоТипуЦен,Новый Граница(КонецДня(СтрРаботы.Момент.Дата),ВидГраницы.Включая)) Тогда
		Возврат;
	Иначе
		ОтборСтрок.ТипОрганизации=Схема.ОтКого;
		Остатки=ТаблицаОстатков.НайтиСтроки(ОтборСтрок);
		СчСтрок=0;
		Для Каждого Эл Из Остатки Цикл
			Если КоличествоДляПродажи=0 Тогда
				Если ВременнаяТаблица.Количество()=0 Тогда 
					Возврат; 
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли; //нечего распределять и таблица для продаж пуста
			Если Эл.Остаток<0 Тогда
				#Если НаКлиенте Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Обнаружены отрицательные остатки."+Эл.Номенклатура+" "+Эл.СерияНоменклатуры+". "+Эл.Остаток);
				#КонецЕсли
				Продолжить;
			КонецЕсли;
			//очередной костыль. Если на самой организации есть остаток-ничего не делаем
			Если Эл.Организация<>СтрРаботы.Организация Тогда
				СтрокаТаб=ВременнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаб,Эл);
				СтрокаТаб.Количество=?(Схема.ИгнорироватьОстатки,КоличествоДляПродажи,Мин(КоличествоДляПродажи,Эл.Остаток));
				СтрокаТаб.Шаг=0;
			КонецЕсли;
			КоличествоДляПродажи=КоличествоДляПродажи-СтрокаТаб.Количество;
		КонецЦикла;
		Если ВременнаяТаблица.Количество()=0 Тогда Возврат; КонецЕсли; //не чего продавать, так как остатков ни у кого нет
		Для СчШагов=1 По Схема.КолШагов Цикл
			НужнаяСхема=Неопределено;
			ЗапросСхемы.УстановитьПараметр("Ссылка",Схема.Ссылка);
			ЗапросСхемы.УстановитьПараметр("НомерШага",СчШагов);
			ЗапросСхемы.УстановитьПараметр("ОрганизацияПокупка",Справочники.Организации.ПустаяСсылка());
			ЗапросСхемы.УстановитьПараметр("ОрганизацияПродажа",Справочники.Организации.ПустаяСсылка());
			ТабСхема=ЗапросСхемы.Выполнить().Выгрузить();
			РабМассив = ВременнаяТаблица.НайтиСтроки(Новый Структура("Шаг",ТабСхема.Получить(0).ЗависимОт)); //массив остатков по зависимой таблице
			ЕстьПоступление	= ЗначениеЗаполнено(ТабСхема.Получить(0).Договор2);
			ЕстьРеализация	= ЗначениеЗаполнено(ТабСхема.Получить(0).Договор1);
			Если ЕстьПоступление И ЕстьРеализация Тогда
				//есть документ ПТУ
				ЗапросСхемы.УстановитьПараметр("ОрганизацияПокупка",ОрганизацияПокупка);
			КонецЕсли;
			Для Каждого Эл Из РабМассив Цикл
				Если ЕстьРеализация Тогда
					//Есть документ РТУ
					ЗапросСхемы.УстановитьПараметр("ОрганизацияПродажа",Эл.Организация);
				КонецЕсли;
				РезЗапросСхемы=ЗапросСхемы.Выполнить();
				Если РезЗапросСхемы.Пустой() Тогда
					ФлагОшибки=Истина;
					#Если НаКлиенте Тогда
						Сообщить("------>Ошибка по схеме "+Схема.Наименование+" по продаже "+ТипПродажи.Наименование+"<------"); 
						Сообщить("Номер шага: "+ЗапросСхемы.Параметры.НомерШага+", "+ЗапросСхемы.Параметры.ОрганизацияПродажа+" -> "+ЗапросСхемы.Параметры.ОрганизацияПокупка+". "+Номенклатура);
					#КонецЕсли
					Прервать;
				Иначе
					ТаблицаСхем=РезЗапросСхемы.Выгрузить();
					Если ТаблицаСхем.Количество()=1 Тогда
						НужнаяСхема=ТаблицаСхем.Получить(0);
					КонецЕсли;
					
					Если НЕ НужнаяСхема.ИгнорироватьСтроку Тогда
						СоздатьЗаписиПоСхеме(НужнаяСхема,
						СтрРаботы,
						Номенклатура,Эл.СерияНоменклатуры,
						Эл.Количество,
						КопияТаблицаДокументов,
						?(ФлагЦенаИзСхемы,Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,Схема.КонтрольПоТипуЦен,Новый Граница(КонецДня(СтрРаботы.Момент.Дата),ВидГраницы.Включая)),0)*1.0015);
					КонецЕсли;
				КонецЕсли;
				СтрокаНовыхОстатков=ВременнаяТаблица.Добавить();
				СтрокаНовыхОстатков.Организация=НужнаяСхема.Договор2.Организация;
				СтрокаНовыхОстатков.Номенклатура=Номенклатура;
				//СтрокаНовыхОстатков.СерияНоменклатуры=Эл.СерияНоменклатуры;
				СтрокаНовыхОстатков.СерияНоменклатуры=Справочники.СерииНоменклатуры.ПустаяСсылка(); //Серию будем создавать прямо в документе поступления!
				СтрокаНовыхОстатков.Количество=Эл.Количество;
				СтрокаНовыхОстатков.Шаг=СчШагов;
			КонецЦикла;
			Если Отказ Тогда 
				Прервать; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьЗаписиПоСхеме(СтрокаСхемы,СтрРаботы,Номенклатура,СерияНоменклатуры,Количество,ТаблицаДокументов,Цена=0)
	СтрокаДок=ТаблицаДокументов.Добавить();
	СтрокаДок.Номенклатура				=	Номенклатура;
	СтрокаДок.СерияНоменклатуры			=	СерияНоменклатуры;
	СтрокаДок.Количество				=	Количество;
	СтрокаДок.Задержка					=	СтрокаСхемы.Задержка;
	СтрокаДок.ДоговорРеал				=	СтрокаСхемы.Договор1;
	СтрокаДок.ДоговорПост				=	СтрокаСхемы.Договор2;
	СтрокаДок.Цена						=	Цена;
КонецПроцедуры
#КонецОбласти

#Область Формирование_документов
//Создает документы внутр продаж
Процедура ЗаполнитьСерииВТаблице(ТаблицаДокументов, ДатаСозданияСерий)
//переписать генерировать серию для реализации
	СпНоменклатуры=ИТИМодуль.НоменклатураССерийнымУчетом();
	
	ТаблицаДокументов.Колонки.СерияНоменклатуры.Имя="СерияНоменклатурыРеал";
	ТаблицаДокументов.Колонки.Добавить("СерияНоменклатурыПост",	Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	//Надо организовать выборку номенклатуры...
	ТаблицаДокументов.Сортировать("Номенклатура,Задержка ВОЗР");
	
	ТекСерия		= Справочники.СерииНоменклатуры.ПустаяСсылка();
	ТекНоменклатура	= Неопределено;
	Для Сч=0 По ТаблицаДокументов.Количество()-1 Цикл
		СтрокаТаблицы=ТаблицаДокументов[сч];
		Если СпНоменклатуры.Найти(СтрокаТаблицы.Номенклатура)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекНоменклатура= Неопределено Тогда
			ТекНоменклатура	= СтрокаТаблицы.Номенклатура;
		ИначеЕсли ТекНоменклатура<>СтрокаТаблицы.Номенклатура Тогда
			ТекНоменклатура	= СтрокаТаблицы.Номенклатура;
			ТекСерия		= Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатурыРеал) Тогда
			СтрокаТаблицы.СерияНоменклатурыРеал=ТекСерия;
		ИначеЕсли СтрокаТаблицы.СерияНоменклатурыРеал.Организация<>СтрокаТаблицы.ДоговорРеал.Организация Тогда //это серия из ответхранения!
			Если мИспользоватьОтветХранение Тогда
				НоваяСтрокаТаблицыДокументов=ТаблицаДокументов.Добавить(); //Строка для ответ хранения
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыДокументов,СтрокаТаблицы); //скопируем данные
				НоваяСтрокаТаблицыДокументов.Задержка=0; //задержка 1, так как до реализации с I линии.
				СтрокаТаблицы.СерияНоменклатурыРеал=ПолучитьСерию(СтрокаТаблицы.Номенклатура,СтрокаТаблицы.СерияНоменклатурыРеал.Организация,СтрокаТаблицы.СерияНоменклатурыРеал.ВладелецПоОХ,ДатаСозданияСерий,СтрокаТаблицы.СерияНоменклатурыРеал.Код); //Меняем серия в строке на новую, которую получим после возврата с ответ.хранения.
				НоваяСтрокаТаблицыДокументов.СерияНоменклатурыПост=СтрокаТаблицы.СерияНоменклатурыРеал; //это серия, которую надо будет вернуть;
			КонецЕсли;
		КонецЕсли;
		//Генерируем серию для поступления
		ТекСерия=ПолучитьСерию(СтрокаТаблицы.Номенклатура,СтрокаТаблицы.ДоговорРеал.Владелец,СтрокаТаблицы.ДоговорПост.Владелец,ДатаСозданияСерий,СтрокаТаблицы.СерияНоменклатурыРеал.Код);
		СтрокаТаблицы.СерияНоменклатурыПост=ТекСерия;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьДокументыВнутрПродажи(Объект, Знач ТаблицаДокументов,Режим=Ложь) Экспорт
	ЗаполнитьСерииВТаблице(ТаблицаДокументов,Объект.Дата);
	мВалюта=Константы.ВалютаРегламентированногоУчета.Получить();
#Область Создание_документов_возврат_с_ответхранения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаДокументов.СерияНоменклатурыРеал КАК Справочник.СерииНоменклатуры) КАК СерияНоменклатурыРеал,
		|	ВЫРАЗИТЬ(ТаблицаДокументов.СерияНоменклатурыПост КАК Справочник.СерииНоменклатуры) КАК СерияНоменклатурыПост,
		|	ТаблицаДокументов.Количество,
		|	ТаблицаДокументов.Задержка,
		|	ТаблицаДокументов.ДоговорРеал,
		|	ТаблицаДокументов.ДоговорПост,
		|	ТаблицаДокументов.Цена
		|ПОМЕСТИТЬ ТабДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДокументов.Номенклатура,
		|	ТабДокументов.СерияНоменклатурыРеал,
		|	ТабДокументов.СерияНоменклатурыПост,
		|	ТабДокументов.Количество,
		|	&Склад КАК Склад,
		|	ТабДокументов.СерияНоменклатурыРеал.Организация КАК Организация,
		|	ТабДокументов.СерияНоменклатурыРеал.ВладелецПоОХ КАК ВладелецПоОХ
		|ИЗ
		|	ТабДокументов КАК ТабДокументов
		|ГДЕ
		|	ТабДокументов.Количество <> 0
		|	И ТабДокументов.Задержка = 0
		|ИТОГИ ПО
		|	Организация,
		|	ВладелецПоОХ";
	Запрос.УстановитьПараметр("ТаблицаДокументов",	ТаблицаДокументов);
	Запрос.УстановитьПараметр("Склад",				Справочники.Склады.НайтиПоКоду("000000001").Ссылка);
	Запрос.УстановитьПараметр("Литр",				Справочники.ИТИКонстанты.Литр.Указатель);
	Результат = Запрос.Выполнить();
	ВыборкаОрганизаций=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		ВыборкаПоКонтрагентам=ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагентам.Следующий() Цикл
			ДокументыХранения=НайтиДокументыОтветХранения(Объект,ВыборкаОрганизаций.Организация,ИТИМодуль.ПолучитьСвязногоКонтрагента(ВыборкаПоКонтрагентам.ВладелецПоОХ));
			ОбПеремещение=ДокументыХранения.Перемещение.ПолучитьОбъект();
			ОбВозврат=ДокументыХранения.ВозвратПоставщику.ПолучитьОбъект();
			ВыборкаДетали=ВыборкаПоКонтрагентам.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТЧ=ОбПеремещение.Товары.Добавить();
				СтрокаТЧ.Номенклатура=ВыборкаДетали.Номенклатура;
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ОбПеремещение);
				СтрокаТЧ.ЕдиницаИзмерения=ВыборкаДетали.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТЧ.Количество=ВыборкаДетали.Количество;
				СтрокаТЧ.СерияНоменклатуры=ВыборкаДетали.СерияНоменклатурыПост;
				
				СтрокаТЧ=ОбВозврат.Товары.Добавить();
				СтрокаТЧ.Номенклатура=ВыборкаДетали.Номенклатура;
				СтрокаТЧ.ЕдиницаИзмерения=ВыборкаДетали.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТЧ.Количество=ВыборкаДетали.Количество;
				СтрокаТЧ.СерияНоменклатуры=ВыборкаДетали.СерияНоменклатурыРеал;
				ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ОбВозврат);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ОбВозврат); 
			КонецЦикла;
			ОбПеремещение.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,Коэффициент,СерияНоменклатуры,ДатаРозлива","Количество,КоличествоМест");
			ОбПеремещение.Товары.Сортировать("Номенклатура");
					
			ОбВозврат.Товары.Свернуть("ЕдиницаИзмерения,Коэффициент,Номенклатура,СтавкаНДС,Цена,СерияНоменклатуры","Количество,КоличествоМест,Сумма,СуммаНДС");
			ОбВозврат.Товары.Сортировать("Номенклатура");
			
			ОбПеремещение.ЗаполнитьСчетаУчетаВТабЧасти(ОбПеремещение.Товары,"Товары",Истина);
			ОбВозврат.ЗаполнитьСчетаУчетаВТабЧасти(ОбВозврат.Товары,"Товары",Истина);
			ОбВозврат.Записать(РежимЗаписиДокумента.Проведение);
			ОбПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЦикла;

#КонецОбласти
	
#Область Создание_документов_реализация_и_поступление
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Номенклатура,
		|	ТаблицаДокументов.СерияНоменклатурыРеал,
		|	ТаблицаДокументов.СерияНоменклатурыПост,
		|	ТаблицаДокументов.Количество,
		|	ТаблицаДокументов.Задержка,
		|	ТаблицаДокументов.ДоговорРеал,
		|	ТаблицаДокументов.ДоговорПост,
		|	ТаблицаДокументов.Цена
		|ПОМЕСТИТЬ ТабДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабДокументов.Номенклатура,
		|	ТабДокументов.СерияНоменклатурыРеал,
		|	ТабДокументов.СерияНоменклатурыПост,
		|	ТабДокументов.Количество,
		|	&Склад КАК Склад,
		|	ТабДокументов.ДоговорРеал КАК ДоговорРеал,
		|	ТабДокументов.ДоговорПост КАК ДоговорПост,
		|	ТабДокументов.Цена КАК Цена,
		|	ТабДокументов.Номенклатура.БазоваяЕдиницаИзмерения=&Литр КАК Розлив
		|ИЗ
		|	ТабДокументов КАК ТабДокументов
		|ГДЕ
		|	ТабДокументов.Количество <> 0
		|	И ТабДокументов.Задержка <> 0
		|ИТОГИ ПО
		|	ДоговорРеал,
		|	ДоговорПост, 
		|	Розлив";
	Запрос.УстановитьПараметр("ТаблицаДокументов",	ТаблицаДокументов);
	Запрос.УстановитьПараметр("Склад",				Справочники.Склады.НайтиПоКоду("000000001").Ссылка);
	Запрос.УстановитьПараметр("Литр",				Справочники.ИТИКонстанты.Литр.Указатель);
	Результат = Запрос.Выполнить();
	
    ТаблицаНоменклатуры=Результат.Выгрузить();
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	Если ТаблицаНоменклатуры.Найти(Null,"Номенклатура")<>Неопределено Тогда
		ТаблицаНоменклатуры.Удалить(ТаблицаНоменклатуры.Найти(Null,"Номенклатура"));
	КонецЕсли;
	
	НаборЗаписейВП=РегистрыСведений.ВнутренниеПродажиДокумента.СоздатьНаборЗаписей();
	НаборЗаписейВП.Отбор.Основание.Установить(Объект.Ссылка);
	НаборЗаписейВП.Прочитать();
	НаборЗаписейВП.Очистить();
	
	НаборЦен=РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	ТаблицаЦенДляЗаписи=НаборЦен.Выгрузить();
	
	ВыборкаДоговорРеал = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    Цена=0;
	Пока ВыборкаДоговорРеал.Следующий() Цикл //только договоры реализаций (для группировки реал-пост. остальное обработаем в том числе
		ВыборкаДоговорПост=ВыборкаДоговорРеал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДоговорПост.Следующий() Цикл
			//Найдем/создадим документы
			//ВнДоки	= ПолучитьДокументы(Объект,ВыборкаДоговорРеал.ДоговорРеал,ВыборкаДоговорПост.ДоговорПост,Ложь);
		
			ФлагРеал=ЗначениеЗаполнено(ВыборкаДоговорРеал.ДоговорРеал);
			ФлагПост=ЗначениеЗаполнено(ВыборкаДоговорПост.ДоговорПост);
			
			//Момент расчета цен
			РабКонтрагент=?(ФлагРеал,ВыборкаДоговорРеал.ДоговорРеал.Организация,ВыборкаДоговорПост.ДоговорПост.Владелец);
			//ТипЦенКонтрагент=ПолучитьТипЦенВП(РабКонтрагент);
			ТаблицаЦен=РассчитатьЦены(ТаблицаНоменклатуры,РабКонтрагент,Объект.Дата);
			ВыборкаРозлив = ВыборкаДоговорПост.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); //Перебор номенклатуры которую надо запихать в документы
			Пока ВыборкаРозлив.Следующий() Цикл
				ВнДоки	= ПолучитьДокументы(Объект,ВыборкаДоговорРеал.ДоговорРеал,ВыборкаДоговорПост.ДоговорПост,Ложь,ВыборкаРозлив.Розлив);
				ВыборкаДетальныеЗаписи=ВыборкаРозлив.Выбрать();
				Если ФлагРеал Тогда
					ОбРеал=ВнДоки.Реализация.ПолучитьОбъект();
				КонецЕсли;
				Если ФлагПост Тогда
					ОбПост=ВнДоки.Поступление.ПолучитьОбъект();
				КонецЕсли;

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ФлагРеал Тогда
						СтрокаПредыдущая=ОбРеал.Товары.Найти(ВыборкаДетальныеЗаписи.Номенклатура,"Номенклатура");
						СтрокаТоваров=ОбРеал.Товары.Добавить();
						СтрокаТоваров.Номенклатура			= ВыборкаДетальныеЗаписи.Номенклатура;
						СтрокаТоваров.СерияНоменклатуры		= ВыборкаДетальныеЗаписи.СерияНоменклатурыРеал;
						СтрокаТоваров.Количество			= ВыборкаДетальныеЗаписи.Количество;
						Если ВыборкаДетальныеЗаписи.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоРозлив.Указатель) Тогда
							СтрокаТоваров.ЕдиницаИзмерения	= Справочники.ИТИКонстанты.Кега.Указатель;
							СтрокаТоваров.КоличествоМест	= ВыборкаДетальныеЗаписи.Количество/50;
							СтрокаТоваров.Коэффициент		= 50;
						ИначеЕсли ВыборкаДетальныеЗаписи.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоБутылка.Указатель) Тогда
							СтрокаТоваров.ЕдиницаИзмерения	= Справочники.ИТИКонстанты.Упак.Указатель;
							СтрокаТоваров.КоличествоМест	= ВыборкаДетальныеЗаписи.Количество/20;
							СтрокаТоваров.Коэффициент		= 20;
						КонецЕсли;
						//Поиск цены
						
						Если ЗначениеЗаполнено(СтрокаПредыдущая) Тогда
							Цена=СтрокаПредыдущая.Цена;
						ИначеЕсли ВыборкаДетальныеЗаписи.Цена<>0 Тогда
							Цена=ВыборкаДетальныеЗаписи.Цена;
						Иначе
							Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура,
							ОбРеал.ТипЦен, ОбРеал.Дата,
							ОбРеал.ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ОбРеал, мВалюта), 
							ЗаполнениеДокументов.КратностьДокумента(ОбРеал, мВалюта));
							Если Не ЗначениеЗаполнено(Цена) Тогда
								Сообщить("Не задана цена для "+Строка(ВыборкаДетальныеЗаписи.Номенклатура)+" по типу цен "+Строка(ОбРеал.ТипЦен));
								
								РассчитанныеЦены=ТаблицаЦен.Найти(ВыборкаДетальныеЗаписи.Номенклатура,"Номенклатура");
								Если РассчитанныеЦены<>Неопределено Тогда
									Если РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП>РассчитанныеЦены.ФиксированнаяЦенаВП*1.05 Тогда//сюда же включается Фикс=0
										Цена=РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП;
										
										СтрЗаписи=ТаблицаЦенДляЗаписи.Добавить();
										СтрЗаписи.Контрагент		= РабКонтрагент;
										СтрЗаписи.Валюта			= мВалюта;
										СтрЗаписи.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
										СтрЗаписи.Период			= Объект.Дата;
										СтрЗаписи.ДокументРегистрации= Объект.Ссылка;
										СтрЗаписи.Цена				= Цена;
									ИначеЕсли РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП<РассчитанныеЦены.ФиксированнаяЦенаВП*0.95 Тогда 
										Цена=РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП;
										
										СтрЗаписи=ТаблицаЦенДляЗаписи.Добавить();
										СтрЗаписи.Контрагент		= РабКонтрагент;
										СтрЗаписи.Валюта			= мВалюта;
										СтрЗаписи.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
										СтрЗаписи.Период			= Объект.Дата;
										СтрЗаписи.ДокументРегистрации= Объект.Ссылка;
										СтрЗаписи.Цена				= Цена;
									Иначе
										Цена=РассчитанныеЦены.ФиксированнаяЦенаВП;
									КонецЕсли;
								Иначе
									Сообщить("Ошибка в расчете цен");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						СтрокаТоваров.Цена=Цена;
						СтрокаТоваров.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;//СтрокаТоваров.Номенклатура.СтавкаНДС;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТоваров, ОбРеал);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТоваров, ОбРеал);
					КонецЕсли;
					Если ФлагПост Тогда
						//Поиск цены
						Если НЕ ФлагРеал Тогда //Если Была реализация то цена уже расчитана
							//Поиск цены
							СтрокаПредыдущая=ОбПост.Товары.Найти(ВыборкаДетальныеЗаписи.Номенклатура,"Номенклатура");
							Если ЗначениеЗаполнено(СтрокаПредыдущая) Тогда
								Цена=СтрокаПредыдущая.Цена;
							Иначе
								Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура,
								ОбПост.ТипЦен, ОбПост.Дата,
								ОбПост.ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ОбПост, мВалюта), 
								ЗаполнениеДокументов.КратностьДокумента(ОбПост, мВалюта));
								Если НЕ ЗначениеЗаполнено(Цена) Тогда
									Сообщить("Не задана цена для "+Строка(ВыборкаДетальныеЗаписи.Номенклатура)+" по типу цен "+Строка(ОбПост.ТипЦен));
									//Проверка соотношения Фиксированной и ВновьРассчитанной
									РассчитанныеЦены=ТаблицаЦен.Найти(ВыборкаДетальныеЗаписи.Номенклатура,"Номенклатура");
									Если РассчитанныеЦены<>Неопределено Тогда
										Если РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП>РассчитанныеЦены.ФиксированнаяЦенаВП*1.05 Тогда//сюда же включается Фикс=0
											
											Цена=РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП;
											
											СтрЗаписи=ТаблицаЦенДляЗаписи.Добавить();
											СтрЗаписи.Контрагент		= РабКонтрагент;
											СтрЗаписи.Валюта			= мВалюта;
											СтрЗаписи.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
											СтрЗаписи.Период			= Объект.Дата;
											СтрЗаписи.ДокументРегистрации= Объект.Ссылка;
											СтрЗаписи.Цена				= Цена;
										ИначеЕсли РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП<РассчитанныеЦены.ФиксированнаяЦенаВП Тогда 
											Цена=РассчитанныеЦены.ВновьРассчитаннаяФиксированнаяЦенаВП;
											
											СтрЗаписи=ТаблицаЦенДляЗаписи.Добавить();
											СтрЗаписи.Контрагент		= РабКонтрагент;
											СтрЗаписи.Валюта			= мВалюта;
											СтрЗаписи.Номенклатура		= ВыборкаДетальныеЗаписи.Номенклатура;
											СтрЗаписи.Период			= Объект.Дата;
											СтрЗаписи.ДокументРегистрации= Объект.Ссылка;
											СтрЗаписи.Цена				= Цена;
										Иначе
											Цена=РассчитанныеЦены.ФиксированнаяЦенаВП;
										КонецЕсли;
									Иначе
										Сообщить("Ошибка в расчете цен");
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						СтрокаТоваров=ОбПост.Товары.Добавить();
						СтрокаТоваров.Номенклатура			= ВыборкаДетальныеЗаписи.Номенклатура;
						СтрокаТоваров.СерияНоменклатуры		= ВыборкаДетальныеЗаписи.СерияНоменклатурыПост;
						СтрокаТоваров.Количество			= ВыборкаДетальныеЗаписи.Количество;
						Если ВыборкаДетальныеЗаписи.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоРозлив.Указатель) Тогда
							СтрокаТоваров.ЕдиницаИзмерения	= Справочники.ИТИКонстанты.Кега.Указатель;
							СтрокаТоваров.КоличествоМест	= ВыборкаДетальныеЗаписи.Количество/50;
							СтрокаТоваров.Коэффициент		= 50;
						ИначеЕсли ВыборкаДетальныеЗаписи.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоБутылка.Указатель) Тогда
							СтрокаТоваров.ЕдиницаИзмерения	= Справочники.ИТИКонстанты.Упак.Указатель;
							СтрокаТоваров.КоличествоМест	= ВыборкаДетальныеЗаписи.Количество/20;
							СтрокаТоваров.Коэффициент		= 20;
						КонецЕсли;
						СтрокаТоваров.Цена=Цена;
						СтрокаТоваров.СтавкаНДС=Перечисления.СтавкиНДС.НДС18;//СтрокаТоваров.Номенклатура.СтавкаНДС;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТоваров, ОбПост);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТоваров, ОбПост);
					КонецЕсли;
					Запись=НаборЗаписейВП.Добавить();
					Запись.Основание			=Объект.Ссылка;
					Запись.Номенклатура			=ВыборкаДетальныеЗаписи.Номенклатура;
					Запись.ДокументПоступления	=?(ОбПост<>Неопределено,ОбПост.Ссылка,Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
					Запись.ДокументРеализация	=?(ОбРеал<>Неопределено,ОбРеал.Ссылка,Документы.РеализацияТоваровУслуг.ПустаяСсылка());
					Запись.КонтрагентПродажа	=?(ОбПост<>Неопределено,ОбПост.Контрагент,Справочники.Контрагенты.ПустаяСсылка());
					Запись.КонтрагентПокупка	=?(ОбРеал<>Неопределено,ОбРеал.Контрагент,Справочники.Контрагенты.ПустаяСсылка());
					Запись.Количество			=ВыборкаДетальныеЗаписи.Количество;
					Запись.Ключ					=Строка(новый УникальныйИдентификатор);
				КонецЦикла;
				Если ФлагРеал и ОбРеал.Модифицированность() Тогда
					ОбРеал.Товары.Свернуть("ЕдиницаИзмерения,Коэффициент,Номенклатура,СтавкаНДС,Цена,СерияНоменклатуры","Количество,КоличествоМест,Сумма,СуммаНДС");
					ОбРеал.Товары.Сортировать("Номенклатура");
					ОбРеал.ЗаполнитьСчетаУчетаВТабЧасти(ОбРеал.Товары,"Товары",Истина);
					ОбРеал.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				Если ФлагПост И ОбПост.Модифицированность() Тогда
					ОбПост.Товары.Свернуть("ЕдиницаИзмерения,Коэффициент,Номенклатура,СтавкаНДС,Цена,СерияНоменклатуры","Количество,КоличествоМест,Сумма,СуммаНДС");
					ОбПост.Товары.Сортировать("Номенклатура");
					ОбПост.ЗаполнитьСчетаУчетаВТабЧасти(ОбПост.Товары,"Товары",Истина,Истина);
					ОбПост.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
#КонецОбласти	
	Отказ=Ложь;
	ЗаполнитьИсходныйДокументСериями(Объект,ТаблицаДокументов,Отказ);
	НаборЗаписейВП.Записать();
    Если НЕ Отказ Тогда
		Объект.Записать(РежимЗаписиДокумента.Проведение);  
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСерию(Знач Номенклатура, Поставщик, Покупатель, ДатаСерии,НомерСерииРеализации) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерииНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.Владелец = &Номенклатура
		|	И НЕ СерииНоменклатуры.ПометкаУдаления
		|	И СерииНоменклатуры.Наименование ПОДОБНО &Поставщик
		|	И СерииНоменклатуры.Наименование ПОДОБНО &Покупатель
		|	И СерииНоменклатуры.Наименование ПОДОБНО &ДатаПоставки
		|	И СерииНоменклатуры.Наименование ПОДОБНО &Код";
		
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.УстановитьПараметр("ДатаПоставки",	"%"+Формат(ДатаСерии,"ДФ=yyyy.MM.dd")+"%");
	Запрос.УстановитьПараметр("Покупатель",		"%"+Покупатель.Наименование+"%");
	Запрос.УстановитьПараметр("Поставщик",		"%"+Поставщик.Наименование+"%");
	Запрос.УстановитьПараметр("Код",			"%/"+НомерСерииРеализации+"/%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Серия				= Справочники.СерииНоменклатуры.СоздатьЭлемент();
		Серия.Владелец		= Номенклатура;
		Серия.Наименование	= Поставщик.Наименование+"->"+Покупатель.Наименование+" ("+Формат(ДатаСерии,"ДФ=yyyy.MM.dd")+")"+"/"+НомерСерииРеализации+"/";
		Если ТипЗнч(Покупатель)=Тип("СправочникСсылка.Контрагенты") Тогда
			Серия.Организация	= ИТИМодуль.ПолучитьСвязнуюОрганиацию(Покупатель);
		Иначе
			Серия.Организация	= Покупатель;
		КонецЕсли;
		Серия.Комментарий	= "НачПарамЕГАИС"+"КонПарамЕГАИС";
		Серия.Записать();
		Возврат Серия.Ссылка;
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Создает пустой документ Реализации/Поступления с признаком внутр. продажа
Функция СоздатьРеализацию(Договор,Склад,ДатаДокумента,Розлив)
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	
	ДокРеализации=Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//-----------------
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокРеализации,ПараметрыСеанса.ТекущийПользователь);
	ДокРеализации.Организация=Договор.Организация.Ссылка;
	ДокРеализации.Контрагент=Договор.Владелец.Ссылка;
	//KAV++ 20-11-2014 Начинаем использовать типы цен	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобственныеКонтрагенты.ИспользуемыйТипЦен
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ
		|	СобственныеКонтрагенты.Контрагент = &Контрагент";

	Запрос.УстановитьПараметр("Контрагент", ДокРеализации.Контрагент);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокРеализации.ТипЦен=ВыборкаДетальныеЗаписи.ИспользуемыйТипЦен;
	КонецЕсли;
	//KAV--
	ДокРеализации.Склад=Справочники.ИТИКонстанты.ОсновнойСклад.Указатель;
	ДокРеализации.Дата=(ДатаДокумента);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокРеализации,мСписокВидовДоговоров);
	ДокРеализации.ДоговорКонтрагента=Договор;
	ДокРеализации.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
	ДокРеализации.КратностьВзаиморасчетов=1;
	ДокРеализации.КурсВзаиморасчетов=1;
	ДокРеализации.ВнутреннийДокумент=Истина;
	ДокРеализации.Комментарий="Внутренняя продажа";
	ДокРеализации.ЗаполнитьСчетаУчетаРасчетов();
	ДокРеализации.ТолькоРозлив=Розлив;
	ДокРеализации.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокРеализации.Ссылка;
КонецФункции
Функция СоздатьПоступление(Договор,Склад,ДатаДокумента,НомерВнутр=Неопределено,ДатаВнутр,Розлив)
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	ДокПоступления=Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	//-----------------
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокПоступления,ПараметрыСеанса.ТекущийПользователь);
	ДокПоступления.Организация=Договор.Организация.Ссылка;
	ДокПоступления.Контрагент=Договор.Владелец.Ссылка;
	//KAV++ 20-11-2014 Начинаем использовать типы цен
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобственныеКонтрагенты.ИспользуемыйТипЦен
		|ИЗ
		|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		|ГДЕ
		|	СобственныеКонтрагенты.Организация= &Организация";

	Запрос.УстановитьПараметр("Организация", ДокПоступления.Организация);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДокПоступления.ТипЦен=ВыборкаДетальныеЗаписи.ИспользуемыйТипЦен;
	КонецЕсли;
	//KAV--
	ДокПоступления.Склад=Справочники.ИТИКонстанты.ОсновнойСклад.Указатель;
	ДокПоступления.Дата=(ДатаДокумента);
	ДокПоступления.НомерВходящегоДокумента	= НомерВнутр;
	ДокПоступления.ДатаВходящегоДокумента	= ДатаВнутр;
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокПоступления,мСписокВидовДоговоров);
	ДокПоступления.ДоговорКонтрагента=Договор;
	ДокПоступления.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
	ДокПоступления.КратностьВзаиморасчетов=1;
	ДокПоступления.КурсВзаиморасчетов=1;
	ДокПоступления.ВнутреннийДокумент=Истина;
	ДокПоступления.Комментарий="Внутренняя продажа";
	ДокПоступления.ЗаполнитьСчетаУчетаРасчетов();
	ДокПоступления.ТолькоРозлив=Розлив;
	ДокПоступления.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокПоступления.Ссылка;
КонецФункции

Функция СоздатьПеремещение(ДатаДокумента,Склад,Организация,Контрагент)
	Док=Документы.ПеремещениеТоваров.СоздатьДокумент();
	Док.Дата=НачалоДня(ДатаДокумента)+5;
	Док.ВидОперации=Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	Док.Комментарий="Возврат из ответ. хранения";
	Док.Контрагент=Контрагент;
	Док.Организация=Организация;
	Док.СкладПолучатель=Склад;
	Док.СкладОтправитель=Справочники.ИТИКонстанты.СкладХранения.Указатель;
	Док.Ответственный=глЗначениеПеременной("глТекущийПользователь");
	Док.ЭтоВозврат=Истина;
	Док.Записать();
	Возврат Док.Ссылка;
КонецФункции
Функция СоздатьВозвратПоставщику(Перемещение)
	Об=Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
	Об.ВидОперации=Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	Об.СтатьяДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
	
	Об.Склад=Справочники.ИТИКонстанты.СкладХранения.Указатель;
	Об.ЗаполнитьСчетаУчетаРасчетов();
	Об.Организация=ИТИМодуль.ПолучитьСвязнуюОрганиацию(Перемещение.Контрагент);
	Об.Контрагент=ИТИМодуль.ПолучитьСвязногоКонтрагента(Перемещение.Организация);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(Об.ДоговорКонтрагента,
	Об.Контрагент,
	Об.Организация,Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Об.ВалютаДокумента=Константы.ВалютаРегламентированногоУчета.Получить();
	Об.КратностьВзаиморасчетов=1;
	Об.КурсВзаиморасчетов=1;
	Если Не ЗначениеЗаполнено(Об.ДоговорКонтрагента) Тогда 
		Ответ=Вопрос("Не найден договор для оформления передачи. Создать договор? ("+Строка(Об.Контрагент)+">>"+Строка(Об.Организация)+")",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да);
		Если Ответ<>КодВозвратаДиалога.Да Тогда
			Возврат Неопределено;
		КонецЕсли;
		НовыйДоговор=Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Организация	= Об.Организация;
		НовыйДоговор.Владелец		= Об.Контрагент;
		НовыйДоговор.ВалютаВзаиморасчетов=Константы.ВалютаРегламентированногоУчета.Получить();
		НовыйДоговор.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		НовыйДоговор.Наименование="Передача на ответственное хранение";
		Попытка
			НовыйДоговор.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалость записать договор. "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Об.ДоговорКонтрагента=НовыйДоговор.Ссылка;
	КонецЕсли;
	Об.Дата=Перемещение.Дата-1;
	Об.Ответственный=глЗначениеПеременной("глТекущийПользователь");
	Об.ДокументПередачиНаХранение=Перемещение;
	Об.СчетУчетаДоходов=ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Об.СчетУчетаРасходов=ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Об.Записать();
	
	Возврат Об.Ссылка;
КонецФункции
#КонецОбласти


Функция НайтиДокументВнутреннейПродажи(Организация, Контрагент, ДатаДокумента, Тип, Режим, НомерВнут=Неопределено, Розлив=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док.Ссылка
		|ИЗ
		|	Документ."+Тип+" КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.Дата МЕЖДУ  НАЧАЛОПЕРИОДА(&Дата,ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата,ДЕНЬ)
		|	И Док.Организация = &Организация
		|	И Док.Контрагент = &Контрагент
		|	И Док.ВнутреннийДокумент"
		+ ?(Тип="ПоступлениеТоваровУслуг" И ЗначениеЗаполнено(НомерВнут)," И Док.НомерВходящегоДокумента=&НомерВнутр","")
		//Если не поиск пар, а создание то делим на розлив и нет
		+ ?(Не Режим И ТипЗнч(Розлив)=Тип("Булево")," И Док.ТолькоРозлив=&Розлив","");
	Запрос.УстановитьПараметр("Дата", 			ДатаДокумента);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент.Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация.Ссылка);
	Запрос.УстановитьПараметр("НомерВнутр", 	НомерВнут);
	Запрос.УстановитьПараметр("Розлив",			Розлив);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	ИначеЕсли Режим Тогда //обработка поиска пар документов
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док.Ссылка
		|ИЗ
		|	Документ."+Тип+" КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.Дата МЕЖДУ  НАЧАЛОПЕРИОДА(&Дата,ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата,ДЕНЬ)
		|	И Док.Организация = &Организация
		|	И Док.Контрагент = &Контрагент
		|	И Док.ВнутреннийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Док.Номер УБЫВ";
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиДокументыОтветХранения(Док,Организация,Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка КАК ВозвратПоставщику,
		|	ВозвратТоваровПоставщику.ДокументПередачиНаХранение КАК ПеремещениеТоваров
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Организация = &Организация
		|	И ВозвратТоваровПоставщику.Контрагент = &Контрагент
		|	И НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, ДЕНЬ) = &Дата
		|	И НЕ ВозвратТоваровПоставщику.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Док.Дата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Перемещение=СоздатьПеремещение(Док.Дата,Док.Склад,ИТИМодуль.ПолучитьСвязнуюОрганиацию(Контрагент),ИТИМодуль.ПолучитьСвязногоКонтрагента(Организация));
		Возврат Новый Структура("ВозвратПоставщику,Перемещение",СоздатьВозвратПоставщику(Перемещение),Перемещение);
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("ВозвратПоставщику,Перемещение",Выборка.ВозвратПоставщику,Выборка.ПеремещениеТоваров);
	КонецЕсли;

КонецФункции

Функция ПолучитьДокументы(Знач Док,ЗНАЧ ДоговорРеал,ЗНАЧ ДоговорПост,Режим=Ложь, Розлив=Неопределено)
	
	ФлагСозданыНовыеДокументы = Ложь;
	Выход=Новый Структура("Реализация,Поступление");
	Если ЗначениеЗаполнено(ДоговорРеал) Тогда
		Выход.Реализация		= НайтиДокументВнутреннейПродажи(ДоговорРеал.Организация,ДоговорРеал.Владелец,НачалоДня(Док.Дата),"РеализацияТоваровУслуг",Режим,,Розлив);
		Если Не ЗначениеЗаполнено(Выход.Реализация) Тогда
			Выход.Реализация	= СоздатьРеализацию(ДоговорРеал,?(ТипЗнч(Док)=Тип("ДокументОбъект.ПеремещениеТоваров"),Док.СкладОтправитель,Док.Склад),КонецДня(Док.Дата),Розлив);
			ФлагСозданыНовыеДокументы = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорПост) Тогда
		Если ЗначениеЗаполнено(Выход.Реализация) Тогда
			Выход.Поступление		= НайтиДокументВнутреннейПродажи(ДоговорПост.Организация,ДоговорПост.Владелец,НачалоДня(Док.Дата),"ПоступлениеТоваровУслуг",Режим,Выход.Реализация.Номер,Розлив);
		Иначе
			Выход.Поступление		= НайтиДокументВнутреннейПродажи(ДоговорПост.Организация,ДоговорПост.Владелец,НачалоДня(Док.Дата),"ПоступлениеТоваровУслуг",Режим,,Розлив);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выход.Поступление) Тогда
			НомерВх=?(Выход.Реализация<>Неопределено,Выход.Реализация.Номер,Неопределено);
			ДатаВх=?(Выход.Реализация<>Неопределено,Выход.Реализация.Дата,Неопределено);
			Выход.Поступление	= СоздатьПоступление(ДоговорПост,?(ТипЗнч(Док)=Тип("ДокументОбъект.ПеремещениеТоваров"),Док.СкладОтправитель,Док.Склад),НачалоДня(Док.Дата),НомерВх,ДатаВх,Розлив);	
			ФлагСозданыНовыеДокументы = Истина;
		КонецЕсли;
	КонецЕсли;
	Набор=РегистрыСведений.АвтомобилиСобственные.СоздатьНаборЗаписей();
	
	Набор.Отбор.ДокПоступления.Установить(Выход.Поступление);
	Набор.Отбор.ДокРеализация.Установить(Выход.Реализация);
	Набор.Прочитать();
	Если Набор.Количество()=0 Тогда
		Запись=Набор.Добавить();
	Иначе
		Возврат Выход;
	КонецЕсли;
	
	Запись.ДокПоступления	= Выход.Поступление;
	Запись.ДокРеализация	= Выход.Реализация;
	Запись.Перевозчик		= Справочники.Контрагенты.НайтиПоНаименованию("Колеус ООО").Ссылка;
	Запись.П000010000103	= Запись.Перевозчик.НаименованиеПолное;
	Запись.П000010000104	= Запись.Перевозчик.ИНН;
	Запись.П000010000105	= Запись.Перевозчик.КПП;
	Набор.Записать();
	
	Если ФлагСозданыНовыеДокументы Тогда
		Если ЗначениеЗаполнено(Выход.Поступление) и ЗначениеЗаполнено(Выход.Реализация) Тогда
			Запись = РегистрыСведений.СоответствиеДокументовПТУРТУВнутренниеПродажи.СоздатьМенеджерЗаписи();
			Запись.ПТУ = Выход.Поступление;
			Запись.РТУ = Выход.Реализация;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Выход;
КонецФункции

Функция РассчитатьЦены(ЗНАЧ ТаблицаНоменклатуры, Продавец, ДатаРасчета) Экспорт
Перем РабочийПродавец;
	//Определяем тип продавца... На всякий случай
	Если ТипЗнч(Продавец.Ссылка)=Тип("СправочникСсылка.Организации") Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	СобственныеКонтрагенты.Контрагент
		             |ИЗ
		             |	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
		             |ГДЕ
		             |	 СобственныеКонтрагенты.Организация = &Объект";
		Запрос.УстановитьПараметр("Объект",Продавец.Ссылка);
		Результат=Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Сообщить("Для "+Продавец+" не задан собственный контрагнт");
			Возврат Ложь;
		КонецЕсли;
		РабочийПродавец=Результат.Выгрузить().Получить(0).Контрагент.Ссылка;
		//Продавец=РабочийПродавец;
	ИначеЕсли ТипЗнч(Продавец.Ссылка)=Тип("СправочникСсылка.Контрагенты") Тогда
		РабочийПродавец=Продавец.Ссылка;
	Иначе
		Сообщить("Неверные входящие параметры в расчете цен!");
		Возврат Ложь;
	КонецЕсли;

	
	//Собираем номенклатуру
	Попытка
		СпНоменклатуры=ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	Исключение
		Сообщить("В исходной таблице для расчета цен нет колонки с номенклатурой");
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	
    Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
                 |	ТаблицаЦен.Номенклатура,
                 |	ТаблицаЦен.ДатаРегистрации,
                 |	ТаблицаЦен.ФиксированнаяЦенаВП,
                 |	ТаблицаЦен.СредняяЦенаПродажи,
                 |	ТаблицаЦен.ЦенаЗакупочная,
                 |	ВЫБОР
                 |		КОГДА ТаблицаЦен.ЦенаЗакупочная = 0
                 |				ИЛИ ТаблицаЦен.ЦенаЗакупочная ЕСТЬ NULL 
                 |			ТОГДА 100
                 |		КОГДА ТаблицаЦен.СредняяЦенаПродажи = 0
                 |				ИЛИ ТаблицаЦен.СредняяЦенаПродажи ЕСТЬ NULL 
                 |			ТОГДА 0
                 |		ИНАЧЕ ВЫРАЗИТЬ(100 * (ТаблицаЦен.СредняяЦенаПродажи / ТаблицаЦен.ЦенаЗакупочная - 1) КАК ЧИСЛО(10, 0))
                 |	КОНЕЦ КАК РасчетныйПроцентНаценки,
                 |	ЕСТЬNULL(ЗначенияСвойствОбъектов.Значение, ЛОЖЬ) КАК ЭтоАлкоголь
                 |ИЗ
                 |	(ВЫБРАТЬ
                 |		СпрНоменклатура.Ссылка КАК Номенклатура,
                 |		ЦеныНоменклатурыКонтрагентовСрезПоследних.Период КАК ДатаРегистрации,
                 |		ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена, 0) КАК ФиксированнаяЦенаВП,
                 |		ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗакупочная,
                 |		ВЫБОР
                 |			КОГДА ХозрасчетныйОборотыКоличество.КоличествоОборотКт = 0
                 |				ТОГДА 0
                 |			ИНАЧЕ ХозрасчетныйОборотыСумма.СуммаОборот / ХозрасчетныйОборотыКоличество.КоличествоОборотКт
                 |		КОНЕЦ КАК СредняяЦенаПродажи
                 |	ИЗ
                 |		Справочник.Номенклатура КАК СпрНоменклатура
                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
                 |					КОНЕЦПЕРИОДА(&ДатаРасчета, ДЕНЬ),
                 |					Номенклатура В (&СпНоменклатуры)
                 |						И Контрагент = &РабочийПродавец) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
                 |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                 |					МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Период) КАК Период,
                 |					ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура
                 |				ИЗ
                 |					РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
                 |							КОНЕЦПЕРИОДА(&ДатаРасчета, ДЕНЬ),
                 |							Номенклатура В (&СпНоменклатуры)
                 |								И Контрагент = &РабочийПродавец) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
                 |				
                 |				СГРУППИРОВАТЬ ПО
                 |					ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура) КАК ЦеныНоменклатурыКонтрагентовСрезПоследнихФильтр
                 |				ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследнихФильтр.Номенклатура
                 |					И ЦеныНоменклатурыКонтрагентовСрезПоследних.Период = ЦеныНоменклатурыКонтрагентовСрезПоследнихФильтр.Период
                 |			ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                 |					КОНЕЦПЕРИОДА(&ДатаРасчета, ДЕНЬ),
                 |					Номенклатура В (&СпНоменклатуры)
                 |						И ТипЦен = &ТЦ_Закупочная) КАК ЦеныНоменклатурыСрезПоследних
                 |			ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
                 |					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРасчета, ДЕНЬ, -11), ДЕНЬ),
                 |					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРасчета, ДЕНЬ, -1), ДЕНЬ),
                 |					,
                 |					Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)),
                 |					,
                 |					Субконто1 В (&СпНоменклатуры)
                 |						И Организация.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияОрганизации.Продажа),
                 |					КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи)),
                 |					) КАК ХозрасчетныйОборотыКоличество
                 |			ПО СпрНоменклатура.Ссылка = ХозрасчетныйОборотыКоличество.Субконто1
                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
                 |					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРасчета, ДЕНЬ, -11), ДЕНЬ),
                 |					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаРасчета, ДЕНЬ, -1), ДЕНЬ),
                 |					,
                 |					Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)),
                 |					,
                 |					КорСубконто3 В (&СпНоменклатуры)
                 |						И Организация.ТипОрганизации = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияОрганизации.Продажа),
                 |					КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи)),
                 |					) КАК ХозрасчетныйОборотыСумма
                 |			ПО СпрНоменклатура.Ссылка = ХозрасчетныйОборотыСумма.КорСубконто3
                 |	ГДЕ
                 |		СпрНоменклатура.Ссылка В(&СпНоменклатуры)) КАК ТаблицаЦен
                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
                 |		ПО ТаблицаЦен.Номенклатура = ЗначенияСвойствОбъектов.Объект
                 |			И (ЗначенияСвойствОбъектов.Свойство = &Алкоголь)";
	Запрос.УстановитьПараметр("ДатаРасчета",		КонецДня(ДатаРасчета));
	Запрос.УстановитьПараметр("РабочийПродавец",	РабочийПродавец);
	Запрос.УстановитьПараметр("СпНоменклатуры",		СпНоменклатуры);
	Запрос.УстановитьПараметр("ТЦ_Закупочная",		Справочники.ИТИКонстанты.ТипЦенЗакуп.Указатель);
	Запрос.УстановитьПараметр("Алкоголь",			Справочники.ИТИКонстанты.СвойствоЭтоАлкоголь.Указатель);

	ТаблицаЦен=Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Колонки.Добавить("ВновьРассчитаннаяФиксированнаяЦенаВП",Новый ОписаниеТипов("Число"));
	ПроцентНаценкиНаЗакупочнуюЦену=0;
	Для Каждого СтрокаТЧ Из ТаблицаЦен Цикл
		Если СтрокаТЧ.РасчетныйПроцентНаценки=Null Тогда Продолжить; КонецЕсли;
		Если СтрокаТЧ.ЭтоАлкоголь Тогда
			Предел=25;
		Иначе
			Предел=15;
		КонецЕсли;
		Если СтрокаТЧ.РасчетныйПроцентНаценки>Предел Тогда
			ПроцентНаценкиНаЗакупочнуюЦену=15;
		ИначеЕсли СтрокаТЧ.РасчетныйПроцентНаценки>0 Тогда
			ПроцентНаценкиНаЗакупочнуюЦену=(СтрокаТЧ.РасчетныйПроцентНаценки/2);
		Иначе
			ПроцентНаценкиНаЗакупочнуюЦену=СтрокаТЧ.РасчетныйПроцентНаценки;
		КонецЕсли;
		СтрокаТЧ.ВновьРассчитаннаяФиксированнаяЦенаВП=Окр(СтрокаТЧ.ЦенаЗакупочная*(1+ПроцентНаценкиНаЗакупочнуюЦену/100),2);
		СтрокаТЧ.ВновьРассчитаннаяФиксированнаяЦенаВП=?(СтрокаТЧ.ВновьРассчитаннаяФиксированнаяЦенаВП<0,0,СтрокаТЧ.ВновьРассчитаннаяФиксированнаяЦенаВП);
	КонецЦикла;
	ТаблицаЦен.Свернуть("Номенклатура,ФиксированнаяЦенаВП,ВновьРассчитаннаяФиксированнаяЦенаВП");
	Возврат ТаблицаЦен;
КонецФункции

Функция УстановленаЦенаПоТипуЦен(Номенклатура,ТипЦен,ДатаДокумента)
	//Отбор=Новый Структура("Номенклатура,ТипЦен",Номенклатура,ТипЦен);
	//Результат=РегистрыСведений.ЦеныНоменклатуры.Получить(ДатаДокумента,Отбор);
	//Возврат ЗначениеЗаполнено(Результат.Цена);
	Возврат ЗначениеЗаполнено(Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,ТипЦен,ДатаДокумента));
КонецФункции

////////////////

Процедура ЗаполнитьИсходныйДокументСериями(Объект,ТаблицаДокументов,Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Номенклатура,
		|	ТаблицаДокументов.СерияНоменклатурыПост КАК СерияНоменклатуры,
		|	ТаблицаДокументов.Количество
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Задержка = 10
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииНоменклатурыОстатки.Номенклатура,
		|	СерииНоменклатурыОстатки.СерияНоменклатуры,
		|	СерииНоменклатурыОстатки.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ.Номенклатура ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрНакопления.СерииНоменклатуры.Остатки(
		|			&Дата,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ВТ КАК ВТ)
		|				И Организация = &Организация
		|				И Склад = &Склад) КАК СерииНоменклатурыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО СерииНоменклатурыОстатки.Номенклатура = ВТ.Номенклатура
		|			И СерииНоменклатурыОстатки.СерияНоменклатуры = ВТ.СерияНоменклатуры
		|ГДЕ
		|	СерииНоменклатурыОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
	Запрос.УстановитьПараметр("ТаблицаДокументов",ТаблицаДокументов);
	
	Запрос.УстановитьПараметр("Дата",Новый Граница(Объект.МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Склад",Объект.Склад);
	
	
	Таб=Запрос.Выполнить().Выгрузить();
	Если Таб.Количество()=0 Тогда
		Возврат; //не зачем лишний раз документ трогать
	КонецЕсли;
	ТаблицаДляОбработки=Объект.Товары.Выгрузить();
	НоменклатураССерийнымУчетом=ИТИМодуль.НоменклатураССерийнымУчетом();
	ТаблицаДляОбработки.Свернуть("ЕдиницаИзмерения,Коэффициент,Номенклатура,СтавкаНДС,Цена,СтранаПроисхождения,СчетУчета,ПереданныеСчетУчета,СчетДоходов,СчетРасходов,Субконто,ДокументОприходования","Количество,КоличествоМест,Сумма,СуммаНДС,Себестоимость");
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаДляОбработки Цикл
		//Выбираем "первый шаг" по нужной номенклатуре
		Если НоменклатураССерийнымУчетом.Найти(СтрокаТЧ.Номенклатура)<>Неопределено Тогда
			Масс=Таб.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура));
			Для Каждого Эл Из Масс Цикл
				СтрокаНовая=Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовая,СтрокаТЧ);
				СтрокаНовая.СерияНоменклатуры	= Эл.СерияНоменклатуры;
				Кол=Мин(СтрокаТЧ.Количество,Эл.Количество);
				СтрокаНовая.Количество			= Кол;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаНовая,Объект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаНовая,Объект);
				Если Эл.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоРозлив.Указатель) Тогда
					СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Кега.Указатель;
					СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/50;
					СтрокаНовая.Коэффициент=50;
				ИначеЕсли Эл.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоБутылка.Указатель) Тогда
					СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Упак.Указатель;
					СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/20;
					СтрокаНовая.Коэффициент=20;
				КонецЕсли;
				СтрокаТЧ.Количество=СтрокаТЧ.Количество-Кол;
				Если СтрокаТЧ.Количество=0 Тогда Прервать; КонецЕсли;
			КонецЦикла;
			Если СтрокаТЧ.Количество<>0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не корректно распределилось количество по сериям для "+Строка(Объект));//,Отказ);
				СтрокаНовая=Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовая,СтрокаТЧ);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаНовая,Объект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаНовая,Объект);
				Если СтрокаНовая.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоРозлив.Указатель) Тогда
					СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Кега.Указатель;
					СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/50;
					СтрокаНовая.Коэффициент=50;
				ИначеЕсли Эл.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоБутылка.Указатель) Тогда
					СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Упак.Указатель;
					СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/20;
					СтрокаНовая.Коэффициент=20;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаНовая=Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовая,СтрокаТЧ);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаНовая,Объект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаНовая,Объект);
			Если СтрокаНовая.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоРозлив.Указатель) Тогда
				СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Кега.Указатель;
				СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/50;
				СтрокаНовая.Коэффициент=50;
			ИначеЕсли СтрокаНовая.Номенклатура.ПринадлежитЭлементу(Справочники.ИТИКонстанты.ПивоБутылка.Указатель) Тогда
				СтрокаНовая.ЕдиницаИзмерения=Справочники.ИТИКонстанты.Упак.Указатель;
				СтрокаНовая.КоличествоМест=СтрокаНовая.Количество/20;
				СтрокаНовая.Коэффициент=20;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если ТипЗнч(Объект)=Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары,"Товары",Истина);
	Иначе
		Объект.ЗаполнитьСчетаУчетаВТабЧасти(Объект.Товары,"Товары",Истина,Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////ДОПОЛНИТЕЛЬНЫЕ ФУНКЦИИ/ПРОЦЕДУРЫ////////////////////////////////////////////

// Возвращает основные данные, необходимые для работы
//
// Параметры:
//  Документ  - ДокументСсылка.РеализацияТоваровУслуг - рабочий документ
// Возвращаемое значение:
//   Структура   - данные, необходимые для работы
//
Функция СтруктураШапки(Док)

	СтруктураРаботы=Новый Структура;
	
	СтруктураРаботы.Вставить("Склад"			, Док.Склад);
	СтруктураРаботы.Вставить("Дата"				, Док.Дата);
	СтруктураРаботы.Вставить("Организация"		, Док.Организация);
	СтруктураРаботы.Вставить("Момент"			, Док.МоментВремени());
	СтруктураРаботы.Вставить("Ссылка"			, Док.Ссылка);
	
	Возврат СтруктураРаботы;
КонецФункции // СтруктураШапки()

Функция ИнициализацияТаблицыДляЗаполненияДокументов()

	ТаблицаДокументов=Новый ТаблицаЗначений;
	
	ТаблицаДокументов.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура")			);
	ТаблицаДокументов.Колонки.Добавить("СерияНоменклатуры",		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры")		);
	ТаблицаДокументов.Колонки.Добавить("Количество",			ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3,ДопустимыйЗнак.Неотрицательный));
	ТаблицаДокументов.Колонки.Добавить("Склад",					Новый ОписаниеТипов("СправочникСсылка.Склады")					);
	ТаблицаДокументов.Колонки.Добавить("Задержка",				ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3,0,ДопустимыйЗнак.Неотрицательный));
	ТаблицаДокументов.Колонки.Добавить("ДоговорРеал",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов")	);
	ТаблицаДокументов.Колонки.Добавить("ДоговорПост",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов")	);
	ТаблицаДокументов.Колонки.Добавить("Цена",					ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,2,ДопустимыйЗнак.Неотрицательный));

	Возврат ТаблицаДокументов;
КонецФункции // ИнициализацияТаблицыДляЗаполненияДокументов()

